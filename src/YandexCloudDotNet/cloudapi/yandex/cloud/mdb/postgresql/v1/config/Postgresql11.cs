// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/postgresql/v1/config/postgresql11.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Postgresql.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/postgresql/v1/config/postgresql11.proto</summary>
  internal static partial class Postgresql11Reflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/postgresql/v1/config/postgresql11.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Postgresql11Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjh5YW5kZXgvY2xvdWQvbWRiL3Bvc3RncmVzcWwvdjEvY29uZmlnL3Bvc3Rn",
            "cmVzcWwxMS5wcm90bxIleWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYx",
            "LmNvbmZpZxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh15YW5k",
            "ZXgvY2xvdWQvdmFsaWRhdGlvbi5wcm90byKbUAoSUG9zdGdyZXNxbENvbmZp",
            "ZzExEjQKD21heF9jb25uZWN0aW9ucxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEjMKDnNoYXJlZF9idWZmZXJzGAIgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSMQoMdGVtcF9idWZmZXJzGAMgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSPgoZbWF4X3ByZXBhcmVkX3Ry",
            "YW5zYWN0aW9ucxgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVl",
            "Ei0KCHdvcmtfbWVtGAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUSOQoUbWFpbnRlbmFuY2Vfd29ya19tZW0YBiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZRI4ChNhdXRvdmFjdXVtX3dvcmtfbWVtGAcgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNAoPdGVtcF9maWxlX2xp",
            "bWl0GAggASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNgoRdmFj",
            "dXVtX2Nvc3RfZGVsYXkYCSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZRI5ChR2YWN1dW1fY29zdF9wYWdlX2hpdBgKIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEjoKFXZhY3V1bV9jb3N0X3BhZ2VfbWlzcxgL",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjsKFnZhY3V1bV9j",
            "b3N0X3BhZ2VfZGlydHkYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZRI2ChF2YWN1dW1fY29zdF9saW1pdBgNIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQ2NFZhbHVlEkEKDmJnd3JpdGVyX2RlbGF5GA4gASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWVCDPrHMQgxMC0xMDAwMBI6ChViZ3dy",
            "aXRlcl9scnVfbWF4cGFnZXMYDyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI9ChdiZ3dyaXRlcl9scnVfbXVsdGlwbGllchgQIAEoCzIcLmdv",
            "b2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJFChRiZ3dyaXRlcl9mbHVzaF9h",
            "ZnRlchgRIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgr6xzEG",
            "MC0yMDQ4EkQKE2JhY2tlbmRfZmx1c2hfYWZ0ZXIYEiABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZUIK+scxBjAtMjA0OBJMChZvbGRfc25hcHNo",
            "b3RfdGhyZXNob2xkGBMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWVCD/rHMQstMS04NjQwMDAwMBJVCgl3YWxfbGV2ZWwYFCABKA4yQi55YW5k",
            "ZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxD",
            "b25maWcxMS5XYWxMZXZlbBJnChJzeW5jaHJvbm91c19jb21taXQYFSABKA4y",
            "Sy55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3Rn",
            "cmVzcWxDb25maWcxMS5TeW5jaHJvbm91c0NvbW1pdBJLChJjaGVja3BvaW50",
            "X3RpbWVvdXQYFiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIS",
            "+scxDjMwMDAwLTg2NDAwMDAwEkIKHGNoZWNrcG9pbnRfY29tcGxldGlvbl90",
            "YXJnZXQYFyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSRwoW",
            "Y2hlY2twb2ludF9mbHVzaF9hZnRlchgYIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQgr6xzEGMC0yMDQ4EjEKDG1heF93YWxfc2l6ZRgZIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjEKDG1pbl93YWxfc2l6",
            "ZRgaIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkAKG21heF9z",
            "dGFuZGJ5X3N0cmVhbWluZ19kZWxheRgbIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEj4KGWRlZmF1bHRfc3RhdGlzdGljc190YXJnZXQYHCAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJrChRjb25zdHJhaW50",
            "X2V4Y2x1c2lvbhgdIAEoDjJNLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNx",
            "bC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzExLkNvbnN0cmFpbnRFeGNs",
            "dXNpb24SOwoVY3Vyc29yX3R1cGxlX2ZyYWN0aW9uGB4gASgLMhwuZ29vZ2xl",
            "LnByb3RvYnVmLkRvdWJsZVZhbHVlEkoKE2Zyb21fY29sbGFwc2VfbGltaXQY",
            "HyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIQ+scxDDEtMjE0",
            "NzQ4MzY0NxJKChNqb2luX2NvbGxhcHNlX2xpbWl0GCAgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWVCEPrHMQwxLTIxNDc0ODM2NDcSaAoTZm9y",
            "Y2VfcGFyYWxsZWxfbW9kZRghIAEoDjJLLnlhbmRleC5jbG91ZC5tZGIucG9z",
            "dGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzExLkZvcmNlUGFy",
            "YWxsZWxNb2RlEl8KE2NsaWVudF9taW5fbWVzc2FnZXMYIiABKA4yQi55YW5k",
            "ZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxD",
            "b25maWcxMS5Mb2dMZXZlbBJcChBsb2dfbWluX21lc3NhZ2VzGCMgASgOMkIu",
            "eWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jl",
            "c3FsQ29uZmlnMTEuTG9nTGV2ZWwSYwoXbG9nX21pbl9lcnJvcl9zdGF0ZW1l",
            "bnQYJCABKA4yQi55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29u",
            "ZmlnLlBvc3RncmVzcWxDb25maWcxMS5Mb2dMZXZlbBI/Chpsb2dfbWluX2R1",
            "cmF0aW9uX3N0YXRlbWVudBglIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlEjMKD2xvZ19jaGVja3BvaW50cxgmIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSMwoPbG9nX2Nvbm5lY3Rpb25zGCcgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI2ChJsb2dfZGlzY29ubmVjdGlvbnMY",
            "KCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjAKDGxvZ19kdXJh",
            "dGlvbhgpIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSaAoTbG9n",
            "X2Vycm9yX3ZlcmJvc2l0eRgqIAEoDjJLLnlhbmRleC5jbG91ZC5tZGIucG9z",
            "dGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzExLkxvZ0Vycm9y",
            "VmVyYm9zaXR5EjIKDmxvZ19sb2NrX3dhaXRzGCsgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLkJvb2xWYWx1ZRJdCg1sb2dfc3RhdGVtZW50GCwgASgOMkYueWFu",
            "ZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jlc3Fs",
            "Q29uZmlnMTEuTG9nU3RhdGVtZW50EjMKDmxvZ190ZW1wX2ZpbGVzGC0gASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSEwoLc2VhcmNoX3BhdGgY",
            "LiABKAkSMAoMcm93X3NlY3VyaXR5GC8gASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZRJ1Ch1kZWZhdWx0X3RyYW5zYWN0aW9uX2lzb2xhdGlvbhgw",
            "IAEoDjJOLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcu",
            "UG9zdGdyZXNxbENvbmZpZzExLlRyYW5zYWN0aW9uSXNvbGF0aW9uEjYKEXN0",
            "YXRlbWVudF90aW1lb3V0GDEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUSMQoMbG9ja190aW1lb3V0GDIgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUSSAojaWRsZV9pbl90cmFuc2FjdGlvbl9zZXNzaW9uX3Rp",
            "bWVvdXQYMyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJbCgxi",
            "eXRlYV9vdXRwdXQYNCABKA4yRS55YW5kZXguY2xvdWQubWRiLnBvc3RncmVz",
            "cWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWcxMS5CeXRlYU91dHB1dBJW",
            "Cgl4bWxiaW5hcnkYNSABKA4yQy55YW5kZXguY2xvdWQubWRiLnBvc3RncmVz",
            "cWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWcxMS5YbWxCaW5hcnkSVgoJ",
            "eG1sb3B0aW9uGDYgASgOMkMueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3Fs",
            "LnYxLmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmlnMTEuWG1sT3B0aW9uEjsKFmdp",
            "bl9wZW5kaW5nX2xpc3RfbGltaXQYNyABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZRI1ChBkZWFkbG9ja190aW1lb3V0GDggASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSPgoZbWF4X2xvY2tzX3Blcl90cmFuc2Fj",
            "dGlvbhg5IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkMKHm1h",
            "eF9wcmVkX2xvY2tzX3Blcl90cmFuc2FjdGlvbhg6IAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEi8KC2FycmF5X251bGxzGDsgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJhCg9iYWNrc2xhc2hfcXVvdGUYPCAB",
            "KA4ySC55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBv",
            "c3RncmVzcWxDb25maWcxMS5CYWNrc2xhc2hRdW90ZRI1ChFkZWZhdWx0X3dp",
            "dGhfb2lkcxg9IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSOQoV",
            "ZXNjYXBlX3N0cmluZ193YXJuaW5nGD4gASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZRI4ChRsb19jb21wYXRfcHJpdmlsZWdlcxg/IAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSPwobb3BlcmF0b3JfcHJlY2VkZW5j",
            "ZV93YXJuaW5nGEAgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI5",
            "ChVxdW90ZV9hbGxfaWRlbnRpZmllcnMYQSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlEj8KG3N0YW5kYXJkX2NvbmZvcm1pbmdfc3RyaW5ncxhC",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSOAoUc3luY2hyb25p",
            "emVfc2Vxc2NhbnMYQyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EjkKFXRyYW5zZm9ybV9udWxsX2VxdWFscxhEIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSMQoNZXhpdF9vbl9lcnJvchhFIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5Cb29sVmFsdWUSMwoNc2VxX3BhZ2VfY29zdBhGIAEoCzIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRI2ChByYW5kb21fcGFnZV9j",
            "b3N0GEcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkUKFmF1",
            "dG92YWN1dW1fbWF4X3dvcmtlcnMYSCABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZUII+scxBDEtMzISTQocYXV0b3ZhY3V1bV92YWN1dW1fY29z",
            "dF9kZWxheRhJIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgr6",
            "xzEGLTEtMTAwEk8KHGF1dG92YWN1dW1fdmFjdXVtX2Nvc3RfbGltaXQYSiAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIM+scxCC0xLTEwMDAw",
            "EkoKEmF1dG92YWN1dW1fbmFwdGltZRhLIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQhH6xzENMTAwMC04NjQwMDAwMBJICg9hcmNoaXZlX3Rp",
            "bWVvdXQYTCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIS+scx",
            "DjEwMDAwLTg2NDAwMDAwEk4KGXRyYWNrX2FjdGl2aXR5X3F1ZXJ5X3NpemUY",
            "TSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIO+scxCjEwMC0x",
            "MDI0MDASNQoRZW5hYmxlX2JpdG1hcHNjYW4YUCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlEjIKDmVuYWJsZV9oYXNoYWdnGFEgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIzCg9lbmFibGVfaGFzaGpvaW4YUiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjQKEGVuYWJsZV9pbmRl",
            "eHNjYW4YUyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjgKFGVu",
            "YWJsZV9pbmRleG9ubHlzY2FuGFQgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJv",
            "b2xWYWx1ZRIzCg9lbmFibGVfbWF0ZXJpYWwYVSABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlEjQKEGVuYWJsZV9tZXJnZWpvaW4YViABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjMKD2VuYWJsZV9uZXN0bG9vcBhX",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSMgoOZW5hYmxlX3Nl",
            "cXNjYW4YWCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEi8KC2Vu",
            "YWJsZV9zb3J0GFkgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIy",
            "Cg5lbmFibGVfdGlkc2NhbhhaIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29s",
            "VmFsdWUSRQoUbWF4X3dvcmtlcl9wcm9jZXNzZXMYWyABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZUIK+scxBjAtMTAyNBJFChRtYXhfcGFyYWxs",
            "ZWxfd29ya2VycxhcIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVl",
            "Qgr6xzEGMC0xMDI0ElAKH21heF9wYXJhbGxlbF93b3JrZXJzX3Blcl9nYXRo",
            "ZXIYXSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIK+scxBjAt",
            "MTAyNBJRCh5hdXRvdmFjdXVtX3ZhY3V1bV9zY2FsZV9mYWN0b3IYXiABKAsy",
            "HC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWVCC/rHMQcwLjAtMS4wElIK",
            "H2F1dG92YWN1dW1fYW5hbHl6ZV9zY2FsZV9mYWN0b3IYXyABKAsyHC5nb29n",
            "bGUucHJvdG9idWYuRG91YmxlVmFsdWVCC/rHMQcwLjAtMS4wEkEKHWRlZmF1",
            "bHRfdHJhbnNhY3Rpb25fcmVhZF9vbmx5GGAgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLkJvb2xWYWx1ZRIQCgh0aW1lem9uZRhhIAEoCRI6ChZlbmFibGVfcGFy",
            "YWxsZWxfYXBwZW5kGGIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1",
            "ZRI4ChRlbmFibGVfcGFyYWxsZWxfaGFzaBhjIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSPAoYZW5hYmxlX3BhcnRpdGlvbl9wcnVuaW5nGGQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJCCh5lbmFibGVfcGFy",
            "dGl0aW9ud2lzZV9hZ2dyZWdhdGUYZSABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEj0KGWVuYWJsZV9wYXJ0aXRpb253aXNlX2pvaW4YZiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEicKA2ppdBhnIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSTgogbWF4X3BhcmFsbGVsX21haW50",
            "ZW5hbmNlX3dvcmtlcnMYaCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZUIH+scxAz49MBJBCh1wYXJhbGxlbF9sZWFkZXJfcGFydGljaXBhdGlv",
            "bhhpIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSXgohdmFjdXVt",
            "X2NsZWFudXBfaW5kZXhfc2NhbGVfZmFjdG9yGGogASgLMhwuZ29vZ2xlLnBy",
            "b3RvYnVmLkRvdWJsZVZhbHVlQhX6xzERMC4wLTEwMDAwMDAwMDAwLjASSQoY",
            "ZWZmZWN0aXZlX2lvX2NvbmN1cnJlbmN5GGsgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWVCCvrHMQYwLTEwMDASTQoUZWZmZWN0aXZlX2NhY2hl",
            "X3NpemUYbCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIS+scx",
            "DjAtNTQ5NzU1ODEzODg4EnIKGHNoYXJlZF9wcmVsb2FkX2xpYnJhcmllcxht",
            "IAMoDjJQLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcu",
            "UG9zdGdyZXNxbENvbmZpZzExLlNoYXJlZFByZWxvYWRMaWJyYXJpZXMSVQod",
            "YXV0b19leHBsYWluX2xvZ19taW5fZHVyYXRpb24YbiABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZUIR+scxDS0xLTIxNDc0ODM2NDcSPAoYYXV0",
            "b19leHBsYWluX2xvZ19hbmFseXplGG8gASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LkJvb2xWYWx1ZRI8ChhhdXRvX2V4cGxhaW5fbG9nX2J1ZmZlcnMYcCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjsKF2F1dG9fZXhwbGFpbl9s",
            "b2dfdGltaW5nGHEgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI9",
            "ChlhdXRvX2V4cGxhaW5fbG9nX3RyaWdnZXJzGHIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLkJvb2xWYWx1ZRI8ChhhdXRvX2V4cGxhaW5fbG9nX3ZlcmJvc2UY",
            "cyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEkYKImF1dG9fZXhw",
            "bGFpbl9sb2dfbmVzdGVkX3N0YXRlbWVudHMYdCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlEksKGGF1dG9fZXhwbGFpbl9zYW1wbGVfcmF0ZRh1",
            "IAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZUIL+scxBzAuMC0x",
            "LjASPAoYcGdfaGludF9wbGFuX2VuYWJsZV9oaW50GHYgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLkJvb2xWYWx1ZRJCCh5wZ19oaW50X3BsYW5fZW5hYmxlX2hp",
            "bnRfdGFibGUYdyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEnAK",
            "GHBnX2hpbnRfcGxhbl9kZWJ1Z19wcmludBh4IAEoDjJOLnlhbmRleC5jbG91",
            "ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzEx",
            "LlBnSGludFBsYW5EZWJ1Z1ByaW50EmYKGnBnX2hpbnRfcGxhbl9tZXNzYWdl",
            "X2xldmVsGHkgASgOMkIueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYx",
            "LmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmlnMTEuTG9nTGV2ZWwiUwoIV2FsTGV2",
            "ZWwSGQoVV0FMX0xFVkVMX1VOU1BFQ0lGSUVEEAASFQoRV0FMX0xFVkVMX1JF",
            "UExJQ0EQARIVChFXQUxfTEVWRUxfTE9HSUNBTBACItYBChFTeW5jaHJvbm91",
            "c0NvbW1pdBIiCh5TWU5DSFJPTk9VU19DT01NSVRfVU5TUEVDSUZJRUQQABIZ",
            "ChVTWU5DSFJPTk9VU19DT01NSVRfT04QARIaChZTWU5DSFJPTk9VU19DT01N",
            "SVRfT0ZGEAISHAoYU1lOQ0hST05PVVNfQ09NTUlUX0xPQ0FMEAMSIwofU1lO",
            "Q0hST05PVVNfQ09NTUlUX1JFTU9URV9XUklURRAEEiMKH1NZTkNIUk9OT1VT",
            "X0NPTU1JVF9SRU1PVEVfQVBQTFkQBSKaAQoTQ29uc3RyYWludEV4Y2x1c2lv",
            "bhIkCiBDT05TVFJBSU5UX0VYQ0xVU0lPTl9VTlNQRUNJRklFRBAAEhsKF0NP",
            "TlNUUkFJTlRfRVhDTFVTSU9OX09OEAESHAoYQ09OU1RSQUlOVF9FWENMVVNJ",
            "T05fT0ZGEAISIgoeQ09OU1RSQUlOVF9FWENMVVNJT05fUEFSVElUSU9OEAMi",
            "kgEKEUZvcmNlUGFyYWxsZWxNb2RlEiMKH0ZPUkNFX1BBUkFMTEVMX01PREVf",
            "VU5TUEVDSUZJRUQQABIaChZGT1JDRV9QQVJBTExFTF9NT0RFX09OEAESGwoX",
            "Rk9SQ0VfUEFSQUxMRUxfTU9ERV9PRkYQAhIfChtGT1JDRV9QQVJBTExFTF9N",
            "T0RFX1JFR1JFU1MQAyKSAgoITG9nTGV2ZWwSGQoVTE9HX0xFVkVMX1VOU1BF",
            "Q0lGSUVEEAASFAoQTE9HX0xFVkVMX0RFQlVHNRABEhQKEExPR19MRVZFTF9E",
            "RUJVRzQQAhIUChBMT0dfTEVWRUxfREVCVUczEAMSFAoQTE9HX0xFVkVMX0RF",
            "QlVHMhAEEhQKEExPR19MRVZFTF9ERUJVRzEQBRIRCg1MT0dfTEVWRUxfTE9H",
            "EAYSFAoQTE9HX0xFVkVMX05PVElDRRAHEhUKEUxPR19MRVZFTF9XQVJOSU5H",
            "EAgSEwoPTE9HX0xFVkVMX0VSUk9SEAkSEwoPTE9HX0xFVkVMX0ZBVEFMEAoS",
            "EwoPTE9HX0xFVkVMX1BBTklDEAsimQEKEUxvZ0Vycm9yVmVyYm9zaXR5EiMK",
            "H0xPR19FUlJPUl9WRVJCT1NJVFlfVU5TUEVDSUZJRUQQABIdChlMT0dfRVJS",
            "T1JfVkVSQk9TSVRZX1RFUlNFEAESHwobTE9HX0VSUk9SX1ZFUkJPU0lUWV9E",
            "RUZBVUxUEAISHwobTE9HX0VSUk9SX1ZFUkJPU0lUWV9WRVJCT1NFEAMiigEK",
            "DExvZ1N0YXRlbWVudBIdChlMT0dfU1RBVEVNRU5UX1VOU1BFQ0lGSUVEEAAS",
            "FgoSTE9HX1NUQVRFTUVOVF9OT05FEAESFQoRTE9HX1NUQVRFTUVOVF9EREwQ",
            "AhIVChFMT0dfU1RBVEVNRU5UX01PRBADEhUKEUxPR19TVEFURU1FTlRfQUxM",
            "EAQi5gEKFFRyYW5zYWN0aW9uSXNvbGF0aW9uEiUKIVRSQU5TQUNUSU9OX0lT",
            "T0xBVElPTl9VTlNQRUNJRklFRBAAEioKJlRSQU5TQUNUSU9OX0lTT0xBVElP",
            "Tl9SRUFEX1VOQ09NTUlUVEVEEAESKAokVFJBTlNBQ1RJT05fSVNPTEFUSU9O",
            "X1JFQURfQ09NTUlUVEVEEAISKQolVFJBTlNBQ1RJT05fSVNPTEFUSU9OX1JF",
            "UEVBVEFCTEVfUkVBRBADEiYKIlRSQU5TQUNUSU9OX0lTT0xBVElPTl9TRVJJ",
            "QUxJWkFCTEUQBCJbCgtCeXRlYU91dHB1dBIcChhCWVRFQV9PVVRQVVRfVU5T",
            "UEVDSUZJRUQQABIUChBCWVRFQV9PVVRQVVRfSEVYEAESGAoUQllURUFfT1VU",
            "UFVUX0VTQ0FQRUQQAiJSCglYbWxCaW5hcnkSGgoWWE1MX0JJTkFSWV9VTlNQ",
            "RUNJRklFRBAAEhUKEVhNTF9CSU5BUllfQkFTRTY0EAESEgoOWE1MX0JJTkFS",
            "WV9IRVgQAiJYCglYbWxPcHRpb24SGgoWWE1MX09QVElPTl9VTlNQRUNJRklF",
            "RBAAEhcKE1hNTF9PUFRJT05fRE9DVU1FTlQQARIWChJYTUxfT1BUSU9OX0NP",
            "TlRFTlQQAiKaAQoOQmFja3NsYXNoUXVvdGUSHwobQkFDS1NMQVNIX1FVT1RF",
            "X1VOU1BFQ0lGSUVEEAASEwoPQkFDS1NMQVNIX1FVT1RFEAESFgoSQkFDS1NM",
            "QVNIX1FVT1RFX09OEAISFwoTQkFDS1NMQVNIX1FVT1RFX09GRhADEiEKHUJB",
            "Q0tTTEFTSF9RVU9URV9TQUZFX0VOQ09ESU5HEAQi0AEKFFBnSGludFBsYW5E",
            "ZWJ1Z1ByaW50EigKJFBHX0hJTlRfUExBTl9ERUJVR19QUklOVF9VTlNQRUNJ",
            "RklFRBAAEiAKHFBHX0hJTlRfUExBTl9ERUJVR19QUklOVF9PRkYQARIfChtQ",
            "R19ISU5UX1BMQU5fREVCVUdfUFJJTlRfT04QAhIlCiFQR19ISU5UX1BMQU5f",
            "REVCVUdfUFJJTlRfREVUQUlMRUQQAxIkCiBQR19ISU5UX1BMQU5fREVCVUdf",
            "UFJJTlRfVkVSQk9TRRAEIpgBChZTaGFyZWRQcmVsb2FkTGlicmFyaWVzEigK",
            "JFNIQVJFRF9QUkVMT0FEX0xJQlJBUklFU19VTlNQRUNJRklFRBAAEikKJVNI",
            "QVJFRF9QUkVMT0FEX0xJQlJBUklFU19BVVRPX0VYUExBSU4QARIpCiVTSEFS",
            "RURfUFJFTE9BRF9MSUJSQVJJRVNfUEdfSElOVF9QTEFOEAIijwIKFVBvc3Rn",
            "cmVzcWxDb25maWdTZXQxMRJTChBlZmZlY3RpdmVfY29uZmlnGAEgASgLMjku",
            "eWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jl",
            "c3FsQ29uZmlnMTESTgoLdXNlcl9jb25maWcYAiABKAsyOS55YW5kZXguY2xv",
            "dWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWcx",
            "MRJRCg5kZWZhdWx0X2NvbmZpZxgDIAEoCzI5LnlhbmRleC5jbG91ZC5tZGIu",
            "cG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzExQoEBCil5",
            "YW5kZXguY2xvdWQuYXBpLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZ1pUZ2l0",
            "aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8veWFuZGV4L2Nsb3Vk",
            "L21kYi9wb3N0Z3Jlc3FsL3YxL2NvbmZpZztwb3N0Z3Jlc3FsYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11), global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Parser, new[]{ "MaxConnections", "SharedBuffers", "TempBuffers", "MaxPreparedTransactions", "WorkMem", "MaintenanceWorkMem", "AutovacuumWorkMem", "TempFileLimit", "VacuumCostDelay", "VacuumCostPageHit", "VacuumCostPageMiss", "VacuumCostPageDirty", "VacuumCostLimit", "BgwriterDelay", "BgwriterLruMaxpages", "BgwriterLruMultiplier", "BgwriterFlushAfter", "BackendFlushAfter", "OldSnapshotThreshold", "WalLevel", "SynchronousCommit", "CheckpointTimeout", "CheckpointCompletionTarget", "CheckpointFlushAfter", "MaxWalSize", "MinWalSize", "MaxStandbyStreamingDelay", "DefaultStatisticsTarget", "ConstraintExclusion", "CursorTupleFraction", "FromCollapseLimit", "JoinCollapseLimit", "ForceParallelMode", "ClientMinMessages", "LogMinMessages", "LogMinErrorStatement", "LogMinDurationStatement", "LogCheckpoints", "LogConnections", "LogDisconnections", "LogDuration", "LogErrorVerbosity", "LogLockWaits", "LogStatement", "LogTempFiles", "SearchPath", "RowSecurity", "DefaultTransactionIsolation", "StatementTimeout", "LockTimeout", "IdleInTransactionSessionTimeout", "ByteaOutput", "Xmlbinary", "Xmloption", "GinPendingListLimit", "DeadlockTimeout", "MaxLocksPerTransaction", "MaxPredLocksPerTransaction", "ArrayNulls", "BackslashQuote", "DefaultWithOids", "EscapeStringWarning", "LoCompatPrivileges", "OperatorPrecedenceWarning", "QuoteAllIdentifiers", "StandardConformingStrings", "SynchronizeSeqscans", "TransformNullEquals", "ExitOnError", "SeqPageCost", "RandomPageCost", "AutovacuumMaxWorkers", "AutovacuumVacuumCostDelay", "AutovacuumVacuumCostLimit", "AutovacuumNaptime", "ArchiveTimeout", "TrackActivityQuerySize", "EnableBitmapscan", "EnableHashagg", "EnableHashjoin", "EnableIndexscan", "EnableIndexonlyscan", "EnableMaterial", "EnableMergejoin", "EnableNestloop", "EnableSeqscan", "EnableSort", "EnableTidscan", "MaxWorkerProcesses", "MaxParallelWorkers", "MaxParallelWorkersPerGather", "AutovacuumVacuumScaleFactor", "AutovacuumAnalyzeScaleFactor", "DefaultTransactionReadOnly", "Timezone", "EnableParallelAppend", "EnableParallelHash", "EnablePartitionPruning", "EnablePartitionwiseAggregate", "EnablePartitionwiseJoin", "Jit", "MaxParallelMaintenanceWorkers", "ParallelLeaderParticipation", "VacuumCleanupIndexScaleFactor", "EffectiveIoConcurrency", "EffectiveCacheSize", "SharedPreloadLibraries", "AutoExplainLogMinDuration", "AutoExplainLogAnalyze", "AutoExplainLogBuffers", "AutoExplainLogTiming", "AutoExplainLogTriggers", "AutoExplainLogVerbose", "AutoExplainLogNestedStatements", "AutoExplainSampleRate", "PgHintPlanEnableHint", "PgHintPlanEnableHintTable", "PgHintPlanDebugPrint", "PgHintPlanMessageLevel" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfigSet11), global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfigSet11.Parser, new[]{ "EffectiveConfig", "UserConfig", "DefaultConfig" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
  /// parameters which detailed description is available in
  /// [PostgreSQL documentation](https://www.postgresql.org/docs/11/runtime-config.html).
  /// </summary>
  internal sealed partial class PostgresqlConfig11 : pb::IMessage<PostgresqlConfig11> {
    private static readonly pb::MessageParser<PostgresqlConfig11> _parser = new pb::MessageParser<PostgresqlConfig11>(() => new PostgresqlConfig11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostgresqlConfig11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Postgresql.V1.Config.Postgresql11Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig11(PostgresqlConfig11 other) : this() {
      MaxConnections = other.MaxConnections;
      SharedBuffers = other.SharedBuffers;
      TempBuffers = other.TempBuffers;
      MaxPreparedTransactions = other.MaxPreparedTransactions;
      WorkMem = other.WorkMem;
      MaintenanceWorkMem = other.MaintenanceWorkMem;
      AutovacuumWorkMem = other.AutovacuumWorkMem;
      TempFileLimit = other.TempFileLimit;
      VacuumCostDelay = other.VacuumCostDelay;
      VacuumCostPageHit = other.VacuumCostPageHit;
      VacuumCostPageMiss = other.VacuumCostPageMiss;
      VacuumCostPageDirty = other.VacuumCostPageDirty;
      VacuumCostLimit = other.VacuumCostLimit;
      BgwriterDelay = other.BgwriterDelay;
      BgwriterLruMaxpages = other.BgwriterLruMaxpages;
      BgwriterLruMultiplier = other.BgwriterLruMultiplier;
      BgwriterFlushAfter = other.BgwriterFlushAfter;
      BackendFlushAfter = other.BackendFlushAfter;
      OldSnapshotThreshold = other.OldSnapshotThreshold;
      walLevel_ = other.walLevel_;
      synchronousCommit_ = other.synchronousCommit_;
      CheckpointTimeout = other.CheckpointTimeout;
      CheckpointCompletionTarget = other.CheckpointCompletionTarget;
      CheckpointFlushAfter = other.CheckpointFlushAfter;
      MaxWalSize = other.MaxWalSize;
      MinWalSize = other.MinWalSize;
      MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
      DefaultStatisticsTarget = other.DefaultStatisticsTarget;
      constraintExclusion_ = other.constraintExclusion_;
      CursorTupleFraction = other.CursorTupleFraction;
      FromCollapseLimit = other.FromCollapseLimit;
      JoinCollapseLimit = other.JoinCollapseLimit;
      forceParallelMode_ = other.forceParallelMode_;
      clientMinMessages_ = other.clientMinMessages_;
      logMinMessages_ = other.logMinMessages_;
      logMinErrorStatement_ = other.logMinErrorStatement_;
      LogMinDurationStatement = other.LogMinDurationStatement;
      LogCheckpoints = other.LogCheckpoints;
      LogConnections = other.LogConnections;
      LogDisconnections = other.LogDisconnections;
      LogDuration = other.LogDuration;
      logErrorVerbosity_ = other.logErrorVerbosity_;
      LogLockWaits = other.LogLockWaits;
      logStatement_ = other.logStatement_;
      LogTempFiles = other.LogTempFiles;
      searchPath_ = other.searchPath_;
      RowSecurity = other.RowSecurity;
      defaultTransactionIsolation_ = other.defaultTransactionIsolation_;
      StatementTimeout = other.StatementTimeout;
      LockTimeout = other.LockTimeout;
      IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
      byteaOutput_ = other.byteaOutput_;
      xmlbinary_ = other.xmlbinary_;
      xmloption_ = other.xmloption_;
      GinPendingListLimit = other.GinPendingListLimit;
      DeadlockTimeout = other.DeadlockTimeout;
      MaxLocksPerTransaction = other.MaxLocksPerTransaction;
      MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
      ArrayNulls = other.ArrayNulls;
      backslashQuote_ = other.backslashQuote_;
      DefaultWithOids = other.DefaultWithOids;
      EscapeStringWarning = other.EscapeStringWarning;
      LoCompatPrivileges = other.LoCompatPrivileges;
      OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
      QuoteAllIdentifiers = other.QuoteAllIdentifiers;
      StandardConformingStrings = other.StandardConformingStrings;
      SynchronizeSeqscans = other.SynchronizeSeqscans;
      TransformNullEquals = other.TransformNullEquals;
      ExitOnError = other.ExitOnError;
      SeqPageCost = other.SeqPageCost;
      RandomPageCost = other.RandomPageCost;
      AutovacuumMaxWorkers = other.AutovacuumMaxWorkers;
      AutovacuumVacuumCostDelay = other.AutovacuumVacuumCostDelay;
      AutovacuumVacuumCostLimit = other.AutovacuumVacuumCostLimit;
      AutovacuumNaptime = other.AutovacuumNaptime;
      ArchiveTimeout = other.ArchiveTimeout;
      TrackActivityQuerySize = other.TrackActivityQuerySize;
      EnableBitmapscan = other.EnableBitmapscan;
      EnableHashagg = other.EnableHashagg;
      EnableHashjoin = other.EnableHashjoin;
      EnableIndexscan = other.EnableIndexscan;
      EnableIndexonlyscan = other.EnableIndexonlyscan;
      EnableMaterial = other.EnableMaterial;
      EnableMergejoin = other.EnableMergejoin;
      EnableNestloop = other.EnableNestloop;
      EnableSeqscan = other.EnableSeqscan;
      EnableSort = other.EnableSort;
      EnableTidscan = other.EnableTidscan;
      MaxWorkerProcesses = other.MaxWorkerProcesses;
      MaxParallelWorkers = other.MaxParallelWorkers;
      MaxParallelWorkersPerGather = other.MaxParallelWorkersPerGather;
      AutovacuumVacuumScaleFactor = other.AutovacuumVacuumScaleFactor;
      AutovacuumAnalyzeScaleFactor = other.AutovacuumAnalyzeScaleFactor;
      DefaultTransactionReadOnly = other.DefaultTransactionReadOnly;
      timezone_ = other.timezone_;
      EnableParallelAppend = other.EnableParallelAppend;
      EnableParallelHash = other.EnableParallelHash;
      EnablePartitionPruning = other.EnablePartitionPruning;
      EnablePartitionwiseAggregate = other.EnablePartitionwiseAggregate;
      EnablePartitionwiseJoin = other.EnablePartitionwiseJoin;
      Jit = other.Jit;
      MaxParallelMaintenanceWorkers = other.MaxParallelMaintenanceWorkers;
      ParallelLeaderParticipation = other.ParallelLeaderParticipation;
      VacuumCleanupIndexScaleFactor = other.VacuumCleanupIndexScaleFactor;
      EffectiveIoConcurrency = other.EffectiveIoConcurrency;
      EffectiveCacheSize = other.EffectiveCacheSize;
      sharedPreloadLibraries_ = other.sharedPreloadLibraries_.Clone();
      AutoExplainLogMinDuration = other.AutoExplainLogMinDuration;
      AutoExplainLogAnalyze = other.AutoExplainLogAnalyze;
      AutoExplainLogBuffers = other.AutoExplainLogBuffers;
      AutoExplainLogTiming = other.AutoExplainLogTiming;
      AutoExplainLogTriggers = other.AutoExplainLogTriggers;
      AutoExplainLogVerbose = other.AutoExplainLogVerbose;
      AutoExplainLogNestedStatements = other.AutoExplainLogNestedStatements;
      AutoExplainSampleRate = other.AutoExplainSampleRate;
      PgHintPlanEnableHint = other.PgHintPlanEnableHint;
      PgHintPlanEnableHintTable = other.PgHintPlanEnableHintTable;
      pgHintPlanDebugPrint_ = other.pgHintPlanDebugPrint_;
      pgHintPlanMessageLevel_ = other.pgHintPlanMessageLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig11 Clone() {
      return new PostgresqlConfig11(this);
    }

    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_maxConnections_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? maxConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }


    /// <summary>Field number for the "shared_buffers" field.</summary>
    public const int SharedBuffersFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_sharedBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? sharedBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SharedBuffers {
      get { return sharedBuffers_; }
      set {
        sharedBuffers_ = value;
      }
    }


    /// <summary>Field number for the "temp_buffers" field.</summary>
    public const int TempBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_tempBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? tempBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempBuffers {
      get { return tempBuffers_; }
      set {
        tempBuffers_ = value;
      }
    }


    /// <summary>Field number for the "max_prepared_transactions" field.</summary>
    public const int MaxPreparedTransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_maxPreparedTransactions_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? maxPreparedTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPreparedTransactions {
      get { return maxPreparedTransactions_; }
      set {
        maxPreparedTransactions_ = value;
      }
    }


    /// <summary>Field number for the "work_mem" field.</summary>
    public const int WorkMemFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_workMem_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? workMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? WorkMem {
      get { return workMem_; }
      set {
        workMem_ = value;
      }
    }


    /// <summary>Field number for the "maintenance_work_mem" field.</summary>
    public const int MaintenanceWorkMemFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_maintenanceWorkMem_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? maintenanceWorkMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaintenanceWorkMem {
      get { return maintenanceWorkMem_; }
      set {
        maintenanceWorkMem_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_work_mem" field.</summary>
    public const int AutovacuumWorkMemFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_autovacuumWorkMem_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? autovacuumWorkMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumWorkMem {
      get { return autovacuumWorkMem_; }
      set {
        autovacuumWorkMem_ = value;
      }
    }


    /// <summary>Field number for the "temp_file_limit" field.</summary>
    public const int TempFileLimitFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_tempFileLimit_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? tempFileLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempFileLimit {
      get { return tempFileLimit_; }
      set {
        tempFileLimit_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_delay" field.</summary>
    public const int VacuumCostDelayFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostDelay_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? vacuumCostDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostDelay {
      get { return vacuumCostDelay_; }
      set {
        vacuumCostDelay_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_hit" field.</summary>
    public const int VacuumCostPageHitFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageHit_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? vacuumCostPageHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageHit {
      get { return vacuumCostPageHit_; }
      set {
        vacuumCostPageHit_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_miss" field.</summary>
    public const int VacuumCostPageMissFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageMiss_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? vacuumCostPageMiss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageMiss {
      get { return vacuumCostPageMiss_; }
      set {
        vacuumCostPageMiss_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_dirty" field.</summary>
    public const int VacuumCostPageDirtyFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageDirty_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? vacuumCostPageDirty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageDirty {
      get { return vacuumCostPageDirty_; }
      set {
        vacuumCostPageDirty_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_limit" field.</summary>
    public const int VacuumCostLimitFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostLimit_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? vacuumCostLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostLimit {
      get { return vacuumCostLimit_; }
      set {
        vacuumCostLimit_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_delay" field.</summary>
    public const int BgwriterDelayFieldNumber = 14;
    private static readonly pb::FieldCodec<long?> _single_bgwriterDelay_codec = pb::FieldCodec.ForStructWrapper<long>(114);
    private long? bgwriterDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterDelay {
      get { return bgwriterDelay_; }
      set {
        bgwriterDelay_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_lru_maxpages" field.</summary>
    public const int BgwriterLruMaxpagesFieldNumber = 15;
    private static readonly pb::FieldCodec<long?> _single_bgwriterLruMaxpages_codec = pb::FieldCodec.ForStructWrapper<long>(122);
    private long? bgwriterLruMaxpages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterLruMaxpages {
      get { return bgwriterLruMaxpages_; }
      set {
        bgwriterLruMaxpages_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_lru_multiplier" field.</summary>
    public const int BgwriterLruMultiplierFieldNumber = 16;
    private static readonly pb::FieldCodec<double?> _single_bgwriterLruMultiplier_codec = pb::FieldCodec.ForStructWrapper<double>(130);
    private double? bgwriterLruMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BgwriterLruMultiplier {
      get { return bgwriterLruMultiplier_; }
      set {
        bgwriterLruMultiplier_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_flush_after" field.</summary>
    public const int BgwriterFlushAfterFieldNumber = 17;
    private static readonly pb::FieldCodec<long?> _single_bgwriterFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(138);
    private long? bgwriterFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterFlushAfter {
      get { return bgwriterFlushAfter_; }
      set {
        bgwriterFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "backend_flush_after" field.</summary>
    public const int BackendFlushAfterFieldNumber = 18;
    private static readonly pb::FieldCodec<long?> _single_backendFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(146);
    private long? backendFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackendFlushAfter {
      get { return backendFlushAfter_; }
      set {
        backendFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "old_snapshot_threshold" field.</summary>
    public const int OldSnapshotThresholdFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_oldSnapshotThreshold_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? oldSnapshotThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OldSnapshotThreshold {
      get { return oldSnapshotThreshold_; }
      set {
        oldSnapshotThreshold_ = value;
      }
    }


    /// <summary>Field number for the "wal_level" field.</summary>
    public const int WalLevelFieldNumber = 20;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel walLevel_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel WalLevel {
      get { return walLevel_; }
      set {
        walLevel_ = value;
      }
    }

    /// <summary>Field number for the "synchronous_commit" field.</summary>
    public const int SynchronousCommitFieldNumber = 21;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit synchronousCommit_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit SynchronousCommit {
      get { return synchronousCommit_; }
      set {
        synchronousCommit_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_timeout" field.</summary>
    public const int CheckpointTimeoutFieldNumber = 22;
    private static readonly pb::FieldCodec<long?> _single_checkpointTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(178);
    private long? checkpointTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CheckpointTimeout {
      get { return checkpointTimeout_; }
      set {
        checkpointTimeout_ = value;
      }
    }


    /// <summary>Field number for the "checkpoint_completion_target" field.</summary>
    public const int CheckpointCompletionTargetFieldNumber = 23;
    private static readonly pb::FieldCodec<double?> _single_checkpointCompletionTarget_codec = pb::FieldCodec.ForStructWrapper<double>(186);
    private double? checkpointCompletionTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CheckpointCompletionTarget {
      get { return checkpointCompletionTarget_; }
      set {
        checkpointCompletionTarget_ = value;
      }
    }


    /// <summary>Field number for the "checkpoint_flush_after" field.</summary>
    public const int CheckpointFlushAfterFieldNumber = 24;
    private static readonly pb::FieldCodec<long?> _single_checkpointFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(194);
    private long? checkpointFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CheckpointFlushAfter {
      get { return checkpointFlushAfter_; }
      set {
        checkpointFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "max_wal_size" field.</summary>
    public const int MaxWalSizeFieldNumber = 25;
    private static readonly pb::FieldCodec<long?> _single_maxWalSize_codec = pb::FieldCodec.ForStructWrapper<long>(202);
    private long? maxWalSize_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxWalSize {
      get { return maxWalSize_; }
      set {
        maxWalSize_ = value;
      }
    }


    /// <summary>Field number for the "min_wal_size" field.</summary>
    public const int MinWalSizeFieldNumber = 26;
    private static readonly pb::FieldCodec<long?> _single_minWalSize_codec = pb::FieldCodec.ForStructWrapper<long>(210);
    private long? minWalSize_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinWalSize {
      get { return minWalSize_; }
      set {
        minWalSize_ = value;
      }
    }


    /// <summary>Field number for the "max_standby_streaming_delay" field.</summary>
    public const int MaxStandbyStreamingDelayFieldNumber = 27;
    private static readonly pb::FieldCodec<long?> _single_maxStandbyStreamingDelay_codec = pb::FieldCodec.ForStructWrapper<long>(218);
    private long? maxStandbyStreamingDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxStandbyStreamingDelay {
      get { return maxStandbyStreamingDelay_; }
      set {
        maxStandbyStreamingDelay_ = value;
      }
    }


    /// <summary>Field number for the "default_statistics_target" field.</summary>
    public const int DefaultStatisticsTargetFieldNumber = 28;
    private static readonly pb::FieldCodec<long?> _single_defaultStatisticsTarget_codec = pb::FieldCodec.ForStructWrapper<long>(226);
    private long? defaultStatisticsTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DefaultStatisticsTarget {
      get { return defaultStatisticsTarget_; }
      set {
        defaultStatisticsTarget_ = value;
      }
    }


    /// <summary>Field number for the "constraint_exclusion" field.</summary>
    public const int ConstraintExclusionFieldNumber = 29;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion constraintExclusion_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion ConstraintExclusion {
      get { return constraintExclusion_; }
      set {
        constraintExclusion_ = value;
      }
    }

    /// <summary>Field number for the "cursor_tuple_fraction" field.</summary>
    public const int CursorTupleFractionFieldNumber = 30;
    private static readonly pb::FieldCodec<double?> _single_cursorTupleFraction_codec = pb::FieldCodec.ForStructWrapper<double>(242);
    private double? cursorTupleFraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CursorTupleFraction {
      get { return cursorTupleFraction_; }
      set {
        cursorTupleFraction_ = value;
      }
    }


    /// <summary>Field number for the "from_collapse_limit" field.</summary>
    public const int FromCollapseLimitFieldNumber = 31;
    private static readonly pb::FieldCodec<long?> _single_fromCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(250);
    private long? fromCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? FromCollapseLimit {
      get { return fromCollapseLimit_; }
      set {
        fromCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "join_collapse_limit" field.</summary>
    public const int JoinCollapseLimitFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_joinCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? joinCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? JoinCollapseLimit {
      get { return joinCollapseLimit_; }
      set {
        joinCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "force_parallel_mode" field.</summary>
    public const int ForceParallelModeFieldNumber = 33;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode forceParallelMode_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode ForceParallelMode {
      get { return forceParallelMode_; }
      set {
        forceParallelMode_ = value;
      }
    }

    /// <summary>Field number for the "client_min_messages" field.</summary>
    public const int ClientMinMessagesFieldNumber = 34;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel clientMinMessages_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel ClientMinMessages {
      get { return clientMinMessages_; }
      set {
        clientMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_messages" field.</summary>
    public const int LogMinMessagesFieldNumber = 35;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel logMinMessages_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel LogMinMessages {
      get { return logMinMessages_; }
      set {
        logMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_error_statement" field.</summary>
    public const int LogMinErrorStatementFieldNumber = 36;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel logMinErrorStatement_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel LogMinErrorStatement {
      get { return logMinErrorStatement_; }
      set {
        logMinErrorStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_min_duration_statement" field.</summary>
    public const int LogMinDurationStatementFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_logMinDurationStatement_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? logMinDurationStatement_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogMinDurationStatement {
      get { return logMinDurationStatement_; }
      set {
        logMinDurationStatement_ = value;
      }
    }


    /// <summary>Field number for the "log_checkpoints" field.</summary>
    public const int LogCheckpointsFieldNumber = 38;
    private static readonly pb::FieldCodec<bool?> _single_logCheckpoints_codec = pb::FieldCodec.ForStructWrapper<bool>(306);
    private bool? logCheckpoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogCheckpoints {
      get { return logCheckpoints_; }
      set {
        logCheckpoints_ = value;
      }
    }


    /// <summary>Field number for the "log_connections" field.</summary>
    public const int LogConnectionsFieldNumber = 39;
    private static readonly pb::FieldCodec<bool?> _single_logConnections_codec = pb::FieldCodec.ForStructWrapper<bool>(314);
    private bool? logConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogConnections {
      get { return logConnections_; }
      set {
        logConnections_ = value;
      }
    }


    /// <summary>Field number for the "log_disconnections" field.</summary>
    public const int LogDisconnectionsFieldNumber = 40;
    private static readonly pb::FieldCodec<bool?> _single_logDisconnections_codec = pb::FieldCodec.ForStructWrapper<bool>(322);
    private bool? logDisconnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDisconnections {
      get { return logDisconnections_; }
      set {
        logDisconnections_ = value;
      }
    }


    /// <summary>Field number for the "log_duration" field.</summary>
    public const int LogDurationFieldNumber = 41;
    private static readonly pb::FieldCodec<bool?> _single_logDuration_codec = pb::FieldCodec.ForStructWrapper<bool>(330);
    private bool? logDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDuration {
      get { return logDuration_; }
      set {
        logDuration_ = value;
      }
    }


    /// <summary>Field number for the "log_error_verbosity" field.</summary>
    public const int LogErrorVerbosityFieldNumber = 42;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity logErrorVerbosity_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity LogErrorVerbosity {
      get { return logErrorVerbosity_; }
      set {
        logErrorVerbosity_ = value;
      }
    }

    /// <summary>Field number for the "log_lock_waits" field.</summary>
    public const int LogLockWaitsFieldNumber = 43;
    private static readonly pb::FieldCodec<bool?> _single_logLockWaits_codec = pb::FieldCodec.ForStructWrapper<bool>(346);
    private bool? logLockWaits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogLockWaits {
      get { return logLockWaits_; }
      set {
        logLockWaits_ = value;
      }
    }


    /// <summary>Field number for the "log_statement" field.</summary>
    public const int LogStatementFieldNumber = 44;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement logStatement_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement LogStatement {
      get { return logStatement_; }
      set {
        logStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_temp_files" field.</summary>
    public const int LogTempFilesFieldNumber = 45;
    private static readonly pb::FieldCodec<long?> _single_logTempFiles_codec = pb::FieldCodec.ForStructWrapper<long>(362);
    private long? logTempFiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogTempFiles {
      get { return logTempFiles_; }
      set {
        logTempFiles_ = value;
      }
    }


    /// <summary>Field number for the "search_path" field.</summary>
    public const int SearchPathFieldNumber = 46;
    private string searchPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchPath {
      get { return searchPath_; }
      set {
        searchPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_security" field.</summary>
    public const int RowSecurityFieldNumber = 47;
    private static readonly pb::FieldCodec<bool?> _single_rowSecurity_codec = pb::FieldCodec.ForStructWrapper<bool>(378);
    private bool? rowSecurity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RowSecurity {
      get { return rowSecurity_; }
      set {
        rowSecurity_ = value;
      }
    }


    /// <summary>Field number for the "default_transaction_isolation" field.</summary>
    public const int DefaultTransactionIsolationFieldNumber = 48;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation defaultTransactionIsolation_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation DefaultTransactionIsolation {
      get { return defaultTransactionIsolation_; }
      set {
        defaultTransactionIsolation_ = value;
      }
    }

    /// <summary>Field number for the "statement_timeout" field.</summary>
    public const int StatementTimeoutFieldNumber = 49;
    private static readonly pb::FieldCodec<long?> _single_statementTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(394);
    private long? statementTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? StatementTimeout {
      get { return statementTimeout_; }
      set {
        statementTimeout_ = value;
      }
    }


    /// <summary>Field number for the "lock_timeout" field.</summary>
    public const int LockTimeoutFieldNumber = 50;
    private static readonly pb::FieldCodec<long?> _single_lockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(402);
    private long? lockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LockTimeout {
      get { return lockTimeout_; }
      set {
        lockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "idle_in_transaction_session_timeout" field.</summary>
    public const int IdleInTransactionSessionTimeoutFieldNumber = 51;
    private static readonly pb::FieldCodec<long?> _single_idleInTransactionSessionTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(410);
    private long? idleInTransactionSessionTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? IdleInTransactionSessionTimeout {
      get { return idleInTransactionSessionTimeout_; }
      set {
        idleInTransactionSessionTimeout_ = value;
      }
    }


    /// <summary>Field number for the "bytea_output" field.</summary>
    public const int ByteaOutputFieldNumber = 52;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput byteaOutput_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput ByteaOutput {
      get { return byteaOutput_; }
      set {
        byteaOutput_ = value;
      }
    }

    /// <summary>Field number for the "xmlbinary" field.</summary>
    public const int XmlbinaryFieldNumber = 53;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary xmlbinary_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary Xmlbinary {
      get { return xmlbinary_; }
      set {
        xmlbinary_ = value;
      }
    }

    /// <summary>Field number for the "xmloption" field.</summary>
    public const int XmloptionFieldNumber = 54;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption xmloption_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption Xmloption {
      get { return xmloption_; }
      set {
        xmloption_ = value;
      }
    }

    /// <summary>Field number for the "gin_pending_list_limit" field.</summary>
    public const int GinPendingListLimitFieldNumber = 55;
    private static readonly pb::FieldCodec<long?> _single_ginPendingListLimit_codec = pb::FieldCodec.ForStructWrapper<long>(442);
    private long? ginPendingListLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GinPendingListLimit {
      get { return ginPendingListLimit_; }
      set {
        ginPendingListLimit_ = value;
      }
    }


    /// <summary>Field number for the "deadlock_timeout" field.</summary>
    public const int DeadlockTimeoutFieldNumber = 56;
    private static readonly pb::FieldCodec<long?> _single_deadlockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(450);
    private long? deadlockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DeadlockTimeout {
      get { return deadlockTimeout_; }
      set {
        deadlockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "max_locks_per_transaction" field.</summary>
    public const int MaxLocksPerTransactionFieldNumber = 57;
    private static readonly pb::FieldCodec<long?> _single_maxLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(458);
    private long? maxLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxLocksPerTransaction {
      get { return maxLocksPerTransaction_; }
      set {
        maxLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "max_pred_locks_per_transaction" field.</summary>
    public const int MaxPredLocksPerTransactionFieldNumber = 58;
    private static readonly pb::FieldCodec<long?> _single_maxPredLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(466);
    private long? maxPredLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPredLocksPerTransaction {
      get { return maxPredLocksPerTransaction_; }
      set {
        maxPredLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "array_nulls" field.</summary>
    public const int ArrayNullsFieldNumber = 59;
    private static readonly pb::FieldCodec<bool?> _single_arrayNulls_codec = pb::FieldCodec.ForStructWrapper<bool>(474);
    private bool? arrayNulls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ArrayNulls {
      get { return arrayNulls_; }
      set {
        arrayNulls_ = value;
      }
    }


    /// <summary>Field number for the "backslash_quote" field.</summary>
    public const int BackslashQuoteFieldNumber = 60;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote backslashQuote_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote BackslashQuote {
      get { return backslashQuote_; }
      set {
        backslashQuote_ = value;
      }
    }

    /// <summary>Field number for the "default_with_oids" field.</summary>
    public const int DefaultWithOidsFieldNumber = 61;
    private static readonly pb::FieldCodec<bool?> _single_defaultWithOids_codec = pb::FieldCodec.ForStructWrapper<bool>(490);
    private bool? defaultWithOids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DefaultWithOids {
      get { return defaultWithOids_; }
      set {
        defaultWithOids_ = value;
      }
    }


    /// <summary>Field number for the "escape_string_warning" field.</summary>
    public const int EscapeStringWarningFieldNumber = 62;
    private static readonly pb::FieldCodec<bool?> _single_escapeStringWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(498);
    private bool? escapeStringWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EscapeStringWarning {
      get { return escapeStringWarning_; }
      set {
        escapeStringWarning_ = value;
      }
    }


    /// <summary>Field number for the "lo_compat_privileges" field.</summary>
    public const int LoCompatPrivilegesFieldNumber = 63;
    private static readonly pb::FieldCodec<bool?> _single_loCompatPrivileges_codec = pb::FieldCodec.ForStructWrapper<bool>(506);
    private bool? loCompatPrivileges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LoCompatPrivileges {
      get { return loCompatPrivileges_; }
      set {
        loCompatPrivileges_ = value;
      }
    }


    /// <summary>Field number for the "operator_precedence_warning" field.</summary>
    public const int OperatorPrecedenceWarningFieldNumber = 64;
    private static readonly pb::FieldCodec<bool?> _single_operatorPrecedenceWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(514);
    private bool? operatorPrecedenceWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OperatorPrecedenceWarning {
      get { return operatorPrecedenceWarning_; }
      set {
        operatorPrecedenceWarning_ = value;
      }
    }


    /// <summary>Field number for the "quote_all_identifiers" field.</summary>
    public const int QuoteAllIdentifiersFieldNumber = 65;
    private static readonly pb::FieldCodec<bool?> _single_quoteAllIdentifiers_codec = pb::FieldCodec.ForStructWrapper<bool>(522);
    private bool? quoteAllIdentifiers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? QuoteAllIdentifiers {
      get { return quoteAllIdentifiers_; }
      set {
        quoteAllIdentifiers_ = value;
      }
    }


    /// <summary>Field number for the "standard_conforming_strings" field.</summary>
    public const int StandardConformingStringsFieldNumber = 66;
    private static readonly pb::FieldCodec<bool?> _single_standardConformingStrings_codec = pb::FieldCodec.ForStructWrapper<bool>(530);
    private bool? standardConformingStrings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? StandardConformingStrings {
      get { return standardConformingStrings_; }
      set {
        standardConformingStrings_ = value;
      }
    }


    /// <summary>Field number for the "synchronize_seqscans" field.</summary>
    public const int SynchronizeSeqscansFieldNumber = 67;
    private static readonly pb::FieldCodec<bool?> _single_synchronizeSeqscans_codec = pb::FieldCodec.ForStructWrapper<bool>(538);
    private bool? synchronizeSeqscans_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SynchronizeSeqscans {
      get { return synchronizeSeqscans_; }
      set {
        synchronizeSeqscans_ = value;
      }
    }


    /// <summary>Field number for the "transform_null_equals" field.</summary>
    public const int TransformNullEqualsFieldNumber = 68;
    private static readonly pb::FieldCodec<bool?> _single_transformNullEquals_codec = pb::FieldCodec.ForStructWrapper<bool>(546);
    private bool? transformNullEquals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TransformNullEquals {
      get { return transformNullEquals_; }
      set {
        transformNullEquals_ = value;
      }
    }


    /// <summary>Field number for the "exit_on_error" field.</summary>
    public const int ExitOnErrorFieldNumber = 69;
    private static readonly pb::FieldCodec<bool?> _single_exitOnError_codec = pb::FieldCodec.ForStructWrapper<bool>(554);
    private bool? exitOnError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ExitOnError {
      get { return exitOnError_; }
      set {
        exitOnError_ = value;
      }
    }


    /// <summary>Field number for the "seq_page_cost" field.</summary>
    public const int SeqPageCostFieldNumber = 70;
    private static readonly pb::FieldCodec<double?> _single_seqPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(562);
    private double? seqPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SeqPageCost {
      get { return seqPageCost_; }
      set {
        seqPageCost_ = value;
      }
    }


    /// <summary>Field number for the "random_page_cost" field.</summary>
    public const int RandomPageCostFieldNumber = 71;
    private static readonly pb::FieldCodec<double?> _single_randomPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(570);
    private double? randomPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RandomPageCost {
      get { return randomPageCost_; }
      set {
        randomPageCost_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_max_workers" field.</summary>
    public const int AutovacuumMaxWorkersFieldNumber = 72;
    private static readonly pb::FieldCodec<long?> _single_autovacuumMaxWorkers_codec = pb::FieldCodec.ForStructWrapper<long>(578);
    private long? autovacuumMaxWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumMaxWorkers {
      get { return autovacuumMaxWorkers_; }
      set {
        autovacuumMaxWorkers_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_vacuum_cost_delay" field.</summary>
    public const int AutovacuumVacuumCostDelayFieldNumber = 73;
    private static readonly pb::FieldCodec<long?> _single_autovacuumVacuumCostDelay_codec = pb::FieldCodec.ForStructWrapper<long>(586);
    private long? autovacuumVacuumCostDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumVacuumCostDelay {
      get { return autovacuumVacuumCostDelay_; }
      set {
        autovacuumVacuumCostDelay_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_vacuum_cost_limit" field.</summary>
    public const int AutovacuumVacuumCostLimitFieldNumber = 74;
    private static readonly pb::FieldCodec<long?> _single_autovacuumVacuumCostLimit_codec = pb::FieldCodec.ForStructWrapper<long>(594);
    private long? autovacuumVacuumCostLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumVacuumCostLimit {
      get { return autovacuumVacuumCostLimit_; }
      set {
        autovacuumVacuumCostLimit_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_naptime" field.</summary>
    public const int AutovacuumNaptimeFieldNumber = 75;
    private static readonly pb::FieldCodec<long?> _single_autovacuumNaptime_codec = pb::FieldCodec.ForStructWrapper<long>(602);
    private long? autovacuumNaptime_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumNaptime {
      get { return autovacuumNaptime_; }
      set {
        autovacuumNaptime_ = value;
      }
    }


    /// <summary>Field number for the "archive_timeout" field.</summary>
    public const int ArchiveTimeoutFieldNumber = 76;
    private static readonly pb::FieldCodec<long?> _single_archiveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(610);
    private long? archiveTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ArchiveTimeout {
      get { return archiveTimeout_; }
      set {
        archiveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "track_activity_query_size" field.</summary>
    public const int TrackActivityQuerySizeFieldNumber = 77;
    private static readonly pb::FieldCodec<long?> _single_trackActivityQuerySize_codec = pb::FieldCodec.ForStructWrapper<long>(618);
    private long? trackActivityQuerySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TrackActivityQuerySize {
      get { return trackActivityQuerySize_; }
      set {
        trackActivityQuerySize_ = value;
      }
    }


    /// <summary>Field number for the "enable_bitmapscan" field.</summary>
    public const int EnableBitmapscanFieldNumber = 80;
    private static readonly pb::FieldCodec<bool?> _single_enableBitmapscan_codec = pb::FieldCodec.ForStructWrapper<bool>(642);
    private bool? enableBitmapscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableBitmapscan {
      get { return enableBitmapscan_; }
      set {
        enableBitmapscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_hashagg" field.</summary>
    public const int EnableHashaggFieldNumber = 81;
    private static readonly pb::FieldCodec<bool?> _single_enableHashagg_codec = pb::FieldCodec.ForStructWrapper<bool>(650);
    private bool? enableHashagg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableHashagg {
      get { return enableHashagg_; }
      set {
        enableHashagg_ = value;
      }
    }


    /// <summary>Field number for the "enable_hashjoin" field.</summary>
    public const int EnableHashjoinFieldNumber = 82;
    private static readonly pb::FieldCodec<bool?> _single_enableHashjoin_codec = pb::FieldCodec.ForStructWrapper<bool>(658);
    private bool? enableHashjoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableHashjoin {
      get { return enableHashjoin_; }
      set {
        enableHashjoin_ = value;
      }
    }


    /// <summary>Field number for the "enable_indexscan" field.</summary>
    public const int EnableIndexscanFieldNumber = 83;
    private static readonly pb::FieldCodec<bool?> _single_enableIndexscan_codec = pb::FieldCodec.ForStructWrapper<bool>(666);
    private bool? enableIndexscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIndexscan {
      get { return enableIndexscan_; }
      set {
        enableIndexscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_indexonlyscan" field.</summary>
    public const int EnableIndexonlyscanFieldNumber = 84;
    private static readonly pb::FieldCodec<bool?> _single_enableIndexonlyscan_codec = pb::FieldCodec.ForStructWrapper<bool>(674);
    private bool? enableIndexonlyscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIndexonlyscan {
      get { return enableIndexonlyscan_; }
      set {
        enableIndexonlyscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_material" field.</summary>
    public const int EnableMaterialFieldNumber = 85;
    private static readonly pb::FieldCodec<bool?> _single_enableMaterial_codec = pb::FieldCodec.ForStructWrapper<bool>(682);
    private bool? enableMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableMaterial {
      get { return enableMaterial_; }
      set {
        enableMaterial_ = value;
      }
    }


    /// <summary>Field number for the "enable_mergejoin" field.</summary>
    public const int EnableMergejoinFieldNumber = 86;
    private static readonly pb::FieldCodec<bool?> _single_enableMergejoin_codec = pb::FieldCodec.ForStructWrapper<bool>(690);
    private bool? enableMergejoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableMergejoin {
      get { return enableMergejoin_; }
      set {
        enableMergejoin_ = value;
      }
    }


    /// <summary>Field number for the "enable_nestloop" field.</summary>
    public const int EnableNestloopFieldNumber = 87;
    private static readonly pb::FieldCodec<bool?> _single_enableNestloop_codec = pb::FieldCodec.ForStructWrapper<bool>(698);
    private bool? enableNestloop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableNestloop {
      get { return enableNestloop_; }
      set {
        enableNestloop_ = value;
      }
    }


    /// <summary>Field number for the "enable_seqscan" field.</summary>
    public const int EnableSeqscanFieldNumber = 88;
    private static readonly pb::FieldCodec<bool?> _single_enableSeqscan_codec = pb::FieldCodec.ForStructWrapper<bool>(706);
    private bool? enableSeqscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableSeqscan {
      get { return enableSeqscan_; }
      set {
        enableSeqscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_sort" field.</summary>
    public const int EnableSortFieldNumber = 89;
    private static readonly pb::FieldCodec<bool?> _single_enableSort_codec = pb::FieldCodec.ForStructWrapper<bool>(714);
    private bool? enableSort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableSort {
      get { return enableSort_; }
      set {
        enableSort_ = value;
      }
    }


    /// <summary>Field number for the "enable_tidscan" field.</summary>
    public const int EnableTidscanFieldNumber = 90;
    private static readonly pb::FieldCodec<bool?> _single_enableTidscan_codec = pb::FieldCodec.ForStructWrapper<bool>(722);
    private bool? enableTidscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableTidscan {
      get { return enableTidscan_; }
      set {
        enableTidscan_ = value;
      }
    }


    /// <summary>Field number for the "max_worker_processes" field.</summary>
    public const int MaxWorkerProcessesFieldNumber = 91;
    private static readonly pb::FieldCodec<long?> _single_maxWorkerProcesses_codec = pb::FieldCodec.ForStructWrapper<long>(730);
    private long? maxWorkerProcesses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxWorkerProcesses {
      get { return maxWorkerProcesses_; }
      set {
        maxWorkerProcesses_ = value;
      }
    }


    /// <summary>Field number for the "max_parallel_workers" field.</summary>
    public const int MaxParallelWorkersFieldNumber = 92;
    private static readonly pb::FieldCodec<long?> _single_maxParallelWorkers_codec = pb::FieldCodec.ForStructWrapper<long>(738);
    private long? maxParallelWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxParallelWorkers {
      get { return maxParallelWorkers_; }
      set {
        maxParallelWorkers_ = value;
      }
    }


    /// <summary>Field number for the "max_parallel_workers_per_gather" field.</summary>
    public const int MaxParallelWorkersPerGatherFieldNumber = 93;
    private static readonly pb::FieldCodec<long?> _single_maxParallelWorkersPerGather_codec = pb::FieldCodec.ForStructWrapper<long>(746);
    private long? maxParallelWorkersPerGather_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxParallelWorkersPerGather {
      get { return maxParallelWorkersPerGather_; }
      set {
        maxParallelWorkersPerGather_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_vacuum_scale_factor" field.</summary>
    public const int AutovacuumVacuumScaleFactorFieldNumber = 94;
    private static readonly pb::FieldCodec<double?> _single_autovacuumVacuumScaleFactor_codec = pb::FieldCodec.ForStructWrapper<double>(754);
    private double? autovacuumVacuumScaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AutovacuumVacuumScaleFactor {
      get { return autovacuumVacuumScaleFactor_; }
      set {
        autovacuumVacuumScaleFactor_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_analyze_scale_factor" field.</summary>
    public const int AutovacuumAnalyzeScaleFactorFieldNumber = 95;
    private static readonly pb::FieldCodec<double?> _single_autovacuumAnalyzeScaleFactor_codec = pb::FieldCodec.ForStructWrapper<double>(762);
    private double? autovacuumAnalyzeScaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AutovacuumAnalyzeScaleFactor {
      get { return autovacuumAnalyzeScaleFactor_; }
      set {
        autovacuumAnalyzeScaleFactor_ = value;
      }
    }


    /// <summary>Field number for the "default_transaction_read_only" field.</summary>
    public const int DefaultTransactionReadOnlyFieldNumber = 96;
    private static readonly pb::FieldCodec<bool?> _single_defaultTransactionReadOnly_codec = pb::FieldCodec.ForStructWrapper<bool>(770);
    private bool? defaultTransactionReadOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DefaultTransactionReadOnly {
      get { return defaultTransactionReadOnly_; }
      set {
        defaultTransactionReadOnly_ = value;
      }
    }


    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 97;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "enable_parallel_append" field.</summary>
    public const int EnableParallelAppendFieldNumber = 98;
    private static readonly pb::FieldCodec<bool?> _single_enableParallelAppend_codec = pb::FieldCodec.ForStructWrapper<bool>(786);
    private bool? enableParallelAppend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableParallelAppend {
      get { return enableParallelAppend_; }
      set {
        enableParallelAppend_ = value;
      }
    }


    /// <summary>Field number for the "enable_parallel_hash" field.</summary>
    public const int EnableParallelHashFieldNumber = 99;
    private static readonly pb::FieldCodec<bool?> _single_enableParallelHash_codec = pb::FieldCodec.ForStructWrapper<bool>(794);
    private bool? enableParallelHash_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableParallelHash {
      get { return enableParallelHash_; }
      set {
        enableParallelHash_ = value;
      }
    }


    /// <summary>Field number for the "enable_partition_pruning" field.</summary>
    public const int EnablePartitionPruningFieldNumber = 100;
    private static readonly pb::FieldCodec<bool?> _single_enablePartitionPruning_codec = pb::FieldCodec.ForStructWrapper<bool>(802);
    private bool? enablePartitionPruning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnablePartitionPruning {
      get { return enablePartitionPruning_; }
      set {
        enablePartitionPruning_ = value;
      }
    }


    /// <summary>Field number for the "enable_partitionwise_aggregate" field.</summary>
    public const int EnablePartitionwiseAggregateFieldNumber = 101;
    private static readonly pb::FieldCodec<bool?> _single_enablePartitionwiseAggregate_codec = pb::FieldCodec.ForStructWrapper<bool>(810);
    private bool? enablePartitionwiseAggregate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnablePartitionwiseAggregate {
      get { return enablePartitionwiseAggregate_; }
      set {
        enablePartitionwiseAggregate_ = value;
      }
    }


    /// <summary>Field number for the "enable_partitionwise_join" field.</summary>
    public const int EnablePartitionwiseJoinFieldNumber = 102;
    private static readonly pb::FieldCodec<bool?> _single_enablePartitionwiseJoin_codec = pb::FieldCodec.ForStructWrapper<bool>(818);
    private bool? enablePartitionwiseJoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnablePartitionwiseJoin {
      get { return enablePartitionwiseJoin_; }
      set {
        enablePartitionwiseJoin_ = value;
      }
    }


    /// <summary>Field number for the "jit" field.</summary>
    public const int JitFieldNumber = 103;
    private static readonly pb::FieldCodec<bool?> _single_jit_codec = pb::FieldCodec.ForStructWrapper<bool>(826);
    private bool? jit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Jit {
      get { return jit_; }
      set {
        jit_ = value;
      }
    }


    /// <summary>Field number for the "max_parallel_maintenance_workers" field.</summary>
    public const int MaxParallelMaintenanceWorkersFieldNumber = 104;
    private static readonly pb::FieldCodec<long?> _single_maxParallelMaintenanceWorkers_codec = pb::FieldCodec.ForStructWrapper<long>(834);
    private long? maxParallelMaintenanceWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxParallelMaintenanceWorkers {
      get { return maxParallelMaintenanceWorkers_; }
      set {
        maxParallelMaintenanceWorkers_ = value;
      }
    }


    /// <summary>Field number for the "parallel_leader_participation" field.</summary>
    public const int ParallelLeaderParticipationFieldNumber = 105;
    private static readonly pb::FieldCodec<bool?> _single_parallelLeaderParticipation_codec = pb::FieldCodec.ForStructWrapper<bool>(842);
    private bool? parallelLeaderParticipation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ParallelLeaderParticipation {
      get { return parallelLeaderParticipation_; }
      set {
        parallelLeaderParticipation_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cleanup_index_scale_factor" field.</summary>
    public const int VacuumCleanupIndexScaleFactorFieldNumber = 106;
    private static readonly pb::FieldCodec<double?> _single_vacuumCleanupIndexScaleFactor_codec = pb::FieldCodec.ForStructWrapper<double>(850);
    private double? vacuumCleanupIndexScaleFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? VacuumCleanupIndexScaleFactor {
      get { return vacuumCleanupIndexScaleFactor_; }
      set {
        vacuumCleanupIndexScaleFactor_ = value;
      }
    }


    /// <summary>Field number for the "effective_io_concurrency" field.</summary>
    public const int EffectiveIoConcurrencyFieldNumber = 107;
    private static readonly pb::FieldCodec<long?> _single_effectiveIoConcurrency_codec = pb::FieldCodec.ForStructWrapper<long>(858);
    private long? effectiveIoConcurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveIoConcurrency {
      get { return effectiveIoConcurrency_; }
      set {
        effectiveIoConcurrency_ = value;
      }
    }


    /// <summary>Field number for the "effective_cache_size" field.</summary>
    public const int EffectiveCacheSizeFieldNumber = 108;
    private static readonly pb::FieldCodec<long?> _single_effectiveCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(866);
    private long? effectiveCacheSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveCacheSize {
      get { return effectiveCacheSize_; }
      set {
        effectiveCacheSize_ = value;
      }
    }


    /// <summary>Field number for the "shared_preload_libraries" field.</summary>
    public const int SharedPreloadLibrariesFieldNumber = 109;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries> _repeated_sharedPreloadLibraries_codec
        = pb::FieldCodec.ForEnum(874, x => (int) x, x => (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries) x);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries> sharedPreloadLibraries_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SharedPreloadLibraries> SharedPreloadLibraries {
      get { return sharedPreloadLibraries_; }
    }

    /// <summary>Field number for the "auto_explain_log_min_duration" field.</summary>
    public const int AutoExplainLogMinDurationFieldNumber = 110;
    private static readonly pb::FieldCodec<long?> _single_autoExplainLogMinDuration_codec = pb::FieldCodec.ForStructWrapper<long>(882);
    private long? autoExplainLogMinDuration_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutoExplainLogMinDuration {
      get { return autoExplainLogMinDuration_; }
      set {
        autoExplainLogMinDuration_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_analyze" field.</summary>
    public const int AutoExplainLogAnalyzeFieldNumber = 111;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogAnalyze_codec = pb::FieldCodec.ForStructWrapper<bool>(890);
    private bool? autoExplainLogAnalyze_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogAnalyze {
      get { return autoExplainLogAnalyze_; }
      set {
        autoExplainLogAnalyze_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_buffers" field.</summary>
    public const int AutoExplainLogBuffersFieldNumber = 112;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogBuffers_codec = pb::FieldCodec.ForStructWrapper<bool>(898);
    private bool? autoExplainLogBuffers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogBuffers {
      get { return autoExplainLogBuffers_; }
      set {
        autoExplainLogBuffers_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_timing" field.</summary>
    public const int AutoExplainLogTimingFieldNumber = 113;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogTiming_codec = pb::FieldCodec.ForStructWrapper<bool>(906);
    private bool? autoExplainLogTiming_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogTiming {
      get { return autoExplainLogTiming_; }
      set {
        autoExplainLogTiming_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_triggers" field.</summary>
    public const int AutoExplainLogTriggersFieldNumber = 114;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogTriggers_codec = pb::FieldCodec.ForStructWrapper<bool>(914);
    private bool? autoExplainLogTriggers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogTriggers {
      get { return autoExplainLogTriggers_; }
      set {
        autoExplainLogTriggers_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_verbose" field.</summary>
    public const int AutoExplainLogVerboseFieldNumber = 115;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogVerbose_codec = pb::FieldCodec.ForStructWrapper<bool>(922);
    private bool? autoExplainLogVerbose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogVerbose {
      get { return autoExplainLogVerbose_; }
      set {
        autoExplainLogVerbose_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_log_nested_statements" field.</summary>
    public const int AutoExplainLogNestedStatementsFieldNumber = 116;
    private static readonly pb::FieldCodec<bool?> _single_autoExplainLogNestedStatements_codec = pb::FieldCodec.ForStructWrapper<bool>(930);
    private bool? autoExplainLogNestedStatements_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AutoExplainLogNestedStatements {
      get { return autoExplainLogNestedStatements_; }
      set {
        autoExplainLogNestedStatements_ = value;
      }
    }


    /// <summary>Field number for the "auto_explain_sample_rate" field.</summary>
    public const int AutoExplainSampleRateFieldNumber = 117;
    private static readonly pb::FieldCodec<double?> _single_autoExplainSampleRate_codec = pb::FieldCodec.ForStructWrapper<double>(938);
    private double? autoExplainSampleRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? AutoExplainSampleRate {
      get { return autoExplainSampleRate_; }
      set {
        autoExplainSampleRate_ = value;
      }
    }


    /// <summary>Field number for the "pg_hint_plan_enable_hint" field.</summary>
    public const int PgHintPlanEnableHintFieldNumber = 118;
    private static readonly pb::FieldCodec<bool?> _single_pgHintPlanEnableHint_codec = pb::FieldCodec.ForStructWrapper<bool>(946);
    private bool? pgHintPlanEnableHint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? PgHintPlanEnableHint {
      get { return pgHintPlanEnableHint_; }
      set {
        pgHintPlanEnableHint_ = value;
      }
    }


    /// <summary>Field number for the "pg_hint_plan_enable_hint_table" field.</summary>
    public const int PgHintPlanEnableHintTableFieldNumber = 119;
    private static readonly pb::FieldCodec<bool?> _single_pgHintPlanEnableHintTable_codec = pb::FieldCodec.ForStructWrapper<bool>(954);
    private bool? pgHintPlanEnableHintTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? PgHintPlanEnableHintTable {
      get { return pgHintPlanEnableHintTable_; }
      set {
        pgHintPlanEnableHintTable_ = value;
      }
    }


    /// <summary>Field number for the "pg_hint_plan_debug_print" field.</summary>
    public const int PgHintPlanDebugPrintFieldNumber = 120;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint pgHintPlanDebugPrint_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint PgHintPlanDebugPrint {
      get { return pgHintPlanDebugPrint_; }
      set {
        pgHintPlanDebugPrint_ = value;
      }
    }

    /// <summary>Field number for the "pg_hint_plan_message_level" field.</summary>
    public const int PgHintPlanMessageLevelFieldNumber = 121;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel pgHintPlanMessageLevel_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel PgHintPlanMessageLevel {
      get { return pgHintPlanMessageLevel_; }
      set {
        pgHintPlanMessageLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostgresqlConfig11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostgresqlConfig11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxConnections != other.MaxConnections) return false;
      if (SharedBuffers != other.SharedBuffers) return false;
      if (TempBuffers != other.TempBuffers) return false;
      if (MaxPreparedTransactions != other.MaxPreparedTransactions) return false;
      if (WorkMem != other.WorkMem) return false;
      if (MaintenanceWorkMem != other.MaintenanceWorkMem) return false;
      if (AutovacuumWorkMem != other.AutovacuumWorkMem) return false;
      if (TempFileLimit != other.TempFileLimit) return false;
      if (VacuumCostDelay != other.VacuumCostDelay) return false;
      if (VacuumCostPageHit != other.VacuumCostPageHit) return false;
      if (VacuumCostPageMiss != other.VacuumCostPageMiss) return false;
      if (VacuumCostPageDirty != other.VacuumCostPageDirty) return false;
      if (VacuumCostLimit != other.VacuumCostLimit) return false;
      if (BgwriterDelay != other.BgwriterDelay) return false;
      if (BgwriterLruMaxpages != other.BgwriterLruMaxpages) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BgwriterLruMultiplier, other.BgwriterLruMultiplier)) return false;
      if (BgwriterFlushAfter != other.BgwriterFlushAfter) return false;
      if (BackendFlushAfter != other.BackendFlushAfter) return false;
      if (OldSnapshotThreshold != other.OldSnapshotThreshold) return false;
      if (WalLevel != other.WalLevel) return false;
      if (SynchronousCommit != other.SynchronousCommit) return false;
      if (CheckpointTimeout != other.CheckpointTimeout) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CheckpointCompletionTarget, other.CheckpointCompletionTarget)) return false;
      if (CheckpointFlushAfter != other.CheckpointFlushAfter) return false;
      if (MaxWalSize != other.MaxWalSize) return false;
      if (MinWalSize != other.MinWalSize) return false;
      if (MaxStandbyStreamingDelay != other.MaxStandbyStreamingDelay) return false;
      if (DefaultStatisticsTarget != other.DefaultStatisticsTarget) return false;
      if (ConstraintExclusion != other.ConstraintExclusion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CursorTupleFraction, other.CursorTupleFraction)) return false;
      if (FromCollapseLimit != other.FromCollapseLimit) return false;
      if (JoinCollapseLimit != other.JoinCollapseLimit) return false;
      if (ForceParallelMode != other.ForceParallelMode) return false;
      if (ClientMinMessages != other.ClientMinMessages) return false;
      if (LogMinMessages != other.LogMinMessages) return false;
      if (LogMinErrorStatement != other.LogMinErrorStatement) return false;
      if (LogMinDurationStatement != other.LogMinDurationStatement) return false;
      if (LogCheckpoints != other.LogCheckpoints) return false;
      if (LogConnections != other.LogConnections) return false;
      if (LogDisconnections != other.LogDisconnections) return false;
      if (LogDuration != other.LogDuration) return false;
      if (LogErrorVerbosity != other.LogErrorVerbosity) return false;
      if (LogLockWaits != other.LogLockWaits) return false;
      if (LogStatement != other.LogStatement) return false;
      if (LogTempFiles != other.LogTempFiles) return false;
      if (SearchPath != other.SearchPath) return false;
      if (RowSecurity != other.RowSecurity) return false;
      if (DefaultTransactionIsolation != other.DefaultTransactionIsolation) return false;
      if (StatementTimeout != other.StatementTimeout) return false;
      if (LockTimeout != other.LockTimeout) return false;
      if (IdleInTransactionSessionTimeout != other.IdleInTransactionSessionTimeout) return false;
      if (ByteaOutput != other.ByteaOutput) return false;
      if (Xmlbinary != other.Xmlbinary) return false;
      if (Xmloption != other.Xmloption) return false;
      if (GinPendingListLimit != other.GinPendingListLimit) return false;
      if (DeadlockTimeout != other.DeadlockTimeout) return false;
      if (MaxLocksPerTransaction != other.MaxLocksPerTransaction) return false;
      if (MaxPredLocksPerTransaction != other.MaxPredLocksPerTransaction) return false;
      if (ArrayNulls != other.ArrayNulls) return false;
      if (BackslashQuote != other.BackslashQuote) return false;
      if (DefaultWithOids != other.DefaultWithOids) return false;
      if (EscapeStringWarning != other.EscapeStringWarning) return false;
      if (LoCompatPrivileges != other.LoCompatPrivileges) return false;
      if (OperatorPrecedenceWarning != other.OperatorPrecedenceWarning) return false;
      if (QuoteAllIdentifiers != other.QuoteAllIdentifiers) return false;
      if (StandardConformingStrings != other.StandardConformingStrings) return false;
      if (SynchronizeSeqscans != other.SynchronizeSeqscans) return false;
      if (TransformNullEquals != other.TransformNullEquals) return false;
      if (ExitOnError != other.ExitOnError) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SeqPageCost, other.SeqPageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RandomPageCost, other.RandomPageCost)) return false;
      if (AutovacuumMaxWorkers != other.AutovacuumMaxWorkers) return false;
      if (AutovacuumVacuumCostDelay != other.AutovacuumVacuumCostDelay) return false;
      if (AutovacuumVacuumCostLimit != other.AutovacuumVacuumCostLimit) return false;
      if (AutovacuumNaptime != other.AutovacuumNaptime) return false;
      if (ArchiveTimeout != other.ArchiveTimeout) return false;
      if (TrackActivityQuerySize != other.TrackActivityQuerySize) return false;
      if (EnableBitmapscan != other.EnableBitmapscan) return false;
      if (EnableHashagg != other.EnableHashagg) return false;
      if (EnableHashjoin != other.EnableHashjoin) return false;
      if (EnableIndexscan != other.EnableIndexscan) return false;
      if (EnableIndexonlyscan != other.EnableIndexonlyscan) return false;
      if (EnableMaterial != other.EnableMaterial) return false;
      if (EnableMergejoin != other.EnableMergejoin) return false;
      if (EnableNestloop != other.EnableNestloop) return false;
      if (EnableSeqscan != other.EnableSeqscan) return false;
      if (EnableSort != other.EnableSort) return false;
      if (EnableTidscan != other.EnableTidscan) return false;
      if (MaxWorkerProcesses != other.MaxWorkerProcesses) return false;
      if (MaxParallelWorkers != other.MaxParallelWorkers) return false;
      if (MaxParallelWorkersPerGather != other.MaxParallelWorkersPerGather) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AutovacuumVacuumScaleFactor, other.AutovacuumVacuumScaleFactor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AutovacuumAnalyzeScaleFactor, other.AutovacuumAnalyzeScaleFactor)) return false;
      if (DefaultTransactionReadOnly != other.DefaultTransactionReadOnly) return false;
      if (Timezone != other.Timezone) return false;
      if (EnableParallelAppend != other.EnableParallelAppend) return false;
      if (EnableParallelHash != other.EnableParallelHash) return false;
      if (EnablePartitionPruning != other.EnablePartitionPruning) return false;
      if (EnablePartitionwiseAggregate != other.EnablePartitionwiseAggregate) return false;
      if (EnablePartitionwiseJoin != other.EnablePartitionwiseJoin) return false;
      if (Jit != other.Jit) return false;
      if (MaxParallelMaintenanceWorkers != other.MaxParallelMaintenanceWorkers) return false;
      if (ParallelLeaderParticipation != other.ParallelLeaderParticipation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(VacuumCleanupIndexScaleFactor, other.VacuumCleanupIndexScaleFactor)) return false;
      if (EffectiveIoConcurrency != other.EffectiveIoConcurrency) return false;
      if (EffectiveCacheSize != other.EffectiveCacheSize) return false;
      if(!sharedPreloadLibraries_.Equals(other.sharedPreloadLibraries_)) return false;
      if (AutoExplainLogMinDuration != other.AutoExplainLogMinDuration) return false;
      if (AutoExplainLogAnalyze != other.AutoExplainLogAnalyze) return false;
      if (AutoExplainLogBuffers != other.AutoExplainLogBuffers) return false;
      if (AutoExplainLogTiming != other.AutoExplainLogTiming) return false;
      if (AutoExplainLogTriggers != other.AutoExplainLogTriggers) return false;
      if (AutoExplainLogVerbose != other.AutoExplainLogVerbose) return false;
      if (AutoExplainLogNestedStatements != other.AutoExplainLogNestedStatements) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(AutoExplainSampleRate, other.AutoExplainSampleRate)) return false;
      if (PgHintPlanEnableHint != other.PgHintPlanEnableHint) return false;
      if (PgHintPlanEnableHintTable != other.PgHintPlanEnableHintTable) return false;
      if (PgHintPlanDebugPrint != other.PgHintPlanDebugPrint) return false;
      if (PgHintPlanMessageLevel != other.PgHintPlanMessageLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (sharedBuffers_ != null) hash ^= SharedBuffers.GetHashCode();
      if (tempBuffers_ != null) hash ^= TempBuffers.GetHashCode();
      if (maxPreparedTransactions_ != null) hash ^= MaxPreparedTransactions.GetHashCode();
      if (workMem_ != null) hash ^= WorkMem.GetHashCode();
      if (maintenanceWorkMem_ != null) hash ^= MaintenanceWorkMem.GetHashCode();
      if (autovacuumWorkMem_ != null) hash ^= AutovacuumWorkMem.GetHashCode();
      if (tempFileLimit_ != null) hash ^= TempFileLimit.GetHashCode();
      if (vacuumCostDelay_ != null) hash ^= VacuumCostDelay.GetHashCode();
      if (vacuumCostPageHit_ != null) hash ^= VacuumCostPageHit.GetHashCode();
      if (vacuumCostPageMiss_ != null) hash ^= VacuumCostPageMiss.GetHashCode();
      if (vacuumCostPageDirty_ != null) hash ^= VacuumCostPageDirty.GetHashCode();
      if (vacuumCostLimit_ != null) hash ^= VacuumCostLimit.GetHashCode();
      if (bgwriterDelay_ != null) hash ^= BgwriterDelay.GetHashCode();
      if (bgwriterLruMaxpages_ != null) hash ^= BgwriterLruMaxpages.GetHashCode();
      if (bgwriterLruMultiplier_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BgwriterLruMultiplier);
      if (bgwriterFlushAfter_ != null) hash ^= BgwriterFlushAfter.GetHashCode();
      if (backendFlushAfter_ != null) hash ^= BackendFlushAfter.GetHashCode();
      if (oldSnapshotThreshold_ != null) hash ^= OldSnapshotThreshold.GetHashCode();
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel.Unspecified) hash ^= WalLevel.GetHashCode();
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit.Unspecified) hash ^= SynchronousCommit.GetHashCode();
      if (checkpointTimeout_ != null) hash ^= CheckpointTimeout.GetHashCode();
      if (checkpointCompletionTarget_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CheckpointCompletionTarget);
      if (checkpointFlushAfter_ != null) hash ^= CheckpointFlushAfter.GetHashCode();
      if (maxWalSize_ != null) hash ^= MaxWalSize.GetHashCode();
      if (minWalSize_ != null) hash ^= MinWalSize.GetHashCode();
      if (maxStandbyStreamingDelay_ != null) hash ^= MaxStandbyStreamingDelay.GetHashCode();
      if (defaultStatisticsTarget_ != null) hash ^= DefaultStatisticsTarget.GetHashCode();
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion.Unspecified) hash ^= ConstraintExclusion.GetHashCode();
      if (cursorTupleFraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CursorTupleFraction);
      if (fromCollapseLimit_ != null) hash ^= FromCollapseLimit.GetHashCode();
      if (joinCollapseLimit_ != null) hash ^= JoinCollapseLimit.GetHashCode();
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode.Unspecified) hash ^= ForceParallelMode.GetHashCode();
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) hash ^= ClientMinMessages.GetHashCode();
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) hash ^= LogMinMessages.GetHashCode();
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) hash ^= LogMinErrorStatement.GetHashCode();
      if (logMinDurationStatement_ != null) hash ^= LogMinDurationStatement.GetHashCode();
      if (logCheckpoints_ != null) hash ^= LogCheckpoints.GetHashCode();
      if (logConnections_ != null) hash ^= LogConnections.GetHashCode();
      if (logDisconnections_ != null) hash ^= LogDisconnections.GetHashCode();
      if (logDuration_ != null) hash ^= LogDuration.GetHashCode();
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity.Unspecified) hash ^= LogErrorVerbosity.GetHashCode();
      if (logLockWaits_ != null) hash ^= LogLockWaits.GetHashCode();
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement.Unspecified) hash ^= LogStatement.GetHashCode();
      if (logTempFiles_ != null) hash ^= LogTempFiles.GetHashCode();
      if (SearchPath.Length != 0) hash ^= SearchPath.GetHashCode();
      if (rowSecurity_ != null) hash ^= RowSecurity.GetHashCode();
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation.Unspecified) hash ^= DefaultTransactionIsolation.GetHashCode();
      if (statementTimeout_ != null) hash ^= StatementTimeout.GetHashCode();
      if (lockTimeout_ != null) hash ^= LockTimeout.GetHashCode();
      if (idleInTransactionSessionTimeout_ != null) hash ^= IdleInTransactionSessionTimeout.GetHashCode();
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput.Unspecified) hash ^= ByteaOutput.GetHashCode();
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary.Unspecified) hash ^= Xmlbinary.GetHashCode();
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption.Unspecified) hash ^= Xmloption.GetHashCode();
      if (ginPendingListLimit_ != null) hash ^= GinPendingListLimit.GetHashCode();
      if (deadlockTimeout_ != null) hash ^= DeadlockTimeout.GetHashCode();
      if (maxLocksPerTransaction_ != null) hash ^= MaxLocksPerTransaction.GetHashCode();
      if (maxPredLocksPerTransaction_ != null) hash ^= MaxPredLocksPerTransaction.GetHashCode();
      if (arrayNulls_ != null) hash ^= ArrayNulls.GetHashCode();
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote.Unspecified) hash ^= BackslashQuote.GetHashCode();
      if (defaultWithOids_ != null) hash ^= DefaultWithOids.GetHashCode();
      if (escapeStringWarning_ != null) hash ^= EscapeStringWarning.GetHashCode();
      if (loCompatPrivileges_ != null) hash ^= LoCompatPrivileges.GetHashCode();
      if (operatorPrecedenceWarning_ != null) hash ^= OperatorPrecedenceWarning.GetHashCode();
      if (quoteAllIdentifiers_ != null) hash ^= QuoteAllIdentifiers.GetHashCode();
      if (standardConformingStrings_ != null) hash ^= StandardConformingStrings.GetHashCode();
      if (synchronizeSeqscans_ != null) hash ^= SynchronizeSeqscans.GetHashCode();
      if (transformNullEquals_ != null) hash ^= TransformNullEquals.GetHashCode();
      if (exitOnError_ != null) hash ^= ExitOnError.GetHashCode();
      if (seqPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SeqPageCost);
      if (randomPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RandomPageCost);
      if (autovacuumMaxWorkers_ != null) hash ^= AutovacuumMaxWorkers.GetHashCode();
      if (autovacuumVacuumCostDelay_ != null) hash ^= AutovacuumVacuumCostDelay.GetHashCode();
      if (autovacuumVacuumCostLimit_ != null) hash ^= AutovacuumVacuumCostLimit.GetHashCode();
      if (autovacuumNaptime_ != null) hash ^= AutovacuumNaptime.GetHashCode();
      if (archiveTimeout_ != null) hash ^= ArchiveTimeout.GetHashCode();
      if (trackActivityQuerySize_ != null) hash ^= TrackActivityQuerySize.GetHashCode();
      if (enableBitmapscan_ != null) hash ^= EnableBitmapscan.GetHashCode();
      if (enableHashagg_ != null) hash ^= EnableHashagg.GetHashCode();
      if (enableHashjoin_ != null) hash ^= EnableHashjoin.GetHashCode();
      if (enableIndexscan_ != null) hash ^= EnableIndexscan.GetHashCode();
      if (enableIndexonlyscan_ != null) hash ^= EnableIndexonlyscan.GetHashCode();
      if (enableMaterial_ != null) hash ^= EnableMaterial.GetHashCode();
      if (enableMergejoin_ != null) hash ^= EnableMergejoin.GetHashCode();
      if (enableNestloop_ != null) hash ^= EnableNestloop.GetHashCode();
      if (enableSeqscan_ != null) hash ^= EnableSeqscan.GetHashCode();
      if (enableSort_ != null) hash ^= EnableSort.GetHashCode();
      if (enableTidscan_ != null) hash ^= EnableTidscan.GetHashCode();
      if (maxWorkerProcesses_ != null) hash ^= MaxWorkerProcesses.GetHashCode();
      if (maxParallelWorkers_ != null) hash ^= MaxParallelWorkers.GetHashCode();
      if (maxParallelWorkersPerGather_ != null) hash ^= MaxParallelWorkersPerGather.GetHashCode();
      if (autovacuumVacuumScaleFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AutovacuumVacuumScaleFactor);
      if (autovacuumAnalyzeScaleFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AutovacuumAnalyzeScaleFactor);
      if (defaultTransactionReadOnly_ != null) hash ^= DefaultTransactionReadOnly.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (enableParallelAppend_ != null) hash ^= EnableParallelAppend.GetHashCode();
      if (enableParallelHash_ != null) hash ^= EnableParallelHash.GetHashCode();
      if (enablePartitionPruning_ != null) hash ^= EnablePartitionPruning.GetHashCode();
      if (enablePartitionwiseAggregate_ != null) hash ^= EnablePartitionwiseAggregate.GetHashCode();
      if (enablePartitionwiseJoin_ != null) hash ^= EnablePartitionwiseJoin.GetHashCode();
      if (jit_ != null) hash ^= Jit.GetHashCode();
      if (maxParallelMaintenanceWorkers_ != null) hash ^= MaxParallelMaintenanceWorkers.GetHashCode();
      if (parallelLeaderParticipation_ != null) hash ^= ParallelLeaderParticipation.GetHashCode();
      if (vacuumCleanupIndexScaleFactor_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(VacuumCleanupIndexScaleFactor);
      if (effectiveIoConcurrency_ != null) hash ^= EffectiveIoConcurrency.GetHashCode();
      if (effectiveCacheSize_ != null) hash ^= EffectiveCacheSize.GetHashCode();
      hash ^= sharedPreloadLibraries_.GetHashCode();
      if (autoExplainLogMinDuration_ != null) hash ^= AutoExplainLogMinDuration.GetHashCode();
      if (autoExplainLogAnalyze_ != null) hash ^= AutoExplainLogAnalyze.GetHashCode();
      if (autoExplainLogBuffers_ != null) hash ^= AutoExplainLogBuffers.GetHashCode();
      if (autoExplainLogTiming_ != null) hash ^= AutoExplainLogTiming.GetHashCode();
      if (autoExplainLogTriggers_ != null) hash ^= AutoExplainLogTriggers.GetHashCode();
      if (autoExplainLogVerbose_ != null) hash ^= AutoExplainLogVerbose.GetHashCode();
      if (autoExplainLogNestedStatements_ != null) hash ^= AutoExplainLogNestedStatements.GetHashCode();
      if (autoExplainSampleRate_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(AutoExplainSampleRate);
      if (pgHintPlanEnableHint_ != null) hash ^= PgHintPlanEnableHint.GetHashCode();
      if (pgHintPlanEnableHintTable_ != null) hash ^= PgHintPlanEnableHintTable.GetHashCode();
      if (PgHintPlanDebugPrint != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint.Unspecified) hash ^= PgHintPlanDebugPrint.GetHashCode();
      if (PgHintPlanMessageLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) hash ^= PgHintPlanMessageLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (maxConnections_ != null) {
        _single_maxConnections_codec.WriteTagAndValue(output, MaxConnections);
      }
      if (sharedBuffers_ != null) {
        _single_sharedBuffers_codec.WriteTagAndValue(output, SharedBuffers);
      }
      if (tempBuffers_ != null) {
        _single_tempBuffers_codec.WriteTagAndValue(output, TempBuffers);
      }
      if (maxPreparedTransactions_ != null) {
        _single_maxPreparedTransactions_codec.WriteTagAndValue(output, MaxPreparedTransactions);
      }
      if (workMem_ != null) {
        _single_workMem_codec.WriteTagAndValue(output, WorkMem);
      }
      if (maintenanceWorkMem_ != null) {
        _single_maintenanceWorkMem_codec.WriteTagAndValue(output, MaintenanceWorkMem);
      }
      if (autovacuumWorkMem_ != null) {
        _single_autovacuumWorkMem_codec.WriteTagAndValue(output, AutovacuumWorkMem);
      }
      if (tempFileLimit_ != null) {
        _single_tempFileLimit_codec.WriteTagAndValue(output, TempFileLimit);
      }
      if (vacuumCostDelay_ != null) {
        _single_vacuumCostDelay_codec.WriteTagAndValue(output, VacuumCostDelay);
      }
      if (vacuumCostPageHit_ != null) {
        _single_vacuumCostPageHit_codec.WriteTagAndValue(output, VacuumCostPageHit);
      }
      if (vacuumCostPageMiss_ != null) {
        _single_vacuumCostPageMiss_codec.WriteTagAndValue(output, VacuumCostPageMiss);
      }
      if (vacuumCostPageDirty_ != null) {
        _single_vacuumCostPageDirty_codec.WriteTagAndValue(output, VacuumCostPageDirty);
      }
      if (vacuumCostLimit_ != null) {
        _single_vacuumCostLimit_codec.WriteTagAndValue(output, VacuumCostLimit);
      }
      if (bgwriterDelay_ != null) {
        _single_bgwriterDelay_codec.WriteTagAndValue(output, BgwriterDelay);
      }
      if (bgwriterLruMaxpages_ != null) {
        _single_bgwriterLruMaxpages_codec.WriteTagAndValue(output, BgwriterLruMaxpages);
      }
      if (bgwriterLruMultiplier_ != null) {
        _single_bgwriterLruMultiplier_codec.WriteTagAndValue(output, BgwriterLruMultiplier);
      }
      if (bgwriterFlushAfter_ != null) {
        _single_bgwriterFlushAfter_codec.WriteTagAndValue(output, BgwriterFlushAfter);
      }
      if (backendFlushAfter_ != null) {
        _single_backendFlushAfter_codec.WriteTagAndValue(output, BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        _single_oldSnapshotThreshold_codec.WriteTagAndValue(output, OldSnapshotThreshold);
      }
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) WalLevel);
      }
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) SynchronousCommit);
      }
      if (checkpointTimeout_ != null) {
        _single_checkpointTimeout_codec.WriteTagAndValue(output, CheckpointTimeout);
      }
      if (checkpointCompletionTarget_ != null) {
        _single_checkpointCompletionTarget_codec.WriteTagAndValue(output, CheckpointCompletionTarget);
      }
      if (checkpointFlushAfter_ != null) {
        _single_checkpointFlushAfter_codec.WriteTagAndValue(output, CheckpointFlushAfter);
      }
      if (maxWalSize_ != null) {
        _single_maxWalSize_codec.WriteTagAndValue(output, MaxWalSize);
      }
      if (minWalSize_ != null) {
        _single_minWalSize_codec.WriteTagAndValue(output, MinWalSize);
      }
      if (maxStandbyStreamingDelay_ != null) {
        _single_maxStandbyStreamingDelay_codec.WriteTagAndValue(output, MaxStandbyStreamingDelay);
      }
      if (defaultStatisticsTarget_ != null) {
        _single_defaultStatisticsTarget_codec.WriteTagAndValue(output, DefaultStatisticsTarget);
      }
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        _single_cursorTupleFraction_codec.WriteTagAndValue(output, CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        _single_fromCollapseLimit_codec.WriteTagAndValue(output, FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        _single_joinCollapseLimit_codec.WriteTagAndValue(output, JoinCollapseLimit);
      }
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode.Unspecified) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) ForceParallelMode);
      }
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) ClientMinMessages);
      }
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) LogMinMessages);
      }
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        output.WriteRawTag(160, 2);
        output.WriteEnum((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        _single_logMinDurationStatement_codec.WriteTagAndValue(output, LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        _single_logCheckpoints_codec.WriteTagAndValue(output, LogCheckpoints);
      }
      if (logConnections_ != null) {
        _single_logConnections_codec.WriteTagAndValue(output, LogConnections);
      }
      if (logDisconnections_ != null) {
        _single_logDisconnections_codec.WriteTagAndValue(output, LogDisconnections);
      }
      if (logDuration_ != null) {
        _single_logDuration_codec.WriteTagAndValue(output, LogDuration);
      }
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity.Unspecified) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        _single_logLockWaits_codec.WriteTagAndValue(output, LogLockWaits);
      }
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement.Unspecified) {
        output.WriteRawTag(224, 2);
        output.WriteEnum((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        _single_logTempFiles_codec.WriteTagAndValue(output, LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(SearchPath);
      }
      if (rowSecurity_ != null) {
        _single_rowSecurity_codec.WriteTagAndValue(output, RowSecurity);
      }
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation.Unspecified) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        _single_statementTimeout_codec.WriteTagAndValue(output, StatementTimeout);
      }
      if (lockTimeout_ != null) {
        _single_lockTimeout_codec.WriteTagAndValue(output, LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        _single_idleInTransactionSessionTimeout_codec.WriteTagAndValue(output, IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput.Unspecified) {
        output.WriteRawTag(160, 3);
        output.WriteEnum((int) ByteaOutput);
      }
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary.Unspecified) {
        output.WriteRawTag(168, 3);
        output.WriteEnum((int) Xmlbinary);
      }
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption.Unspecified) {
        output.WriteRawTag(176, 3);
        output.WriteEnum((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        _single_ginPendingListLimit_codec.WriteTagAndValue(output, GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        _single_deadlockTimeout_codec.WriteTagAndValue(output, DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        _single_maxLocksPerTransaction_codec.WriteTagAndValue(output, MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        _single_maxPredLocksPerTransaction_codec.WriteTagAndValue(output, MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        _single_arrayNulls_codec.WriteTagAndValue(output, ArrayNulls);
      }
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote.Unspecified) {
        output.WriteRawTag(224, 3);
        output.WriteEnum((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        _single_defaultWithOids_codec.WriteTagAndValue(output, DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        _single_escapeStringWarning_codec.WriteTagAndValue(output, EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        _single_loCompatPrivileges_codec.WriteTagAndValue(output, LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        _single_operatorPrecedenceWarning_codec.WriteTagAndValue(output, OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        _single_quoteAllIdentifiers_codec.WriteTagAndValue(output, QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        _single_standardConformingStrings_codec.WriteTagAndValue(output, StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        _single_synchronizeSeqscans_codec.WriteTagAndValue(output, SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        _single_transformNullEquals_codec.WriteTagAndValue(output, TransformNullEquals);
      }
      if (exitOnError_ != null) {
        _single_exitOnError_codec.WriteTagAndValue(output, ExitOnError);
      }
      if (seqPageCost_ != null) {
        _single_seqPageCost_codec.WriteTagAndValue(output, SeqPageCost);
      }
      if (randomPageCost_ != null) {
        _single_randomPageCost_codec.WriteTagAndValue(output, RandomPageCost);
      }
      if (autovacuumMaxWorkers_ != null) {
        _single_autovacuumMaxWorkers_codec.WriteTagAndValue(output, AutovacuumMaxWorkers);
      }
      if (autovacuumVacuumCostDelay_ != null) {
        _single_autovacuumVacuumCostDelay_codec.WriteTagAndValue(output, AutovacuumVacuumCostDelay);
      }
      if (autovacuumVacuumCostLimit_ != null) {
        _single_autovacuumVacuumCostLimit_codec.WriteTagAndValue(output, AutovacuumVacuumCostLimit);
      }
      if (autovacuumNaptime_ != null) {
        _single_autovacuumNaptime_codec.WriteTagAndValue(output, AutovacuumNaptime);
      }
      if (archiveTimeout_ != null) {
        _single_archiveTimeout_codec.WriteTagAndValue(output, ArchiveTimeout);
      }
      if (trackActivityQuerySize_ != null) {
        _single_trackActivityQuerySize_codec.WriteTagAndValue(output, TrackActivityQuerySize);
      }
      if (enableBitmapscan_ != null) {
        _single_enableBitmapscan_codec.WriteTagAndValue(output, EnableBitmapscan);
      }
      if (enableHashagg_ != null) {
        _single_enableHashagg_codec.WriteTagAndValue(output, EnableHashagg);
      }
      if (enableHashjoin_ != null) {
        _single_enableHashjoin_codec.WriteTagAndValue(output, EnableHashjoin);
      }
      if (enableIndexscan_ != null) {
        _single_enableIndexscan_codec.WriteTagAndValue(output, EnableIndexscan);
      }
      if (enableIndexonlyscan_ != null) {
        _single_enableIndexonlyscan_codec.WriteTagAndValue(output, EnableIndexonlyscan);
      }
      if (enableMaterial_ != null) {
        _single_enableMaterial_codec.WriteTagAndValue(output, EnableMaterial);
      }
      if (enableMergejoin_ != null) {
        _single_enableMergejoin_codec.WriteTagAndValue(output, EnableMergejoin);
      }
      if (enableNestloop_ != null) {
        _single_enableNestloop_codec.WriteTagAndValue(output, EnableNestloop);
      }
      if (enableSeqscan_ != null) {
        _single_enableSeqscan_codec.WriteTagAndValue(output, EnableSeqscan);
      }
      if (enableSort_ != null) {
        _single_enableSort_codec.WriteTagAndValue(output, EnableSort);
      }
      if (enableTidscan_ != null) {
        _single_enableTidscan_codec.WriteTagAndValue(output, EnableTidscan);
      }
      if (maxWorkerProcesses_ != null) {
        _single_maxWorkerProcesses_codec.WriteTagAndValue(output, MaxWorkerProcesses);
      }
      if (maxParallelWorkers_ != null) {
        _single_maxParallelWorkers_codec.WriteTagAndValue(output, MaxParallelWorkers);
      }
      if (maxParallelWorkersPerGather_ != null) {
        _single_maxParallelWorkersPerGather_codec.WriteTagAndValue(output, MaxParallelWorkersPerGather);
      }
      if (autovacuumVacuumScaleFactor_ != null) {
        _single_autovacuumVacuumScaleFactor_codec.WriteTagAndValue(output, AutovacuumVacuumScaleFactor);
      }
      if (autovacuumAnalyzeScaleFactor_ != null) {
        _single_autovacuumAnalyzeScaleFactor_codec.WriteTagAndValue(output, AutovacuumAnalyzeScaleFactor);
      }
      if (defaultTransactionReadOnly_ != null) {
        _single_defaultTransactionReadOnly_codec.WriteTagAndValue(output, DefaultTransactionReadOnly);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(138, 6);
        output.WriteString(Timezone);
      }
      if (enableParallelAppend_ != null) {
        _single_enableParallelAppend_codec.WriteTagAndValue(output, EnableParallelAppend);
      }
      if (enableParallelHash_ != null) {
        _single_enableParallelHash_codec.WriteTagAndValue(output, EnableParallelHash);
      }
      if (enablePartitionPruning_ != null) {
        _single_enablePartitionPruning_codec.WriteTagAndValue(output, EnablePartitionPruning);
      }
      if (enablePartitionwiseAggregate_ != null) {
        _single_enablePartitionwiseAggregate_codec.WriteTagAndValue(output, EnablePartitionwiseAggregate);
      }
      if (enablePartitionwiseJoin_ != null) {
        _single_enablePartitionwiseJoin_codec.WriteTagAndValue(output, EnablePartitionwiseJoin);
      }
      if (jit_ != null) {
        _single_jit_codec.WriteTagAndValue(output, Jit);
      }
      if (maxParallelMaintenanceWorkers_ != null) {
        _single_maxParallelMaintenanceWorkers_codec.WriteTagAndValue(output, MaxParallelMaintenanceWorkers);
      }
      if (parallelLeaderParticipation_ != null) {
        _single_parallelLeaderParticipation_codec.WriteTagAndValue(output, ParallelLeaderParticipation);
      }
      if (vacuumCleanupIndexScaleFactor_ != null) {
        _single_vacuumCleanupIndexScaleFactor_codec.WriteTagAndValue(output, VacuumCleanupIndexScaleFactor);
      }
      if (effectiveIoConcurrency_ != null) {
        _single_effectiveIoConcurrency_codec.WriteTagAndValue(output, EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        _single_effectiveCacheSize_codec.WriteTagAndValue(output, EffectiveCacheSize);
      }
      sharedPreloadLibraries_.WriteTo(output, _repeated_sharedPreloadLibraries_codec);
      if (autoExplainLogMinDuration_ != null) {
        _single_autoExplainLogMinDuration_codec.WriteTagAndValue(output, AutoExplainLogMinDuration);
      }
      if (autoExplainLogAnalyze_ != null) {
        _single_autoExplainLogAnalyze_codec.WriteTagAndValue(output, AutoExplainLogAnalyze);
      }
      if (autoExplainLogBuffers_ != null) {
        _single_autoExplainLogBuffers_codec.WriteTagAndValue(output, AutoExplainLogBuffers);
      }
      if (autoExplainLogTiming_ != null) {
        _single_autoExplainLogTiming_codec.WriteTagAndValue(output, AutoExplainLogTiming);
      }
      if (autoExplainLogTriggers_ != null) {
        _single_autoExplainLogTriggers_codec.WriteTagAndValue(output, AutoExplainLogTriggers);
      }
      if (autoExplainLogVerbose_ != null) {
        _single_autoExplainLogVerbose_codec.WriteTagAndValue(output, AutoExplainLogVerbose);
      }
      if (autoExplainLogNestedStatements_ != null) {
        _single_autoExplainLogNestedStatements_codec.WriteTagAndValue(output, AutoExplainLogNestedStatements);
      }
      if (autoExplainSampleRate_ != null) {
        _single_autoExplainSampleRate_codec.WriteTagAndValue(output, AutoExplainSampleRate);
      }
      if (pgHintPlanEnableHint_ != null) {
        _single_pgHintPlanEnableHint_codec.WriteTagAndValue(output, PgHintPlanEnableHint);
      }
      if (pgHintPlanEnableHintTable_ != null) {
        _single_pgHintPlanEnableHintTable_codec.WriteTagAndValue(output, PgHintPlanEnableHintTable);
      }
      if (PgHintPlanDebugPrint != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint.Unspecified) {
        output.WriteRawTag(192, 7);
        output.WriteEnum((int) PgHintPlanDebugPrint);
      }
      if (PgHintPlanMessageLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        output.WriteRawTag(200, 7);
        output.WriteEnum((int) PgHintPlanMessageLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (maxConnections_ != null) {
        size += _single_maxConnections_codec.CalculateSizeWithTag(MaxConnections);
      }
      if (sharedBuffers_ != null) {
        size += _single_sharedBuffers_codec.CalculateSizeWithTag(SharedBuffers);
      }
      if (tempBuffers_ != null) {
        size += _single_tempBuffers_codec.CalculateSizeWithTag(TempBuffers);
      }
      if (maxPreparedTransactions_ != null) {
        size += _single_maxPreparedTransactions_codec.CalculateSizeWithTag(MaxPreparedTransactions);
      }
      if (workMem_ != null) {
        size += _single_workMem_codec.CalculateSizeWithTag(WorkMem);
      }
      if (maintenanceWorkMem_ != null) {
        size += _single_maintenanceWorkMem_codec.CalculateSizeWithTag(MaintenanceWorkMem);
      }
      if (autovacuumWorkMem_ != null) {
        size += _single_autovacuumWorkMem_codec.CalculateSizeWithTag(AutovacuumWorkMem);
      }
      if (tempFileLimit_ != null) {
        size += _single_tempFileLimit_codec.CalculateSizeWithTag(TempFileLimit);
      }
      if (vacuumCostDelay_ != null) {
        size += _single_vacuumCostDelay_codec.CalculateSizeWithTag(VacuumCostDelay);
      }
      if (vacuumCostPageHit_ != null) {
        size += _single_vacuumCostPageHit_codec.CalculateSizeWithTag(VacuumCostPageHit);
      }
      if (vacuumCostPageMiss_ != null) {
        size += _single_vacuumCostPageMiss_codec.CalculateSizeWithTag(VacuumCostPageMiss);
      }
      if (vacuumCostPageDirty_ != null) {
        size += _single_vacuumCostPageDirty_codec.CalculateSizeWithTag(VacuumCostPageDirty);
      }
      if (vacuumCostLimit_ != null) {
        size += _single_vacuumCostLimit_codec.CalculateSizeWithTag(VacuumCostLimit);
      }
      if (bgwriterDelay_ != null) {
        size += _single_bgwriterDelay_codec.CalculateSizeWithTag(BgwriterDelay);
      }
      if (bgwriterLruMaxpages_ != null) {
        size += _single_bgwriterLruMaxpages_codec.CalculateSizeWithTag(BgwriterLruMaxpages);
      }
      if (bgwriterLruMultiplier_ != null) {
        size += _single_bgwriterLruMultiplier_codec.CalculateSizeWithTag(BgwriterLruMultiplier);
      }
      if (bgwriterFlushAfter_ != null) {
        size += _single_bgwriterFlushAfter_codec.CalculateSizeWithTag(BgwriterFlushAfter);
      }
      if (backendFlushAfter_ != null) {
        size += _single_backendFlushAfter_codec.CalculateSizeWithTag(BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        size += _single_oldSnapshotThreshold_codec.CalculateSizeWithTag(OldSnapshotThreshold);
      }
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WalLevel);
      }
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SynchronousCommit);
      }
      if (checkpointTimeout_ != null) {
        size += _single_checkpointTimeout_codec.CalculateSizeWithTag(CheckpointTimeout);
      }
      if (checkpointCompletionTarget_ != null) {
        size += _single_checkpointCompletionTarget_codec.CalculateSizeWithTag(CheckpointCompletionTarget);
      }
      if (checkpointFlushAfter_ != null) {
        size += _single_checkpointFlushAfter_codec.CalculateSizeWithTag(CheckpointFlushAfter);
      }
      if (maxWalSize_ != null) {
        size += _single_maxWalSize_codec.CalculateSizeWithTag(MaxWalSize);
      }
      if (minWalSize_ != null) {
        size += _single_minWalSize_codec.CalculateSizeWithTag(MinWalSize);
      }
      if (maxStandbyStreamingDelay_ != null) {
        size += _single_maxStandbyStreamingDelay_codec.CalculateSizeWithTag(MaxStandbyStreamingDelay);
      }
      if (defaultStatisticsTarget_ != null) {
        size += _single_defaultStatisticsTarget_codec.CalculateSizeWithTag(DefaultStatisticsTarget);
      }
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        size += _single_cursorTupleFraction_codec.CalculateSizeWithTag(CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        size += _single_fromCollapseLimit_codec.CalculateSizeWithTag(FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        size += _single_joinCollapseLimit_codec.CalculateSizeWithTag(JoinCollapseLimit);
      }
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ForceParallelMode);
      }
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClientMinMessages);
      }
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinMessages);
      }
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        size += _single_logMinDurationStatement_codec.CalculateSizeWithTag(LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        size += _single_logCheckpoints_codec.CalculateSizeWithTag(LogCheckpoints);
      }
      if (logConnections_ != null) {
        size += _single_logConnections_codec.CalculateSizeWithTag(LogConnections);
      }
      if (logDisconnections_ != null) {
        size += _single_logDisconnections_codec.CalculateSizeWithTag(LogDisconnections);
      }
      if (logDuration_ != null) {
        size += _single_logDuration_codec.CalculateSizeWithTag(LogDuration);
      }
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        size += _single_logLockWaits_codec.CalculateSizeWithTag(LogLockWaits);
      }
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        size += _single_logTempFiles_codec.CalculateSizeWithTag(LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SearchPath);
      }
      if (rowSecurity_ != null) {
        size += _single_rowSecurity_codec.CalculateSizeWithTag(RowSecurity);
      }
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        size += _single_statementTimeout_codec.CalculateSizeWithTag(StatementTimeout);
      }
      if (lockTimeout_ != null) {
        size += _single_lockTimeout_codec.CalculateSizeWithTag(LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        size += _single_idleInTransactionSessionTimeout_codec.CalculateSizeWithTag(IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ByteaOutput);
      }
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmlbinary);
      }
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        size += _single_ginPendingListLimit_codec.CalculateSizeWithTag(GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        size += _single_deadlockTimeout_codec.CalculateSizeWithTag(DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        size += _single_maxLocksPerTransaction_codec.CalculateSizeWithTag(MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        size += _single_maxPredLocksPerTransaction_codec.CalculateSizeWithTag(MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        size += _single_arrayNulls_codec.CalculateSizeWithTag(ArrayNulls);
      }
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        size += _single_defaultWithOids_codec.CalculateSizeWithTag(DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        size += _single_escapeStringWarning_codec.CalculateSizeWithTag(EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        size += _single_loCompatPrivileges_codec.CalculateSizeWithTag(LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        size += _single_operatorPrecedenceWarning_codec.CalculateSizeWithTag(OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        size += _single_quoteAllIdentifiers_codec.CalculateSizeWithTag(QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        size += _single_standardConformingStrings_codec.CalculateSizeWithTag(StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        size += _single_synchronizeSeqscans_codec.CalculateSizeWithTag(SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        size += _single_transformNullEquals_codec.CalculateSizeWithTag(TransformNullEquals);
      }
      if (exitOnError_ != null) {
        size += _single_exitOnError_codec.CalculateSizeWithTag(ExitOnError);
      }
      if (seqPageCost_ != null) {
        size += _single_seqPageCost_codec.CalculateSizeWithTag(SeqPageCost);
      }
      if (randomPageCost_ != null) {
        size += _single_randomPageCost_codec.CalculateSizeWithTag(RandomPageCost);
      }
      if (autovacuumMaxWorkers_ != null) {
        size += _single_autovacuumMaxWorkers_codec.CalculateSizeWithTag(AutovacuumMaxWorkers);
      }
      if (autovacuumVacuumCostDelay_ != null) {
        size += _single_autovacuumVacuumCostDelay_codec.CalculateSizeWithTag(AutovacuumVacuumCostDelay);
      }
      if (autovacuumVacuumCostLimit_ != null) {
        size += _single_autovacuumVacuumCostLimit_codec.CalculateSizeWithTag(AutovacuumVacuumCostLimit);
      }
      if (autovacuumNaptime_ != null) {
        size += _single_autovacuumNaptime_codec.CalculateSizeWithTag(AutovacuumNaptime);
      }
      if (archiveTimeout_ != null) {
        size += _single_archiveTimeout_codec.CalculateSizeWithTag(ArchiveTimeout);
      }
      if (trackActivityQuerySize_ != null) {
        size += _single_trackActivityQuerySize_codec.CalculateSizeWithTag(TrackActivityQuerySize);
      }
      if (enableBitmapscan_ != null) {
        size += _single_enableBitmapscan_codec.CalculateSizeWithTag(EnableBitmapscan);
      }
      if (enableHashagg_ != null) {
        size += _single_enableHashagg_codec.CalculateSizeWithTag(EnableHashagg);
      }
      if (enableHashjoin_ != null) {
        size += _single_enableHashjoin_codec.CalculateSizeWithTag(EnableHashjoin);
      }
      if (enableIndexscan_ != null) {
        size += _single_enableIndexscan_codec.CalculateSizeWithTag(EnableIndexscan);
      }
      if (enableIndexonlyscan_ != null) {
        size += _single_enableIndexonlyscan_codec.CalculateSizeWithTag(EnableIndexonlyscan);
      }
      if (enableMaterial_ != null) {
        size += _single_enableMaterial_codec.CalculateSizeWithTag(EnableMaterial);
      }
      if (enableMergejoin_ != null) {
        size += _single_enableMergejoin_codec.CalculateSizeWithTag(EnableMergejoin);
      }
      if (enableNestloop_ != null) {
        size += _single_enableNestloop_codec.CalculateSizeWithTag(EnableNestloop);
      }
      if (enableSeqscan_ != null) {
        size += _single_enableSeqscan_codec.CalculateSizeWithTag(EnableSeqscan);
      }
      if (enableSort_ != null) {
        size += _single_enableSort_codec.CalculateSizeWithTag(EnableSort);
      }
      if (enableTidscan_ != null) {
        size += _single_enableTidscan_codec.CalculateSizeWithTag(EnableTidscan);
      }
      if (maxWorkerProcesses_ != null) {
        size += _single_maxWorkerProcesses_codec.CalculateSizeWithTag(MaxWorkerProcesses);
      }
      if (maxParallelWorkers_ != null) {
        size += _single_maxParallelWorkers_codec.CalculateSizeWithTag(MaxParallelWorkers);
      }
      if (maxParallelWorkersPerGather_ != null) {
        size += _single_maxParallelWorkersPerGather_codec.CalculateSizeWithTag(MaxParallelWorkersPerGather);
      }
      if (autovacuumVacuumScaleFactor_ != null) {
        size += _single_autovacuumVacuumScaleFactor_codec.CalculateSizeWithTag(AutovacuumVacuumScaleFactor);
      }
      if (autovacuumAnalyzeScaleFactor_ != null) {
        size += _single_autovacuumAnalyzeScaleFactor_codec.CalculateSizeWithTag(AutovacuumAnalyzeScaleFactor);
      }
      if (defaultTransactionReadOnly_ != null) {
        size += _single_defaultTransactionReadOnly_codec.CalculateSizeWithTag(DefaultTransactionReadOnly);
      }
      if (Timezone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (enableParallelAppend_ != null) {
        size += _single_enableParallelAppend_codec.CalculateSizeWithTag(EnableParallelAppend);
      }
      if (enableParallelHash_ != null) {
        size += _single_enableParallelHash_codec.CalculateSizeWithTag(EnableParallelHash);
      }
      if (enablePartitionPruning_ != null) {
        size += _single_enablePartitionPruning_codec.CalculateSizeWithTag(EnablePartitionPruning);
      }
      if (enablePartitionwiseAggregate_ != null) {
        size += _single_enablePartitionwiseAggregate_codec.CalculateSizeWithTag(EnablePartitionwiseAggregate);
      }
      if (enablePartitionwiseJoin_ != null) {
        size += _single_enablePartitionwiseJoin_codec.CalculateSizeWithTag(EnablePartitionwiseJoin);
      }
      if (jit_ != null) {
        size += _single_jit_codec.CalculateSizeWithTag(Jit);
      }
      if (maxParallelMaintenanceWorkers_ != null) {
        size += _single_maxParallelMaintenanceWorkers_codec.CalculateSizeWithTag(MaxParallelMaintenanceWorkers);
      }
      if (parallelLeaderParticipation_ != null) {
        size += _single_parallelLeaderParticipation_codec.CalculateSizeWithTag(ParallelLeaderParticipation);
      }
      if (vacuumCleanupIndexScaleFactor_ != null) {
        size += _single_vacuumCleanupIndexScaleFactor_codec.CalculateSizeWithTag(VacuumCleanupIndexScaleFactor);
      }
      if (effectiveIoConcurrency_ != null) {
        size += _single_effectiveIoConcurrency_codec.CalculateSizeWithTag(EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        size += _single_effectiveCacheSize_codec.CalculateSizeWithTag(EffectiveCacheSize);
      }
      size += sharedPreloadLibraries_.CalculateSize(_repeated_sharedPreloadLibraries_codec);
      if (autoExplainLogMinDuration_ != null) {
        size += _single_autoExplainLogMinDuration_codec.CalculateSizeWithTag(AutoExplainLogMinDuration);
      }
      if (autoExplainLogAnalyze_ != null) {
        size += _single_autoExplainLogAnalyze_codec.CalculateSizeWithTag(AutoExplainLogAnalyze);
      }
      if (autoExplainLogBuffers_ != null) {
        size += _single_autoExplainLogBuffers_codec.CalculateSizeWithTag(AutoExplainLogBuffers);
      }
      if (autoExplainLogTiming_ != null) {
        size += _single_autoExplainLogTiming_codec.CalculateSizeWithTag(AutoExplainLogTiming);
      }
      if (autoExplainLogTriggers_ != null) {
        size += _single_autoExplainLogTriggers_codec.CalculateSizeWithTag(AutoExplainLogTriggers);
      }
      if (autoExplainLogVerbose_ != null) {
        size += _single_autoExplainLogVerbose_codec.CalculateSizeWithTag(AutoExplainLogVerbose);
      }
      if (autoExplainLogNestedStatements_ != null) {
        size += _single_autoExplainLogNestedStatements_codec.CalculateSizeWithTag(AutoExplainLogNestedStatements);
      }
      if (autoExplainSampleRate_ != null) {
        size += _single_autoExplainSampleRate_codec.CalculateSizeWithTag(AutoExplainSampleRate);
      }
      if (pgHintPlanEnableHint_ != null) {
        size += _single_pgHintPlanEnableHint_codec.CalculateSizeWithTag(PgHintPlanEnableHint);
      }
      if (pgHintPlanEnableHintTable_ != null) {
        size += _single_pgHintPlanEnableHintTable_codec.CalculateSizeWithTag(PgHintPlanEnableHintTable);
      }
      if (PgHintPlanDebugPrint != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PgHintPlanDebugPrint);
      }
      if (PgHintPlanMessageLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PgHintPlanMessageLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostgresqlConfig11 other) {
      if (other == null) {
        return;
      }
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null || other.MaxConnections != 0L) {
          MaxConnections = other.MaxConnections;
        }
      }
      if (other.sharedBuffers_ != null) {
        if (sharedBuffers_ == null || other.SharedBuffers != 0L) {
          SharedBuffers = other.SharedBuffers;
        }
      }
      if (other.tempBuffers_ != null) {
        if (tempBuffers_ == null || other.TempBuffers != 0L) {
          TempBuffers = other.TempBuffers;
        }
      }
      if (other.maxPreparedTransactions_ != null) {
        if (maxPreparedTransactions_ == null || other.MaxPreparedTransactions != 0L) {
          MaxPreparedTransactions = other.MaxPreparedTransactions;
        }
      }
      if (other.workMem_ != null) {
        if (workMem_ == null || other.WorkMem != 0L) {
          WorkMem = other.WorkMem;
        }
      }
      if (other.maintenanceWorkMem_ != null) {
        if (maintenanceWorkMem_ == null || other.MaintenanceWorkMem != 0L) {
          MaintenanceWorkMem = other.MaintenanceWorkMem;
        }
      }
      if (other.autovacuumWorkMem_ != null) {
        if (autovacuumWorkMem_ == null || other.AutovacuumWorkMem != 0L) {
          AutovacuumWorkMem = other.AutovacuumWorkMem;
        }
      }
      if (other.tempFileLimit_ != null) {
        if (tempFileLimit_ == null || other.TempFileLimit != 0L) {
          TempFileLimit = other.TempFileLimit;
        }
      }
      if (other.vacuumCostDelay_ != null) {
        if (vacuumCostDelay_ == null || other.VacuumCostDelay != 0L) {
          VacuumCostDelay = other.VacuumCostDelay;
        }
      }
      if (other.vacuumCostPageHit_ != null) {
        if (vacuumCostPageHit_ == null || other.VacuumCostPageHit != 0L) {
          VacuumCostPageHit = other.VacuumCostPageHit;
        }
      }
      if (other.vacuumCostPageMiss_ != null) {
        if (vacuumCostPageMiss_ == null || other.VacuumCostPageMiss != 0L) {
          VacuumCostPageMiss = other.VacuumCostPageMiss;
        }
      }
      if (other.vacuumCostPageDirty_ != null) {
        if (vacuumCostPageDirty_ == null || other.VacuumCostPageDirty != 0L) {
          VacuumCostPageDirty = other.VacuumCostPageDirty;
        }
      }
      if (other.vacuumCostLimit_ != null) {
        if (vacuumCostLimit_ == null || other.VacuumCostLimit != 0L) {
          VacuumCostLimit = other.VacuumCostLimit;
        }
      }
      if (other.bgwriterDelay_ != null) {
        if (bgwriterDelay_ == null || other.BgwriterDelay != 0L) {
          BgwriterDelay = other.BgwriterDelay;
        }
      }
      if (other.bgwriterLruMaxpages_ != null) {
        if (bgwriterLruMaxpages_ == null || other.BgwriterLruMaxpages != 0L) {
          BgwriterLruMaxpages = other.BgwriterLruMaxpages;
        }
      }
      if (other.bgwriterLruMultiplier_ != null) {
        if (bgwriterLruMultiplier_ == null || other.BgwriterLruMultiplier != 0D) {
          BgwriterLruMultiplier = other.BgwriterLruMultiplier;
        }
      }
      if (other.bgwriterFlushAfter_ != null) {
        if (bgwriterFlushAfter_ == null || other.BgwriterFlushAfter != 0L) {
          BgwriterFlushAfter = other.BgwriterFlushAfter;
        }
      }
      if (other.backendFlushAfter_ != null) {
        if (backendFlushAfter_ == null || other.BackendFlushAfter != 0L) {
          BackendFlushAfter = other.BackendFlushAfter;
        }
      }
      if (other.oldSnapshotThreshold_ != null) {
        if (oldSnapshotThreshold_ == null || other.OldSnapshotThreshold != 0L) {
          OldSnapshotThreshold = other.OldSnapshotThreshold;
        }
      }
      if (other.WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel.Unspecified) {
        WalLevel = other.WalLevel;
      }
      if (other.SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit.Unspecified) {
        SynchronousCommit = other.SynchronousCommit;
      }
      if (other.checkpointTimeout_ != null) {
        if (checkpointTimeout_ == null || other.CheckpointTimeout != 0L) {
          CheckpointTimeout = other.CheckpointTimeout;
        }
      }
      if (other.checkpointCompletionTarget_ != null) {
        if (checkpointCompletionTarget_ == null || other.CheckpointCompletionTarget != 0D) {
          CheckpointCompletionTarget = other.CheckpointCompletionTarget;
        }
      }
      if (other.checkpointFlushAfter_ != null) {
        if (checkpointFlushAfter_ == null || other.CheckpointFlushAfter != 0L) {
          CheckpointFlushAfter = other.CheckpointFlushAfter;
        }
      }
      if (other.maxWalSize_ != null) {
        if (maxWalSize_ == null || other.MaxWalSize != 0L) {
          MaxWalSize = other.MaxWalSize;
        }
      }
      if (other.minWalSize_ != null) {
        if (minWalSize_ == null || other.MinWalSize != 0L) {
          MinWalSize = other.MinWalSize;
        }
      }
      if (other.maxStandbyStreamingDelay_ != null) {
        if (maxStandbyStreamingDelay_ == null || other.MaxStandbyStreamingDelay != 0L) {
          MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
        }
      }
      if (other.defaultStatisticsTarget_ != null) {
        if (defaultStatisticsTarget_ == null || other.DefaultStatisticsTarget != 0L) {
          DefaultStatisticsTarget = other.DefaultStatisticsTarget;
        }
      }
      if (other.ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion.Unspecified) {
        ConstraintExclusion = other.ConstraintExclusion;
      }
      if (other.cursorTupleFraction_ != null) {
        if (cursorTupleFraction_ == null || other.CursorTupleFraction != 0D) {
          CursorTupleFraction = other.CursorTupleFraction;
        }
      }
      if (other.fromCollapseLimit_ != null) {
        if (fromCollapseLimit_ == null || other.FromCollapseLimit != 0L) {
          FromCollapseLimit = other.FromCollapseLimit;
        }
      }
      if (other.joinCollapseLimit_ != null) {
        if (joinCollapseLimit_ == null || other.JoinCollapseLimit != 0L) {
          JoinCollapseLimit = other.JoinCollapseLimit;
        }
      }
      if (other.ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode.Unspecified) {
        ForceParallelMode = other.ForceParallelMode;
      }
      if (other.ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        ClientMinMessages = other.ClientMinMessages;
      }
      if (other.LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        LogMinMessages = other.LogMinMessages;
      }
      if (other.LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        LogMinErrorStatement = other.LogMinErrorStatement;
      }
      if (other.logMinDurationStatement_ != null) {
        if (logMinDurationStatement_ == null || other.LogMinDurationStatement != 0L) {
          LogMinDurationStatement = other.LogMinDurationStatement;
        }
      }
      if (other.logCheckpoints_ != null) {
        if (logCheckpoints_ == null || other.LogCheckpoints != false) {
          LogCheckpoints = other.LogCheckpoints;
        }
      }
      if (other.logConnections_ != null) {
        if (logConnections_ == null || other.LogConnections != false) {
          LogConnections = other.LogConnections;
        }
      }
      if (other.logDisconnections_ != null) {
        if (logDisconnections_ == null || other.LogDisconnections != false) {
          LogDisconnections = other.LogDisconnections;
        }
      }
      if (other.logDuration_ != null) {
        if (logDuration_ == null || other.LogDuration != false) {
          LogDuration = other.LogDuration;
        }
      }
      if (other.LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity.Unspecified) {
        LogErrorVerbosity = other.LogErrorVerbosity;
      }
      if (other.logLockWaits_ != null) {
        if (logLockWaits_ == null || other.LogLockWaits != false) {
          LogLockWaits = other.LogLockWaits;
        }
      }
      if (other.LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement.Unspecified) {
        LogStatement = other.LogStatement;
      }
      if (other.logTempFiles_ != null) {
        if (logTempFiles_ == null || other.LogTempFiles != 0L) {
          LogTempFiles = other.LogTempFiles;
        }
      }
      if (other.SearchPath.Length != 0) {
        SearchPath = other.SearchPath;
      }
      if (other.rowSecurity_ != null) {
        if (rowSecurity_ == null || other.RowSecurity != false) {
          RowSecurity = other.RowSecurity;
        }
      }
      if (other.DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation.Unspecified) {
        DefaultTransactionIsolation = other.DefaultTransactionIsolation;
      }
      if (other.statementTimeout_ != null) {
        if (statementTimeout_ == null || other.StatementTimeout != 0L) {
          StatementTimeout = other.StatementTimeout;
        }
      }
      if (other.lockTimeout_ != null) {
        if (lockTimeout_ == null || other.LockTimeout != 0L) {
          LockTimeout = other.LockTimeout;
        }
      }
      if (other.idleInTransactionSessionTimeout_ != null) {
        if (idleInTransactionSessionTimeout_ == null || other.IdleInTransactionSessionTimeout != 0L) {
          IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
        }
      }
      if (other.ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput.Unspecified) {
        ByteaOutput = other.ByteaOutput;
      }
      if (other.Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary.Unspecified) {
        Xmlbinary = other.Xmlbinary;
      }
      if (other.Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption.Unspecified) {
        Xmloption = other.Xmloption;
      }
      if (other.ginPendingListLimit_ != null) {
        if (ginPendingListLimit_ == null || other.GinPendingListLimit != 0L) {
          GinPendingListLimit = other.GinPendingListLimit;
        }
      }
      if (other.deadlockTimeout_ != null) {
        if (deadlockTimeout_ == null || other.DeadlockTimeout != 0L) {
          DeadlockTimeout = other.DeadlockTimeout;
        }
      }
      if (other.maxLocksPerTransaction_ != null) {
        if (maxLocksPerTransaction_ == null || other.MaxLocksPerTransaction != 0L) {
          MaxLocksPerTransaction = other.MaxLocksPerTransaction;
        }
      }
      if (other.maxPredLocksPerTransaction_ != null) {
        if (maxPredLocksPerTransaction_ == null || other.MaxPredLocksPerTransaction != 0L) {
          MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
        }
      }
      if (other.arrayNulls_ != null) {
        if (arrayNulls_ == null || other.ArrayNulls != false) {
          ArrayNulls = other.ArrayNulls;
        }
      }
      if (other.BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote.Unspecified) {
        BackslashQuote = other.BackslashQuote;
      }
      if (other.defaultWithOids_ != null) {
        if (defaultWithOids_ == null || other.DefaultWithOids != false) {
          DefaultWithOids = other.DefaultWithOids;
        }
      }
      if (other.escapeStringWarning_ != null) {
        if (escapeStringWarning_ == null || other.EscapeStringWarning != false) {
          EscapeStringWarning = other.EscapeStringWarning;
        }
      }
      if (other.loCompatPrivileges_ != null) {
        if (loCompatPrivileges_ == null || other.LoCompatPrivileges != false) {
          LoCompatPrivileges = other.LoCompatPrivileges;
        }
      }
      if (other.operatorPrecedenceWarning_ != null) {
        if (operatorPrecedenceWarning_ == null || other.OperatorPrecedenceWarning != false) {
          OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
        }
      }
      if (other.quoteAllIdentifiers_ != null) {
        if (quoteAllIdentifiers_ == null || other.QuoteAllIdentifiers != false) {
          QuoteAllIdentifiers = other.QuoteAllIdentifiers;
        }
      }
      if (other.standardConformingStrings_ != null) {
        if (standardConformingStrings_ == null || other.StandardConformingStrings != false) {
          StandardConformingStrings = other.StandardConformingStrings;
        }
      }
      if (other.synchronizeSeqscans_ != null) {
        if (synchronizeSeqscans_ == null || other.SynchronizeSeqscans != false) {
          SynchronizeSeqscans = other.SynchronizeSeqscans;
        }
      }
      if (other.transformNullEquals_ != null) {
        if (transformNullEquals_ == null || other.TransformNullEquals != false) {
          TransformNullEquals = other.TransformNullEquals;
        }
      }
      if (other.exitOnError_ != null) {
        if (exitOnError_ == null || other.ExitOnError != false) {
          ExitOnError = other.ExitOnError;
        }
      }
      if (other.seqPageCost_ != null) {
        if (seqPageCost_ == null || other.SeqPageCost != 0D) {
          SeqPageCost = other.SeqPageCost;
        }
      }
      if (other.randomPageCost_ != null) {
        if (randomPageCost_ == null || other.RandomPageCost != 0D) {
          RandomPageCost = other.RandomPageCost;
        }
      }
      if (other.autovacuumMaxWorkers_ != null) {
        if (autovacuumMaxWorkers_ == null || other.AutovacuumMaxWorkers != 0L) {
          AutovacuumMaxWorkers = other.AutovacuumMaxWorkers;
        }
      }
      if (other.autovacuumVacuumCostDelay_ != null) {
        if (autovacuumVacuumCostDelay_ == null || other.AutovacuumVacuumCostDelay != 0L) {
          AutovacuumVacuumCostDelay = other.AutovacuumVacuumCostDelay;
        }
      }
      if (other.autovacuumVacuumCostLimit_ != null) {
        if (autovacuumVacuumCostLimit_ == null || other.AutovacuumVacuumCostLimit != 0L) {
          AutovacuumVacuumCostLimit = other.AutovacuumVacuumCostLimit;
        }
      }
      if (other.autovacuumNaptime_ != null) {
        if (autovacuumNaptime_ == null || other.AutovacuumNaptime != 0L) {
          AutovacuumNaptime = other.AutovacuumNaptime;
        }
      }
      if (other.archiveTimeout_ != null) {
        if (archiveTimeout_ == null || other.ArchiveTimeout != 0L) {
          ArchiveTimeout = other.ArchiveTimeout;
        }
      }
      if (other.trackActivityQuerySize_ != null) {
        if (trackActivityQuerySize_ == null || other.TrackActivityQuerySize != 0L) {
          TrackActivityQuerySize = other.TrackActivityQuerySize;
        }
      }
      if (other.enableBitmapscan_ != null) {
        if (enableBitmapscan_ == null || other.EnableBitmapscan != false) {
          EnableBitmapscan = other.EnableBitmapscan;
        }
      }
      if (other.enableHashagg_ != null) {
        if (enableHashagg_ == null || other.EnableHashagg != false) {
          EnableHashagg = other.EnableHashagg;
        }
      }
      if (other.enableHashjoin_ != null) {
        if (enableHashjoin_ == null || other.EnableHashjoin != false) {
          EnableHashjoin = other.EnableHashjoin;
        }
      }
      if (other.enableIndexscan_ != null) {
        if (enableIndexscan_ == null || other.EnableIndexscan != false) {
          EnableIndexscan = other.EnableIndexscan;
        }
      }
      if (other.enableIndexonlyscan_ != null) {
        if (enableIndexonlyscan_ == null || other.EnableIndexonlyscan != false) {
          EnableIndexonlyscan = other.EnableIndexonlyscan;
        }
      }
      if (other.enableMaterial_ != null) {
        if (enableMaterial_ == null || other.EnableMaterial != false) {
          EnableMaterial = other.EnableMaterial;
        }
      }
      if (other.enableMergejoin_ != null) {
        if (enableMergejoin_ == null || other.EnableMergejoin != false) {
          EnableMergejoin = other.EnableMergejoin;
        }
      }
      if (other.enableNestloop_ != null) {
        if (enableNestloop_ == null || other.EnableNestloop != false) {
          EnableNestloop = other.EnableNestloop;
        }
      }
      if (other.enableSeqscan_ != null) {
        if (enableSeqscan_ == null || other.EnableSeqscan != false) {
          EnableSeqscan = other.EnableSeqscan;
        }
      }
      if (other.enableSort_ != null) {
        if (enableSort_ == null || other.EnableSort != false) {
          EnableSort = other.EnableSort;
        }
      }
      if (other.enableTidscan_ != null) {
        if (enableTidscan_ == null || other.EnableTidscan != false) {
          EnableTidscan = other.EnableTidscan;
        }
      }
      if (other.maxWorkerProcesses_ != null) {
        if (maxWorkerProcesses_ == null || other.MaxWorkerProcesses != 0L) {
          MaxWorkerProcesses = other.MaxWorkerProcesses;
        }
      }
      if (other.maxParallelWorkers_ != null) {
        if (maxParallelWorkers_ == null || other.MaxParallelWorkers != 0L) {
          MaxParallelWorkers = other.MaxParallelWorkers;
        }
      }
      if (other.maxParallelWorkersPerGather_ != null) {
        if (maxParallelWorkersPerGather_ == null || other.MaxParallelWorkersPerGather != 0L) {
          MaxParallelWorkersPerGather = other.MaxParallelWorkersPerGather;
        }
      }
      if (other.autovacuumVacuumScaleFactor_ != null) {
        if (autovacuumVacuumScaleFactor_ == null || other.AutovacuumVacuumScaleFactor != 0D) {
          AutovacuumVacuumScaleFactor = other.AutovacuumVacuumScaleFactor;
        }
      }
      if (other.autovacuumAnalyzeScaleFactor_ != null) {
        if (autovacuumAnalyzeScaleFactor_ == null || other.AutovacuumAnalyzeScaleFactor != 0D) {
          AutovacuumAnalyzeScaleFactor = other.AutovacuumAnalyzeScaleFactor;
        }
      }
      if (other.defaultTransactionReadOnly_ != null) {
        if (defaultTransactionReadOnly_ == null || other.DefaultTransactionReadOnly != false) {
          DefaultTransactionReadOnly = other.DefaultTransactionReadOnly;
        }
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.enableParallelAppend_ != null) {
        if (enableParallelAppend_ == null || other.EnableParallelAppend != false) {
          EnableParallelAppend = other.EnableParallelAppend;
        }
      }
      if (other.enableParallelHash_ != null) {
        if (enableParallelHash_ == null || other.EnableParallelHash != false) {
          EnableParallelHash = other.EnableParallelHash;
        }
      }
      if (other.enablePartitionPruning_ != null) {
        if (enablePartitionPruning_ == null || other.EnablePartitionPruning != false) {
          EnablePartitionPruning = other.EnablePartitionPruning;
        }
      }
      if (other.enablePartitionwiseAggregate_ != null) {
        if (enablePartitionwiseAggregate_ == null || other.EnablePartitionwiseAggregate != false) {
          EnablePartitionwiseAggregate = other.EnablePartitionwiseAggregate;
        }
      }
      if (other.enablePartitionwiseJoin_ != null) {
        if (enablePartitionwiseJoin_ == null || other.EnablePartitionwiseJoin != false) {
          EnablePartitionwiseJoin = other.EnablePartitionwiseJoin;
        }
      }
      if (other.jit_ != null) {
        if (jit_ == null || other.Jit != false) {
          Jit = other.Jit;
        }
      }
      if (other.maxParallelMaintenanceWorkers_ != null) {
        if (maxParallelMaintenanceWorkers_ == null || other.MaxParallelMaintenanceWorkers != 0L) {
          MaxParallelMaintenanceWorkers = other.MaxParallelMaintenanceWorkers;
        }
      }
      if (other.parallelLeaderParticipation_ != null) {
        if (parallelLeaderParticipation_ == null || other.ParallelLeaderParticipation != false) {
          ParallelLeaderParticipation = other.ParallelLeaderParticipation;
        }
      }
      if (other.vacuumCleanupIndexScaleFactor_ != null) {
        if (vacuumCleanupIndexScaleFactor_ == null || other.VacuumCleanupIndexScaleFactor != 0D) {
          VacuumCleanupIndexScaleFactor = other.VacuumCleanupIndexScaleFactor;
        }
      }
      if (other.effectiveIoConcurrency_ != null) {
        if (effectiveIoConcurrency_ == null || other.EffectiveIoConcurrency != 0L) {
          EffectiveIoConcurrency = other.EffectiveIoConcurrency;
        }
      }
      if (other.effectiveCacheSize_ != null) {
        if (effectiveCacheSize_ == null || other.EffectiveCacheSize != 0L) {
          EffectiveCacheSize = other.EffectiveCacheSize;
        }
      }
      sharedPreloadLibraries_.Add(other.sharedPreloadLibraries_);
      if (other.autoExplainLogMinDuration_ != null) {
        if (autoExplainLogMinDuration_ == null || other.AutoExplainLogMinDuration != 0L) {
          AutoExplainLogMinDuration = other.AutoExplainLogMinDuration;
        }
      }
      if (other.autoExplainLogAnalyze_ != null) {
        if (autoExplainLogAnalyze_ == null || other.AutoExplainLogAnalyze != false) {
          AutoExplainLogAnalyze = other.AutoExplainLogAnalyze;
        }
      }
      if (other.autoExplainLogBuffers_ != null) {
        if (autoExplainLogBuffers_ == null || other.AutoExplainLogBuffers != false) {
          AutoExplainLogBuffers = other.AutoExplainLogBuffers;
        }
      }
      if (other.autoExplainLogTiming_ != null) {
        if (autoExplainLogTiming_ == null || other.AutoExplainLogTiming != false) {
          AutoExplainLogTiming = other.AutoExplainLogTiming;
        }
      }
      if (other.autoExplainLogTriggers_ != null) {
        if (autoExplainLogTriggers_ == null || other.AutoExplainLogTriggers != false) {
          AutoExplainLogTriggers = other.AutoExplainLogTriggers;
        }
      }
      if (other.autoExplainLogVerbose_ != null) {
        if (autoExplainLogVerbose_ == null || other.AutoExplainLogVerbose != false) {
          AutoExplainLogVerbose = other.AutoExplainLogVerbose;
        }
      }
      if (other.autoExplainLogNestedStatements_ != null) {
        if (autoExplainLogNestedStatements_ == null || other.AutoExplainLogNestedStatements != false) {
          AutoExplainLogNestedStatements = other.AutoExplainLogNestedStatements;
        }
      }
      if (other.autoExplainSampleRate_ != null) {
        if (autoExplainSampleRate_ == null || other.AutoExplainSampleRate != 0D) {
          AutoExplainSampleRate = other.AutoExplainSampleRate;
        }
      }
      if (other.pgHintPlanEnableHint_ != null) {
        if (pgHintPlanEnableHint_ == null || other.PgHintPlanEnableHint != false) {
          PgHintPlanEnableHint = other.PgHintPlanEnableHint;
        }
      }
      if (other.pgHintPlanEnableHintTable_ != null) {
        if (pgHintPlanEnableHintTable_ == null || other.PgHintPlanEnableHintTable != false) {
          PgHintPlanEnableHintTable = other.PgHintPlanEnableHintTable;
        }
      }
      if (other.PgHintPlanDebugPrint != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint.Unspecified) {
        PgHintPlanDebugPrint = other.PgHintPlanDebugPrint;
      }
      if (other.PgHintPlanMessageLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel.Unspecified) {
        PgHintPlanMessageLevel = other.PgHintPlanMessageLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_maxConnections_codec.Read(input);
            if (maxConnections_ == null || value != 0L) {
              MaxConnections = value;
            }
            break;
          }
          case 18: {
            long? value = _single_sharedBuffers_codec.Read(input);
            if (sharedBuffers_ == null || value != 0L) {
              SharedBuffers = value;
            }
            break;
          }
          case 26: {
            long? value = _single_tempBuffers_codec.Read(input);
            if (tempBuffers_ == null || value != 0L) {
              TempBuffers = value;
            }
            break;
          }
          case 34: {
            long? value = _single_maxPreparedTransactions_codec.Read(input);
            if (maxPreparedTransactions_ == null || value != 0L) {
              MaxPreparedTransactions = value;
            }
            break;
          }
          case 42: {
            long? value = _single_workMem_codec.Read(input);
            if (workMem_ == null || value != 0L) {
              WorkMem = value;
            }
            break;
          }
          case 50: {
            long? value = _single_maintenanceWorkMem_codec.Read(input);
            if (maintenanceWorkMem_ == null || value != 0L) {
              MaintenanceWorkMem = value;
            }
            break;
          }
          case 58: {
            long? value = _single_autovacuumWorkMem_codec.Read(input);
            if (autovacuumWorkMem_ == null || value != 0L) {
              AutovacuumWorkMem = value;
            }
            break;
          }
          case 66: {
            long? value = _single_tempFileLimit_codec.Read(input);
            if (tempFileLimit_ == null || value != 0L) {
              TempFileLimit = value;
            }
            break;
          }
          case 74: {
            long? value = _single_vacuumCostDelay_codec.Read(input);
            if (vacuumCostDelay_ == null || value != 0L) {
              VacuumCostDelay = value;
            }
            break;
          }
          case 82: {
            long? value = _single_vacuumCostPageHit_codec.Read(input);
            if (vacuumCostPageHit_ == null || value != 0L) {
              VacuumCostPageHit = value;
            }
            break;
          }
          case 90: {
            long? value = _single_vacuumCostPageMiss_codec.Read(input);
            if (vacuumCostPageMiss_ == null || value != 0L) {
              VacuumCostPageMiss = value;
            }
            break;
          }
          case 98: {
            long? value = _single_vacuumCostPageDirty_codec.Read(input);
            if (vacuumCostPageDirty_ == null || value != 0L) {
              VacuumCostPageDirty = value;
            }
            break;
          }
          case 106: {
            long? value = _single_vacuumCostLimit_codec.Read(input);
            if (vacuumCostLimit_ == null || value != 0L) {
              VacuumCostLimit = value;
            }
            break;
          }
          case 114: {
            long? value = _single_bgwriterDelay_codec.Read(input);
            if (bgwriterDelay_ == null || value != 0L) {
              BgwriterDelay = value;
            }
            break;
          }
          case 122: {
            long? value = _single_bgwriterLruMaxpages_codec.Read(input);
            if (bgwriterLruMaxpages_ == null || value != 0L) {
              BgwriterLruMaxpages = value;
            }
            break;
          }
          case 130: {
            double? value = _single_bgwriterLruMultiplier_codec.Read(input);
            if (bgwriterLruMultiplier_ == null || value != 0D) {
              BgwriterLruMultiplier = value;
            }
            break;
          }
          case 138: {
            long? value = _single_bgwriterFlushAfter_codec.Read(input);
            if (bgwriterFlushAfter_ == null || value != 0L) {
              BgwriterFlushAfter = value;
            }
            break;
          }
          case 146: {
            long? value = _single_backendFlushAfter_codec.Read(input);
            if (backendFlushAfter_ == null || value != 0L) {
              BackendFlushAfter = value;
            }
            break;
          }
          case 154: {
            long? value = _single_oldSnapshotThreshold_codec.Read(input);
            if (oldSnapshotThreshold_ == null || value != 0L) {
              OldSnapshotThreshold = value;
            }
            break;
          }
          case 160: {
            WalLevel = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.WalLevel) input.ReadEnum();
            break;
          }
          case 168: {
            SynchronousCommit = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.SynchronousCommit) input.ReadEnum();
            break;
          }
          case 178: {
            long? value = _single_checkpointTimeout_codec.Read(input);
            if (checkpointTimeout_ == null || value != 0L) {
              CheckpointTimeout = value;
            }
            break;
          }
          case 186: {
            double? value = _single_checkpointCompletionTarget_codec.Read(input);
            if (checkpointCompletionTarget_ == null || value != 0D) {
              CheckpointCompletionTarget = value;
            }
            break;
          }
          case 194: {
            long? value = _single_checkpointFlushAfter_codec.Read(input);
            if (checkpointFlushAfter_ == null || value != 0L) {
              CheckpointFlushAfter = value;
            }
            break;
          }
          case 202: {
            long? value = _single_maxWalSize_codec.Read(input);
            if (maxWalSize_ == null || value != 0L) {
              MaxWalSize = value;
            }
            break;
          }
          case 210: {
            long? value = _single_minWalSize_codec.Read(input);
            if (minWalSize_ == null || value != 0L) {
              MinWalSize = value;
            }
            break;
          }
          case 218: {
            long? value = _single_maxStandbyStreamingDelay_codec.Read(input);
            if (maxStandbyStreamingDelay_ == null || value != 0L) {
              MaxStandbyStreamingDelay = value;
            }
            break;
          }
          case 226: {
            long? value = _single_defaultStatisticsTarget_codec.Read(input);
            if (defaultStatisticsTarget_ == null || value != 0L) {
              DefaultStatisticsTarget = value;
            }
            break;
          }
          case 232: {
            ConstraintExclusion = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ConstraintExclusion) input.ReadEnum();
            break;
          }
          case 242: {
            double? value = _single_cursorTupleFraction_codec.Read(input);
            if (cursorTupleFraction_ == null || value != 0D) {
              CursorTupleFraction = value;
            }
            break;
          }
          case 250: {
            long? value = _single_fromCollapseLimit_codec.Read(input);
            if (fromCollapseLimit_ == null || value != 0L) {
              FromCollapseLimit = value;
            }
            break;
          }
          case 258: {
            long? value = _single_joinCollapseLimit_codec.Read(input);
            if (joinCollapseLimit_ == null || value != 0L) {
              JoinCollapseLimit = value;
            }
            break;
          }
          case 264: {
            ForceParallelMode = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ForceParallelMode) input.ReadEnum();
            break;
          }
          case 272: {
            ClientMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 280: {
            LogMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 288: {
            LogMinErrorStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 298: {
            long? value = _single_logMinDurationStatement_codec.Read(input);
            if (logMinDurationStatement_ == null || value != 0L) {
              LogMinDurationStatement = value;
            }
            break;
          }
          case 306: {
            bool? value = _single_logCheckpoints_codec.Read(input);
            if (logCheckpoints_ == null || value != false) {
              LogCheckpoints = value;
            }
            break;
          }
          case 314: {
            bool? value = _single_logConnections_codec.Read(input);
            if (logConnections_ == null || value != false) {
              LogConnections = value;
            }
            break;
          }
          case 322: {
            bool? value = _single_logDisconnections_codec.Read(input);
            if (logDisconnections_ == null || value != false) {
              LogDisconnections = value;
            }
            break;
          }
          case 330: {
            bool? value = _single_logDuration_codec.Read(input);
            if (logDuration_ == null || value != false) {
              LogDuration = value;
            }
            break;
          }
          case 336: {
            LogErrorVerbosity = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogErrorVerbosity) input.ReadEnum();
            break;
          }
          case 346: {
            bool? value = _single_logLockWaits_codec.Read(input);
            if (logLockWaits_ == null || value != false) {
              LogLockWaits = value;
            }
            break;
          }
          case 352: {
            LogStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogStatement) input.ReadEnum();
            break;
          }
          case 362: {
            long? value = _single_logTempFiles_codec.Read(input);
            if (logTempFiles_ == null || value != 0L) {
              LogTempFiles = value;
            }
            break;
          }
          case 370: {
            SearchPath = input.ReadString();
            break;
          }
          case 378: {
            bool? value = _single_rowSecurity_codec.Read(input);
            if (rowSecurity_ == null || value != false) {
              RowSecurity = value;
            }
            break;
          }
          case 384: {
            DefaultTransactionIsolation = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.TransactionIsolation) input.ReadEnum();
            break;
          }
          case 394: {
            long? value = _single_statementTimeout_codec.Read(input);
            if (statementTimeout_ == null || value != 0L) {
              StatementTimeout = value;
            }
            break;
          }
          case 402: {
            long? value = _single_lockTimeout_codec.Read(input);
            if (lockTimeout_ == null || value != 0L) {
              LockTimeout = value;
            }
            break;
          }
          case 410: {
            long? value = _single_idleInTransactionSessionTimeout_codec.Read(input);
            if (idleInTransactionSessionTimeout_ == null || value != 0L) {
              IdleInTransactionSessionTimeout = value;
            }
            break;
          }
          case 416: {
            ByteaOutput = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.ByteaOutput) input.ReadEnum();
            break;
          }
          case 424: {
            Xmlbinary = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlBinary) input.ReadEnum();
            break;
          }
          case 432: {
            Xmloption = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.XmlOption) input.ReadEnum();
            break;
          }
          case 442: {
            long? value = _single_ginPendingListLimit_codec.Read(input);
            if (ginPendingListLimit_ == null || value != 0L) {
              GinPendingListLimit = value;
            }
            break;
          }
          case 450: {
            long? value = _single_deadlockTimeout_codec.Read(input);
            if (deadlockTimeout_ == null || value != 0L) {
              DeadlockTimeout = value;
            }
            break;
          }
          case 458: {
            long? value = _single_maxLocksPerTransaction_codec.Read(input);
            if (maxLocksPerTransaction_ == null || value != 0L) {
              MaxLocksPerTransaction = value;
            }
            break;
          }
          case 466: {
            long? value = _single_maxPredLocksPerTransaction_codec.Read(input);
            if (maxPredLocksPerTransaction_ == null || value != 0L) {
              MaxPredLocksPerTransaction = value;
            }
            break;
          }
          case 474: {
            bool? value = _single_arrayNulls_codec.Read(input);
            if (arrayNulls_ == null || value != false) {
              ArrayNulls = value;
            }
            break;
          }
          case 480: {
            BackslashQuote = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.BackslashQuote) input.ReadEnum();
            break;
          }
          case 490: {
            bool? value = _single_defaultWithOids_codec.Read(input);
            if (defaultWithOids_ == null || value != false) {
              DefaultWithOids = value;
            }
            break;
          }
          case 498: {
            bool? value = _single_escapeStringWarning_codec.Read(input);
            if (escapeStringWarning_ == null || value != false) {
              EscapeStringWarning = value;
            }
            break;
          }
          case 506: {
            bool? value = _single_loCompatPrivileges_codec.Read(input);
            if (loCompatPrivileges_ == null || value != false) {
              LoCompatPrivileges = value;
            }
            break;
          }
          case 514: {
            bool? value = _single_operatorPrecedenceWarning_codec.Read(input);
            if (operatorPrecedenceWarning_ == null || value != false) {
              OperatorPrecedenceWarning = value;
            }
            break;
          }
          case 522: {
            bool? value = _single_quoteAllIdentifiers_codec.Read(input);
            if (quoteAllIdentifiers_ == null || value != false) {
              QuoteAllIdentifiers = value;
            }
            break;
          }
          case 530: {
            bool? value = _single_standardConformingStrings_codec.Read(input);
            if (standardConformingStrings_ == null || value != false) {
              StandardConformingStrings = value;
            }
            break;
          }
          case 538: {
            bool? value = _single_synchronizeSeqscans_codec.Read(input);
            if (synchronizeSeqscans_ == null || value != false) {
              SynchronizeSeqscans = value;
            }
            break;
          }
          case 546: {
            bool? value = _single_transformNullEquals_codec.Read(input);
            if (transformNullEquals_ == null || value != false) {
              TransformNullEquals = value;
            }
            break;
          }
          case 554: {
            bool? value = _single_exitOnError_codec.Read(input);
            if (exitOnError_ == null || value != false) {
              ExitOnError = value;
            }
            break;
          }
          case 562: {
            double? value = _single_seqPageCost_codec.Read(input);
            if (seqPageCost_ == null || value != 0D) {
              SeqPageCost = value;
            }
            break;
          }
          case 570: {
            double? value = _single_randomPageCost_codec.Read(input);
            if (randomPageCost_ == null || value != 0D) {
              RandomPageCost = value;
            }
            break;
          }
          case 578: {
            long? value = _single_autovacuumMaxWorkers_codec.Read(input);
            if (autovacuumMaxWorkers_ == null || value != 0L) {
              AutovacuumMaxWorkers = value;
            }
            break;
          }
          case 586: {
            long? value = _single_autovacuumVacuumCostDelay_codec.Read(input);
            if (autovacuumVacuumCostDelay_ == null || value != 0L) {
              AutovacuumVacuumCostDelay = value;
            }
            break;
          }
          case 594: {
            long? value = _single_autovacuumVacuumCostLimit_codec.Read(input);
            if (autovacuumVacuumCostLimit_ == null || value != 0L) {
              AutovacuumVacuumCostLimit = value;
            }
            break;
          }
          case 602: {
            long? value = _single_autovacuumNaptime_codec.Read(input);
            if (autovacuumNaptime_ == null || value != 0L) {
              AutovacuumNaptime = value;
            }
            break;
          }
          case 610: {
            long? value = _single_archiveTimeout_codec.Read(input);
            if (archiveTimeout_ == null || value != 0L) {
              ArchiveTimeout = value;
            }
            break;
          }
          case 618: {
            long? value = _single_trackActivityQuerySize_codec.Read(input);
            if (trackActivityQuerySize_ == null || value != 0L) {
              TrackActivityQuerySize = value;
            }
            break;
          }
          case 642: {
            bool? value = _single_enableBitmapscan_codec.Read(input);
            if (enableBitmapscan_ == null || value != false) {
              EnableBitmapscan = value;
            }
            break;
          }
          case 650: {
            bool? value = _single_enableHashagg_codec.Read(input);
            if (enableHashagg_ == null || value != false) {
              EnableHashagg = value;
            }
            break;
          }
          case 658: {
            bool? value = _single_enableHashjoin_codec.Read(input);
            if (enableHashjoin_ == null || value != false) {
              EnableHashjoin = value;
            }
            break;
          }
          case 666: {
            bool? value = _single_enableIndexscan_codec.Read(input);
            if (enableIndexscan_ == null || value != false) {
              EnableIndexscan = value;
            }
            break;
          }
          case 674: {
            bool? value = _single_enableIndexonlyscan_codec.Read(input);
            if (enableIndexonlyscan_ == null || value != false) {
              EnableIndexonlyscan = value;
            }
            break;
          }
          case 682: {
            bool? value = _single_enableMaterial_codec.Read(input);
            if (enableMaterial_ == null || value != false) {
              EnableMaterial = value;
            }
            break;
          }
          case 690: {
            bool? value = _single_enableMergejoin_codec.Read(input);
            if (enableMergejoin_ == null || value != false) {
              EnableMergejoin = value;
            }
            break;
          }
          case 698: {
            bool? value = _single_enableNestloop_codec.Read(input);
            if (enableNestloop_ == null || value != false) {
              EnableNestloop = value;
            }
            break;
          }
          case 706: {
            bool? value = _single_enableSeqscan_codec.Read(input);
            if (enableSeqscan_ == null || value != false) {
              EnableSeqscan = value;
            }
            break;
          }
          case 714: {
            bool? value = _single_enableSort_codec.Read(input);
            if (enableSort_ == null || value != false) {
              EnableSort = value;
            }
            break;
          }
          case 722: {
            bool? value = _single_enableTidscan_codec.Read(input);
            if (enableTidscan_ == null || value != false) {
              EnableTidscan = value;
            }
            break;
          }
          case 730: {
            long? value = _single_maxWorkerProcesses_codec.Read(input);
            if (maxWorkerProcesses_ == null || value != 0L) {
              MaxWorkerProcesses = value;
            }
            break;
          }
          case 738: {
            long? value = _single_maxParallelWorkers_codec.Read(input);
            if (maxParallelWorkers_ == null || value != 0L) {
              MaxParallelWorkers = value;
            }
            break;
          }
          case 746: {
            long? value = _single_maxParallelWorkersPerGather_codec.Read(input);
            if (maxParallelWorkersPerGather_ == null || value != 0L) {
              MaxParallelWorkersPerGather = value;
            }
            break;
          }
          case 754: {
            double? value = _single_autovacuumVacuumScaleFactor_codec.Read(input);
            if (autovacuumVacuumScaleFactor_ == null || value != 0D) {
              AutovacuumVacuumScaleFactor = value;
            }
            break;
          }
          case 762: {
            double? value = _single_autovacuumAnalyzeScaleFactor_codec.Read(input);
            if (autovacuumAnalyzeScaleFactor_ == null || value != 0D) {
              AutovacuumAnalyzeScaleFactor = value;
            }
            break;
          }
          case 770: {
            bool? value = _single_defaultTransactionReadOnly_codec.Read(input);
            if (defaultTransactionReadOnly_ == null || value != false) {
              DefaultTransactionReadOnly = value;
            }
            break;
          }
          case 778: {
            Timezone = input.ReadString();
            break;
          }
          case 786: {
            bool? value = _single_enableParallelAppend_codec.Read(input);
            if (enableParallelAppend_ == null || value != false) {
              EnableParallelAppend = value;
            }
            break;
          }
          case 794: {
            bool? value = _single_enableParallelHash_codec.Read(input);
            if (enableParallelHash_ == null || value != false) {
              EnableParallelHash = value;
            }
            break;
          }
          case 802: {
            bool? value = _single_enablePartitionPruning_codec.Read(input);
            if (enablePartitionPruning_ == null || value != false) {
              EnablePartitionPruning = value;
            }
            break;
          }
          case 810: {
            bool? value = _single_enablePartitionwiseAggregate_codec.Read(input);
            if (enablePartitionwiseAggregate_ == null || value != false) {
              EnablePartitionwiseAggregate = value;
            }
            break;
          }
          case 818: {
            bool? value = _single_enablePartitionwiseJoin_codec.Read(input);
            if (enablePartitionwiseJoin_ == null || value != false) {
              EnablePartitionwiseJoin = value;
            }
            break;
          }
          case 826: {
            bool? value = _single_jit_codec.Read(input);
            if (jit_ == null || value != false) {
              Jit = value;
            }
            break;
          }
          case 834: {
            long? value = _single_maxParallelMaintenanceWorkers_codec.Read(input);
            if (maxParallelMaintenanceWorkers_ == null || value != 0L) {
              MaxParallelMaintenanceWorkers = value;
            }
            break;
          }
          case 842: {
            bool? value = _single_parallelLeaderParticipation_codec.Read(input);
            if (parallelLeaderParticipation_ == null || value != false) {
              ParallelLeaderParticipation = value;
            }
            break;
          }
          case 850: {
            double? value = _single_vacuumCleanupIndexScaleFactor_codec.Read(input);
            if (vacuumCleanupIndexScaleFactor_ == null || value != 0D) {
              VacuumCleanupIndexScaleFactor = value;
            }
            break;
          }
          case 858: {
            long? value = _single_effectiveIoConcurrency_codec.Read(input);
            if (effectiveIoConcurrency_ == null || value != 0L) {
              EffectiveIoConcurrency = value;
            }
            break;
          }
          case 866: {
            long? value = _single_effectiveCacheSize_codec.Read(input);
            if (effectiveCacheSize_ == null || value != 0L) {
              EffectiveCacheSize = value;
            }
            break;
          }
          case 874:
          case 872: {
            sharedPreloadLibraries_.AddEntriesFrom(input, _repeated_sharedPreloadLibraries_codec);
            break;
          }
          case 882: {
            long? value = _single_autoExplainLogMinDuration_codec.Read(input);
            if (autoExplainLogMinDuration_ == null || value != 0L) {
              AutoExplainLogMinDuration = value;
            }
            break;
          }
          case 890: {
            bool? value = _single_autoExplainLogAnalyze_codec.Read(input);
            if (autoExplainLogAnalyze_ == null || value != false) {
              AutoExplainLogAnalyze = value;
            }
            break;
          }
          case 898: {
            bool? value = _single_autoExplainLogBuffers_codec.Read(input);
            if (autoExplainLogBuffers_ == null || value != false) {
              AutoExplainLogBuffers = value;
            }
            break;
          }
          case 906: {
            bool? value = _single_autoExplainLogTiming_codec.Read(input);
            if (autoExplainLogTiming_ == null || value != false) {
              AutoExplainLogTiming = value;
            }
            break;
          }
          case 914: {
            bool? value = _single_autoExplainLogTriggers_codec.Read(input);
            if (autoExplainLogTriggers_ == null || value != false) {
              AutoExplainLogTriggers = value;
            }
            break;
          }
          case 922: {
            bool? value = _single_autoExplainLogVerbose_codec.Read(input);
            if (autoExplainLogVerbose_ == null || value != false) {
              AutoExplainLogVerbose = value;
            }
            break;
          }
          case 930: {
            bool? value = _single_autoExplainLogNestedStatements_codec.Read(input);
            if (autoExplainLogNestedStatements_ == null || value != false) {
              AutoExplainLogNestedStatements = value;
            }
            break;
          }
          case 938: {
            double? value = _single_autoExplainSampleRate_codec.Read(input);
            if (autoExplainSampleRate_ == null || value != 0D) {
              AutoExplainSampleRate = value;
            }
            break;
          }
          case 946: {
            bool? value = _single_pgHintPlanEnableHint_codec.Read(input);
            if (pgHintPlanEnableHint_ == null || value != false) {
              PgHintPlanEnableHint = value;
            }
            break;
          }
          case 954: {
            bool? value = _single_pgHintPlanEnableHintTable_codec.Read(input);
            if (pgHintPlanEnableHintTable_ == null || value != false) {
              PgHintPlanEnableHintTable = value;
            }
            break;
          }
          case 960: {
            PgHintPlanDebugPrint = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.PgHintPlanDebugPrint) input.ReadEnum();
            break;
          }
          case 968: {
            PgHintPlanMessageLevel = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11.Types.LogLevel) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PostgresqlConfig11 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum WalLevel {
        [pbr::OriginalName("WAL_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("WAL_LEVEL_REPLICA")] Replica = 1,
        [pbr::OriginalName("WAL_LEVEL_LOGICAL")] Logical = 2,
      }

      internal enum SynchronousCommit {
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_ON")] On = 1,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_OFF")] Off = 2,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_LOCAL")] Local = 3,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_REMOTE_WRITE")] RemoteWrite = 4,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_REMOTE_APPLY")] RemoteApply = 5,
      }

      internal enum ConstraintExclusion {
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_ON")] On = 1,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_OFF")] Off = 2,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_PARTITION")] Partition = 3,
      }

      internal enum ForceParallelMode {
        [pbr::OriginalName("FORCE_PARALLEL_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_ON")] On = 1,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_OFF")] Off = 2,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_REGRESS")] Regress = 3,
      }

      internal enum LogLevel {
        [pbr::OriginalName("LOG_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_LEVEL_DEBUG5")] Debug5 = 1,
        [pbr::OriginalName("LOG_LEVEL_DEBUG4")] Debug4 = 2,
        [pbr::OriginalName("LOG_LEVEL_DEBUG3")] Debug3 = 3,
        [pbr::OriginalName("LOG_LEVEL_DEBUG2")] Debug2 = 4,
        [pbr::OriginalName("LOG_LEVEL_DEBUG1")] Debug1 = 5,
        [pbr::OriginalName("LOG_LEVEL_LOG")] Log = 6,
        [pbr::OriginalName("LOG_LEVEL_NOTICE")] Notice = 7,
        [pbr::OriginalName("LOG_LEVEL_WARNING")] Warning = 8,
        [pbr::OriginalName("LOG_LEVEL_ERROR")] Error = 9,
        [pbr::OriginalName("LOG_LEVEL_FATAL")] Fatal = 10,
        [pbr::OriginalName("LOG_LEVEL_PANIC")] Panic = 11,
      }

      internal enum LogErrorVerbosity {
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_TERSE")] Terse = 1,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_DEFAULT")] Default = 2,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_VERBOSE")] Verbose = 3,
      }

      internal enum LogStatement {
        [pbr::OriginalName("LOG_STATEMENT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_STATEMENT_NONE")] None = 1,
        [pbr::OriginalName("LOG_STATEMENT_DDL")] Ddl = 2,
        [pbr::OriginalName("LOG_STATEMENT_MOD")] Mod = 3,
        [pbr::OriginalName("LOG_STATEMENT_ALL")] All = 4,
      }

      internal enum TransactionIsolation {
        [pbr::OriginalName("TRANSACTION_ISOLATION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_UNCOMMITTED")] ReadUncommitted = 1,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_COMMITTED")] ReadCommitted = 2,
        [pbr::OriginalName("TRANSACTION_ISOLATION_REPEATABLE_READ")] RepeatableRead = 3,
        [pbr::OriginalName("TRANSACTION_ISOLATION_SERIALIZABLE")] Serializable = 4,
      }

      internal enum ByteaOutput {
        [pbr::OriginalName("BYTEA_OUTPUT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BYTEA_OUTPUT_HEX")] Hex = 1,
        [pbr::OriginalName("BYTEA_OUTPUT_ESCAPED")] Escaped = 2,
      }

      internal enum XmlBinary {
        [pbr::OriginalName("XML_BINARY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_BINARY_BASE64")] Base64 = 1,
        [pbr::OriginalName("XML_BINARY_HEX")] Hex = 2,
      }

      internal enum XmlOption {
        [pbr::OriginalName("XML_OPTION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_OPTION_DOCUMENT")] Document = 1,
        [pbr::OriginalName("XML_OPTION_CONTENT")] Content = 2,
      }

      internal enum BackslashQuote {
        [pbr::OriginalName("BACKSLASH_QUOTE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BACKSLASH_QUOTE")] BackslashQuote = 1,
        [pbr::OriginalName("BACKSLASH_QUOTE_ON")] On = 2,
        [pbr::OriginalName("BACKSLASH_QUOTE_OFF")] Off = 3,
        [pbr::OriginalName("BACKSLASH_QUOTE_SAFE_ENCODING")] SafeEncoding = 4,
      }

      internal enum PgHintPlanDebugPrint {
        [pbr::OriginalName("PG_HINT_PLAN_DEBUG_PRINT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("PG_HINT_PLAN_DEBUG_PRINT_OFF")] Off = 1,
        [pbr::OriginalName("PG_HINT_PLAN_DEBUG_PRINT_ON")] On = 2,
        [pbr::OriginalName("PG_HINT_PLAN_DEBUG_PRINT_DETAILED")] Detailed = 3,
        [pbr::OriginalName("PG_HINT_PLAN_DEBUG_PRINT_VERBOSE")] Verbose = 4,
      }

      internal enum SharedPreloadLibraries {
        [pbr::OriginalName("SHARED_PRELOAD_LIBRARIES_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SHARED_PRELOAD_LIBRARIES_AUTO_EXPLAIN")] AutoExplain = 1,
        [pbr::OriginalName("SHARED_PRELOAD_LIBRARIES_PG_HINT_PLAN")] PgHintPlan = 2,
      }

    }
    #endregion

  }

  internal sealed partial class PostgresqlConfigSet11 : pb::IMessage<PostgresqlConfigSet11> {
    private static readonly pb::MessageParser<PostgresqlConfigSet11> _parser = new pb::MessageParser<PostgresqlConfigSet11>(() => new PostgresqlConfigSet11());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostgresqlConfigSet11> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Postgresql.V1.Config.Postgresql11Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet11() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet11(PostgresqlConfigSet11 other) : this() {
      effectiveConfig_ = other.effectiveConfig_ != null ? other.effectiveConfig_.Clone() : null;
      userConfig_ = other.userConfig_ != null ? other.userConfig_.Clone() : null;
      defaultConfig_ = other.defaultConfig_ != null ? other.defaultConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet11 Clone() {
      return new PostgresqlConfigSet11(this);
    }

    /// <summary>Field number for the "effective_config" field.</summary>
    public const int EffectiveConfigFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 effectiveConfig_;
    /// <summary>
    /// Effective settings for a PostgreSQL 11 cluster (a combination of settings defined
    /// in [user_config] and [default_config]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 EffectiveConfig {
      get { return effectiveConfig_; }
      set {
        effectiveConfig_ = value;
      }
    }

    /// <summary>Field number for the "user_config" field.</summary>
    public const int UserConfigFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 userConfig_;
    /// <summary>
    /// User-defined settings for a PostgreSQL 11 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 UserConfig {
      get { return userConfig_; }
      set {
        userConfig_ = value;
      }
    }

    /// <summary>Field number for the "default_config" field.</summary>
    public const int DefaultConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 defaultConfig_;
    /// <summary>
    /// Default configuration for a PostgreSQL 11 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11 DefaultConfig {
      get { return defaultConfig_; }
      set {
        defaultConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostgresqlConfigSet11);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostgresqlConfigSet11 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectiveConfig, other.EffectiveConfig)) return false;
      if (!object.Equals(UserConfig, other.UserConfig)) return false;
      if (!object.Equals(DefaultConfig, other.DefaultConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectiveConfig_ != null) hash ^= EffectiveConfig.GetHashCode();
      if (userConfig_ != null) hash ^= UserConfig.GetHashCode();
      if (defaultConfig_ != null) hash ^= DefaultConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectiveConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectiveConfig);
      }
      if (userConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserConfig);
      }
      if (defaultConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectiveConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveConfig);
      }
      if (userConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConfig);
      }
      if (defaultConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostgresqlConfigSet11 other) {
      if (other == null) {
        return;
      }
      if (other.effectiveConfig_ != null) {
        if (effectiveConfig_ == null) {
          EffectiveConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
        }
        EffectiveConfig.MergeFrom(other.EffectiveConfig);
      }
      if (other.userConfig_ != null) {
        if (userConfig_ == null) {
          UserConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
        }
        UserConfig.MergeFrom(other.UserConfig);
      }
      if (other.defaultConfig_ != null) {
        if (defaultConfig_ == null) {
          DefaultConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
        }
        DefaultConfig.MergeFrom(other.DefaultConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectiveConfig_ == null) {
              EffectiveConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
            }
            input.ReadMessage(EffectiveConfig);
            break;
          }
          case 18: {
            if (userConfig_ == null) {
              UserConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
            }
            input.ReadMessage(UserConfig);
            break;
          }
          case 26: {
            if (defaultConfig_ == null) {
              DefaultConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig11();
            }
            input.ReadMessage(DefaultConfig);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
