// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/postgresql/v1/config/postgresql9_6.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Postgresql.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/postgresql/v1/config/postgresql9_6.proto</summary>
  internal static partial class Postgresql96Reflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/postgresql/v1/config/postgresql9_6.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Postgresql96Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjl5YW5kZXgvY2xvdWQvbWRiL3Bvc3RncmVzcWwvdjEvY29uZmlnL3Bvc3Rn",
            "cmVzcWw5XzYucHJvdG8SJXlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52",
            "MS5jb25maWcaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxodeWFu",
            "ZGV4L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8iwzkKE1Bvc3RncmVzcWxDb25m",
            "aWc5XzYSNAoPbWF4X2Nvbm5lY3Rpb25zGAEgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUSMwoOc2hhcmVkX2J1ZmZlcnMYAiABKAsyGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRIxCgx0ZW1wX2J1ZmZlcnMYAyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI+ChltYXhfcHJlcGFyZWRf",
            "dHJhbnNhY3Rpb25zGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWUSLQoId29ya19tZW0YBSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZRI5ChRtYWludGVuYW5jZV93b3JrX21lbRgGIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEjwKF3JlcGxhY2VtZW50X3NvcnRfdHVwbGVz",
            "GAcgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSOAoTYXV0b3Zh",
            "Y3V1bV93b3JrX21lbRgIIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlEjQKD3RlbXBfZmlsZV9saW1pdBgJIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEjYKEXZhY3V1bV9jb3N0X2RlbGF5GAogASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUSOQoUdmFjdXVtX2Nvc3RfcGFnZV9o",
            "aXQYCyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI6ChV2YWN1",
            "dW1fY29zdF9wYWdlX21pc3MYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI7ChZ2YWN1dW1fY29zdF9wYWdlX2RpcnR5GA0gASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUSNgoRdmFjdXVtX2Nvc3RfbGltaXQY",
            "DiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJBCg5iZ3dyaXRl",
            "cl9kZWxheRgPIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgz6",
            "xzEIMTAtMTAwMDASOgoVYmd3cml0ZXJfbHJ1X21heHBhZ2VzGBAgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSPQoXYmd3cml0ZXJfbHJ1X211",
            "bHRpcGxpZXIYESABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUS",
            "RQoUYmd3cml0ZXJfZmx1c2hfYWZ0ZXIYEiABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZUIK+scxBjAtMjA0OBJEChNiYWNrZW5kX2ZsdXNoX2Fm",
            "dGVyGBMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCvrHMQYw",
            "LTIwNDgSTAoWb2xkX3NuYXBzaG90X3RocmVzaG9sZBgUIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQg/6xzELLTEtODY0MDAwMDASVgoJd2Fs",
            "X2xldmVsGBUgASgOMkMueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYx",
            "LmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmlnOV82LldhbExldmVsEmgKEnN5bmNo",
            "cm9ub3VzX2NvbW1pdBgWIAEoDjJMLnlhbmRleC5jbG91ZC5tZGIucG9zdGdy",
            "ZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzlfNi5TeW5jaHJvbm91",
            "c0NvbW1pdBJLChJjaGVja3BvaW50X3RpbWVvdXQYFyABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZUIS+scxDjMwMDAwLTg2NDAwMDAwEkIKHGNo",
            "ZWNrcG9pbnRfY29tcGxldGlvbl90YXJnZXQYGCABKAsyHC5nb29nbGUucHJv",
            "dG9idWYuRG91YmxlVmFsdWUSRwoWY2hlY2twb2ludF9mbHVzaF9hZnRlchgZ",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgr6xzEGMC0yMDQ4",
            "EjEKDG1heF93YWxfc2l6ZRgaIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlEjEKDG1pbl93YWxfc2l6ZRgbIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEkAKG21heF9zdGFuZGJ5X3N0cmVhbWluZ19kZWxheRgc",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEj4KGWRlZmF1bHRf",
            "c3RhdGlzdGljc190YXJnZXQYHSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRJsChRjb25zdHJhaW50X2V4Y2x1c2lvbhgeIAEoDjJOLnlhbmRl",
            "eC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENv",
            "bmZpZzlfNi5Db25zdHJhaW50RXhjbHVzaW9uEjsKFWN1cnNvcl90dXBsZV9m",
            "cmFjdGlvbhgfIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5Eb3VibGVWYWx1ZRJK",
            "ChNmcm9tX2NvbGxhcHNlX2xpbWl0GCAgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWVCEPrHMQwxLTIxNDc0ODM2NDcSSgoTam9pbl9jb2xsYXBz",
            "ZV9saW1pdBghIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQhD6",
            "xzEMMS0yMTQ3NDgzNjQ3EmkKE2ZvcmNlX3BhcmFsbGVsX21vZGUYIiABKA4y",
            "TC55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3Rn",
            "cmVzcWxDb25maWc5XzYuRm9yY2VQYXJhbGxlbE1vZGUSYAoTY2xpZW50X21p",
            "bl9tZXNzYWdlcxgjIAEoDjJDLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNx",
            "bC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZpZzlfNi5Mb2dMZXZlbBJdChBs",
            "b2dfbWluX21lc3NhZ2VzGCQgASgOMkMueWFuZGV4LmNsb3VkLm1kYi5wb3N0",
            "Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmlnOV82LkxvZ0xldmVs",
            "EmQKF2xvZ19taW5fZXJyb3Jfc3RhdGVtZW50GCUgASgOMkMueWFuZGV4LmNs",
            "b3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmln",
            "OV82LkxvZ0xldmVsEj8KGmxvZ19taW5fZHVyYXRpb25fc3RhdGVtZW50GCYg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSMwoPbG9nX2NoZWNr",
            "cG9pbnRzGCcgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIzCg9s",
            "b2dfY29ubmVjdGlvbnMYKCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZh",
            "bHVlEjYKEmxvZ19kaXNjb25uZWN0aW9ucxgpIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSMAoMbG9nX2R1cmF0aW9uGCogASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLkJvb2xWYWx1ZRJpChNsb2dfZXJyb3JfdmVyYm9zaXR5GCsg",
            "ASgOMkwueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Q",
            "b3N0Z3Jlc3FsQ29uZmlnOV82LkxvZ0Vycm9yVmVyYm9zaXR5EjIKDmxvZ19s",
            "b2NrX3dhaXRzGCwgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJe",
            "Cg1sb2dfc3RhdGVtZW50GC0gASgOMkcueWFuZGV4LmNsb3VkLm1kYi5wb3N0",
            "Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0Z3Jlc3FsQ29uZmlnOV82LkxvZ1N0YXRl",
            "bWVudBIzCg5sb2dfdGVtcF9maWxlcxguIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEhMKC3NlYXJjaF9wYXRoGC8gASgJEjAKDHJvd19zZWN1",
            "cml0eRgwIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSdgodZGVm",
            "YXVsdF90cmFuc2FjdGlvbl9pc29sYXRpb24YMSABKA4yTy55YW5kZXguY2xv",
            "dWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWc5",
            "XzYuVHJhbnNhY3Rpb25Jc29sYXRpb24SNgoRc3RhdGVtZW50X3RpbWVvdXQY",
            "MiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIxCgxsb2NrX3Rp",
            "bWVvdXQYMyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJICiNp",
            "ZGxlX2luX3RyYW5zYWN0aW9uX3Nlc3Npb25fdGltZW91dBg0IAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlElwKDGJ5dGVhX291dHB1dBg1IAEo",
            "DjJGLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9z",
            "dGdyZXNxbENvbmZpZzlfNi5CeXRlYU91dHB1dBJXCgl4bWxiaW5hcnkYNiAB",
            "KA4yRC55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBv",
            "c3RncmVzcWxDb25maWc5XzYuWG1sQmluYXJ5ElcKCXhtbG9wdGlvbhg3IAEo",
            "DjJELnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9z",
            "dGdyZXNxbENvbmZpZzlfNi5YbWxPcHRpb24SOwoWZ2luX3BlbmRpbmdfbGlz",
            "dF9saW1pdBg4IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjUK",
            "EGRlYWRsb2NrX3RpbWVvdXQYOSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRI+ChltYXhfbG9ja3NfcGVyX3RyYW5zYWN0aW9uGDogASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSQwoebWF4X3ByZWRfbG9ja3Nf",
            "cGVyX3RyYW5zYWN0aW9uGDsgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUSLwoLYXJyYXlfbnVsbHMYPCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEmIKD2JhY2tzbGFzaF9xdW90ZRg9IAEoDjJJLnlhbmRleC5j",
            "bG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbENvbmZp",
            "ZzlfNi5CYWNrc2xhc2hRdW90ZRI1ChFkZWZhdWx0X3dpdGhfb2lkcxg+IAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSOQoVZXNjYXBlX3N0cmlu",
            "Z193YXJuaW5nGD8gASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI4",
            "ChRsb19jb21wYXRfcHJpdmlsZWdlcxhAIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5Cb29sVmFsdWUSPwobb3BlcmF0b3JfcHJlY2VkZW5jZV93YXJuaW5nGEEg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI5ChVxdW90ZV9hbGxf",
            "aWRlbnRpZmllcnMYQiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "Ej8KG3N0YW5kYXJkX2NvbmZvcm1pbmdfc3RyaW5ncxhDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5Cb29sVmFsdWUSOAoUc3luY2hyb25pemVfc2Vxc2NhbnMY",
            "RCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjkKFXRyYW5zZm9y",
            "bV9udWxsX2VxdWFscxhFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSMQoNZXhpdF9vbl9lcnJvchhGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5C",
            "b29sVmFsdWUSMwoNc2VxX3BhZ2VfY29zdBhHIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5Eb3VibGVWYWx1ZRI2ChByYW5kb21fcGFnZV9jb3N0GEggASgLMhwu",
            "Z29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjMKD3NxbF9pbmhlcml0YW5j",
            "ZRhJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSRQoWYXV0b3Zh",
            "Y3V1bV9tYXhfd29ya2VycxhKIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlQgj6xzEEMS0zMhJNChxhdXRvdmFjdXVtX3ZhY3V1bV9jb3N0X2Rl",
            "bGF5GEsgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCvrHMQYt",
            "MS0xMDASTwocYXV0b3ZhY3V1bV92YWN1dW1fY29zdF9saW1pdBhMIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgz6xzEILTEtMTAwMDASSgoS",
            "YXV0b3ZhY3V1bV9uYXB0aW1lGE0gASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWVCEfrHMQ0xMDAwLTg2NDAwMDAwEkYKD2FyY2hpdmVfdGltZW91",
            "dBhOIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQhD6xzEMMTAw",
            "MDAtNjAwMDAwEk4KGXRyYWNrX2FjdGl2aXR5X3F1ZXJ5X3NpemUYTyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIO+scxCjEwMC0xMDI0MDAS",
            "SQoYZWZmZWN0aXZlX2lvX2NvbmN1cnJlbmN5GFAgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWVCCvrHMQYwLTEwMDASTQoUZWZmZWN0aXZlX2Nh",
            "Y2hlX3NpemUYUSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIS",
            "+scxDjAtNTQ5NzU1ODEzODg4IlMKCFdhbExldmVsEhkKFVdBTF9MRVZFTF9V",
            "TlNQRUNJRklFRBAAEhUKEVdBTF9MRVZFTF9SRVBMSUNBEAESFQoRV0FMX0xF",
            "VkVMX0xPR0lDQUwQAiLWAQoRU3luY2hyb25vdXNDb21taXQSIgoeU1lOQ0hS",
            "T05PVVNfQ09NTUlUX1VOU1BFQ0lGSUVEEAASGQoVU1lOQ0hST05PVVNfQ09N",
            "TUlUX09OEAESGgoWU1lOQ0hST05PVVNfQ09NTUlUX09GRhACEhwKGFNZTkNI",
            "Uk9OT1VTX0NPTU1JVF9MT0NBTBADEiMKH1NZTkNIUk9OT1VTX0NPTU1JVF9S",
            "RU1PVEVfV1JJVEUQBBIjCh9TWU5DSFJPTk9VU19DT01NSVRfUkVNT1RFX0FQ",
            "UExZEAUimgEKE0NvbnN0cmFpbnRFeGNsdXNpb24SJAogQ09OU1RSQUlOVF9F",
            "WENMVVNJT05fVU5TUEVDSUZJRUQQABIbChdDT05TVFJBSU5UX0VYQ0xVU0lP",
            "Tl9PThABEhwKGENPTlNUUkFJTlRfRVhDTFVTSU9OX09GRhACEiIKHkNPTlNU",
            "UkFJTlRfRVhDTFVTSU9OX1BBUlRJVElPThADIpIBChFGb3JjZVBhcmFsbGVs",
            "TW9kZRIjCh9GT1JDRV9QQVJBTExFTF9NT0RFX1VOU1BFQ0lGSUVEEAASGgoW",
            "Rk9SQ0VfUEFSQUxMRUxfTU9ERV9PThABEhsKF0ZPUkNFX1BBUkFMTEVMX01P",
            "REVfT0ZGEAISHwobRk9SQ0VfUEFSQUxMRUxfTU9ERV9SRUdSRVNTEAMikgIK",
            "CExvZ0xldmVsEhkKFUxPR19MRVZFTF9VTlNQRUNJRklFRBAAEhQKEExPR19M",
            "RVZFTF9ERUJVRzUQARIUChBMT0dfTEVWRUxfREVCVUc0EAISFAoQTE9HX0xF",
            "VkVMX0RFQlVHMxADEhQKEExPR19MRVZFTF9ERUJVRzIQBBIUChBMT0dfTEVW",
            "RUxfREVCVUcxEAUSEQoNTE9HX0xFVkVMX0xPRxAGEhQKEExPR19MRVZFTF9O",
            "T1RJQ0UQBxIVChFMT0dfTEVWRUxfV0FSTklORxAIEhMKD0xPR19MRVZFTF9F",
            "UlJPUhAJEhMKD0xPR19MRVZFTF9GQVRBTBAKEhMKD0xPR19MRVZFTF9QQU5J",
            "QxALIpkBChFMb2dFcnJvclZlcmJvc2l0eRIjCh9MT0dfRVJST1JfVkVSQk9T",
            "SVRZX1VOU1BFQ0lGSUVEEAASHQoZTE9HX0VSUk9SX1ZFUkJPU0lUWV9URVJT",
            "RRABEh8KG0xPR19FUlJPUl9WRVJCT1NJVFlfREVGQVVMVBACEh8KG0xPR19F",
            "UlJPUl9WRVJCT1NJVFlfVkVSQk9TRRADIooBCgxMb2dTdGF0ZW1lbnQSHQoZ",
            "TE9HX1NUQVRFTUVOVF9VTlNQRUNJRklFRBAAEhYKEkxPR19TVEFURU1FTlRf",
            "Tk9ORRABEhUKEUxPR19TVEFURU1FTlRfRERMEAISFQoRTE9HX1NUQVRFTUVO",
            "VF9NT0QQAxIVChFMT0dfU1RBVEVNRU5UX0FMTBAEIuYBChRUcmFuc2FjdGlv",
            "bklzb2xhdGlvbhIlCiFUUkFOU0FDVElPTl9JU09MQVRJT05fVU5TUEVDSUZJ",
            "RUQQABIqCiZUUkFOU0FDVElPTl9JU09MQVRJT05fUkVBRF9VTkNPTU1JVFRF",
            "RBABEigKJFRSQU5TQUNUSU9OX0lTT0xBVElPTl9SRUFEX0NPTU1JVFRFRBAC",
            "EikKJVRSQU5TQUNUSU9OX0lTT0xBVElPTl9SRVBFQVRBQkxFX1JFQUQQAxIm",
            "CiJUUkFOU0FDVElPTl9JU09MQVRJT05fU0VSSUFMSVpBQkxFEAQiWwoLQnl0",
            "ZWFPdXRwdXQSHAoYQllURUFfT1VUUFVUX1VOU1BFQ0lGSUVEEAASFAoQQllU",
            "RUFfT1VUUFVUX0hFWBABEhgKFEJZVEVBX09VVFBVVF9FU0NBUEVEEAIiUgoJ",
            "WG1sQmluYXJ5EhoKFlhNTF9CSU5BUllfVU5TUEVDSUZJRUQQABIVChFYTUxf",
            "QklOQVJZX0JBU0U2NBABEhIKDlhNTF9CSU5BUllfSEVYEAIiWAoJWG1sT3B0",
            "aW9uEhoKFlhNTF9PUFRJT05fVU5TUEVDSUZJRUQQABIXChNYTUxfT1BUSU9O",
            "X0RPQ1VNRU5UEAESFgoSWE1MX09QVElPTl9DT05URU5UEAIimgEKDkJhY2tz",
            "bGFzaFF1b3RlEh8KG0JBQ0tTTEFTSF9RVU9URV9VTlNQRUNJRklFRBAAEhMK",
            "D0JBQ0tTTEFTSF9RVU9URRABEhYKEkJBQ0tTTEFTSF9RVU9URV9PThACEhcK",
            "E0JBQ0tTTEFTSF9RVU9URV9PRkYQAxIhCh1CQUNLU0xBU0hfUVVPVEVfU0FG",
            "RV9FTkNPRElORxAEIpkCChZQb3N0Z3Jlc3FsQ29uZmlnU2V0OV82EloKEGVm",
            "ZmVjdGl2ZV9jb25maWcYASABKAsyOi55YW5kZXguY2xvdWQubWRiLnBvc3Rn",
            "cmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWc5XzZCBOjHMQESTwoL",
            "dXNlcl9jb25maWcYAiABKAsyOi55YW5kZXguY2xvdWQubWRiLnBvc3RncmVz",
            "cWwudjEuY29uZmlnLlBvc3RncmVzcWxDb25maWc5XzYSUgoOZGVmYXVsdF9j",
            "b25maWcYAyABKAsyOi55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEu",
            "Y29uZmlnLlBvc3RncmVzcWxDb25maWc5XzZCgQEKKXlhbmRleC5jbG91ZC5h",
            "cGkubWRiLnBvc3RncmVzcWwudjEuY29uZmlnWlRnaXRodWIuY29tL3lhbmRl",
            "eC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL3Bvc3RncmVz",
            "cWwvdjEvY29uZmlnO3Bvc3RncmVzcWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6), global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Parser, new[]{ "MaxConnections", "SharedBuffers", "TempBuffers", "MaxPreparedTransactions", "WorkMem", "MaintenanceWorkMem", "ReplacementSortTuples", "AutovacuumWorkMem", "TempFileLimit", "VacuumCostDelay", "VacuumCostPageHit", "VacuumCostPageMiss", "VacuumCostPageDirty", "VacuumCostLimit", "BgwriterDelay", "BgwriterLruMaxpages", "BgwriterLruMultiplier", "BgwriterFlushAfter", "BackendFlushAfter", "OldSnapshotThreshold", "WalLevel", "SynchronousCommit", "CheckpointTimeout", "CheckpointCompletionTarget", "CheckpointFlushAfter", "MaxWalSize", "MinWalSize", "MaxStandbyStreamingDelay", "DefaultStatisticsTarget", "ConstraintExclusion", "CursorTupleFraction", "FromCollapseLimit", "JoinCollapseLimit", "ForceParallelMode", "ClientMinMessages", "LogMinMessages", "LogMinErrorStatement", "LogMinDurationStatement", "LogCheckpoints", "LogConnections", "LogDisconnections", "LogDuration", "LogErrorVerbosity", "LogLockWaits", "LogStatement", "LogTempFiles", "SearchPath", "RowSecurity", "DefaultTransactionIsolation", "StatementTimeout", "LockTimeout", "IdleInTransactionSessionTimeout", "ByteaOutput", "Xmlbinary", "Xmloption", "GinPendingListLimit", "DeadlockTimeout", "MaxLocksPerTransaction", "MaxPredLocksPerTransaction", "ArrayNulls", "BackslashQuote", "DefaultWithOids", "EscapeStringWarning", "LoCompatPrivileges", "OperatorPrecedenceWarning", "QuoteAllIdentifiers", "StandardConformingStrings", "SynchronizeSeqscans", "TransformNullEquals", "ExitOnError", "SeqPageCost", "RandomPageCost", "SqlInheritance", "AutovacuumMaxWorkers", "AutovacuumVacuumCostDelay", "AutovacuumVacuumCostLimit", "AutovacuumNaptime", "ArchiveTimeout", "TrackActivityQuerySize", "EffectiveIoConcurrency", "EffectiveCacheSize" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfigSet9_6), global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfigSet9_6.Parser, new[]{ "EffectiveConfig", "UserConfig", "DefaultConfig" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
  /// parameters whose detailed description is available in
  /// [PostgreSQL documentation](https://www.postgresql.org/docs/9.6/static/runtime-config).
  /// </summary>
  internal sealed partial class PostgresqlConfig9_6 : pb::IMessage<PostgresqlConfig9_6> {
    private static readonly pb::MessageParser<PostgresqlConfig9_6> _parser = new pb::MessageParser<PostgresqlConfig9_6>(() => new PostgresqlConfig9_6());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostgresqlConfig9_6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Postgresql.V1.Config.Postgresql96Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig9_6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig9_6(PostgresqlConfig9_6 other) : this() {
      MaxConnections = other.MaxConnections;
      SharedBuffers = other.SharedBuffers;
      TempBuffers = other.TempBuffers;
      MaxPreparedTransactions = other.MaxPreparedTransactions;
      WorkMem = other.WorkMem;
      MaintenanceWorkMem = other.MaintenanceWorkMem;
      ReplacementSortTuples = other.ReplacementSortTuples;
      AutovacuumWorkMem = other.AutovacuumWorkMem;
      TempFileLimit = other.TempFileLimit;
      VacuumCostDelay = other.VacuumCostDelay;
      VacuumCostPageHit = other.VacuumCostPageHit;
      VacuumCostPageMiss = other.VacuumCostPageMiss;
      VacuumCostPageDirty = other.VacuumCostPageDirty;
      VacuumCostLimit = other.VacuumCostLimit;
      BgwriterDelay = other.BgwriterDelay;
      BgwriterLruMaxpages = other.BgwriterLruMaxpages;
      BgwriterLruMultiplier = other.BgwriterLruMultiplier;
      BgwriterFlushAfter = other.BgwriterFlushAfter;
      BackendFlushAfter = other.BackendFlushAfter;
      OldSnapshotThreshold = other.OldSnapshotThreshold;
      walLevel_ = other.walLevel_;
      synchronousCommit_ = other.synchronousCommit_;
      CheckpointTimeout = other.CheckpointTimeout;
      CheckpointCompletionTarget = other.CheckpointCompletionTarget;
      CheckpointFlushAfter = other.CheckpointFlushAfter;
      MaxWalSize = other.MaxWalSize;
      MinWalSize = other.MinWalSize;
      MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
      DefaultStatisticsTarget = other.DefaultStatisticsTarget;
      constraintExclusion_ = other.constraintExclusion_;
      CursorTupleFraction = other.CursorTupleFraction;
      FromCollapseLimit = other.FromCollapseLimit;
      JoinCollapseLimit = other.JoinCollapseLimit;
      forceParallelMode_ = other.forceParallelMode_;
      clientMinMessages_ = other.clientMinMessages_;
      logMinMessages_ = other.logMinMessages_;
      logMinErrorStatement_ = other.logMinErrorStatement_;
      LogMinDurationStatement = other.LogMinDurationStatement;
      LogCheckpoints = other.LogCheckpoints;
      LogConnections = other.LogConnections;
      LogDisconnections = other.LogDisconnections;
      LogDuration = other.LogDuration;
      logErrorVerbosity_ = other.logErrorVerbosity_;
      LogLockWaits = other.LogLockWaits;
      logStatement_ = other.logStatement_;
      LogTempFiles = other.LogTempFiles;
      searchPath_ = other.searchPath_;
      RowSecurity = other.RowSecurity;
      defaultTransactionIsolation_ = other.defaultTransactionIsolation_;
      StatementTimeout = other.StatementTimeout;
      LockTimeout = other.LockTimeout;
      IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
      byteaOutput_ = other.byteaOutput_;
      xmlbinary_ = other.xmlbinary_;
      xmloption_ = other.xmloption_;
      GinPendingListLimit = other.GinPendingListLimit;
      DeadlockTimeout = other.DeadlockTimeout;
      MaxLocksPerTransaction = other.MaxLocksPerTransaction;
      MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
      ArrayNulls = other.ArrayNulls;
      backslashQuote_ = other.backslashQuote_;
      DefaultWithOids = other.DefaultWithOids;
      EscapeStringWarning = other.EscapeStringWarning;
      LoCompatPrivileges = other.LoCompatPrivileges;
      OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
      QuoteAllIdentifiers = other.QuoteAllIdentifiers;
      StandardConformingStrings = other.StandardConformingStrings;
      SynchronizeSeqscans = other.SynchronizeSeqscans;
      TransformNullEquals = other.TransformNullEquals;
      ExitOnError = other.ExitOnError;
      SeqPageCost = other.SeqPageCost;
      RandomPageCost = other.RandomPageCost;
      SqlInheritance = other.SqlInheritance;
      AutovacuumMaxWorkers = other.AutovacuumMaxWorkers;
      AutovacuumVacuumCostDelay = other.AutovacuumVacuumCostDelay;
      AutovacuumVacuumCostLimit = other.AutovacuumVacuumCostLimit;
      AutovacuumNaptime = other.AutovacuumNaptime;
      ArchiveTimeout = other.ArchiveTimeout;
      TrackActivityQuerySize = other.TrackActivityQuerySize;
      EffectiveIoConcurrency = other.EffectiveIoConcurrency;
      EffectiveCacheSize = other.EffectiveCacheSize;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfig9_6 Clone() {
      return new PostgresqlConfig9_6(this);
    }

    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_maxConnections_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? maxConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }


    /// <summary>Field number for the "shared_buffers" field.</summary>
    public const int SharedBuffersFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_sharedBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? sharedBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SharedBuffers {
      get { return sharedBuffers_; }
      set {
        sharedBuffers_ = value;
      }
    }


    /// <summary>Field number for the "temp_buffers" field.</summary>
    public const int TempBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_tempBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? tempBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempBuffers {
      get { return tempBuffers_; }
      set {
        tempBuffers_ = value;
      }
    }


    /// <summary>Field number for the "max_prepared_transactions" field.</summary>
    public const int MaxPreparedTransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_maxPreparedTransactions_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? maxPreparedTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPreparedTransactions {
      get { return maxPreparedTransactions_; }
      set {
        maxPreparedTransactions_ = value;
      }
    }


    /// <summary>Field number for the "work_mem" field.</summary>
    public const int WorkMemFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_workMem_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? workMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? WorkMem {
      get { return workMem_; }
      set {
        workMem_ = value;
      }
    }


    /// <summary>Field number for the "maintenance_work_mem" field.</summary>
    public const int MaintenanceWorkMemFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_maintenanceWorkMem_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? maintenanceWorkMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaintenanceWorkMem {
      get { return maintenanceWorkMem_; }
      set {
        maintenanceWorkMem_ = value;
      }
    }


    /// <summary>Field number for the "replacement_sort_tuples" field.</summary>
    public const int ReplacementSortTuplesFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_replacementSortTuples_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? replacementSortTuples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ReplacementSortTuples {
      get { return replacementSortTuples_; }
      set {
        replacementSortTuples_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_work_mem" field.</summary>
    public const int AutovacuumWorkMemFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_autovacuumWorkMem_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? autovacuumWorkMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumWorkMem {
      get { return autovacuumWorkMem_; }
      set {
        autovacuumWorkMem_ = value;
      }
    }


    /// <summary>Field number for the "temp_file_limit" field.</summary>
    public const int TempFileLimitFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_tempFileLimit_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? tempFileLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempFileLimit {
      get { return tempFileLimit_; }
      set {
        tempFileLimit_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_delay" field.</summary>
    public const int VacuumCostDelayFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostDelay_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? vacuumCostDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostDelay {
      get { return vacuumCostDelay_; }
      set {
        vacuumCostDelay_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_hit" field.</summary>
    public const int VacuumCostPageHitFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageHit_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? vacuumCostPageHit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageHit {
      get { return vacuumCostPageHit_; }
      set {
        vacuumCostPageHit_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_miss" field.</summary>
    public const int VacuumCostPageMissFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageMiss_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? vacuumCostPageMiss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageMiss {
      get { return vacuumCostPageMiss_; }
      set {
        vacuumCostPageMiss_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_page_dirty" field.</summary>
    public const int VacuumCostPageDirtyFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostPageDirty_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? vacuumCostPageDirty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostPageDirty {
      get { return vacuumCostPageDirty_; }
      set {
        vacuumCostPageDirty_ = value;
      }
    }


    /// <summary>Field number for the "vacuum_cost_limit" field.</summary>
    public const int VacuumCostLimitFieldNumber = 14;
    private static readonly pb::FieldCodec<long?> _single_vacuumCostLimit_codec = pb::FieldCodec.ForStructWrapper<long>(114);
    private long? vacuumCostLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? VacuumCostLimit {
      get { return vacuumCostLimit_; }
      set {
        vacuumCostLimit_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_delay" field.</summary>
    public const int BgwriterDelayFieldNumber = 15;
    private static readonly pb::FieldCodec<long?> _single_bgwriterDelay_codec = pb::FieldCodec.ForStructWrapper<long>(122);
    private long? bgwriterDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterDelay {
      get { return bgwriterDelay_; }
      set {
        bgwriterDelay_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_lru_maxpages" field.</summary>
    public const int BgwriterLruMaxpagesFieldNumber = 16;
    private static readonly pb::FieldCodec<long?> _single_bgwriterLruMaxpages_codec = pb::FieldCodec.ForStructWrapper<long>(130);
    private long? bgwriterLruMaxpages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterLruMaxpages {
      get { return bgwriterLruMaxpages_; }
      set {
        bgwriterLruMaxpages_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_lru_multiplier" field.</summary>
    public const int BgwriterLruMultiplierFieldNumber = 17;
    private static readonly pb::FieldCodec<double?> _single_bgwriterLruMultiplier_codec = pb::FieldCodec.ForStructWrapper<double>(138);
    private double? bgwriterLruMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? BgwriterLruMultiplier {
      get { return bgwriterLruMultiplier_; }
      set {
        bgwriterLruMultiplier_ = value;
      }
    }


    /// <summary>Field number for the "bgwriter_flush_after" field.</summary>
    public const int BgwriterFlushAfterFieldNumber = 18;
    private static readonly pb::FieldCodec<long?> _single_bgwriterFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(146);
    private long? bgwriterFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BgwriterFlushAfter {
      get { return bgwriterFlushAfter_; }
      set {
        bgwriterFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "backend_flush_after" field.</summary>
    public const int BackendFlushAfterFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_backendFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? backendFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackendFlushAfter {
      get { return backendFlushAfter_; }
      set {
        backendFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "old_snapshot_threshold" field.</summary>
    public const int OldSnapshotThresholdFieldNumber = 20;
    private static readonly pb::FieldCodec<long?> _single_oldSnapshotThreshold_codec = pb::FieldCodec.ForStructWrapper<long>(162);
    private long? oldSnapshotThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OldSnapshotThreshold {
      get { return oldSnapshotThreshold_; }
      set {
        oldSnapshotThreshold_ = value;
      }
    }


    /// <summary>Field number for the "wal_level" field.</summary>
    public const int WalLevelFieldNumber = 21;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel walLevel_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel WalLevel {
      get { return walLevel_; }
      set {
        walLevel_ = value;
      }
    }

    /// <summary>Field number for the "synchronous_commit" field.</summary>
    public const int SynchronousCommitFieldNumber = 22;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit synchronousCommit_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit SynchronousCommit {
      get { return synchronousCommit_; }
      set {
        synchronousCommit_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_timeout" field.</summary>
    public const int CheckpointTimeoutFieldNumber = 23;
    private static readonly pb::FieldCodec<long?> _single_checkpointTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(186);
    private long? checkpointTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CheckpointTimeout {
      get { return checkpointTimeout_; }
      set {
        checkpointTimeout_ = value;
      }
    }


    /// <summary>Field number for the "checkpoint_completion_target" field.</summary>
    public const int CheckpointCompletionTargetFieldNumber = 24;
    private static readonly pb::FieldCodec<double?> _single_checkpointCompletionTarget_codec = pb::FieldCodec.ForStructWrapper<double>(194);
    private double? checkpointCompletionTarget_;
    /// <summary>
    /// Acceptable values are 0.0 to 1.0, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CheckpointCompletionTarget {
      get { return checkpointCompletionTarget_; }
      set {
        checkpointCompletionTarget_ = value;
      }
    }


    /// <summary>Field number for the "checkpoint_flush_after" field.</summary>
    public const int CheckpointFlushAfterFieldNumber = 25;
    private static readonly pb::FieldCodec<long?> _single_checkpointFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(202);
    private long? checkpointFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? CheckpointFlushAfter {
      get { return checkpointFlushAfter_; }
      set {
        checkpointFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "max_wal_size" field.</summary>
    public const int MaxWalSizeFieldNumber = 26;
    private static readonly pb::FieldCodec<long?> _single_maxWalSize_codec = pb::FieldCodec.ForStructWrapper<long>(210);
    private long? maxWalSize_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxWalSize {
      get { return maxWalSize_; }
      set {
        maxWalSize_ = value;
      }
    }


    /// <summary>Field number for the "min_wal_size" field.</summary>
    public const int MinWalSizeFieldNumber = 27;
    private static readonly pb::FieldCodec<long?> _single_minWalSize_codec = pb::FieldCodec.ForStructWrapper<long>(218);
    private long? minWalSize_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinWalSize {
      get { return minWalSize_; }
      set {
        minWalSize_ = value;
      }
    }


    /// <summary>Field number for the "max_standby_streaming_delay" field.</summary>
    public const int MaxStandbyStreamingDelayFieldNumber = 28;
    private static readonly pb::FieldCodec<long?> _single_maxStandbyStreamingDelay_codec = pb::FieldCodec.ForStructWrapper<long>(226);
    private long? maxStandbyStreamingDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxStandbyStreamingDelay {
      get { return maxStandbyStreamingDelay_; }
      set {
        maxStandbyStreamingDelay_ = value;
      }
    }


    /// <summary>Field number for the "default_statistics_target" field.</summary>
    public const int DefaultStatisticsTargetFieldNumber = 29;
    private static readonly pb::FieldCodec<long?> _single_defaultStatisticsTarget_codec = pb::FieldCodec.ForStructWrapper<long>(234);
    private long? defaultStatisticsTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DefaultStatisticsTarget {
      get { return defaultStatisticsTarget_; }
      set {
        defaultStatisticsTarget_ = value;
      }
    }


    /// <summary>Field number for the "constraint_exclusion" field.</summary>
    public const int ConstraintExclusionFieldNumber = 30;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion constraintExclusion_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion ConstraintExclusion {
      get { return constraintExclusion_; }
      set {
        constraintExclusion_ = value;
      }
    }

    /// <summary>Field number for the "cursor_tuple_fraction" field.</summary>
    public const int CursorTupleFractionFieldNumber = 31;
    private static readonly pb::FieldCodec<double?> _single_cursorTupleFraction_codec = pb::FieldCodec.ForStructWrapper<double>(250);
    private double? cursorTupleFraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CursorTupleFraction {
      get { return cursorTupleFraction_; }
      set {
        cursorTupleFraction_ = value;
      }
    }


    /// <summary>Field number for the "from_collapse_limit" field.</summary>
    public const int FromCollapseLimitFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_fromCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? fromCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? FromCollapseLimit {
      get { return fromCollapseLimit_; }
      set {
        fromCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "join_collapse_limit" field.</summary>
    public const int JoinCollapseLimitFieldNumber = 33;
    private static readonly pb::FieldCodec<long?> _single_joinCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(266);
    private long? joinCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? JoinCollapseLimit {
      get { return joinCollapseLimit_; }
      set {
        joinCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "force_parallel_mode" field.</summary>
    public const int ForceParallelModeFieldNumber = 34;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode forceParallelMode_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode ForceParallelMode {
      get { return forceParallelMode_; }
      set {
        forceParallelMode_ = value;
      }
    }

    /// <summary>Field number for the "client_min_messages" field.</summary>
    public const int ClientMinMessagesFieldNumber = 35;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel clientMinMessages_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel ClientMinMessages {
      get { return clientMinMessages_; }
      set {
        clientMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_messages" field.</summary>
    public const int LogMinMessagesFieldNumber = 36;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel logMinMessages_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel LogMinMessages {
      get { return logMinMessages_; }
      set {
        logMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_error_statement" field.</summary>
    public const int LogMinErrorStatementFieldNumber = 37;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel logMinErrorStatement_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel LogMinErrorStatement {
      get { return logMinErrorStatement_; }
      set {
        logMinErrorStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_min_duration_statement" field.</summary>
    public const int LogMinDurationStatementFieldNumber = 38;
    private static readonly pb::FieldCodec<long?> _single_logMinDurationStatement_codec = pb::FieldCodec.ForStructWrapper<long>(306);
    private long? logMinDurationStatement_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogMinDurationStatement {
      get { return logMinDurationStatement_; }
      set {
        logMinDurationStatement_ = value;
      }
    }


    /// <summary>Field number for the "log_checkpoints" field.</summary>
    public const int LogCheckpointsFieldNumber = 39;
    private static readonly pb::FieldCodec<bool?> _single_logCheckpoints_codec = pb::FieldCodec.ForStructWrapper<bool>(314);
    private bool? logCheckpoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogCheckpoints {
      get { return logCheckpoints_; }
      set {
        logCheckpoints_ = value;
      }
    }


    /// <summary>Field number for the "log_connections" field.</summary>
    public const int LogConnectionsFieldNumber = 40;
    private static readonly pb::FieldCodec<bool?> _single_logConnections_codec = pb::FieldCodec.ForStructWrapper<bool>(322);
    private bool? logConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogConnections {
      get { return logConnections_; }
      set {
        logConnections_ = value;
      }
    }


    /// <summary>Field number for the "log_disconnections" field.</summary>
    public const int LogDisconnectionsFieldNumber = 41;
    private static readonly pb::FieldCodec<bool?> _single_logDisconnections_codec = pb::FieldCodec.ForStructWrapper<bool>(330);
    private bool? logDisconnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDisconnections {
      get { return logDisconnections_; }
      set {
        logDisconnections_ = value;
      }
    }


    /// <summary>Field number for the "log_duration" field.</summary>
    public const int LogDurationFieldNumber = 42;
    private static readonly pb::FieldCodec<bool?> _single_logDuration_codec = pb::FieldCodec.ForStructWrapper<bool>(338);
    private bool? logDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDuration {
      get { return logDuration_; }
      set {
        logDuration_ = value;
      }
    }


    /// <summary>Field number for the "log_error_verbosity" field.</summary>
    public const int LogErrorVerbosityFieldNumber = 43;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity logErrorVerbosity_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity LogErrorVerbosity {
      get { return logErrorVerbosity_; }
      set {
        logErrorVerbosity_ = value;
      }
    }

    /// <summary>Field number for the "log_lock_waits" field.</summary>
    public const int LogLockWaitsFieldNumber = 44;
    private static readonly pb::FieldCodec<bool?> _single_logLockWaits_codec = pb::FieldCodec.ForStructWrapper<bool>(354);
    private bool? logLockWaits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogLockWaits {
      get { return logLockWaits_; }
      set {
        logLockWaits_ = value;
      }
    }


    /// <summary>Field number for the "log_statement" field.</summary>
    public const int LogStatementFieldNumber = 45;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement logStatement_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement LogStatement {
      get { return logStatement_; }
      set {
        logStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_temp_files" field.</summary>
    public const int LogTempFilesFieldNumber = 46;
    private static readonly pb::FieldCodec<long?> _single_logTempFiles_codec = pb::FieldCodec.ForStructWrapper<long>(370);
    private long? logTempFiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogTempFiles {
      get { return logTempFiles_; }
      set {
        logTempFiles_ = value;
      }
    }


    /// <summary>Field number for the "search_path" field.</summary>
    public const int SearchPathFieldNumber = 47;
    private string searchPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchPath {
      get { return searchPath_; }
      set {
        searchPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_security" field.</summary>
    public const int RowSecurityFieldNumber = 48;
    private static readonly pb::FieldCodec<bool?> _single_rowSecurity_codec = pb::FieldCodec.ForStructWrapper<bool>(386);
    private bool? rowSecurity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RowSecurity {
      get { return rowSecurity_; }
      set {
        rowSecurity_ = value;
      }
    }


    /// <summary>Field number for the "default_transaction_isolation" field.</summary>
    public const int DefaultTransactionIsolationFieldNumber = 49;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation defaultTransactionIsolation_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation DefaultTransactionIsolation {
      get { return defaultTransactionIsolation_; }
      set {
        defaultTransactionIsolation_ = value;
      }
    }

    /// <summary>Field number for the "statement_timeout" field.</summary>
    public const int StatementTimeoutFieldNumber = 50;
    private static readonly pb::FieldCodec<long?> _single_statementTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(402);
    private long? statementTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? StatementTimeout {
      get { return statementTimeout_; }
      set {
        statementTimeout_ = value;
      }
    }


    /// <summary>Field number for the "lock_timeout" field.</summary>
    public const int LockTimeoutFieldNumber = 51;
    private static readonly pb::FieldCodec<long?> _single_lockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(410);
    private long? lockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LockTimeout {
      get { return lockTimeout_; }
      set {
        lockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "idle_in_transaction_session_timeout" field.</summary>
    public const int IdleInTransactionSessionTimeoutFieldNumber = 52;
    private static readonly pb::FieldCodec<long?> _single_idleInTransactionSessionTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(418);
    private long? idleInTransactionSessionTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? IdleInTransactionSessionTimeout {
      get { return idleInTransactionSessionTimeout_; }
      set {
        idleInTransactionSessionTimeout_ = value;
      }
    }


    /// <summary>Field number for the "bytea_output" field.</summary>
    public const int ByteaOutputFieldNumber = 53;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput byteaOutput_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput ByteaOutput {
      get { return byteaOutput_; }
      set {
        byteaOutput_ = value;
      }
    }

    /// <summary>Field number for the "xmlbinary" field.</summary>
    public const int XmlbinaryFieldNumber = 54;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary xmlbinary_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary Xmlbinary {
      get { return xmlbinary_; }
      set {
        xmlbinary_ = value;
      }
    }

    /// <summary>Field number for the "xmloption" field.</summary>
    public const int XmloptionFieldNumber = 55;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption xmloption_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption Xmloption {
      get { return xmloption_; }
      set {
        xmloption_ = value;
      }
    }

    /// <summary>Field number for the "gin_pending_list_limit" field.</summary>
    public const int GinPendingListLimitFieldNumber = 56;
    private static readonly pb::FieldCodec<long?> _single_ginPendingListLimit_codec = pb::FieldCodec.ForStructWrapper<long>(450);
    private long? ginPendingListLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GinPendingListLimit {
      get { return ginPendingListLimit_; }
      set {
        ginPendingListLimit_ = value;
      }
    }


    /// <summary>Field number for the "deadlock_timeout" field.</summary>
    public const int DeadlockTimeoutFieldNumber = 57;
    private static readonly pb::FieldCodec<long?> _single_deadlockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(458);
    private long? deadlockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DeadlockTimeout {
      get { return deadlockTimeout_; }
      set {
        deadlockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "max_locks_per_transaction" field.</summary>
    public const int MaxLocksPerTransactionFieldNumber = 58;
    private static readonly pb::FieldCodec<long?> _single_maxLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(466);
    private long? maxLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxLocksPerTransaction {
      get { return maxLocksPerTransaction_; }
      set {
        maxLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "max_pred_locks_per_transaction" field.</summary>
    public const int MaxPredLocksPerTransactionFieldNumber = 59;
    private static readonly pb::FieldCodec<long?> _single_maxPredLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(474);
    private long? maxPredLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPredLocksPerTransaction {
      get { return maxPredLocksPerTransaction_; }
      set {
        maxPredLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "array_nulls" field.</summary>
    public const int ArrayNullsFieldNumber = 60;
    private static readonly pb::FieldCodec<bool?> _single_arrayNulls_codec = pb::FieldCodec.ForStructWrapper<bool>(482);
    private bool? arrayNulls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ArrayNulls {
      get { return arrayNulls_; }
      set {
        arrayNulls_ = value;
      }
    }


    /// <summary>Field number for the "backslash_quote" field.</summary>
    public const int BackslashQuoteFieldNumber = 61;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote backslashQuote_ = global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote BackslashQuote {
      get { return backslashQuote_; }
      set {
        backslashQuote_ = value;
      }
    }

    /// <summary>Field number for the "default_with_oids" field.</summary>
    public const int DefaultWithOidsFieldNumber = 62;
    private static readonly pb::FieldCodec<bool?> _single_defaultWithOids_codec = pb::FieldCodec.ForStructWrapper<bool>(498);
    private bool? defaultWithOids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DefaultWithOids {
      get { return defaultWithOids_; }
      set {
        defaultWithOids_ = value;
      }
    }


    /// <summary>Field number for the "escape_string_warning" field.</summary>
    public const int EscapeStringWarningFieldNumber = 63;
    private static readonly pb::FieldCodec<bool?> _single_escapeStringWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(506);
    private bool? escapeStringWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EscapeStringWarning {
      get { return escapeStringWarning_; }
      set {
        escapeStringWarning_ = value;
      }
    }


    /// <summary>Field number for the "lo_compat_privileges" field.</summary>
    public const int LoCompatPrivilegesFieldNumber = 64;
    private static readonly pb::FieldCodec<bool?> _single_loCompatPrivileges_codec = pb::FieldCodec.ForStructWrapper<bool>(514);
    private bool? loCompatPrivileges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LoCompatPrivileges {
      get { return loCompatPrivileges_; }
      set {
        loCompatPrivileges_ = value;
      }
    }


    /// <summary>Field number for the "operator_precedence_warning" field.</summary>
    public const int OperatorPrecedenceWarningFieldNumber = 65;
    private static readonly pb::FieldCodec<bool?> _single_operatorPrecedenceWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(522);
    private bool? operatorPrecedenceWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OperatorPrecedenceWarning {
      get { return operatorPrecedenceWarning_; }
      set {
        operatorPrecedenceWarning_ = value;
      }
    }


    /// <summary>Field number for the "quote_all_identifiers" field.</summary>
    public const int QuoteAllIdentifiersFieldNumber = 66;
    private static readonly pb::FieldCodec<bool?> _single_quoteAllIdentifiers_codec = pb::FieldCodec.ForStructWrapper<bool>(530);
    private bool? quoteAllIdentifiers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? QuoteAllIdentifiers {
      get { return quoteAllIdentifiers_; }
      set {
        quoteAllIdentifiers_ = value;
      }
    }


    /// <summary>Field number for the "standard_conforming_strings" field.</summary>
    public const int StandardConformingStringsFieldNumber = 67;
    private static readonly pb::FieldCodec<bool?> _single_standardConformingStrings_codec = pb::FieldCodec.ForStructWrapper<bool>(538);
    private bool? standardConformingStrings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? StandardConformingStrings {
      get { return standardConformingStrings_; }
      set {
        standardConformingStrings_ = value;
      }
    }


    /// <summary>Field number for the "synchronize_seqscans" field.</summary>
    public const int SynchronizeSeqscansFieldNumber = 68;
    private static readonly pb::FieldCodec<bool?> _single_synchronizeSeqscans_codec = pb::FieldCodec.ForStructWrapper<bool>(546);
    private bool? synchronizeSeqscans_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SynchronizeSeqscans {
      get { return synchronizeSeqscans_; }
      set {
        synchronizeSeqscans_ = value;
      }
    }


    /// <summary>Field number for the "transform_null_equals" field.</summary>
    public const int TransformNullEqualsFieldNumber = 69;
    private static readonly pb::FieldCodec<bool?> _single_transformNullEquals_codec = pb::FieldCodec.ForStructWrapper<bool>(554);
    private bool? transformNullEquals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TransformNullEquals {
      get { return transformNullEquals_; }
      set {
        transformNullEquals_ = value;
      }
    }


    /// <summary>Field number for the "exit_on_error" field.</summary>
    public const int ExitOnErrorFieldNumber = 70;
    private static readonly pb::FieldCodec<bool?> _single_exitOnError_codec = pb::FieldCodec.ForStructWrapper<bool>(562);
    private bool? exitOnError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ExitOnError {
      get { return exitOnError_; }
      set {
        exitOnError_ = value;
      }
    }


    /// <summary>Field number for the "seq_page_cost" field.</summary>
    public const int SeqPageCostFieldNumber = 71;
    private static readonly pb::FieldCodec<double?> _single_seqPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(570);
    private double? seqPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SeqPageCost {
      get { return seqPageCost_; }
      set {
        seqPageCost_ = value;
      }
    }


    /// <summary>Field number for the "random_page_cost" field.</summary>
    public const int RandomPageCostFieldNumber = 72;
    private static readonly pb::FieldCodec<double?> _single_randomPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(578);
    private double? randomPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RandomPageCost {
      get { return randomPageCost_; }
      set {
        randomPageCost_ = value;
      }
    }


    /// <summary>Field number for the "sql_inheritance" field.</summary>
    public const int SqlInheritanceFieldNumber = 73;
    private static readonly pb::FieldCodec<bool?> _single_sqlInheritance_codec = pb::FieldCodec.ForStructWrapper<bool>(586);
    private bool? sqlInheritance_;
    /// <summary>
    /// This option has been removed in PostgreSQL 10.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SqlInheritance {
      get { return sqlInheritance_; }
      set {
        sqlInheritance_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_max_workers" field.</summary>
    public const int AutovacuumMaxWorkersFieldNumber = 74;
    private static readonly pb::FieldCodec<long?> _single_autovacuumMaxWorkers_codec = pb::FieldCodec.ForStructWrapper<long>(594);
    private long? autovacuumMaxWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumMaxWorkers {
      get { return autovacuumMaxWorkers_; }
      set {
        autovacuumMaxWorkers_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_vacuum_cost_delay" field.</summary>
    public const int AutovacuumVacuumCostDelayFieldNumber = 75;
    private static readonly pb::FieldCodec<long?> _single_autovacuumVacuumCostDelay_codec = pb::FieldCodec.ForStructWrapper<long>(602);
    private long? autovacuumVacuumCostDelay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumVacuumCostDelay {
      get { return autovacuumVacuumCostDelay_; }
      set {
        autovacuumVacuumCostDelay_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_vacuum_cost_limit" field.</summary>
    public const int AutovacuumVacuumCostLimitFieldNumber = 76;
    private static readonly pb::FieldCodec<long?> _single_autovacuumVacuumCostLimit_codec = pb::FieldCodec.ForStructWrapper<long>(610);
    private long? autovacuumVacuumCostLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumVacuumCostLimit {
      get { return autovacuumVacuumCostLimit_; }
      set {
        autovacuumVacuumCostLimit_ = value;
      }
    }


    /// <summary>Field number for the "autovacuum_naptime" field.</summary>
    public const int AutovacuumNaptimeFieldNumber = 77;
    private static readonly pb::FieldCodec<long?> _single_autovacuumNaptime_codec = pb::FieldCodec.ForStructWrapper<long>(618);
    private long? autovacuumNaptime_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? AutovacuumNaptime {
      get { return autovacuumNaptime_; }
      set {
        autovacuumNaptime_ = value;
      }
    }


    /// <summary>Field number for the "archive_timeout" field.</summary>
    public const int ArchiveTimeoutFieldNumber = 78;
    private static readonly pb::FieldCodec<long?> _single_archiveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(626);
    private long? archiveTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ArchiveTimeout {
      get { return archiveTimeout_; }
      set {
        archiveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "track_activity_query_size" field.</summary>
    public const int TrackActivityQuerySizeFieldNumber = 79;
    private static readonly pb::FieldCodec<long?> _single_trackActivityQuerySize_codec = pb::FieldCodec.ForStructWrapper<long>(634);
    private long? trackActivityQuerySize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TrackActivityQuerySize {
      get { return trackActivityQuerySize_; }
      set {
        trackActivityQuerySize_ = value;
      }
    }


    /// <summary>Field number for the "effective_io_concurrency" field.</summary>
    public const int EffectiveIoConcurrencyFieldNumber = 80;
    private static readonly pb::FieldCodec<long?> _single_effectiveIoConcurrency_codec = pb::FieldCodec.ForStructWrapper<long>(642);
    private long? effectiveIoConcurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveIoConcurrency {
      get { return effectiveIoConcurrency_; }
      set {
        effectiveIoConcurrency_ = value;
      }
    }


    /// <summary>Field number for the "effective_cache_size" field.</summary>
    public const int EffectiveCacheSizeFieldNumber = 81;
    private static readonly pb::FieldCodec<long?> _single_effectiveCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(650);
    private long? effectiveCacheSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveCacheSize {
      get { return effectiveCacheSize_; }
      set {
        effectiveCacheSize_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostgresqlConfig9_6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostgresqlConfig9_6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxConnections != other.MaxConnections) return false;
      if (SharedBuffers != other.SharedBuffers) return false;
      if (TempBuffers != other.TempBuffers) return false;
      if (MaxPreparedTransactions != other.MaxPreparedTransactions) return false;
      if (WorkMem != other.WorkMem) return false;
      if (MaintenanceWorkMem != other.MaintenanceWorkMem) return false;
      if (ReplacementSortTuples != other.ReplacementSortTuples) return false;
      if (AutovacuumWorkMem != other.AutovacuumWorkMem) return false;
      if (TempFileLimit != other.TempFileLimit) return false;
      if (VacuumCostDelay != other.VacuumCostDelay) return false;
      if (VacuumCostPageHit != other.VacuumCostPageHit) return false;
      if (VacuumCostPageMiss != other.VacuumCostPageMiss) return false;
      if (VacuumCostPageDirty != other.VacuumCostPageDirty) return false;
      if (VacuumCostLimit != other.VacuumCostLimit) return false;
      if (BgwriterDelay != other.BgwriterDelay) return false;
      if (BgwriterLruMaxpages != other.BgwriterLruMaxpages) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(BgwriterLruMultiplier, other.BgwriterLruMultiplier)) return false;
      if (BgwriterFlushAfter != other.BgwriterFlushAfter) return false;
      if (BackendFlushAfter != other.BackendFlushAfter) return false;
      if (OldSnapshotThreshold != other.OldSnapshotThreshold) return false;
      if (WalLevel != other.WalLevel) return false;
      if (SynchronousCommit != other.SynchronousCommit) return false;
      if (CheckpointTimeout != other.CheckpointTimeout) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CheckpointCompletionTarget, other.CheckpointCompletionTarget)) return false;
      if (CheckpointFlushAfter != other.CheckpointFlushAfter) return false;
      if (MaxWalSize != other.MaxWalSize) return false;
      if (MinWalSize != other.MinWalSize) return false;
      if (MaxStandbyStreamingDelay != other.MaxStandbyStreamingDelay) return false;
      if (DefaultStatisticsTarget != other.DefaultStatisticsTarget) return false;
      if (ConstraintExclusion != other.ConstraintExclusion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CursorTupleFraction, other.CursorTupleFraction)) return false;
      if (FromCollapseLimit != other.FromCollapseLimit) return false;
      if (JoinCollapseLimit != other.JoinCollapseLimit) return false;
      if (ForceParallelMode != other.ForceParallelMode) return false;
      if (ClientMinMessages != other.ClientMinMessages) return false;
      if (LogMinMessages != other.LogMinMessages) return false;
      if (LogMinErrorStatement != other.LogMinErrorStatement) return false;
      if (LogMinDurationStatement != other.LogMinDurationStatement) return false;
      if (LogCheckpoints != other.LogCheckpoints) return false;
      if (LogConnections != other.LogConnections) return false;
      if (LogDisconnections != other.LogDisconnections) return false;
      if (LogDuration != other.LogDuration) return false;
      if (LogErrorVerbosity != other.LogErrorVerbosity) return false;
      if (LogLockWaits != other.LogLockWaits) return false;
      if (LogStatement != other.LogStatement) return false;
      if (LogTempFiles != other.LogTempFiles) return false;
      if (SearchPath != other.SearchPath) return false;
      if (RowSecurity != other.RowSecurity) return false;
      if (DefaultTransactionIsolation != other.DefaultTransactionIsolation) return false;
      if (StatementTimeout != other.StatementTimeout) return false;
      if (LockTimeout != other.LockTimeout) return false;
      if (IdleInTransactionSessionTimeout != other.IdleInTransactionSessionTimeout) return false;
      if (ByteaOutput != other.ByteaOutput) return false;
      if (Xmlbinary != other.Xmlbinary) return false;
      if (Xmloption != other.Xmloption) return false;
      if (GinPendingListLimit != other.GinPendingListLimit) return false;
      if (DeadlockTimeout != other.DeadlockTimeout) return false;
      if (MaxLocksPerTransaction != other.MaxLocksPerTransaction) return false;
      if (MaxPredLocksPerTransaction != other.MaxPredLocksPerTransaction) return false;
      if (ArrayNulls != other.ArrayNulls) return false;
      if (BackslashQuote != other.BackslashQuote) return false;
      if (DefaultWithOids != other.DefaultWithOids) return false;
      if (EscapeStringWarning != other.EscapeStringWarning) return false;
      if (LoCompatPrivileges != other.LoCompatPrivileges) return false;
      if (OperatorPrecedenceWarning != other.OperatorPrecedenceWarning) return false;
      if (QuoteAllIdentifiers != other.QuoteAllIdentifiers) return false;
      if (StandardConformingStrings != other.StandardConformingStrings) return false;
      if (SynchronizeSeqscans != other.SynchronizeSeqscans) return false;
      if (TransformNullEquals != other.TransformNullEquals) return false;
      if (ExitOnError != other.ExitOnError) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SeqPageCost, other.SeqPageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RandomPageCost, other.RandomPageCost)) return false;
      if (SqlInheritance != other.SqlInheritance) return false;
      if (AutovacuumMaxWorkers != other.AutovacuumMaxWorkers) return false;
      if (AutovacuumVacuumCostDelay != other.AutovacuumVacuumCostDelay) return false;
      if (AutovacuumVacuumCostLimit != other.AutovacuumVacuumCostLimit) return false;
      if (AutovacuumNaptime != other.AutovacuumNaptime) return false;
      if (ArchiveTimeout != other.ArchiveTimeout) return false;
      if (TrackActivityQuerySize != other.TrackActivityQuerySize) return false;
      if (EffectiveIoConcurrency != other.EffectiveIoConcurrency) return false;
      if (EffectiveCacheSize != other.EffectiveCacheSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (sharedBuffers_ != null) hash ^= SharedBuffers.GetHashCode();
      if (tempBuffers_ != null) hash ^= TempBuffers.GetHashCode();
      if (maxPreparedTransactions_ != null) hash ^= MaxPreparedTransactions.GetHashCode();
      if (workMem_ != null) hash ^= WorkMem.GetHashCode();
      if (maintenanceWorkMem_ != null) hash ^= MaintenanceWorkMem.GetHashCode();
      if (replacementSortTuples_ != null) hash ^= ReplacementSortTuples.GetHashCode();
      if (autovacuumWorkMem_ != null) hash ^= AutovacuumWorkMem.GetHashCode();
      if (tempFileLimit_ != null) hash ^= TempFileLimit.GetHashCode();
      if (vacuumCostDelay_ != null) hash ^= VacuumCostDelay.GetHashCode();
      if (vacuumCostPageHit_ != null) hash ^= VacuumCostPageHit.GetHashCode();
      if (vacuumCostPageMiss_ != null) hash ^= VacuumCostPageMiss.GetHashCode();
      if (vacuumCostPageDirty_ != null) hash ^= VacuumCostPageDirty.GetHashCode();
      if (vacuumCostLimit_ != null) hash ^= VacuumCostLimit.GetHashCode();
      if (bgwriterDelay_ != null) hash ^= BgwriterDelay.GetHashCode();
      if (bgwriterLruMaxpages_ != null) hash ^= BgwriterLruMaxpages.GetHashCode();
      if (bgwriterLruMultiplier_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(BgwriterLruMultiplier);
      if (bgwriterFlushAfter_ != null) hash ^= BgwriterFlushAfter.GetHashCode();
      if (backendFlushAfter_ != null) hash ^= BackendFlushAfter.GetHashCode();
      if (oldSnapshotThreshold_ != null) hash ^= OldSnapshotThreshold.GetHashCode();
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel.Unspecified) hash ^= WalLevel.GetHashCode();
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit.Unspecified) hash ^= SynchronousCommit.GetHashCode();
      if (checkpointTimeout_ != null) hash ^= CheckpointTimeout.GetHashCode();
      if (checkpointCompletionTarget_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CheckpointCompletionTarget);
      if (checkpointFlushAfter_ != null) hash ^= CheckpointFlushAfter.GetHashCode();
      if (maxWalSize_ != null) hash ^= MaxWalSize.GetHashCode();
      if (minWalSize_ != null) hash ^= MinWalSize.GetHashCode();
      if (maxStandbyStreamingDelay_ != null) hash ^= MaxStandbyStreamingDelay.GetHashCode();
      if (defaultStatisticsTarget_ != null) hash ^= DefaultStatisticsTarget.GetHashCode();
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion.Unspecified) hash ^= ConstraintExclusion.GetHashCode();
      if (cursorTupleFraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CursorTupleFraction);
      if (fromCollapseLimit_ != null) hash ^= FromCollapseLimit.GetHashCode();
      if (joinCollapseLimit_ != null) hash ^= JoinCollapseLimit.GetHashCode();
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode.Unspecified) hash ^= ForceParallelMode.GetHashCode();
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) hash ^= ClientMinMessages.GetHashCode();
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) hash ^= LogMinMessages.GetHashCode();
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) hash ^= LogMinErrorStatement.GetHashCode();
      if (logMinDurationStatement_ != null) hash ^= LogMinDurationStatement.GetHashCode();
      if (logCheckpoints_ != null) hash ^= LogCheckpoints.GetHashCode();
      if (logConnections_ != null) hash ^= LogConnections.GetHashCode();
      if (logDisconnections_ != null) hash ^= LogDisconnections.GetHashCode();
      if (logDuration_ != null) hash ^= LogDuration.GetHashCode();
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity.Unspecified) hash ^= LogErrorVerbosity.GetHashCode();
      if (logLockWaits_ != null) hash ^= LogLockWaits.GetHashCode();
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement.Unspecified) hash ^= LogStatement.GetHashCode();
      if (logTempFiles_ != null) hash ^= LogTempFiles.GetHashCode();
      if (SearchPath.Length != 0) hash ^= SearchPath.GetHashCode();
      if (rowSecurity_ != null) hash ^= RowSecurity.GetHashCode();
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation.Unspecified) hash ^= DefaultTransactionIsolation.GetHashCode();
      if (statementTimeout_ != null) hash ^= StatementTimeout.GetHashCode();
      if (lockTimeout_ != null) hash ^= LockTimeout.GetHashCode();
      if (idleInTransactionSessionTimeout_ != null) hash ^= IdleInTransactionSessionTimeout.GetHashCode();
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput.Unspecified) hash ^= ByteaOutput.GetHashCode();
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary.Unspecified) hash ^= Xmlbinary.GetHashCode();
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption.Unspecified) hash ^= Xmloption.GetHashCode();
      if (ginPendingListLimit_ != null) hash ^= GinPendingListLimit.GetHashCode();
      if (deadlockTimeout_ != null) hash ^= DeadlockTimeout.GetHashCode();
      if (maxLocksPerTransaction_ != null) hash ^= MaxLocksPerTransaction.GetHashCode();
      if (maxPredLocksPerTransaction_ != null) hash ^= MaxPredLocksPerTransaction.GetHashCode();
      if (arrayNulls_ != null) hash ^= ArrayNulls.GetHashCode();
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote.Unspecified) hash ^= BackslashQuote.GetHashCode();
      if (defaultWithOids_ != null) hash ^= DefaultWithOids.GetHashCode();
      if (escapeStringWarning_ != null) hash ^= EscapeStringWarning.GetHashCode();
      if (loCompatPrivileges_ != null) hash ^= LoCompatPrivileges.GetHashCode();
      if (operatorPrecedenceWarning_ != null) hash ^= OperatorPrecedenceWarning.GetHashCode();
      if (quoteAllIdentifiers_ != null) hash ^= QuoteAllIdentifiers.GetHashCode();
      if (standardConformingStrings_ != null) hash ^= StandardConformingStrings.GetHashCode();
      if (synchronizeSeqscans_ != null) hash ^= SynchronizeSeqscans.GetHashCode();
      if (transformNullEquals_ != null) hash ^= TransformNullEquals.GetHashCode();
      if (exitOnError_ != null) hash ^= ExitOnError.GetHashCode();
      if (seqPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SeqPageCost);
      if (randomPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RandomPageCost);
      if (sqlInheritance_ != null) hash ^= SqlInheritance.GetHashCode();
      if (autovacuumMaxWorkers_ != null) hash ^= AutovacuumMaxWorkers.GetHashCode();
      if (autovacuumVacuumCostDelay_ != null) hash ^= AutovacuumVacuumCostDelay.GetHashCode();
      if (autovacuumVacuumCostLimit_ != null) hash ^= AutovacuumVacuumCostLimit.GetHashCode();
      if (autovacuumNaptime_ != null) hash ^= AutovacuumNaptime.GetHashCode();
      if (archiveTimeout_ != null) hash ^= ArchiveTimeout.GetHashCode();
      if (trackActivityQuerySize_ != null) hash ^= TrackActivityQuerySize.GetHashCode();
      if (effectiveIoConcurrency_ != null) hash ^= EffectiveIoConcurrency.GetHashCode();
      if (effectiveCacheSize_ != null) hash ^= EffectiveCacheSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (maxConnections_ != null) {
        _single_maxConnections_codec.WriteTagAndValue(output, MaxConnections);
      }
      if (sharedBuffers_ != null) {
        _single_sharedBuffers_codec.WriteTagAndValue(output, SharedBuffers);
      }
      if (tempBuffers_ != null) {
        _single_tempBuffers_codec.WriteTagAndValue(output, TempBuffers);
      }
      if (maxPreparedTransactions_ != null) {
        _single_maxPreparedTransactions_codec.WriteTagAndValue(output, MaxPreparedTransactions);
      }
      if (workMem_ != null) {
        _single_workMem_codec.WriteTagAndValue(output, WorkMem);
      }
      if (maintenanceWorkMem_ != null) {
        _single_maintenanceWorkMem_codec.WriteTagAndValue(output, MaintenanceWorkMem);
      }
      if (replacementSortTuples_ != null) {
        _single_replacementSortTuples_codec.WriteTagAndValue(output, ReplacementSortTuples);
      }
      if (autovacuumWorkMem_ != null) {
        _single_autovacuumWorkMem_codec.WriteTagAndValue(output, AutovacuumWorkMem);
      }
      if (tempFileLimit_ != null) {
        _single_tempFileLimit_codec.WriteTagAndValue(output, TempFileLimit);
      }
      if (vacuumCostDelay_ != null) {
        _single_vacuumCostDelay_codec.WriteTagAndValue(output, VacuumCostDelay);
      }
      if (vacuumCostPageHit_ != null) {
        _single_vacuumCostPageHit_codec.WriteTagAndValue(output, VacuumCostPageHit);
      }
      if (vacuumCostPageMiss_ != null) {
        _single_vacuumCostPageMiss_codec.WriteTagAndValue(output, VacuumCostPageMiss);
      }
      if (vacuumCostPageDirty_ != null) {
        _single_vacuumCostPageDirty_codec.WriteTagAndValue(output, VacuumCostPageDirty);
      }
      if (vacuumCostLimit_ != null) {
        _single_vacuumCostLimit_codec.WriteTagAndValue(output, VacuumCostLimit);
      }
      if (bgwriterDelay_ != null) {
        _single_bgwriterDelay_codec.WriteTagAndValue(output, BgwriterDelay);
      }
      if (bgwriterLruMaxpages_ != null) {
        _single_bgwriterLruMaxpages_codec.WriteTagAndValue(output, BgwriterLruMaxpages);
      }
      if (bgwriterLruMultiplier_ != null) {
        _single_bgwriterLruMultiplier_codec.WriteTagAndValue(output, BgwriterLruMultiplier);
      }
      if (bgwriterFlushAfter_ != null) {
        _single_bgwriterFlushAfter_codec.WriteTagAndValue(output, BgwriterFlushAfter);
      }
      if (backendFlushAfter_ != null) {
        _single_backendFlushAfter_codec.WriteTagAndValue(output, BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        _single_oldSnapshotThreshold_codec.WriteTagAndValue(output, OldSnapshotThreshold);
      }
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel.Unspecified) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) WalLevel);
      }
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit.Unspecified) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) SynchronousCommit);
      }
      if (checkpointTimeout_ != null) {
        _single_checkpointTimeout_codec.WriteTagAndValue(output, CheckpointTimeout);
      }
      if (checkpointCompletionTarget_ != null) {
        _single_checkpointCompletionTarget_codec.WriteTagAndValue(output, CheckpointCompletionTarget);
      }
      if (checkpointFlushAfter_ != null) {
        _single_checkpointFlushAfter_codec.WriteTagAndValue(output, CheckpointFlushAfter);
      }
      if (maxWalSize_ != null) {
        _single_maxWalSize_codec.WriteTagAndValue(output, MaxWalSize);
      }
      if (minWalSize_ != null) {
        _single_minWalSize_codec.WriteTagAndValue(output, MinWalSize);
      }
      if (maxStandbyStreamingDelay_ != null) {
        _single_maxStandbyStreamingDelay_codec.WriteTagAndValue(output, MaxStandbyStreamingDelay);
      }
      if (defaultStatisticsTarget_ != null) {
        _single_defaultStatisticsTarget_codec.WriteTagAndValue(output, DefaultStatisticsTarget);
      }
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion.Unspecified) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        _single_cursorTupleFraction_codec.WriteTagAndValue(output, CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        _single_fromCollapseLimit_codec.WriteTagAndValue(output, FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        _single_joinCollapseLimit_codec.WriteTagAndValue(output, JoinCollapseLimit);
      }
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode.Unspecified) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) ForceParallelMode);
      }
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        output.WriteRawTag(152, 2);
        output.WriteEnum((int) ClientMinMessages);
      }
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        output.WriteRawTag(160, 2);
        output.WriteEnum((int) LogMinMessages);
      }
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        _single_logMinDurationStatement_codec.WriteTagAndValue(output, LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        _single_logCheckpoints_codec.WriteTagAndValue(output, LogCheckpoints);
      }
      if (logConnections_ != null) {
        _single_logConnections_codec.WriteTagAndValue(output, LogConnections);
      }
      if (logDisconnections_ != null) {
        _single_logDisconnections_codec.WriteTagAndValue(output, LogDisconnections);
      }
      if (logDuration_ != null) {
        _single_logDuration_codec.WriteTagAndValue(output, LogDuration);
      }
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        _single_logLockWaits_codec.WriteTagAndValue(output, LogLockWaits);
      }
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement.Unspecified) {
        output.WriteRawTag(232, 2);
        output.WriteEnum((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        _single_logTempFiles_codec.WriteTagAndValue(output, LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(SearchPath);
      }
      if (rowSecurity_ != null) {
        _single_rowSecurity_codec.WriteTagAndValue(output, RowSecurity);
      }
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation.Unspecified) {
        output.WriteRawTag(136, 3);
        output.WriteEnum((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        _single_statementTimeout_codec.WriteTagAndValue(output, StatementTimeout);
      }
      if (lockTimeout_ != null) {
        _single_lockTimeout_codec.WriteTagAndValue(output, LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        _single_idleInTransactionSessionTimeout_codec.WriteTagAndValue(output, IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput.Unspecified) {
        output.WriteRawTag(168, 3);
        output.WriteEnum((int) ByteaOutput);
      }
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary.Unspecified) {
        output.WriteRawTag(176, 3);
        output.WriteEnum((int) Xmlbinary);
      }
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption.Unspecified) {
        output.WriteRawTag(184, 3);
        output.WriteEnum((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        _single_ginPendingListLimit_codec.WriteTagAndValue(output, GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        _single_deadlockTimeout_codec.WriteTagAndValue(output, DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        _single_maxLocksPerTransaction_codec.WriteTagAndValue(output, MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        _single_maxPredLocksPerTransaction_codec.WriteTagAndValue(output, MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        _single_arrayNulls_codec.WriteTagAndValue(output, ArrayNulls);
      }
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote.Unspecified) {
        output.WriteRawTag(232, 3);
        output.WriteEnum((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        _single_defaultWithOids_codec.WriteTagAndValue(output, DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        _single_escapeStringWarning_codec.WriteTagAndValue(output, EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        _single_loCompatPrivileges_codec.WriteTagAndValue(output, LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        _single_operatorPrecedenceWarning_codec.WriteTagAndValue(output, OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        _single_quoteAllIdentifiers_codec.WriteTagAndValue(output, QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        _single_standardConformingStrings_codec.WriteTagAndValue(output, StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        _single_synchronizeSeqscans_codec.WriteTagAndValue(output, SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        _single_transformNullEquals_codec.WriteTagAndValue(output, TransformNullEquals);
      }
      if (exitOnError_ != null) {
        _single_exitOnError_codec.WriteTagAndValue(output, ExitOnError);
      }
      if (seqPageCost_ != null) {
        _single_seqPageCost_codec.WriteTagAndValue(output, SeqPageCost);
      }
      if (randomPageCost_ != null) {
        _single_randomPageCost_codec.WriteTagAndValue(output, RandomPageCost);
      }
      if (sqlInheritance_ != null) {
        _single_sqlInheritance_codec.WriteTagAndValue(output, SqlInheritance);
      }
      if (autovacuumMaxWorkers_ != null) {
        _single_autovacuumMaxWorkers_codec.WriteTagAndValue(output, AutovacuumMaxWorkers);
      }
      if (autovacuumVacuumCostDelay_ != null) {
        _single_autovacuumVacuumCostDelay_codec.WriteTagAndValue(output, AutovacuumVacuumCostDelay);
      }
      if (autovacuumVacuumCostLimit_ != null) {
        _single_autovacuumVacuumCostLimit_codec.WriteTagAndValue(output, AutovacuumVacuumCostLimit);
      }
      if (autovacuumNaptime_ != null) {
        _single_autovacuumNaptime_codec.WriteTagAndValue(output, AutovacuumNaptime);
      }
      if (archiveTimeout_ != null) {
        _single_archiveTimeout_codec.WriteTagAndValue(output, ArchiveTimeout);
      }
      if (trackActivityQuerySize_ != null) {
        _single_trackActivityQuerySize_codec.WriteTagAndValue(output, TrackActivityQuerySize);
      }
      if (effectiveIoConcurrency_ != null) {
        _single_effectiveIoConcurrency_codec.WriteTagAndValue(output, EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        _single_effectiveCacheSize_codec.WriteTagAndValue(output, EffectiveCacheSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (maxConnections_ != null) {
        size += _single_maxConnections_codec.CalculateSizeWithTag(MaxConnections);
      }
      if (sharedBuffers_ != null) {
        size += _single_sharedBuffers_codec.CalculateSizeWithTag(SharedBuffers);
      }
      if (tempBuffers_ != null) {
        size += _single_tempBuffers_codec.CalculateSizeWithTag(TempBuffers);
      }
      if (maxPreparedTransactions_ != null) {
        size += _single_maxPreparedTransactions_codec.CalculateSizeWithTag(MaxPreparedTransactions);
      }
      if (workMem_ != null) {
        size += _single_workMem_codec.CalculateSizeWithTag(WorkMem);
      }
      if (maintenanceWorkMem_ != null) {
        size += _single_maintenanceWorkMem_codec.CalculateSizeWithTag(MaintenanceWorkMem);
      }
      if (replacementSortTuples_ != null) {
        size += _single_replacementSortTuples_codec.CalculateSizeWithTag(ReplacementSortTuples);
      }
      if (autovacuumWorkMem_ != null) {
        size += _single_autovacuumWorkMem_codec.CalculateSizeWithTag(AutovacuumWorkMem);
      }
      if (tempFileLimit_ != null) {
        size += _single_tempFileLimit_codec.CalculateSizeWithTag(TempFileLimit);
      }
      if (vacuumCostDelay_ != null) {
        size += _single_vacuumCostDelay_codec.CalculateSizeWithTag(VacuumCostDelay);
      }
      if (vacuumCostPageHit_ != null) {
        size += _single_vacuumCostPageHit_codec.CalculateSizeWithTag(VacuumCostPageHit);
      }
      if (vacuumCostPageMiss_ != null) {
        size += _single_vacuumCostPageMiss_codec.CalculateSizeWithTag(VacuumCostPageMiss);
      }
      if (vacuumCostPageDirty_ != null) {
        size += _single_vacuumCostPageDirty_codec.CalculateSizeWithTag(VacuumCostPageDirty);
      }
      if (vacuumCostLimit_ != null) {
        size += _single_vacuumCostLimit_codec.CalculateSizeWithTag(VacuumCostLimit);
      }
      if (bgwriterDelay_ != null) {
        size += _single_bgwriterDelay_codec.CalculateSizeWithTag(BgwriterDelay);
      }
      if (bgwriterLruMaxpages_ != null) {
        size += _single_bgwriterLruMaxpages_codec.CalculateSizeWithTag(BgwriterLruMaxpages);
      }
      if (bgwriterLruMultiplier_ != null) {
        size += _single_bgwriterLruMultiplier_codec.CalculateSizeWithTag(BgwriterLruMultiplier);
      }
      if (bgwriterFlushAfter_ != null) {
        size += _single_bgwriterFlushAfter_codec.CalculateSizeWithTag(BgwriterFlushAfter);
      }
      if (backendFlushAfter_ != null) {
        size += _single_backendFlushAfter_codec.CalculateSizeWithTag(BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        size += _single_oldSnapshotThreshold_codec.CalculateSizeWithTag(OldSnapshotThreshold);
      }
      if (WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) WalLevel);
      }
      if (SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SynchronousCommit);
      }
      if (checkpointTimeout_ != null) {
        size += _single_checkpointTimeout_codec.CalculateSizeWithTag(CheckpointTimeout);
      }
      if (checkpointCompletionTarget_ != null) {
        size += _single_checkpointCompletionTarget_codec.CalculateSizeWithTag(CheckpointCompletionTarget);
      }
      if (checkpointFlushAfter_ != null) {
        size += _single_checkpointFlushAfter_codec.CalculateSizeWithTag(CheckpointFlushAfter);
      }
      if (maxWalSize_ != null) {
        size += _single_maxWalSize_codec.CalculateSizeWithTag(MaxWalSize);
      }
      if (minWalSize_ != null) {
        size += _single_minWalSize_codec.CalculateSizeWithTag(MinWalSize);
      }
      if (maxStandbyStreamingDelay_ != null) {
        size += _single_maxStandbyStreamingDelay_codec.CalculateSizeWithTag(MaxStandbyStreamingDelay);
      }
      if (defaultStatisticsTarget_ != null) {
        size += _single_defaultStatisticsTarget_codec.CalculateSizeWithTag(DefaultStatisticsTarget);
      }
      if (ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        size += _single_cursorTupleFraction_codec.CalculateSizeWithTag(CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        size += _single_fromCollapseLimit_codec.CalculateSizeWithTag(FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        size += _single_joinCollapseLimit_codec.CalculateSizeWithTag(JoinCollapseLimit);
      }
      if (ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ForceParallelMode);
      }
      if (ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ClientMinMessages);
      }
      if (LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinMessages);
      }
      if (LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        size += _single_logMinDurationStatement_codec.CalculateSizeWithTag(LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        size += _single_logCheckpoints_codec.CalculateSizeWithTag(LogCheckpoints);
      }
      if (logConnections_ != null) {
        size += _single_logConnections_codec.CalculateSizeWithTag(LogConnections);
      }
      if (logDisconnections_ != null) {
        size += _single_logDisconnections_codec.CalculateSizeWithTag(LogDisconnections);
      }
      if (logDuration_ != null) {
        size += _single_logDuration_codec.CalculateSizeWithTag(LogDuration);
      }
      if (LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        size += _single_logLockWaits_codec.CalculateSizeWithTag(LogLockWaits);
      }
      if (LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        size += _single_logTempFiles_codec.CalculateSizeWithTag(LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SearchPath);
      }
      if (rowSecurity_ != null) {
        size += _single_rowSecurity_codec.CalculateSizeWithTag(RowSecurity);
      }
      if (DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        size += _single_statementTimeout_codec.CalculateSizeWithTag(StatementTimeout);
      }
      if (lockTimeout_ != null) {
        size += _single_lockTimeout_codec.CalculateSizeWithTag(LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        size += _single_idleInTransactionSessionTimeout_codec.CalculateSizeWithTag(IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ByteaOutput);
      }
      if (Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmlbinary);
      }
      if (Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        size += _single_ginPendingListLimit_codec.CalculateSizeWithTag(GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        size += _single_deadlockTimeout_codec.CalculateSizeWithTag(DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        size += _single_maxLocksPerTransaction_codec.CalculateSizeWithTag(MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        size += _single_maxPredLocksPerTransaction_codec.CalculateSizeWithTag(MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        size += _single_arrayNulls_codec.CalculateSizeWithTag(ArrayNulls);
      }
      if (BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        size += _single_defaultWithOids_codec.CalculateSizeWithTag(DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        size += _single_escapeStringWarning_codec.CalculateSizeWithTag(EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        size += _single_loCompatPrivileges_codec.CalculateSizeWithTag(LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        size += _single_operatorPrecedenceWarning_codec.CalculateSizeWithTag(OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        size += _single_quoteAllIdentifiers_codec.CalculateSizeWithTag(QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        size += _single_standardConformingStrings_codec.CalculateSizeWithTag(StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        size += _single_synchronizeSeqscans_codec.CalculateSizeWithTag(SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        size += _single_transformNullEquals_codec.CalculateSizeWithTag(TransformNullEquals);
      }
      if (exitOnError_ != null) {
        size += _single_exitOnError_codec.CalculateSizeWithTag(ExitOnError);
      }
      if (seqPageCost_ != null) {
        size += _single_seqPageCost_codec.CalculateSizeWithTag(SeqPageCost);
      }
      if (randomPageCost_ != null) {
        size += _single_randomPageCost_codec.CalculateSizeWithTag(RandomPageCost);
      }
      if (sqlInheritance_ != null) {
        size += _single_sqlInheritance_codec.CalculateSizeWithTag(SqlInheritance);
      }
      if (autovacuumMaxWorkers_ != null) {
        size += _single_autovacuumMaxWorkers_codec.CalculateSizeWithTag(AutovacuumMaxWorkers);
      }
      if (autovacuumVacuumCostDelay_ != null) {
        size += _single_autovacuumVacuumCostDelay_codec.CalculateSizeWithTag(AutovacuumVacuumCostDelay);
      }
      if (autovacuumVacuumCostLimit_ != null) {
        size += _single_autovacuumVacuumCostLimit_codec.CalculateSizeWithTag(AutovacuumVacuumCostLimit);
      }
      if (autovacuumNaptime_ != null) {
        size += _single_autovacuumNaptime_codec.CalculateSizeWithTag(AutovacuumNaptime);
      }
      if (archiveTimeout_ != null) {
        size += _single_archiveTimeout_codec.CalculateSizeWithTag(ArchiveTimeout);
      }
      if (trackActivityQuerySize_ != null) {
        size += _single_trackActivityQuerySize_codec.CalculateSizeWithTag(TrackActivityQuerySize);
      }
      if (effectiveIoConcurrency_ != null) {
        size += _single_effectiveIoConcurrency_codec.CalculateSizeWithTag(EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        size += _single_effectiveCacheSize_codec.CalculateSizeWithTag(EffectiveCacheSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostgresqlConfig9_6 other) {
      if (other == null) {
        return;
      }
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null || other.MaxConnections != 0L) {
          MaxConnections = other.MaxConnections;
        }
      }
      if (other.sharedBuffers_ != null) {
        if (sharedBuffers_ == null || other.SharedBuffers != 0L) {
          SharedBuffers = other.SharedBuffers;
        }
      }
      if (other.tempBuffers_ != null) {
        if (tempBuffers_ == null || other.TempBuffers != 0L) {
          TempBuffers = other.TempBuffers;
        }
      }
      if (other.maxPreparedTransactions_ != null) {
        if (maxPreparedTransactions_ == null || other.MaxPreparedTransactions != 0L) {
          MaxPreparedTransactions = other.MaxPreparedTransactions;
        }
      }
      if (other.workMem_ != null) {
        if (workMem_ == null || other.WorkMem != 0L) {
          WorkMem = other.WorkMem;
        }
      }
      if (other.maintenanceWorkMem_ != null) {
        if (maintenanceWorkMem_ == null || other.MaintenanceWorkMem != 0L) {
          MaintenanceWorkMem = other.MaintenanceWorkMem;
        }
      }
      if (other.replacementSortTuples_ != null) {
        if (replacementSortTuples_ == null || other.ReplacementSortTuples != 0L) {
          ReplacementSortTuples = other.ReplacementSortTuples;
        }
      }
      if (other.autovacuumWorkMem_ != null) {
        if (autovacuumWorkMem_ == null || other.AutovacuumWorkMem != 0L) {
          AutovacuumWorkMem = other.AutovacuumWorkMem;
        }
      }
      if (other.tempFileLimit_ != null) {
        if (tempFileLimit_ == null || other.TempFileLimit != 0L) {
          TempFileLimit = other.TempFileLimit;
        }
      }
      if (other.vacuumCostDelay_ != null) {
        if (vacuumCostDelay_ == null || other.VacuumCostDelay != 0L) {
          VacuumCostDelay = other.VacuumCostDelay;
        }
      }
      if (other.vacuumCostPageHit_ != null) {
        if (vacuumCostPageHit_ == null || other.VacuumCostPageHit != 0L) {
          VacuumCostPageHit = other.VacuumCostPageHit;
        }
      }
      if (other.vacuumCostPageMiss_ != null) {
        if (vacuumCostPageMiss_ == null || other.VacuumCostPageMiss != 0L) {
          VacuumCostPageMiss = other.VacuumCostPageMiss;
        }
      }
      if (other.vacuumCostPageDirty_ != null) {
        if (vacuumCostPageDirty_ == null || other.VacuumCostPageDirty != 0L) {
          VacuumCostPageDirty = other.VacuumCostPageDirty;
        }
      }
      if (other.vacuumCostLimit_ != null) {
        if (vacuumCostLimit_ == null || other.VacuumCostLimit != 0L) {
          VacuumCostLimit = other.VacuumCostLimit;
        }
      }
      if (other.bgwriterDelay_ != null) {
        if (bgwriterDelay_ == null || other.BgwriterDelay != 0L) {
          BgwriterDelay = other.BgwriterDelay;
        }
      }
      if (other.bgwriterLruMaxpages_ != null) {
        if (bgwriterLruMaxpages_ == null || other.BgwriterLruMaxpages != 0L) {
          BgwriterLruMaxpages = other.BgwriterLruMaxpages;
        }
      }
      if (other.bgwriterLruMultiplier_ != null) {
        if (bgwriterLruMultiplier_ == null || other.BgwriterLruMultiplier != 0D) {
          BgwriterLruMultiplier = other.BgwriterLruMultiplier;
        }
      }
      if (other.bgwriterFlushAfter_ != null) {
        if (bgwriterFlushAfter_ == null || other.BgwriterFlushAfter != 0L) {
          BgwriterFlushAfter = other.BgwriterFlushAfter;
        }
      }
      if (other.backendFlushAfter_ != null) {
        if (backendFlushAfter_ == null || other.BackendFlushAfter != 0L) {
          BackendFlushAfter = other.BackendFlushAfter;
        }
      }
      if (other.oldSnapshotThreshold_ != null) {
        if (oldSnapshotThreshold_ == null || other.OldSnapshotThreshold != 0L) {
          OldSnapshotThreshold = other.OldSnapshotThreshold;
        }
      }
      if (other.WalLevel != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel.Unspecified) {
        WalLevel = other.WalLevel;
      }
      if (other.SynchronousCommit != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit.Unspecified) {
        SynchronousCommit = other.SynchronousCommit;
      }
      if (other.checkpointTimeout_ != null) {
        if (checkpointTimeout_ == null || other.CheckpointTimeout != 0L) {
          CheckpointTimeout = other.CheckpointTimeout;
        }
      }
      if (other.checkpointCompletionTarget_ != null) {
        if (checkpointCompletionTarget_ == null || other.CheckpointCompletionTarget != 0D) {
          CheckpointCompletionTarget = other.CheckpointCompletionTarget;
        }
      }
      if (other.checkpointFlushAfter_ != null) {
        if (checkpointFlushAfter_ == null || other.CheckpointFlushAfter != 0L) {
          CheckpointFlushAfter = other.CheckpointFlushAfter;
        }
      }
      if (other.maxWalSize_ != null) {
        if (maxWalSize_ == null || other.MaxWalSize != 0L) {
          MaxWalSize = other.MaxWalSize;
        }
      }
      if (other.minWalSize_ != null) {
        if (minWalSize_ == null || other.MinWalSize != 0L) {
          MinWalSize = other.MinWalSize;
        }
      }
      if (other.maxStandbyStreamingDelay_ != null) {
        if (maxStandbyStreamingDelay_ == null || other.MaxStandbyStreamingDelay != 0L) {
          MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
        }
      }
      if (other.defaultStatisticsTarget_ != null) {
        if (defaultStatisticsTarget_ == null || other.DefaultStatisticsTarget != 0L) {
          DefaultStatisticsTarget = other.DefaultStatisticsTarget;
        }
      }
      if (other.ConstraintExclusion != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion.Unspecified) {
        ConstraintExclusion = other.ConstraintExclusion;
      }
      if (other.cursorTupleFraction_ != null) {
        if (cursorTupleFraction_ == null || other.CursorTupleFraction != 0D) {
          CursorTupleFraction = other.CursorTupleFraction;
        }
      }
      if (other.fromCollapseLimit_ != null) {
        if (fromCollapseLimit_ == null || other.FromCollapseLimit != 0L) {
          FromCollapseLimit = other.FromCollapseLimit;
        }
      }
      if (other.joinCollapseLimit_ != null) {
        if (joinCollapseLimit_ == null || other.JoinCollapseLimit != 0L) {
          JoinCollapseLimit = other.JoinCollapseLimit;
        }
      }
      if (other.ForceParallelMode != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode.Unspecified) {
        ForceParallelMode = other.ForceParallelMode;
      }
      if (other.ClientMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        ClientMinMessages = other.ClientMinMessages;
      }
      if (other.LogMinMessages != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        LogMinMessages = other.LogMinMessages;
      }
      if (other.LogMinErrorStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel.Unspecified) {
        LogMinErrorStatement = other.LogMinErrorStatement;
      }
      if (other.logMinDurationStatement_ != null) {
        if (logMinDurationStatement_ == null || other.LogMinDurationStatement != 0L) {
          LogMinDurationStatement = other.LogMinDurationStatement;
        }
      }
      if (other.logCheckpoints_ != null) {
        if (logCheckpoints_ == null || other.LogCheckpoints != false) {
          LogCheckpoints = other.LogCheckpoints;
        }
      }
      if (other.logConnections_ != null) {
        if (logConnections_ == null || other.LogConnections != false) {
          LogConnections = other.LogConnections;
        }
      }
      if (other.logDisconnections_ != null) {
        if (logDisconnections_ == null || other.LogDisconnections != false) {
          LogDisconnections = other.LogDisconnections;
        }
      }
      if (other.logDuration_ != null) {
        if (logDuration_ == null || other.LogDuration != false) {
          LogDuration = other.LogDuration;
        }
      }
      if (other.LogErrorVerbosity != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity.Unspecified) {
        LogErrorVerbosity = other.LogErrorVerbosity;
      }
      if (other.logLockWaits_ != null) {
        if (logLockWaits_ == null || other.LogLockWaits != false) {
          LogLockWaits = other.LogLockWaits;
        }
      }
      if (other.LogStatement != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement.Unspecified) {
        LogStatement = other.LogStatement;
      }
      if (other.logTempFiles_ != null) {
        if (logTempFiles_ == null || other.LogTempFiles != 0L) {
          LogTempFiles = other.LogTempFiles;
        }
      }
      if (other.SearchPath.Length != 0) {
        SearchPath = other.SearchPath;
      }
      if (other.rowSecurity_ != null) {
        if (rowSecurity_ == null || other.RowSecurity != false) {
          RowSecurity = other.RowSecurity;
        }
      }
      if (other.DefaultTransactionIsolation != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation.Unspecified) {
        DefaultTransactionIsolation = other.DefaultTransactionIsolation;
      }
      if (other.statementTimeout_ != null) {
        if (statementTimeout_ == null || other.StatementTimeout != 0L) {
          StatementTimeout = other.StatementTimeout;
        }
      }
      if (other.lockTimeout_ != null) {
        if (lockTimeout_ == null || other.LockTimeout != 0L) {
          LockTimeout = other.LockTimeout;
        }
      }
      if (other.idleInTransactionSessionTimeout_ != null) {
        if (idleInTransactionSessionTimeout_ == null || other.IdleInTransactionSessionTimeout != 0L) {
          IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
        }
      }
      if (other.ByteaOutput != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput.Unspecified) {
        ByteaOutput = other.ByteaOutput;
      }
      if (other.Xmlbinary != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary.Unspecified) {
        Xmlbinary = other.Xmlbinary;
      }
      if (other.Xmloption != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption.Unspecified) {
        Xmloption = other.Xmloption;
      }
      if (other.ginPendingListLimit_ != null) {
        if (ginPendingListLimit_ == null || other.GinPendingListLimit != 0L) {
          GinPendingListLimit = other.GinPendingListLimit;
        }
      }
      if (other.deadlockTimeout_ != null) {
        if (deadlockTimeout_ == null || other.DeadlockTimeout != 0L) {
          DeadlockTimeout = other.DeadlockTimeout;
        }
      }
      if (other.maxLocksPerTransaction_ != null) {
        if (maxLocksPerTransaction_ == null || other.MaxLocksPerTransaction != 0L) {
          MaxLocksPerTransaction = other.MaxLocksPerTransaction;
        }
      }
      if (other.maxPredLocksPerTransaction_ != null) {
        if (maxPredLocksPerTransaction_ == null || other.MaxPredLocksPerTransaction != 0L) {
          MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
        }
      }
      if (other.arrayNulls_ != null) {
        if (arrayNulls_ == null || other.ArrayNulls != false) {
          ArrayNulls = other.ArrayNulls;
        }
      }
      if (other.BackslashQuote != global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote.Unspecified) {
        BackslashQuote = other.BackslashQuote;
      }
      if (other.defaultWithOids_ != null) {
        if (defaultWithOids_ == null || other.DefaultWithOids != false) {
          DefaultWithOids = other.DefaultWithOids;
        }
      }
      if (other.escapeStringWarning_ != null) {
        if (escapeStringWarning_ == null || other.EscapeStringWarning != false) {
          EscapeStringWarning = other.EscapeStringWarning;
        }
      }
      if (other.loCompatPrivileges_ != null) {
        if (loCompatPrivileges_ == null || other.LoCompatPrivileges != false) {
          LoCompatPrivileges = other.LoCompatPrivileges;
        }
      }
      if (other.operatorPrecedenceWarning_ != null) {
        if (operatorPrecedenceWarning_ == null || other.OperatorPrecedenceWarning != false) {
          OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
        }
      }
      if (other.quoteAllIdentifiers_ != null) {
        if (quoteAllIdentifiers_ == null || other.QuoteAllIdentifiers != false) {
          QuoteAllIdentifiers = other.QuoteAllIdentifiers;
        }
      }
      if (other.standardConformingStrings_ != null) {
        if (standardConformingStrings_ == null || other.StandardConformingStrings != false) {
          StandardConformingStrings = other.StandardConformingStrings;
        }
      }
      if (other.synchronizeSeqscans_ != null) {
        if (synchronizeSeqscans_ == null || other.SynchronizeSeqscans != false) {
          SynchronizeSeqscans = other.SynchronizeSeqscans;
        }
      }
      if (other.transformNullEquals_ != null) {
        if (transformNullEquals_ == null || other.TransformNullEquals != false) {
          TransformNullEquals = other.TransformNullEquals;
        }
      }
      if (other.exitOnError_ != null) {
        if (exitOnError_ == null || other.ExitOnError != false) {
          ExitOnError = other.ExitOnError;
        }
      }
      if (other.seqPageCost_ != null) {
        if (seqPageCost_ == null || other.SeqPageCost != 0D) {
          SeqPageCost = other.SeqPageCost;
        }
      }
      if (other.randomPageCost_ != null) {
        if (randomPageCost_ == null || other.RandomPageCost != 0D) {
          RandomPageCost = other.RandomPageCost;
        }
      }
      if (other.sqlInheritance_ != null) {
        if (sqlInheritance_ == null || other.SqlInheritance != false) {
          SqlInheritance = other.SqlInheritance;
        }
      }
      if (other.autovacuumMaxWorkers_ != null) {
        if (autovacuumMaxWorkers_ == null || other.AutovacuumMaxWorkers != 0L) {
          AutovacuumMaxWorkers = other.AutovacuumMaxWorkers;
        }
      }
      if (other.autovacuumVacuumCostDelay_ != null) {
        if (autovacuumVacuumCostDelay_ == null || other.AutovacuumVacuumCostDelay != 0L) {
          AutovacuumVacuumCostDelay = other.AutovacuumVacuumCostDelay;
        }
      }
      if (other.autovacuumVacuumCostLimit_ != null) {
        if (autovacuumVacuumCostLimit_ == null || other.AutovacuumVacuumCostLimit != 0L) {
          AutovacuumVacuumCostLimit = other.AutovacuumVacuumCostLimit;
        }
      }
      if (other.autovacuumNaptime_ != null) {
        if (autovacuumNaptime_ == null || other.AutovacuumNaptime != 0L) {
          AutovacuumNaptime = other.AutovacuumNaptime;
        }
      }
      if (other.archiveTimeout_ != null) {
        if (archiveTimeout_ == null || other.ArchiveTimeout != 0L) {
          ArchiveTimeout = other.ArchiveTimeout;
        }
      }
      if (other.trackActivityQuerySize_ != null) {
        if (trackActivityQuerySize_ == null || other.TrackActivityQuerySize != 0L) {
          TrackActivityQuerySize = other.TrackActivityQuerySize;
        }
      }
      if (other.effectiveIoConcurrency_ != null) {
        if (effectiveIoConcurrency_ == null || other.EffectiveIoConcurrency != 0L) {
          EffectiveIoConcurrency = other.EffectiveIoConcurrency;
        }
      }
      if (other.effectiveCacheSize_ != null) {
        if (effectiveCacheSize_ == null || other.EffectiveCacheSize != 0L) {
          EffectiveCacheSize = other.EffectiveCacheSize;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_maxConnections_codec.Read(input);
            if (maxConnections_ == null || value != 0L) {
              MaxConnections = value;
            }
            break;
          }
          case 18: {
            long? value = _single_sharedBuffers_codec.Read(input);
            if (sharedBuffers_ == null || value != 0L) {
              SharedBuffers = value;
            }
            break;
          }
          case 26: {
            long? value = _single_tempBuffers_codec.Read(input);
            if (tempBuffers_ == null || value != 0L) {
              TempBuffers = value;
            }
            break;
          }
          case 34: {
            long? value = _single_maxPreparedTransactions_codec.Read(input);
            if (maxPreparedTransactions_ == null || value != 0L) {
              MaxPreparedTransactions = value;
            }
            break;
          }
          case 42: {
            long? value = _single_workMem_codec.Read(input);
            if (workMem_ == null || value != 0L) {
              WorkMem = value;
            }
            break;
          }
          case 50: {
            long? value = _single_maintenanceWorkMem_codec.Read(input);
            if (maintenanceWorkMem_ == null || value != 0L) {
              MaintenanceWorkMem = value;
            }
            break;
          }
          case 58: {
            long? value = _single_replacementSortTuples_codec.Read(input);
            if (replacementSortTuples_ == null || value != 0L) {
              ReplacementSortTuples = value;
            }
            break;
          }
          case 66: {
            long? value = _single_autovacuumWorkMem_codec.Read(input);
            if (autovacuumWorkMem_ == null || value != 0L) {
              AutovacuumWorkMem = value;
            }
            break;
          }
          case 74: {
            long? value = _single_tempFileLimit_codec.Read(input);
            if (tempFileLimit_ == null || value != 0L) {
              TempFileLimit = value;
            }
            break;
          }
          case 82: {
            long? value = _single_vacuumCostDelay_codec.Read(input);
            if (vacuumCostDelay_ == null || value != 0L) {
              VacuumCostDelay = value;
            }
            break;
          }
          case 90: {
            long? value = _single_vacuumCostPageHit_codec.Read(input);
            if (vacuumCostPageHit_ == null || value != 0L) {
              VacuumCostPageHit = value;
            }
            break;
          }
          case 98: {
            long? value = _single_vacuumCostPageMiss_codec.Read(input);
            if (vacuumCostPageMiss_ == null || value != 0L) {
              VacuumCostPageMiss = value;
            }
            break;
          }
          case 106: {
            long? value = _single_vacuumCostPageDirty_codec.Read(input);
            if (vacuumCostPageDirty_ == null || value != 0L) {
              VacuumCostPageDirty = value;
            }
            break;
          }
          case 114: {
            long? value = _single_vacuumCostLimit_codec.Read(input);
            if (vacuumCostLimit_ == null || value != 0L) {
              VacuumCostLimit = value;
            }
            break;
          }
          case 122: {
            long? value = _single_bgwriterDelay_codec.Read(input);
            if (bgwriterDelay_ == null || value != 0L) {
              BgwriterDelay = value;
            }
            break;
          }
          case 130: {
            long? value = _single_bgwriterLruMaxpages_codec.Read(input);
            if (bgwriterLruMaxpages_ == null || value != 0L) {
              BgwriterLruMaxpages = value;
            }
            break;
          }
          case 138: {
            double? value = _single_bgwriterLruMultiplier_codec.Read(input);
            if (bgwriterLruMultiplier_ == null || value != 0D) {
              BgwriterLruMultiplier = value;
            }
            break;
          }
          case 146: {
            long? value = _single_bgwriterFlushAfter_codec.Read(input);
            if (bgwriterFlushAfter_ == null || value != 0L) {
              BgwriterFlushAfter = value;
            }
            break;
          }
          case 154: {
            long? value = _single_backendFlushAfter_codec.Read(input);
            if (backendFlushAfter_ == null || value != 0L) {
              BackendFlushAfter = value;
            }
            break;
          }
          case 162: {
            long? value = _single_oldSnapshotThreshold_codec.Read(input);
            if (oldSnapshotThreshold_ == null || value != 0L) {
              OldSnapshotThreshold = value;
            }
            break;
          }
          case 168: {
            WalLevel = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.WalLevel) input.ReadEnum();
            break;
          }
          case 176: {
            SynchronousCommit = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.SynchronousCommit) input.ReadEnum();
            break;
          }
          case 186: {
            long? value = _single_checkpointTimeout_codec.Read(input);
            if (checkpointTimeout_ == null || value != 0L) {
              CheckpointTimeout = value;
            }
            break;
          }
          case 194: {
            double? value = _single_checkpointCompletionTarget_codec.Read(input);
            if (checkpointCompletionTarget_ == null || value != 0D) {
              CheckpointCompletionTarget = value;
            }
            break;
          }
          case 202: {
            long? value = _single_checkpointFlushAfter_codec.Read(input);
            if (checkpointFlushAfter_ == null || value != 0L) {
              CheckpointFlushAfter = value;
            }
            break;
          }
          case 210: {
            long? value = _single_maxWalSize_codec.Read(input);
            if (maxWalSize_ == null || value != 0L) {
              MaxWalSize = value;
            }
            break;
          }
          case 218: {
            long? value = _single_minWalSize_codec.Read(input);
            if (minWalSize_ == null || value != 0L) {
              MinWalSize = value;
            }
            break;
          }
          case 226: {
            long? value = _single_maxStandbyStreamingDelay_codec.Read(input);
            if (maxStandbyStreamingDelay_ == null || value != 0L) {
              MaxStandbyStreamingDelay = value;
            }
            break;
          }
          case 234: {
            long? value = _single_defaultStatisticsTarget_codec.Read(input);
            if (defaultStatisticsTarget_ == null || value != 0L) {
              DefaultStatisticsTarget = value;
            }
            break;
          }
          case 240: {
            ConstraintExclusion = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ConstraintExclusion) input.ReadEnum();
            break;
          }
          case 250: {
            double? value = _single_cursorTupleFraction_codec.Read(input);
            if (cursorTupleFraction_ == null || value != 0D) {
              CursorTupleFraction = value;
            }
            break;
          }
          case 258: {
            long? value = _single_fromCollapseLimit_codec.Read(input);
            if (fromCollapseLimit_ == null || value != 0L) {
              FromCollapseLimit = value;
            }
            break;
          }
          case 266: {
            long? value = _single_joinCollapseLimit_codec.Read(input);
            if (joinCollapseLimit_ == null || value != 0L) {
              JoinCollapseLimit = value;
            }
            break;
          }
          case 272: {
            ForceParallelMode = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ForceParallelMode) input.ReadEnum();
            break;
          }
          case 280: {
            ClientMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 288: {
            LogMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 296: {
            LogMinErrorStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 306: {
            long? value = _single_logMinDurationStatement_codec.Read(input);
            if (logMinDurationStatement_ == null || value != 0L) {
              LogMinDurationStatement = value;
            }
            break;
          }
          case 314: {
            bool? value = _single_logCheckpoints_codec.Read(input);
            if (logCheckpoints_ == null || value != false) {
              LogCheckpoints = value;
            }
            break;
          }
          case 322: {
            bool? value = _single_logConnections_codec.Read(input);
            if (logConnections_ == null || value != false) {
              LogConnections = value;
            }
            break;
          }
          case 330: {
            bool? value = _single_logDisconnections_codec.Read(input);
            if (logDisconnections_ == null || value != false) {
              LogDisconnections = value;
            }
            break;
          }
          case 338: {
            bool? value = _single_logDuration_codec.Read(input);
            if (logDuration_ == null || value != false) {
              LogDuration = value;
            }
            break;
          }
          case 344: {
            LogErrorVerbosity = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogErrorVerbosity) input.ReadEnum();
            break;
          }
          case 354: {
            bool? value = _single_logLockWaits_codec.Read(input);
            if (logLockWaits_ == null || value != false) {
              LogLockWaits = value;
            }
            break;
          }
          case 360: {
            LogStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.LogStatement) input.ReadEnum();
            break;
          }
          case 370: {
            long? value = _single_logTempFiles_codec.Read(input);
            if (logTempFiles_ == null || value != 0L) {
              LogTempFiles = value;
            }
            break;
          }
          case 378: {
            SearchPath = input.ReadString();
            break;
          }
          case 386: {
            bool? value = _single_rowSecurity_codec.Read(input);
            if (rowSecurity_ == null || value != false) {
              RowSecurity = value;
            }
            break;
          }
          case 392: {
            DefaultTransactionIsolation = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.TransactionIsolation) input.ReadEnum();
            break;
          }
          case 402: {
            long? value = _single_statementTimeout_codec.Read(input);
            if (statementTimeout_ == null || value != 0L) {
              StatementTimeout = value;
            }
            break;
          }
          case 410: {
            long? value = _single_lockTimeout_codec.Read(input);
            if (lockTimeout_ == null || value != 0L) {
              LockTimeout = value;
            }
            break;
          }
          case 418: {
            long? value = _single_idleInTransactionSessionTimeout_codec.Read(input);
            if (idleInTransactionSessionTimeout_ == null || value != 0L) {
              IdleInTransactionSessionTimeout = value;
            }
            break;
          }
          case 424: {
            ByteaOutput = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.ByteaOutput) input.ReadEnum();
            break;
          }
          case 432: {
            Xmlbinary = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlBinary) input.ReadEnum();
            break;
          }
          case 440: {
            Xmloption = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.XmlOption) input.ReadEnum();
            break;
          }
          case 450: {
            long? value = _single_ginPendingListLimit_codec.Read(input);
            if (ginPendingListLimit_ == null || value != 0L) {
              GinPendingListLimit = value;
            }
            break;
          }
          case 458: {
            long? value = _single_deadlockTimeout_codec.Read(input);
            if (deadlockTimeout_ == null || value != 0L) {
              DeadlockTimeout = value;
            }
            break;
          }
          case 466: {
            long? value = _single_maxLocksPerTransaction_codec.Read(input);
            if (maxLocksPerTransaction_ == null || value != 0L) {
              MaxLocksPerTransaction = value;
            }
            break;
          }
          case 474: {
            long? value = _single_maxPredLocksPerTransaction_codec.Read(input);
            if (maxPredLocksPerTransaction_ == null || value != 0L) {
              MaxPredLocksPerTransaction = value;
            }
            break;
          }
          case 482: {
            bool? value = _single_arrayNulls_codec.Read(input);
            if (arrayNulls_ == null || value != false) {
              ArrayNulls = value;
            }
            break;
          }
          case 488: {
            BackslashQuote = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6.Types.BackslashQuote) input.ReadEnum();
            break;
          }
          case 498: {
            bool? value = _single_defaultWithOids_codec.Read(input);
            if (defaultWithOids_ == null || value != false) {
              DefaultWithOids = value;
            }
            break;
          }
          case 506: {
            bool? value = _single_escapeStringWarning_codec.Read(input);
            if (escapeStringWarning_ == null || value != false) {
              EscapeStringWarning = value;
            }
            break;
          }
          case 514: {
            bool? value = _single_loCompatPrivileges_codec.Read(input);
            if (loCompatPrivileges_ == null || value != false) {
              LoCompatPrivileges = value;
            }
            break;
          }
          case 522: {
            bool? value = _single_operatorPrecedenceWarning_codec.Read(input);
            if (operatorPrecedenceWarning_ == null || value != false) {
              OperatorPrecedenceWarning = value;
            }
            break;
          }
          case 530: {
            bool? value = _single_quoteAllIdentifiers_codec.Read(input);
            if (quoteAllIdentifiers_ == null || value != false) {
              QuoteAllIdentifiers = value;
            }
            break;
          }
          case 538: {
            bool? value = _single_standardConformingStrings_codec.Read(input);
            if (standardConformingStrings_ == null || value != false) {
              StandardConformingStrings = value;
            }
            break;
          }
          case 546: {
            bool? value = _single_synchronizeSeqscans_codec.Read(input);
            if (synchronizeSeqscans_ == null || value != false) {
              SynchronizeSeqscans = value;
            }
            break;
          }
          case 554: {
            bool? value = _single_transformNullEquals_codec.Read(input);
            if (transformNullEquals_ == null || value != false) {
              TransformNullEquals = value;
            }
            break;
          }
          case 562: {
            bool? value = _single_exitOnError_codec.Read(input);
            if (exitOnError_ == null || value != false) {
              ExitOnError = value;
            }
            break;
          }
          case 570: {
            double? value = _single_seqPageCost_codec.Read(input);
            if (seqPageCost_ == null || value != 0D) {
              SeqPageCost = value;
            }
            break;
          }
          case 578: {
            double? value = _single_randomPageCost_codec.Read(input);
            if (randomPageCost_ == null || value != 0D) {
              RandomPageCost = value;
            }
            break;
          }
          case 586: {
            bool? value = _single_sqlInheritance_codec.Read(input);
            if (sqlInheritance_ == null || value != false) {
              SqlInheritance = value;
            }
            break;
          }
          case 594: {
            long? value = _single_autovacuumMaxWorkers_codec.Read(input);
            if (autovacuumMaxWorkers_ == null || value != 0L) {
              AutovacuumMaxWorkers = value;
            }
            break;
          }
          case 602: {
            long? value = _single_autovacuumVacuumCostDelay_codec.Read(input);
            if (autovacuumVacuumCostDelay_ == null || value != 0L) {
              AutovacuumVacuumCostDelay = value;
            }
            break;
          }
          case 610: {
            long? value = _single_autovacuumVacuumCostLimit_codec.Read(input);
            if (autovacuumVacuumCostLimit_ == null || value != 0L) {
              AutovacuumVacuumCostLimit = value;
            }
            break;
          }
          case 618: {
            long? value = _single_autovacuumNaptime_codec.Read(input);
            if (autovacuumNaptime_ == null || value != 0L) {
              AutovacuumNaptime = value;
            }
            break;
          }
          case 626: {
            long? value = _single_archiveTimeout_codec.Read(input);
            if (archiveTimeout_ == null || value != 0L) {
              ArchiveTimeout = value;
            }
            break;
          }
          case 634: {
            long? value = _single_trackActivityQuerySize_codec.Read(input);
            if (trackActivityQuerySize_ == null || value != 0L) {
              TrackActivityQuerySize = value;
            }
            break;
          }
          case 642: {
            long? value = _single_effectiveIoConcurrency_codec.Read(input);
            if (effectiveIoConcurrency_ == null || value != 0L) {
              EffectiveIoConcurrency = value;
            }
            break;
          }
          case 650: {
            long? value = _single_effectiveCacheSize_codec.Read(input);
            if (effectiveCacheSize_ == null || value != 0L) {
              EffectiveCacheSize = value;
            }
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PostgresqlConfig9_6 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum WalLevel {
        [pbr::OriginalName("WAL_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("WAL_LEVEL_REPLICA")] Replica = 1,
        [pbr::OriginalName("WAL_LEVEL_LOGICAL")] Logical = 2,
      }

      internal enum SynchronousCommit {
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_ON")] On = 1,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_OFF")] Off = 2,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_LOCAL")] Local = 3,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_REMOTE_WRITE")] RemoteWrite = 4,
        [pbr::OriginalName("SYNCHRONOUS_COMMIT_REMOTE_APPLY")] RemoteApply = 5,
      }

      internal enum ConstraintExclusion {
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_ON")] On = 1,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_OFF")] Off = 2,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_PARTITION")] Partition = 3,
      }

      internal enum ForceParallelMode {
        [pbr::OriginalName("FORCE_PARALLEL_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_ON")] On = 1,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_OFF")] Off = 2,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_REGRESS")] Regress = 3,
      }

      internal enum LogLevel {
        [pbr::OriginalName("LOG_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_LEVEL_DEBUG5")] Debug5 = 1,
        [pbr::OriginalName("LOG_LEVEL_DEBUG4")] Debug4 = 2,
        [pbr::OriginalName("LOG_LEVEL_DEBUG3")] Debug3 = 3,
        [pbr::OriginalName("LOG_LEVEL_DEBUG2")] Debug2 = 4,
        [pbr::OriginalName("LOG_LEVEL_DEBUG1")] Debug1 = 5,
        [pbr::OriginalName("LOG_LEVEL_LOG")] Log = 6,
        [pbr::OriginalName("LOG_LEVEL_NOTICE")] Notice = 7,
        [pbr::OriginalName("LOG_LEVEL_WARNING")] Warning = 8,
        [pbr::OriginalName("LOG_LEVEL_ERROR")] Error = 9,
        [pbr::OriginalName("LOG_LEVEL_FATAL")] Fatal = 10,
        [pbr::OriginalName("LOG_LEVEL_PANIC")] Panic = 11,
      }

      internal enum LogErrorVerbosity {
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_TERSE")] Terse = 1,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_DEFAULT")] Default = 2,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_VERBOSE")] Verbose = 3,
      }

      internal enum LogStatement {
        [pbr::OriginalName("LOG_STATEMENT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_STATEMENT_NONE")] None = 1,
        [pbr::OriginalName("LOG_STATEMENT_DDL")] Ddl = 2,
        [pbr::OriginalName("LOG_STATEMENT_MOD")] Mod = 3,
        [pbr::OriginalName("LOG_STATEMENT_ALL")] All = 4,
      }

      internal enum TransactionIsolation {
        [pbr::OriginalName("TRANSACTION_ISOLATION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_UNCOMMITTED")] ReadUncommitted = 1,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_COMMITTED")] ReadCommitted = 2,
        [pbr::OriginalName("TRANSACTION_ISOLATION_REPEATABLE_READ")] RepeatableRead = 3,
        [pbr::OriginalName("TRANSACTION_ISOLATION_SERIALIZABLE")] Serializable = 4,
      }

      internal enum ByteaOutput {
        [pbr::OriginalName("BYTEA_OUTPUT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BYTEA_OUTPUT_HEX")] Hex = 1,
        [pbr::OriginalName("BYTEA_OUTPUT_ESCAPED")] Escaped = 2,
      }

      internal enum XmlBinary {
        [pbr::OriginalName("XML_BINARY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_BINARY_BASE64")] Base64 = 1,
        [pbr::OriginalName("XML_BINARY_HEX")] Hex = 2,
      }

      internal enum XmlOption {
        [pbr::OriginalName("XML_OPTION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_OPTION_DOCUMENT")] Document = 1,
        [pbr::OriginalName("XML_OPTION_CONTENT")] Content = 2,
      }

      internal enum BackslashQuote {
        [pbr::OriginalName("BACKSLASH_QUOTE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BACKSLASH_QUOTE")] BackslashQuote = 1,
        [pbr::OriginalName("BACKSLASH_QUOTE_ON")] On = 2,
        [pbr::OriginalName("BACKSLASH_QUOTE_OFF")] Off = 3,
        [pbr::OriginalName("BACKSLASH_QUOTE_SAFE_ENCODING")] SafeEncoding = 4,
      }

    }
    #endregion

  }

  internal sealed partial class PostgresqlConfigSet9_6 : pb::IMessage<PostgresqlConfigSet9_6> {
    private static readonly pb::MessageParser<PostgresqlConfigSet9_6> _parser = new pb::MessageParser<PostgresqlConfigSet9_6>(() => new PostgresqlConfigSet9_6());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostgresqlConfigSet9_6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Postgresql.V1.Config.Postgresql96Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet9_6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet9_6(PostgresqlConfigSet9_6 other) : this() {
      effectiveConfig_ = other.effectiveConfig_ != null ? other.effectiveConfig_.Clone() : null;
      userConfig_ = other.userConfig_ != null ? other.userConfig_.Clone() : null;
      defaultConfig_ = other.defaultConfig_ != null ? other.defaultConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlConfigSet9_6 Clone() {
      return new PostgresqlConfigSet9_6(this);
    }

    /// <summary>Field number for the "effective_config" field.</summary>
    public const int EffectiveConfigFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 effectiveConfig_;
    /// <summary>
    /// Effective settings for a PostgreSQL 9.6 cluster (a combination of settings defined
    /// in [user_config] and [default_config]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 EffectiveConfig {
      get { return effectiveConfig_; }
      set {
        effectiveConfig_ = value;
      }
    }

    /// <summary>Field number for the "user_config" field.</summary>
    public const int UserConfigFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 userConfig_;
    /// <summary>
    /// User-defined settings for a PostgreSQL 9.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 UserConfig {
      get { return userConfig_; }
      set {
        userConfig_ = value;
      }
    }

    /// <summary>Field number for the "default_config" field.</summary>
    public const int DefaultConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 defaultConfig_;
    /// <summary>
    /// Default configuration for a PostgreSQL 9.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6 DefaultConfig {
      get { return defaultConfig_; }
      set {
        defaultConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostgresqlConfigSet9_6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostgresqlConfigSet9_6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectiveConfig, other.EffectiveConfig)) return false;
      if (!object.Equals(UserConfig, other.UserConfig)) return false;
      if (!object.Equals(DefaultConfig, other.DefaultConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectiveConfig_ != null) hash ^= EffectiveConfig.GetHashCode();
      if (userConfig_ != null) hash ^= UserConfig.GetHashCode();
      if (defaultConfig_ != null) hash ^= DefaultConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectiveConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectiveConfig);
      }
      if (userConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserConfig);
      }
      if (defaultConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectiveConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveConfig);
      }
      if (userConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConfig);
      }
      if (defaultConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostgresqlConfigSet9_6 other) {
      if (other == null) {
        return;
      }
      if (other.effectiveConfig_ != null) {
        if (effectiveConfig_ == null) {
          EffectiveConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
        }
        EffectiveConfig.MergeFrom(other.EffectiveConfig);
      }
      if (other.userConfig_ != null) {
        if (userConfig_ == null) {
          UserConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
        }
        UserConfig.MergeFrom(other.UserConfig);
      }
      if (other.defaultConfig_ != null) {
        if (defaultConfig_ == null) {
          DefaultConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
        }
        DefaultConfig.MergeFrom(other.DefaultConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectiveConfig_ == null) {
              EffectiveConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
            }
            input.ReadMessage(EffectiveConfig);
            break;
          }
          case 18: {
            if (userConfig_ == null) {
              UserConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
            }
            input.ReadMessage(UserConfig);
            break;
          }
          case 26: {
            if (defaultConfig_ == null) {
              DefaultConfig = new global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlConfig9_6();
            }
            input.ReadMessage(DefaultConfig);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
