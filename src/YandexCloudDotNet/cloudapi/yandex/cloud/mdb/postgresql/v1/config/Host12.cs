// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/postgresql/v1/config/host12.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Postgresql.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/postgresql/v1/config/host12.proto</summary>
  internal static partial class Host12Reflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/postgresql/v1/config/host12.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Host12Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJ5YW5kZXgvY2xvdWQvbWRiL3Bvc3RncmVzcWwvdjEvY29uZmlnL2hvc3Qx",
            "Mi5wcm90bxIleWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZp",
            "ZxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh15YW5kZXgvY2xv",
            "dWQvdmFsaWRhdGlvbi5wcm90byLYLgoWUG9zdGdyZXNxbEhvc3RDb25maWcx",
            "MhI9ChhyZWNvdmVyeV9taW5fYXBwbHlfZGVsYXkYASABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZRIzCg5zaGFyZWRfYnVmZmVycxgCIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjEKDHRlbXBfYnVmZmVycxgD",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEi0KCHdvcmtfbWVt",
            "GAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNAoPdGVtcF9m",
            "aWxlX2xpbWl0GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUS",
            "RAoTYmFja2VuZF9mbHVzaF9hZnRlchgGIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQgr6xzEGMC0yMDQ4EkkKFm9sZF9zbmFwc2hvdF90aHJl",
            "c2hvbGQYByABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIM+scx",
            "CC0xLTg2NDAwEkAKG21heF9zdGFuZGJ5X3N0cmVhbWluZ19kZWxheRgIIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEm8KFGNvbnN0cmFpbnRf",
            "ZXhjbHVzaW9uGAkgASgOMlEueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3Fs",
            "LnYxLmNvbmZpZy5Qb3N0Z3Jlc3FsSG9zdENvbmZpZzEyLkNvbnN0cmFpbnRF",
            "eGNsdXNpb24SOwoVY3Vyc29yX3R1cGxlX2ZyYWN0aW9uGAogASgLMhwuZ29v",
            "Z2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEkoKE2Zyb21fY29sbGFwc2VfbGlt",
            "aXQYCyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIQ+scxDDEt",
            "MjE0NzQ4MzY0NxJKChNqb2luX2NvbGxhcHNlX2xpbWl0GAwgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWVCEPrHMQwxLTIxNDc0ODM2NDcSbAoT",
            "Zm9yY2VfcGFyYWxsZWxfbW9kZRgNIAEoDjJPLnlhbmRleC5jbG91ZC5tZGIu",
            "cG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbEhvc3RDb25maWcxMi5G",
            "b3JjZVBhcmFsbGVsTW9kZRJjChNjbGllbnRfbWluX21lc3NhZ2VzGA4gASgO",
            "MkYueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0",
            "Z3Jlc3FsSG9zdENvbmZpZzEyLkxvZ0xldmVsEmAKEGxvZ19taW5fbWVzc2Fn",
            "ZXMYDyABKA4yRi55YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29u",
            "ZmlnLlBvc3RncmVzcWxIb3N0Q29uZmlnMTIuTG9nTGV2ZWwSZwoXbG9nX21p",
            "bl9lcnJvcl9zdGF0ZW1lbnQYECABKA4yRi55YW5kZXguY2xvdWQubWRiLnBv",
            "c3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVzcWxIb3N0Q29uZmlnMTIuTG9n",
            "TGV2ZWwSPwoabG9nX21pbl9kdXJhdGlvbl9zdGF0ZW1lbnQYESABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIzCg9sb2dfY2hlY2twb2ludHMY",
            "EiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjMKD2xvZ19jb25u",
            "ZWN0aW9ucxgTIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSNgoS",
            "bG9nX2Rpc2Nvbm5lY3Rpb25zGBQgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJv",
            "b2xWYWx1ZRIwCgxsb2dfZHVyYXRpb24YFSABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlEmwKE2xvZ19lcnJvcl92ZXJib3NpdHkYFiABKA4yTy55",
            "YW5kZXguY2xvdWQubWRiLnBvc3RncmVzcWwudjEuY29uZmlnLlBvc3RncmVz",
            "cWxIb3N0Q29uZmlnMTIuTG9nRXJyb3JWZXJib3NpdHkSMgoObG9nX2xvY2tf",
            "d2FpdHMYFyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEmEKDWxv",
            "Z19zdGF0ZW1lbnQYGCABKA4ySi55YW5kZXguY2xvdWQubWRiLnBvc3RncmVz",
            "cWwudjEuY29uZmlnLlBvc3RncmVzcWxIb3N0Q29uZmlnMTIuTG9nU3RhdGVt",
            "ZW50EjMKDmxvZ190ZW1wX2ZpbGVzGBkgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUSEwoLc2VhcmNoX3BhdGgYGiABKAkSMAoMcm93X3NlY3Vy",
            "aXR5GBsgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJ5Ch1kZWZh",
            "dWx0X3RyYW5zYWN0aW9uX2lzb2xhdGlvbhgcIAEoDjJSLnlhbmRleC5jbG91",
            "ZC5tZGIucG9zdGdyZXNxbC52MS5jb25maWcuUG9zdGdyZXNxbEhvc3RDb25m",
            "aWcxMi5UcmFuc2FjdGlvbklzb2xhdGlvbhI2ChFzdGF0ZW1lbnRfdGltZW91",
            "dBgdIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjEKDGxvY2tf",
            "dGltZW91dBgeIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkgK",
            "I2lkbGVfaW5fdHJhbnNhY3Rpb25fc2Vzc2lvbl90aW1lb3V0GB8gASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSXwoMYnl0ZWFfb3V0cHV0GCAg",
            "ASgOMkkueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Q",
            "b3N0Z3Jlc3FsSG9zdENvbmZpZzEyLkJ5dGVhT3V0cHV0EloKCXhtbGJpbmFy",
            "eRghIAEoDjJHLnlhbmRleC5jbG91ZC5tZGIucG9zdGdyZXNxbC52MS5jb25m",
            "aWcuUG9zdGdyZXNxbEhvc3RDb25maWcxMi5YbWxCaW5hcnkSWgoJeG1sb3B0",
            "aW9uGCIgASgOMkcueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNv",
            "bmZpZy5Qb3N0Z3Jlc3FsSG9zdENvbmZpZzEyLlhtbE9wdGlvbhI7ChZnaW5f",
            "cGVuZGluZ19saXN0X2xpbWl0GCMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWUSNQoQZGVhZGxvY2tfdGltZW91dBgkIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEj4KGW1heF9sb2Nrc19wZXJfdHJhbnNhY3Rp",
            "b24YJSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJDCh5tYXhf",
            "cHJlZF9sb2Nrc19wZXJfdHJhbnNhY3Rpb24YJiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZRIvCgthcnJheV9udWxscxgnIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5Cb29sVmFsdWUSZQoPYmFja3NsYXNoX3F1b3RlGCggASgO",
            "MkwueWFuZGV4LmNsb3VkLm1kYi5wb3N0Z3Jlc3FsLnYxLmNvbmZpZy5Qb3N0",
            "Z3Jlc3FsSG9zdENvbmZpZzEyLkJhY2tzbGFzaFF1b3RlEjUKEWRlZmF1bHRf",
            "d2l0aF9vaWRzGCkgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI5",
            "ChVlc2NhcGVfc3RyaW5nX3dhcm5pbmcYKiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlEjgKFGxvX2NvbXBhdF9wcml2aWxlZ2VzGCsgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI/ChtvcGVyYXRvcl9wcmVjZWRl",
            "bmNlX3dhcm5pbmcYLCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVl",
            "EjkKFXF1b3RlX2FsbF9pZGVudGlmaWVycxgtIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSPwobc3RhbmRhcmRfY29uZm9ybWluZ19zdHJpbmdz",
            "GC4gASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRI4ChRzeW5jaHJv",
            "bml6ZV9zZXFzY2FucxgvIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFs",
            "dWUSOQoVdHJhbnNmb3JtX251bGxfZXF1YWxzGDAgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLkJvb2xWYWx1ZRIxCg1leGl0X29uX2Vycm9yGDEgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIzCg1zZXFfcGFnZV9jb3N0GDIgASgL",
            "MhwuZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlEjYKEHJhbmRvbV9wYWdl",
            "X2Nvc3QYMyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91YmxlVmFsdWUSNQoR",
            "ZW5hYmxlX2JpdG1hcHNjYW4YNiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9v",
            "bFZhbHVlEjIKDmVuYWJsZV9oYXNoYWdnGDcgASgLMhouZ29vZ2xlLnByb3Rv",
            "YnVmLkJvb2xWYWx1ZRIzCg9lbmFibGVfaGFzaGpvaW4YOCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuQm9vbFZhbHVlEjQKEGVuYWJsZV9pbmRleHNjYW4YOSAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjgKFGVuYWJsZV9pbmRl",
            "eG9ubHlzY2FuGDogASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIz",
            "Cg9lbmFibGVfbWF0ZXJpYWwYOyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9v",
            "bFZhbHVlEjQKEGVuYWJsZV9tZXJnZWpvaW4YPCABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuQm9vbFZhbHVlEjMKD2VuYWJsZV9uZXN0bG9vcBg9IAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSMgoOZW5hYmxlX3NlcXNjYW4YPiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEi8KC2VuYWJsZV9zb3J0",
            "GD8gASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRIyCg5lbmFibGVf",
            "dGlkc2NhbhhAIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSRQoU",
            "bWF4X3BhcmFsbGVsX3dvcmtlcnMYQSABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZUIK+scxBjAtMTAyNBJQCh9tYXhfcGFyYWxsZWxfd29ya2Vy",
            "c19wZXJfZ2F0aGVyGEIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWVCCvrHMQYwLTEwMjQSEAoIdGltZXpvbmUYQyABKAkSSQoYZWZmZWN0aXZl",
            "X2lvX2NvbmN1cnJlbmN5GEQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWVCCvrHMQYwLTEwMDASTQoUZWZmZWN0aXZlX2NhY2hlX3NpemUYRSAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIS+scxDjAtNTQ5NzU1",
            "ODEzODg4IpoBChNDb25zdHJhaW50RXhjbHVzaW9uEiQKIENPTlNUUkFJTlRf",
            "RVhDTFVTSU9OX1VOU1BFQ0lGSUVEEAASGwoXQ09OU1RSQUlOVF9FWENMVVNJ",
            "T05fT04QARIcChhDT05TVFJBSU5UX0VYQ0xVU0lPTl9PRkYQAhIiCh5DT05T",
            "VFJBSU5UX0VYQ0xVU0lPTl9QQVJUSVRJT04QAyKSAQoRRm9yY2VQYXJhbGxl",
            "bE1vZGUSIwofRk9SQ0VfUEFSQUxMRUxfTU9ERV9VTlNQRUNJRklFRBAAEhoK",
            "FkZPUkNFX1BBUkFMTEVMX01PREVfT04QARIbChdGT1JDRV9QQVJBTExFTF9N",
            "T0RFX09GRhACEh8KG0ZPUkNFX1BBUkFMTEVMX01PREVfUkVHUkVTUxADIpIC",
            "CghMb2dMZXZlbBIZChVMT0dfTEVWRUxfVU5TUEVDSUZJRUQQABIUChBMT0df",
            "TEVWRUxfREVCVUc1EAESFAoQTE9HX0xFVkVMX0RFQlVHNBACEhQKEExPR19M",
            "RVZFTF9ERUJVRzMQAxIUChBMT0dfTEVWRUxfREVCVUcyEAQSFAoQTE9HX0xF",
            "VkVMX0RFQlVHMRAFEhEKDUxPR19MRVZFTF9MT0cQBhIUChBMT0dfTEVWRUxf",
            "Tk9USUNFEAcSFQoRTE9HX0xFVkVMX1dBUk5JTkcQCBITCg9MT0dfTEVWRUxf",
            "RVJST1IQCRITCg9MT0dfTEVWRUxfRkFUQUwQChITCg9MT0dfTEVWRUxfUEFO",
            "SUMQCyKZAQoRTG9nRXJyb3JWZXJib3NpdHkSIwofTE9HX0VSUk9SX1ZFUkJP",
            "U0lUWV9VTlNQRUNJRklFRBAAEh0KGUxPR19FUlJPUl9WRVJCT1NJVFlfVEVS",
            "U0UQARIfChtMT0dfRVJST1JfVkVSQk9TSVRZX0RFRkFVTFQQAhIfChtMT0df",
            "RVJST1JfVkVSQk9TSVRZX1ZFUkJPU0UQAyKKAQoMTG9nU3RhdGVtZW50Eh0K",
            "GUxPR19TVEFURU1FTlRfVU5TUEVDSUZJRUQQABIWChJMT0dfU1RBVEVNRU5U",
            "X05PTkUQARIVChFMT0dfU1RBVEVNRU5UX0RETBACEhUKEUxPR19TVEFURU1F",
            "TlRfTU9EEAMSFQoRTE9HX1NUQVRFTUVOVF9BTEwQBCLmAQoUVHJhbnNhY3Rp",
            "b25Jc29sYXRpb24SJQohVFJBTlNBQ1RJT05fSVNPTEFUSU9OX1VOU1BFQ0lG",
            "SUVEEAASKgomVFJBTlNBQ1RJT05fSVNPTEFUSU9OX1JFQURfVU5DT01NSVRU",
            "RUQQARIoCiRUUkFOU0FDVElPTl9JU09MQVRJT05fUkVBRF9DT01NSVRURUQQ",
            "AhIpCiVUUkFOU0FDVElPTl9JU09MQVRJT05fUkVQRUFUQUJMRV9SRUFEEAMS",
            "JgoiVFJBTlNBQ1RJT05fSVNPTEFUSU9OX1NFUklBTElaQUJMRRAEIlsKC0J5",
            "dGVhT3V0cHV0EhwKGEJZVEVBX09VVFBVVF9VTlNQRUNJRklFRBAAEhQKEEJZ",
            "VEVBX09VVFBVVF9IRVgQARIYChRCWVRFQV9PVVRQVVRfRVNDQVBFRBACIlIK",
            "CVhtbEJpbmFyeRIaChZYTUxfQklOQVJZX1VOU1BFQ0lGSUVEEAASFQoRWE1M",
            "X0JJTkFSWV9CQVNFNjQQARISCg5YTUxfQklOQVJZX0hFWBACIlgKCVhtbE9w",
            "dGlvbhIaChZYTUxfT1BUSU9OX1VOU1BFQ0lGSUVEEAASFwoTWE1MX09QVElP",
            "Tl9ET0NVTUVOVBABEhYKElhNTF9PUFRJT05fQ09OVEVOVBACIpoBCg5CYWNr",
            "c2xhc2hRdW90ZRIfChtCQUNLU0xBU0hfUVVPVEVfVU5TUEVDSUZJRUQQABIT",
            "Cg9CQUNLU0xBU0hfUVVPVEUQARIWChJCQUNLU0xBU0hfUVVPVEVfT04QAhIX",
            "ChNCQUNLU0xBU0hfUVVPVEVfT0ZGEAMSIQodQkFDS1NMQVNIX1FVT1RFX1NB",
            "RkVfRU5DT0RJTkcQBEKBAQopeWFuZGV4LmNsb3VkLmFwaS5tZGIucG9zdGdy",
            "ZXNxbC52MS5jb25maWdaVGdpdGh1Yi5jb20veWFuZGV4LWNsb3VkL2dvLWdl",
            "bnByb3RvL3lhbmRleC9jbG91ZC9tZGIvcG9zdGdyZXNxbC92MS9jb25maWc7",
            "cG9zdGdyZXNxbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12), global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Parser, new[]{ "RecoveryMinApplyDelay", "SharedBuffers", "TempBuffers", "WorkMem", "TempFileLimit", "BackendFlushAfter", "OldSnapshotThreshold", "MaxStandbyStreamingDelay", "ConstraintExclusion", "CursorTupleFraction", "FromCollapseLimit", "JoinCollapseLimit", "ForceParallelMode", "ClientMinMessages", "LogMinMessages", "LogMinErrorStatement", "LogMinDurationStatement", "LogCheckpoints", "LogConnections", "LogDisconnections", "LogDuration", "LogErrorVerbosity", "LogLockWaits", "LogStatement", "LogTempFiles", "SearchPath", "RowSecurity", "DefaultTransactionIsolation", "StatementTimeout", "LockTimeout", "IdleInTransactionSessionTimeout", "ByteaOutput", "Xmlbinary", "Xmloption", "GinPendingListLimit", "DeadlockTimeout", "MaxLocksPerTransaction", "MaxPredLocksPerTransaction", "ArrayNulls", "BackslashQuote", "DefaultWithOids", "EscapeStringWarning", "LoCompatPrivileges", "OperatorPrecedenceWarning", "QuoteAllIdentifiers", "StandardConformingStrings", "SynchronizeSeqscans", "TransformNullEquals", "ExitOnError", "SeqPageCost", "RandomPageCost", "EnableBitmapscan", "EnableHashagg", "EnableHashjoin", "EnableIndexscan", "EnableIndexonlyscan", "EnableMaterial", "EnableMergejoin", "EnableNestloop", "EnableSeqscan", "EnableSort", "EnableTidscan", "MaxParallelWorkers", "MaxParallelWorkersPerGather", "Timezone", "EffectiveIoConcurrency", "EffectiveCacheSize" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ConstraintExclusion), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ForceParallelMode), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogErrorVerbosity), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogStatement), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.TransactionIsolation), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ByteaOutput), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlBinary), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlOption), typeof(global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.BackslashQuote) }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Options and structure of `PostgresqlConfig` reflects PostgreSQL configuration file
  /// parameters which detailed description is available in
  /// [PostgreSQL documentation](https://www.postgresql.org/docs/11/runtime-config.html).
  /// </summary>
  internal sealed partial class PostgresqlHostConfig12 : pb::IMessage<PostgresqlHostConfig12> {
    private static readonly pb::MessageParser<PostgresqlHostConfig12> _parser = new pb::MessageParser<PostgresqlHostConfig12>(() => new PostgresqlHostConfig12());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PostgresqlHostConfig12> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Postgresql.V1.Config.Host12Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlHostConfig12() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlHostConfig12(PostgresqlHostConfig12 other) : this() {
      RecoveryMinApplyDelay = other.RecoveryMinApplyDelay;
      SharedBuffers = other.SharedBuffers;
      TempBuffers = other.TempBuffers;
      WorkMem = other.WorkMem;
      TempFileLimit = other.TempFileLimit;
      BackendFlushAfter = other.BackendFlushAfter;
      OldSnapshotThreshold = other.OldSnapshotThreshold;
      MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
      constraintExclusion_ = other.constraintExclusion_;
      CursorTupleFraction = other.CursorTupleFraction;
      FromCollapseLimit = other.FromCollapseLimit;
      JoinCollapseLimit = other.JoinCollapseLimit;
      forceParallelMode_ = other.forceParallelMode_;
      clientMinMessages_ = other.clientMinMessages_;
      logMinMessages_ = other.logMinMessages_;
      logMinErrorStatement_ = other.logMinErrorStatement_;
      LogMinDurationStatement = other.LogMinDurationStatement;
      LogCheckpoints = other.LogCheckpoints;
      LogConnections = other.LogConnections;
      LogDisconnections = other.LogDisconnections;
      LogDuration = other.LogDuration;
      logErrorVerbosity_ = other.logErrorVerbosity_;
      LogLockWaits = other.LogLockWaits;
      logStatement_ = other.logStatement_;
      LogTempFiles = other.LogTempFiles;
      searchPath_ = other.searchPath_;
      RowSecurity = other.RowSecurity;
      defaultTransactionIsolation_ = other.defaultTransactionIsolation_;
      StatementTimeout = other.StatementTimeout;
      LockTimeout = other.LockTimeout;
      IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
      byteaOutput_ = other.byteaOutput_;
      xmlbinary_ = other.xmlbinary_;
      xmloption_ = other.xmloption_;
      GinPendingListLimit = other.GinPendingListLimit;
      DeadlockTimeout = other.DeadlockTimeout;
      MaxLocksPerTransaction = other.MaxLocksPerTransaction;
      MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
      ArrayNulls = other.ArrayNulls;
      backslashQuote_ = other.backslashQuote_;
      DefaultWithOids = other.DefaultWithOids;
      EscapeStringWarning = other.EscapeStringWarning;
      LoCompatPrivileges = other.LoCompatPrivileges;
      OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
      QuoteAllIdentifiers = other.QuoteAllIdentifiers;
      StandardConformingStrings = other.StandardConformingStrings;
      SynchronizeSeqscans = other.SynchronizeSeqscans;
      TransformNullEquals = other.TransformNullEquals;
      ExitOnError = other.ExitOnError;
      SeqPageCost = other.SeqPageCost;
      RandomPageCost = other.RandomPageCost;
      EnableBitmapscan = other.EnableBitmapscan;
      EnableHashagg = other.EnableHashagg;
      EnableHashjoin = other.EnableHashjoin;
      EnableIndexscan = other.EnableIndexscan;
      EnableIndexonlyscan = other.EnableIndexonlyscan;
      EnableMaterial = other.EnableMaterial;
      EnableMergejoin = other.EnableMergejoin;
      EnableNestloop = other.EnableNestloop;
      EnableSeqscan = other.EnableSeqscan;
      EnableSort = other.EnableSort;
      EnableTidscan = other.EnableTidscan;
      MaxParallelWorkers = other.MaxParallelWorkers;
      MaxParallelWorkersPerGather = other.MaxParallelWorkersPerGather;
      timezone_ = other.timezone_;
      EffectiveIoConcurrency = other.EffectiveIoConcurrency;
      EffectiveCacheSize = other.EffectiveCacheSize;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PostgresqlHostConfig12 Clone() {
      return new PostgresqlHostConfig12(this);
    }

    /// <summary>Field number for the "recovery_min_apply_delay" field.</summary>
    public const int RecoveryMinApplyDelayFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_recoveryMinApplyDelay_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? recoveryMinApplyDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? RecoveryMinApplyDelay {
      get { return recoveryMinApplyDelay_; }
      set {
        recoveryMinApplyDelay_ = value;
      }
    }


    /// <summary>Field number for the "shared_buffers" field.</summary>
    public const int SharedBuffersFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_sharedBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? sharedBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SharedBuffers {
      get { return sharedBuffers_; }
      set {
        sharedBuffers_ = value;
      }
    }


    /// <summary>Field number for the "temp_buffers" field.</summary>
    public const int TempBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_tempBuffers_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? tempBuffers_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempBuffers {
      get { return tempBuffers_; }
      set {
        tempBuffers_ = value;
      }
    }


    /// <summary>Field number for the "work_mem" field.</summary>
    public const int WorkMemFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_workMem_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? workMem_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? WorkMem {
      get { return workMem_; }
      set {
        workMem_ = value;
      }
    }


    /// <summary>Field number for the "temp_file_limit" field.</summary>
    public const int TempFileLimitFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_tempFileLimit_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? tempFileLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TempFileLimit {
      get { return tempFileLimit_; }
      set {
        tempFileLimit_ = value;
      }
    }


    /// <summary>Field number for the "backend_flush_after" field.</summary>
    public const int BackendFlushAfterFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_backendFlushAfter_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? backendFlushAfter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackendFlushAfter {
      get { return backendFlushAfter_; }
      set {
        backendFlushAfter_ = value;
      }
    }


    /// <summary>Field number for the "old_snapshot_threshold" field.</summary>
    public const int OldSnapshotThresholdFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_oldSnapshotThreshold_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? oldSnapshotThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? OldSnapshotThreshold {
      get { return oldSnapshotThreshold_; }
      set {
        oldSnapshotThreshold_ = value;
      }
    }


    /// <summary>Field number for the "max_standby_streaming_delay" field.</summary>
    public const int MaxStandbyStreamingDelayFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_maxStandbyStreamingDelay_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? maxStandbyStreamingDelay_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxStandbyStreamingDelay {
      get { return maxStandbyStreamingDelay_; }
      set {
        maxStandbyStreamingDelay_ = value;
      }
    }


    /// <summary>Field number for the "constraint_exclusion" field.</summary>
    public const int ConstraintExclusionFieldNumber = 9;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ConstraintExclusion constraintExclusion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ConstraintExclusion ConstraintExclusion {
      get { return constraintExclusion_; }
      set {
        constraintExclusion_ = value;
      }
    }

    /// <summary>Field number for the "cursor_tuple_fraction" field.</summary>
    public const int CursorTupleFractionFieldNumber = 10;
    private static readonly pb::FieldCodec<double?> _single_cursorTupleFraction_codec = pb::FieldCodec.ForStructWrapper<double>(82);
    private double? cursorTupleFraction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? CursorTupleFraction {
      get { return cursorTupleFraction_; }
      set {
        cursorTupleFraction_ = value;
      }
    }


    /// <summary>Field number for the "from_collapse_limit" field.</summary>
    public const int FromCollapseLimitFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_fromCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? fromCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? FromCollapseLimit {
      get { return fromCollapseLimit_; }
      set {
        fromCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "join_collapse_limit" field.</summary>
    public const int JoinCollapseLimitFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_joinCollapseLimit_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? joinCollapseLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? JoinCollapseLimit {
      get { return joinCollapseLimit_; }
      set {
        joinCollapseLimit_ = value;
      }
    }


    /// <summary>Field number for the "force_parallel_mode" field.</summary>
    public const int ForceParallelModeFieldNumber = 13;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ForceParallelMode forceParallelMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ForceParallelMode ForceParallelMode {
      get { return forceParallelMode_; }
      set {
        forceParallelMode_ = value;
      }
    }

    /// <summary>Field number for the "client_min_messages" field.</summary>
    public const int ClientMinMessagesFieldNumber = 14;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel clientMinMessages_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel ClientMinMessages {
      get { return clientMinMessages_; }
      set {
        clientMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_messages" field.</summary>
    public const int LogMinMessagesFieldNumber = 15;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel logMinMessages_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel LogMinMessages {
      get { return logMinMessages_; }
      set {
        logMinMessages_ = value;
      }
    }

    /// <summary>Field number for the "log_min_error_statement" field.</summary>
    public const int LogMinErrorStatementFieldNumber = 16;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel logMinErrorStatement_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel LogMinErrorStatement {
      get { return logMinErrorStatement_; }
      set {
        logMinErrorStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_min_duration_statement" field.</summary>
    public const int LogMinDurationStatementFieldNumber = 17;
    private static readonly pb::FieldCodec<long?> _single_logMinDurationStatement_codec = pb::FieldCodec.ForStructWrapper<long>(138);
    private long? logMinDurationStatement_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogMinDurationStatement {
      get { return logMinDurationStatement_; }
      set {
        logMinDurationStatement_ = value;
      }
    }


    /// <summary>Field number for the "log_checkpoints" field.</summary>
    public const int LogCheckpointsFieldNumber = 18;
    private static readonly pb::FieldCodec<bool?> _single_logCheckpoints_codec = pb::FieldCodec.ForStructWrapper<bool>(146);
    private bool? logCheckpoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogCheckpoints {
      get { return logCheckpoints_; }
      set {
        logCheckpoints_ = value;
      }
    }


    /// <summary>Field number for the "log_connections" field.</summary>
    public const int LogConnectionsFieldNumber = 19;
    private static readonly pb::FieldCodec<bool?> _single_logConnections_codec = pb::FieldCodec.ForStructWrapper<bool>(154);
    private bool? logConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogConnections {
      get { return logConnections_; }
      set {
        logConnections_ = value;
      }
    }


    /// <summary>Field number for the "log_disconnections" field.</summary>
    public const int LogDisconnectionsFieldNumber = 20;
    private static readonly pb::FieldCodec<bool?> _single_logDisconnections_codec = pb::FieldCodec.ForStructWrapper<bool>(162);
    private bool? logDisconnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDisconnections {
      get { return logDisconnections_; }
      set {
        logDisconnections_ = value;
      }
    }


    /// <summary>Field number for the "log_duration" field.</summary>
    public const int LogDurationFieldNumber = 21;
    private static readonly pb::FieldCodec<bool?> _single_logDuration_codec = pb::FieldCodec.ForStructWrapper<bool>(170);
    private bool? logDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogDuration {
      get { return logDuration_; }
      set {
        logDuration_ = value;
      }
    }


    /// <summary>Field number for the "log_error_verbosity" field.</summary>
    public const int LogErrorVerbosityFieldNumber = 22;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogErrorVerbosity logErrorVerbosity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogErrorVerbosity LogErrorVerbosity {
      get { return logErrorVerbosity_; }
      set {
        logErrorVerbosity_ = value;
      }
    }

    /// <summary>Field number for the "log_lock_waits" field.</summary>
    public const int LogLockWaitsFieldNumber = 23;
    private static readonly pb::FieldCodec<bool?> _single_logLockWaits_codec = pb::FieldCodec.ForStructWrapper<bool>(186);
    private bool? logLockWaits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LogLockWaits {
      get { return logLockWaits_; }
      set {
        logLockWaits_ = value;
      }
    }


    /// <summary>Field number for the "log_statement" field.</summary>
    public const int LogStatementFieldNumber = 24;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogStatement logStatement_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogStatement LogStatement {
      get { return logStatement_; }
      set {
        logStatement_ = value;
      }
    }

    /// <summary>Field number for the "log_temp_files" field.</summary>
    public const int LogTempFilesFieldNumber = 25;
    private static readonly pb::FieldCodec<long?> _single_logTempFiles_codec = pb::FieldCodec.ForStructWrapper<long>(202);
    private long? logTempFiles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LogTempFiles {
      get { return logTempFiles_; }
      set {
        logTempFiles_ = value;
      }
    }


    /// <summary>Field number for the "search_path" field.</summary>
    public const int SearchPathFieldNumber = 26;
    private string searchPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SearchPath {
      get { return searchPath_; }
      set {
        searchPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "row_security" field.</summary>
    public const int RowSecurityFieldNumber = 27;
    private static readonly pb::FieldCodec<bool?> _single_rowSecurity_codec = pb::FieldCodec.ForStructWrapper<bool>(218);
    private bool? rowSecurity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? RowSecurity {
      get { return rowSecurity_; }
      set {
        rowSecurity_ = value;
      }
    }


    /// <summary>Field number for the "default_transaction_isolation" field.</summary>
    public const int DefaultTransactionIsolationFieldNumber = 28;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.TransactionIsolation defaultTransactionIsolation_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.TransactionIsolation DefaultTransactionIsolation {
      get { return defaultTransactionIsolation_; }
      set {
        defaultTransactionIsolation_ = value;
      }
    }

    /// <summary>Field number for the "statement_timeout" field.</summary>
    public const int StatementTimeoutFieldNumber = 29;
    private static readonly pb::FieldCodec<long?> _single_statementTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(234);
    private long? statementTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? StatementTimeout {
      get { return statementTimeout_; }
      set {
        statementTimeout_ = value;
      }
    }


    /// <summary>Field number for the "lock_timeout" field.</summary>
    public const int LockTimeoutFieldNumber = 30;
    private static readonly pb::FieldCodec<long?> _single_lockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(242);
    private long? lockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? LockTimeout {
      get { return lockTimeout_; }
      set {
        lockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "idle_in_transaction_session_timeout" field.</summary>
    public const int IdleInTransactionSessionTimeoutFieldNumber = 31;
    private static readonly pb::FieldCodec<long?> _single_idleInTransactionSessionTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(250);
    private long? idleInTransactionSessionTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? IdleInTransactionSessionTimeout {
      get { return idleInTransactionSessionTimeout_; }
      set {
        idleInTransactionSessionTimeout_ = value;
      }
    }


    /// <summary>Field number for the "bytea_output" field.</summary>
    public const int ByteaOutputFieldNumber = 32;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ByteaOutput byteaOutput_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ByteaOutput ByteaOutput {
      get { return byteaOutput_; }
      set {
        byteaOutput_ = value;
      }
    }

    /// <summary>Field number for the "xmlbinary" field.</summary>
    public const int XmlbinaryFieldNumber = 33;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlBinary xmlbinary_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlBinary Xmlbinary {
      get { return xmlbinary_; }
      set {
        xmlbinary_ = value;
      }
    }

    /// <summary>Field number for the "xmloption" field.</summary>
    public const int XmloptionFieldNumber = 34;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlOption xmloption_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlOption Xmloption {
      get { return xmloption_; }
      set {
        xmloption_ = value;
      }
    }

    /// <summary>Field number for the "gin_pending_list_limit" field.</summary>
    public const int GinPendingListLimitFieldNumber = 35;
    private static readonly pb::FieldCodec<long?> _single_ginPendingListLimit_codec = pb::FieldCodec.ForStructWrapper<long>(282);
    private long? ginPendingListLimit_;
    /// <summary>
    /// in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GinPendingListLimit {
      get { return ginPendingListLimit_; }
      set {
        ginPendingListLimit_ = value;
      }
    }


    /// <summary>Field number for the "deadlock_timeout" field.</summary>
    public const int DeadlockTimeoutFieldNumber = 36;
    private static readonly pb::FieldCodec<long?> _single_deadlockTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(290);
    private long? deadlockTimeout_;
    /// <summary>
    /// in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DeadlockTimeout {
      get { return deadlockTimeout_; }
      set {
        deadlockTimeout_ = value;
      }
    }


    /// <summary>Field number for the "max_locks_per_transaction" field.</summary>
    public const int MaxLocksPerTransactionFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_maxLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? maxLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxLocksPerTransaction {
      get { return maxLocksPerTransaction_; }
      set {
        maxLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "max_pred_locks_per_transaction" field.</summary>
    public const int MaxPredLocksPerTransactionFieldNumber = 38;
    private static readonly pb::FieldCodec<long?> _single_maxPredLocksPerTransaction_codec = pb::FieldCodec.ForStructWrapper<long>(306);
    private long? maxPredLocksPerTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPredLocksPerTransaction {
      get { return maxPredLocksPerTransaction_; }
      set {
        maxPredLocksPerTransaction_ = value;
      }
    }


    /// <summary>Field number for the "array_nulls" field.</summary>
    public const int ArrayNullsFieldNumber = 39;
    private static readonly pb::FieldCodec<bool?> _single_arrayNulls_codec = pb::FieldCodec.ForStructWrapper<bool>(314);
    private bool? arrayNulls_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ArrayNulls {
      get { return arrayNulls_; }
      set {
        arrayNulls_ = value;
      }
    }


    /// <summary>Field number for the "backslash_quote" field.</summary>
    public const int BackslashQuoteFieldNumber = 40;
    private global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.BackslashQuote backslashQuote_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.BackslashQuote BackslashQuote {
      get { return backslashQuote_; }
      set {
        backslashQuote_ = value;
      }
    }

    /// <summary>Field number for the "default_with_oids" field.</summary>
    public const int DefaultWithOidsFieldNumber = 41;
    private static readonly pb::FieldCodec<bool?> _single_defaultWithOids_codec = pb::FieldCodec.ForStructWrapper<bool>(330);
    private bool? defaultWithOids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DefaultWithOids {
      get { return defaultWithOids_; }
      set {
        defaultWithOids_ = value;
      }
    }


    /// <summary>Field number for the "escape_string_warning" field.</summary>
    public const int EscapeStringWarningFieldNumber = 42;
    private static readonly pb::FieldCodec<bool?> _single_escapeStringWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(338);
    private bool? escapeStringWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EscapeStringWarning {
      get { return escapeStringWarning_; }
      set {
        escapeStringWarning_ = value;
      }
    }


    /// <summary>Field number for the "lo_compat_privileges" field.</summary>
    public const int LoCompatPrivilegesFieldNumber = 43;
    private static readonly pb::FieldCodec<bool?> _single_loCompatPrivileges_codec = pb::FieldCodec.ForStructWrapper<bool>(346);
    private bool? loCompatPrivileges_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LoCompatPrivileges {
      get { return loCompatPrivileges_; }
      set {
        loCompatPrivileges_ = value;
      }
    }


    /// <summary>Field number for the "operator_precedence_warning" field.</summary>
    public const int OperatorPrecedenceWarningFieldNumber = 44;
    private static readonly pb::FieldCodec<bool?> _single_operatorPrecedenceWarning_codec = pb::FieldCodec.ForStructWrapper<bool>(354);
    private bool? operatorPrecedenceWarning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OperatorPrecedenceWarning {
      get { return operatorPrecedenceWarning_; }
      set {
        operatorPrecedenceWarning_ = value;
      }
    }


    /// <summary>Field number for the "quote_all_identifiers" field.</summary>
    public const int QuoteAllIdentifiersFieldNumber = 45;
    private static readonly pb::FieldCodec<bool?> _single_quoteAllIdentifiers_codec = pb::FieldCodec.ForStructWrapper<bool>(362);
    private bool? quoteAllIdentifiers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? QuoteAllIdentifiers {
      get { return quoteAllIdentifiers_; }
      set {
        quoteAllIdentifiers_ = value;
      }
    }


    /// <summary>Field number for the "standard_conforming_strings" field.</summary>
    public const int StandardConformingStringsFieldNumber = 46;
    private static readonly pb::FieldCodec<bool?> _single_standardConformingStrings_codec = pb::FieldCodec.ForStructWrapper<bool>(370);
    private bool? standardConformingStrings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? StandardConformingStrings {
      get { return standardConformingStrings_; }
      set {
        standardConformingStrings_ = value;
      }
    }


    /// <summary>Field number for the "synchronize_seqscans" field.</summary>
    public const int SynchronizeSeqscansFieldNumber = 47;
    private static readonly pb::FieldCodec<bool?> _single_synchronizeSeqscans_codec = pb::FieldCodec.ForStructWrapper<bool>(378);
    private bool? synchronizeSeqscans_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SynchronizeSeqscans {
      get { return synchronizeSeqscans_; }
      set {
        synchronizeSeqscans_ = value;
      }
    }


    /// <summary>Field number for the "transform_null_equals" field.</summary>
    public const int TransformNullEqualsFieldNumber = 48;
    private static readonly pb::FieldCodec<bool?> _single_transformNullEquals_codec = pb::FieldCodec.ForStructWrapper<bool>(386);
    private bool? transformNullEquals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TransformNullEquals {
      get { return transformNullEquals_; }
      set {
        transformNullEquals_ = value;
      }
    }


    /// <summary>Field number for the "exit_on_error" field.</summary>
    public const int ExitOnErrorFieldNumber = 49;
    private static readonly pb::FieldCodec<bool?> _single_exitOnError_codec = pb::FieldCodec.ForStructWrapper<bool>(394);
    private bool? exitOnError_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ExitOnError {
      get { return exitOnError_; }
      set {
        exitOnError_ = value;
      }
    }


    /// <summary>Field number for the "seq_page_cost" field.</summary>
    public const int SeqPageCostFieldNumber = 50;
    private static readonly pb::FieldCodec<double?> _single_seqPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(402);
    private double? seqPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? SeqPageCost {
      get { return seqPageCost_; }
      set {
        seqPageCost_ = value;
      }
    }


    /// <summary>Field number for the "random_page_cost" field.</summary>
    public const int RandomPageCostFieldNumber = 51;
    private static readonly pb::FieldCodec<double?> _single_randomPageCost_codec = pb::FieldCodec.ForStructWrapper<double>(410);
    private double? randomPageCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? RandomPageCost {
      get { return randomPageCost_; }
      set {
        randomPageCost_ = value;
      }
    }


    /// <summary>Field number for the "enable_bitmapscan" field.</summary>
    public const int EnableBitmapscanFieldNumber = 54;
    private static readonly pb::FieldCodec<bool?> _single_enableBitmapscan_codec = pb::FieldCodec.ForStructWrapper<bool>(434);
    private bool? enableBitmapscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableBitmapscan {
      get { return enableBitmapscan_; }
      set {
        enableBitmapscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_hashagg" field.</summary>
    public const int EnableHashaggFieldNumber = 55;
    private static readonly pb::FieldCodec<bool?> _single_enableHashagg_codec = pb::FieldCodec.ForStructWrapper<bool>(442);
    private bool? enableHashagg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableHashagg {
      get { return enableHashagg_; }
      set {
        enableHashagg_ = value;
      }
    }


    /// <summary>Field number for the "enable_hashjoin" field.</summary>
    public const int EnableHashjoinFieldNumber = 56;
    private static readonly pb::FieldCodec<bool?> _single_enableHashjoin_codec = pb::FieldCodec.ForStructWrapper<bool>(450);
    private bool? enableHashjoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableHashjoin {
      get { return enableHashjoin_; }
      set {
        enableHashjoin_ = value;
      }
    }


    /// <summary>Field number for the "enable_indexscan" field.</summary>
    public const int EnableIndexscanFieldNumber = 57;
    private static readonly pb::FieldCodec<bool?> _single_enableIndexscan_codec = pb::FieldCodec.ForStructWrapper<bool>(458);
    private bool? enableIndexscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIndexscan {
      get { return enableIndexscan_; }
      set {
        enableIndexscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_indexonlyscan" field.</summary>
    public const int EnableIndexonlyscanFieldNumber = 58;
    private static readonly pb::FieldCodec<bool?> _single_enableIndexonlyscan_codec = pb::FieldCodec.ForStructWrapper<bool>(466);
    private bool? enableIndexonlyscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableIndexonlyscan {
      get { return enableIndexonlyscan_; }
      set {
        enableIndexonlyscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_material" field.</summary>
    public const int EnableMaterialFieldNumber = 59;
    private static readonly pb::FieldCodec<bool?> _single_enableMaterial_codec = pb::FieldCodec.ForStructWrapper<bool>(474);
    private bool? enableMaterial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableMaterial {
      get { return enableMaterial_; }
      set {
        enableMaterial_ = value;
      }
    }


    /// <summary>Field number for the "enable_mergejoin" field.</summary>
    public const int EnableMergejoinFieldNumber = 60;
    private static readonly pb::FieldCodec<bool?> _single_enableMergejoin_codec = pb::FieldCodec.ForStructWrapper<bool>(482);
    private bool? enableMergejoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableMergejoin {
      get { return enableMergejoin_; }
      set {
        enableMergejoin_ = value;
      }
    }


    /// <summary>Field number for the "enable_nestloop" field.</summary>
    public const int EnableNestloopFieldNumber = 61;
    private static readonly pb::FieldCodec<bool?> _single_enableNestloop_codec = pb::FieldCodec.ForStructWrapper<bool>(490);
    private bool? enableNestloop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableNestloop {
      get { return enableNestloop_; }
      set {
        enableNestloop_ = value;
      }
    }


    /// <summary>Field number for the "enable_seqscan" field.</summary>
    public const int EnableSeqscanFieldNumber = 62;
    private static readonly pb::FieldCodec<bool?> _single_enableSeqscan_codec = pb::FieldCodec.ForStructWrapper<bool>(498);
    private bool? enableSeqscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableSeqscan {
      get { return enableSeqscan_; }
      set {
        enableSeqscan_ = value;
      }
    }


    /// <summary>Field number for the "enable_sort" field.</summary>
    public const int EnableSortFieldNumber = 63;
    private static readonly pb::FieldCodec<bool?> _single_enableSort_codec = pb::FieldCodec.ForStructWrapper<bool>(506);
    private bool? enableSort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableSort {
      get { return enableSort_; }
      set {
        enableSort_ = value;
      }
    }


    /// <summary>Field number for the "enable_tidscan" field.</summary>
    public const int EnableTidscanFieldNumber = 64;
    private static readonly pb::FieldCodec<bool?> _single_enableTidscan_codec = pb::FieldCodec.ForStructWrapper<bool>(514);
    private bool? enableTidscan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableTidscan {
      get { return enableTidscan_; }
      set {
        enableTidscan_ = value;
      }
    }


    /// <summary>Field number for the "max_parallel_workers" field.</summary>
    public const int MaxParallelWorkersFieldNumber = 65;
    private static readonly pb::FieldCodec<long?> _single_maxParallelWorkers_codec = pb::FieldCodec.ForStructWrapper<long>(522);
    private long? maxParallelWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxParallelWorkers {
      get { return maxParallelWorkers_; }
      set {
        maxParallelWorkers_ = value;
      }
    }


    /// <summary>Field number for the "max_parallel_workers_per_gather" field.</summary>
    public const int MaxParallelWorkersPerGatherFieldNumber = 66;
    private static readonly pb::FieldCodec<long?> _single_maxParallelWorkersPerGather_codec = pb::FieldCodec.ForStructWrapper<long>(530);
    private long? maxParallelWorkersPerGather_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxParallelWorkersPerGather {
      get { return maxParallelWorkersPerGather_; }
      set {
        maxParallelWorkersPerGather_ = value;
      }
    }


    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 67;
    private string timezone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effective_io_concurrency" field.</summary>
    public const int EffectiveIoConcurrencyFieldNumber = 68;
    private static readonly pb::FieldCodec<long?> _single_effectiveIoConcurrency_codec = pb::FieldCodec.ForStructWrapper<long>(546);
    private long? effectiveIoConcurrency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveIoConcurrency {
      get { return effectiveIoConcurrency_; }
      set {
        effectiveIoConcurrency_ = value;
      }
    }


    /// <summary>Field number for the "effective_cache_size" field.</summary>
    public const int EffectiveCacheSizeFieldNumber = 69;
    private static readonly pb::FieldCodec<long?> _single_effectiveCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(554);
    private long? effectiveCacheSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? EffectiveCacheSize {
      get { return effectiveCacheSize_; }
      set {
        effectiveCacheSize_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PostgresqlHostConfig12);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PostgresqlHostConfig12 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecoveryMinApplyDelay != other.RecoveryMinApplyDelay) return false;
      if (SharedBuffers != other.SharedBuffers) return false;
      if (TempBuffers != other.TempBuffers) return false;
      if (WorkMem != other.WorkMem) return false;
      if (TempFileLimit != other.TempFileLimit) return false;
      if (BackendFlushAfter != other.BackendFlushAfter) return false;
      if (OldSnapshotThreshold != other.OldSnapshotThreshold) return false;
      if (MaxStandbyStreamingDelay != other.MaxStandbyStreamingDelay) return false;
      if (ConstraintExclusion != other.ConstraintExclusion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(CursorTupleFraction, other.CursorTupleFraction)) return false;
      if (FromCollapseLimit != other.FromCollapseLimit) return false;
      if (JoinCollapseLimit != other.JoinCollapseLimit) return false;
      if (ForceParallelMode != other.ForceParallelMode) return false;
      if (ClientMinMessages != other.ClientMinMessages) return false;
      if (LogMinMessages != other.LogMinMessages) return false;
      if (LogMinErrorStatement != other.LogMinErrorStatement) return false;
      if (LogMinDurationStatement != other.LogMinDurationStatement) return false;
      if (LogCheckpoints != other.LogCheckpoints) return false;
      if (LogConnections != other.LogConnections) return false;
      if (LogDisconnections != other.LogDisconnections) return false;
      if (LogDuration != other.LogDuration) return false;
      if (LogErrorVerbosity != other.LogErrorVerbosity) return false;
      if (LogLockWaits != other.LogLockWaits) return false;
      if (LogStatement != other.LogStatement) return false;
      if (LogTempFiles != other.LogTempFiles) return false;
      if (SearchPath != other.SearchPath) return false;
      if (RowSecurity != other.RowSecurity) return false;
      if (DefaultTransactionIsolation != other.DefaultTransactionIsolation) return false;
      if (StatementTimeout != other.StatementTimeout) return false;
      if (LockTimeout != other.LockTimeout) return false;
      if (IdleInTransactionSessionTimeout != other.IdleInTransactionSessionTimeout) return false;
      if (ByteaOutput != other.ByteaOutput) return false;
      if (Xmlbinary != other.Xmlbinary) return false;
      if (Xmloption != other.Xmloption) return false;
      if (GinPendingListLimit != other.GinPendingListLimit) return false;
      if (DeadlockTimeout != other.DeadlockTimeout) return false;
      if (MaxLocksPerTransaction != other.MaxLocksPerTransaction) return false;
      if (MaxPredLocksPerTransaction != other.MaxPredLocksPerTransaction) return false;
      if (ArrayNulls != other.ArrayNulls) return false;
      if (BackslashQuote != other.BackslashQuote) return false;
      if (DefaultWithOids != other.DefaultWithOids) return false;
      if (EscapeStringWarning != other.EscapeStringWarning) return false;
      if (LoCompatPrivileges != other.LoCompatPrivileges) return false;
      if (OperatorPrecedenceWarning != other.OperatorPrecedenceWarning) return false;
      if (QuoteAllIdentifiers != other.QuoteAllIdentifiers) return false;
      if (StandardConformingStrings != other.StandardConformingStrings) return false;
      if (SynchronizeSeqscans != other.SynchronizeSeqscans) return false;
      if (TransformNullEquals != other.TransformNullEquals) return false;
      if (ExitOnError != other.ExitOnError) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(SeqPageCost, other.SeqPageCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(RandomPageCost, other.RandomPageCost)) return false;
      if (EnableBitmapscan != other.EnableBitmapscan) return false;
      if (EnableHashagg != other.EnableHashagg) return false;
      if (EnableHashjoin != other.EnableHashjoin) return false;
      if (EnableIndexscan != other.EnableIndexscan) return false;
      if (EnableIndexonlyscan != other.EnableIndexonlyscan) return false;
      if (EnableMaterial != other.EnableMaterial) return false;
      if (EnableMergejoin != other.EnableMergejoin) return false;
      if (EnableNestloop != other.EnableNestloop) return false;
      if (EnableSeqscan != other.EnableSeqscan) return false;
      if (EnableSort != other.EnableSort) return false;
      if (EnableTidscan != other.EnableTidscan) return false;
      if (MaxParallelWorkers != other.MaxParallelWorkers) return false;
      if (MaxParallelWorkersPerGather != other.MaxParallelWorkersPerGather) return false;
      if (Timezone != other.Timezone) return false;
      if (EffectiveIoConcurrency != other.EffectiveIoConcurrency) return false;
      if (EffectiveCacheSize != other.EffectiveCacheSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (recoveryMinApplyDelay_ != null) hash ^= RecoveryMinApplyDelay.GetHashCode();
      if (sharedBuffers_ != null) hash ^= SharedBuffers.GetHashCode();
      if (tempBuffers_ != null) hash ^= TempBuffers.GetHashCode();
      if (workMem_ != null) hash ^= WorkMem.GetHashCode();
      if (tempFileLimit_ != null) hash ^= TempFileLimit.GetHashCode();
      if (backendFlushAfter_ != null) hash ^= BackendFlushAfter.GetHashCode();
      if (oldSnapshotThreshold_ != null) hash ^= OldSnapshotThreshold.GetHashCode();
      if (maxStandbyStreamingDelay_ != null) hash ^= MaxStandbyStreamingDelay.GetHashCode();
      if (ConstraintExclusion != 0) hash ^= ConstraintExclusion.GetHashCode();
      if (cursorTupleFraction_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(CursorTupleFraction);
      if (fromCollapseLimit_ != null) hash ^= FromCollapseLimit.GetHashCode();
      if (joinCollapseLimit_ != null) hash ^= JoinCollapseLimit.GetHashCode();
      if (ForceParallelMode != 0) hash ^= ForceParallelMode.GetHashCode();
      if (ClientMinMessages != 0) hash ^= ClientMinMessages.GetHashCode();
      if (LogMinMessages != 0) hash ^= LogMinMessages.GetHashCode();
      if (LogMinErrorStatement != 0) hash ^= LogMinErrorStatement.GetHashCode();
      if (logMinDurationStatement_ != null) hash ^= LogMinDurationStatement.GetHashCode();
      if (logCheckpoints_ != null) hash ^= LogCheckpoints.GetHashCode();
      if (logConnections_ != null) hash ^= LogConnections.GetHashCode();
      if (logDisconnections_ != null) hash ^= LogDisconnections.GetHashCode();
      if (logDuration_ != null) hash ^= LogDuration.GetHashCode();
      if (LogErrorVerbosity != 0) hash ^= LogErrorVerbosity.GetHashCode();
      if (logLockWaits_ != null) hash ^= LogLockWaits.GetHashCode();
      if (LogStatement != 0) hash ^= LogStatement.GetHashCode();
      if (logTempFiles_ != null) hash ^= LogTempFiles.GetHashCode();
      if (SearchPath.Length != 0) hash ^= SearchPath.GetHashCode();
      if (rowSecurity_ != null) hash ^= RowSecurity.GetHashCode();
      if (DefaultTransactionIsolation != 0) hash ^= DefaultTransactionIsolation.GetHashCode();
      if (statementTimeout_ != null) hash ^= StatementTimeout.GetHashCode();
      if (lockTimeout_ != null) hash ^= LockTimeout.GetHashCode();
      if (idleInTransactionSessionTimeout_ != null) hash ^= IdleInTransactionSessionTimeout.GetHashCode();
      if (ByteaOutput != 0) hash ^= ByteaOutput.GetHashCode();
      if (Xmlbinary != 0) hash ^= Xmlbinary.GetHashCode();
      if (Xmloption != 0) hash ^= Xmloption.GetHashCode();
      if (ginPendingListLimit_ != null) hash ^= GinPendingListLimit.GetHashCode();
      if (deadlockTimeout_ != null) hash ^= DeadlockTimeout.GetHashCode();
      if (maxLocksPerTransaction_ != null) hash ^= MaxLocksPerTransaction.GetHashCode();
      if (maxPredLocksPerTransaction_ != null) hash ^= MaxPredLocksPerTransaction.GetHashCode();
      if (arrayNulls_ != null) hash ^= ArrayNulls.GetHashCode();
      if (BackslashQuote != 0) hash ^= BackslashQuote.GetHashCode();
      if (defaultWithOids_ != null) hash ^= DefaultWithOids.GetHashCode();
      if (escapeStringWarning_ != null) hash ^= EscapeStringWarning.GetHashCode();
      if (loCompatPrivileges_ != null) hash ^= LoCompatPrivileges.GetHashCode();
      if (operatorPrecedenceWarning_ != null) hash ^= OperatorPrecedenceWarning.GetHashCode();
      if (quoteAllIdentifiers_ != null) hash ^= QuoteAllIdentifiers.GetHashCode();
      if (standardConformingStrings_ != null) hash ^= StandardConformingStrings.GetHashCode();
      if (synchronizeSeqscans_ != null) hash ^= SynchronizeSeqscans.GetHashCode();
      if (transformNullEquals_ != null) hash ^= TransformNullEquals.GetHashCode();
      if (exitOnError_ != null) hash ^= ExitOnError.GetHashCode();
      if (seqPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(SeqPageCost);
      if (randomPageCost_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(RandomPageCost);
      if (enableBitmapscan_ != null) hash ^= EnableBitmapscan.GetHashCode();
      if (enableHashagg_ != null) hash ^= EnableHashagg.GetHashCode();
      if (enableHashjoin_ != null) hash ^= EnableHashjoin.GetHashCode();
      if (enableIndexscan_ != null) hash ^= EnableIndexscan.GetHashCode();
      if (enableIndexonlyscan_ != null) hash ^= EnableIndexonlyscan.GetHashCode();
      if (enableMaterial_ != null) hash ^= EnableMaterial.GetHashCode();
      if (enableMergejoin_ != null) hash ^= EnableMergejoin.GetHashCode();
      if (enableNestloop_ != null) hash ^= EnableNestloop.GetHashCode();
      if (enableSeqscan_ != null) hash ^= EnableSeqscan.GetHashCode();
      if (enableSort_ != null) hash ^= EnableSort.GetHashCode();
      if (enableTidscan_ != null) hash ^= EnableTidscan.GetHashCode();
      if (maxParallelWorkers_ != null) hash ^= MaxParallelWorkers.GetHashCode();
      if (maxParallelWorkersPerGather_ != null) hash ^= MaxParallelWorkersPerGather.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (effectiveIoConcurrency_ != null) hash ^= EffectiveIoConcurrency.GetHashCode();
      if (effectiveCacheSize_ != null) hash ^= EffectiveCacheSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (recoveryMinApplyDelay_ != null) {
        _single_recoveryMinApplyDelay_codec.WriteTagAndValue(output, RecoveryMinApplyDelay);
      }
      if (sharedBuffers_ != null) {
        _single_sharedBuffers_codec.WriteTagAndValue(output, SharedBuffers);
      }
      if (tempBuffers_ != null) {
        _single_tempBuffers_codec.WriteTagAndValue(output, TempBuffers);
      }
      if (workMem_ != null) {
        _single_workMem_codec.WriteTagAndValue(output, WorkMem);
      }
      if (tempFileLimit_ != null) {
        _single_tempFileLimit_codec.WriteTagAndValue(output, TempFileLimit);
      }
      if (backendFlushAfter_ != null) {
        _single_backendFlushAfter_codec.WriteTagAndValue(output, BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        _single_oldSnapshotThreshold_codec.WriteTagAndValue(output, OldSnapshotThreshold);
      }
      if (maxStandbyStreamingDelay_ != null) {
        _single_maxStandbyStreamingDelay_codec.WriteTagAndValue(output, MaxStandbyStreamingDelay);
      }
      if (ConstraintExclusion != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        _single_cursorTupleFraction_codec.WriteTagAndValue(output, CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        _single_fromCollapseLimit_codec.WriteTagAndValue(output, FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        _single_joinCollapseLimit_codec.WriteTagAndValue(output, JoinCollapseLimit);
      }
      if (ForceParallelMode != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) ForceParallelMode);
      }
      if (ClientMinMessages != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ClientMinMessages);
      }
      if (LogMinMessages != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) LogMinMessages);
      }
      if (LogMinErrorStatement != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        _single_logMinDurationStatement_codec.WriteTagAndValue(output, LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        _single_logCheckpoints_codec.WriteTagAndValue(output, LogCheckpoints);
      }
      if (logConnections_ != null) {
        _single_logConnections_codec.WriteTagAndValue(output, LogConnections);
      }
      if (logDisconnections_ != null) {
        _single_logDisconnections_codec.WriteTagAndValue(output, LogDisconnections);
      }
      if (logDuration_ != null) {
        _single_logDuration_codec.WriteTagAndValue(output, LogDuration);
      }
      if (LogErrorVerbosity != 0) {
        output.WriteRawTag(176, 1);
        output.WriteEnum((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        _single_logLockWaits_codec.WriteTagAndValue(output, LogLockWaits);
      }
      if (LogStatement != 0) {
        output.WriteRawTag(192, 1);
        output.WriteEnum((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        _single_logTempFiles_codec.WriteTagAndValue(output, LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(SearchPath);
      }
      if (rowSecurity_ != null) {
        _single_rowSecurity_codec.WriteTagAndValue(output, RowSecurity);
      }
      if (DefaultTransactionIsolation != 0) {
        output.WriteRawTag(224, 1);
        output.WriteEnum((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        _single_statementTimeout_codec.WriteTagAndValue(output, StatementTimeout);
      }
      if (lockTimeout_ != null) {
        _single_lockTimeout_codec.WriteTagAndValue(output, LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        _single_idleInTransactionSessionTimeout_codec.WriteTagAndValue(output, IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != 0) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) ByteaOutput);
      }
      if (Xmlbinary != 0) {
        output.WriteRawTag(136, 2);
        output.WriteEnum((int) Xmlbinary);
      }
      if (Xmloption != 0) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        _single_ginPendingListLimit_codec.WriteTagAndValue(output, GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        _single_deadlockTimeout_codec.WriteTagAndValue(output, DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        _single_maxLocksPerTransaction_codec.WriteTagAndValue(output, MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        _single_maxPredLocksPerTransaction_codec.WriteTagAndValue(output, MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        _single_arrayNulls_codec.WriteTagAndValue(output, ArrayNulls);
      }
      if (BackslashQuote != 0) {
        output.WriteRawTag(192, 2);
        output.WriteEnum((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        _single_defaultWithOids_codec.WriteTagAndValue(output, DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        _single_escapeStringWarning_codec.WriteTagAndValue(output, EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        _single_loCompatPrivileges_codec.WriteTagAndValue(output, LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        _single_operatorPrecedenceWarning_codec.WriteTagAndValue(output, OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        _single_quoteAllIdentifiers_codec.WriteTagAndValue(output, QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        _single_standardConformingStrings_codec.WriteTagAndValue(output, StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        _single_synchronizeSeqscans_codec.WriteTagAndValue(output, SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        _single_transformNullEquals_codec.WriteTagAndValue(output, TransformNullEquals);
      }
      if (exitOnError_ != null) {
        _single_exitOnError_codec.WriteTagAndValue(output, ExitOnError);
      }
      if (seqPageCost_ != null) {
        _single_seqPageCost_codec.WriteTagAndValue(output, SeqPageCost);
      }
      if (randomPageCost_ != null) {
        _single_randomPageCost_codec.WriteTagAndValue(output, RandomPageCost);
      }
      if (enableBitmapscan_ != null) {
        _single_enableBitmapscan_codec.WriteTagAndValue(output, EnableBitmapscan);
      }
      if (enableHashagg_ != null) {
        _single_enableHashagg_codec.WriteTagAndValue(output, EnableHashagg);
      }
      if (enableHashjoin_ != null) {
        _single_enableHashjoin_codec.WriteTagAndValue(output, EnableHashjoin);
      }
      if (enableIndexscan_ != null) {
        _single_enableIndexscan_codec.WriteTagAndValue(output, EnableIndexscan);
      }
      if (enableIndexonlyscan_ != null) {
        _single_enableIndexonlyscan_codec.WriteTagAndValue(output, EnableIndexonlyscan);
      }
      if (enableMaterial_ != null) {
        _single_enableMaterial_codec.WriteTagAndValue(output, EnableMaterial);
      }
      if (enableMergejoin_ != null) {
        _single_enableMergejoin_codec.WriteTagAndValue(output, EnableMergejoin);
      }
      if (enableNestloop_ != null) {
        _single_enableNestloop_codec.WriteTagAndValue(output, EnableNestloop);
      }
      if (enableSeqscan_ != null) {
        _single_enableSeqscan_codec.WriteTagAndValue(output, EnableSeqscan);
      }
      if (enableSort_ != null) {
        _single_enableSort_codec.WriteTagAndValue(output, EnableSort);
      }
      if (enableTidscan_ != null) {
        _single_enableTidscan_codec.WriteTagAndValue(output, EnableTidscan);
      }
      if (maxParallelWorkers_ != null) {
        _single_maxParallelWorkers_codec.WriteTagAndValue(output, MaxParallelWorkers);
      }
      if (maxParallelWorkersPerGather_ != null) {
        _single_maxParallelWorkersPerGather_codec.WriteTagAndValue(output, MaxParallelWorkersPerGather);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(Timezone);
      }
      if (effectiveIoConcurrency_ != null) {
        _single_effectiveIoConcurrency_codec.WriteTagAndValue(output, EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        _single_effectiveCacheSize_codec.WriteTagAndValue(output, EffectiveCacheSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (recoveryMinApplyDelay_ != null) {
        size += _single_recoveryMinApplyDelay_codec.CalculateSizeWithTag(RecoveryMinApplyDelay);
      }
      if (sharedBuffers_ != null) {
        size += _single_sharedBuffers_codec.CalculateSizeWithTag(SharedBuffers);
      }
      if (tempBuffers_ != null) {
        size += _single_tempBuffers_codec.CalculateSizeWithTag(TempBuffers);
      }
      if (workMem_ != null) {
        size += _single_workMem_codec.CalculateSizeWithTag(WorkMem);
      }
      if (tempFileLimit_ != null) {
        size += _single_tempFileLimit_codec.CalculateSizeWithTag(TempFileLimit);
      }
      if (backendFlushAfter_ != null) {
        size += _single_backendFlushAfter_codec.CalculateSizeWithTag(BackendFlushAfter);
      }
      if (oldSnapshotThreshold_ != null) {
        size += _single_oldSnapshotThreshold_codec.CalculateSizeWithTag(OldSnapshotThreshold);
      }
      if (maxStandbyStreamingDelay_ != null) {
        size += _single_maxStandbyStreamingDelay_codec.CalculateSizeWithTag(MaxStandbyStreamingDelay);
      }
      if (ConstraintExclusion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConstraintExclusion);
      }
      if (cursorTupleFraction_ != null) {
        size += _single_cursorTupleFraction_codec.CalculateSizeWithTag(CursorTupleFraction);
      }
      if (fromCollapseLimit_ != null) {
        size += _single_fromCollapseLimit_codec.CalculateSizeWithTag(FromCollapseLimit);
      }
      if (joinCollapseLimit_ != null) {
        size += _single_joinCollapseLimit_codec.CalculateSizeWithTag(JoinCollapseLimit);
      }
      if (ForceParallelMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ForceParallelMode);
      }
      if (ClientMinMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientMinMessages);
      }
      if (LogMinMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinMessages);
      }
      if (LogMinErrorStatement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogMinErrorStatement);
      }
      if (logMinDurationStatement_ != null) {
        size += _single_logMinDurationStatement_codec.CalculateSizeWithTag(LogMinDurationStatement);
      }
      if (logCheckpoints_ != null) {
        size += _single_logCheckpoints_codec.CalculateSizeWithTag(LogCheckpoints);
      }
      if (logConnections_ != null) {
        size += _single_logConnections_codec.CalculateSizeWithTag(LogConnections);
      }
      if (logDisconnections_ != null) {
        size += _single_logDisconnections_codec.CalculateSizeWithTag(LogDisconnections);
      }
      if (logDuration_ != null) {
        size += _single_logDuration_codec.CalculateSizeWithTag(LogDuration);
      }
      if (LogErrorVerbosity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogErrorVerbosity);
      }
      if (logLockWaits_ != null) {
        size += _single_logLockWaits_codec.CalculateSizeWithTag(LogLockWaits);
      }
      if (LogStatement != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) LogStatement);
      }
      if (logTempFiles_ != null) {
        size += _single_logTempFiles_codec.CalculateSizeWithTag(LogTempFiles);
      }
      if (SearchPath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SearchPath);
      }
      if (rowSecurity_ != null) {
        size += _single_rowSecurity_codec.CalculateSizeWithTag(RowSecurity);
      }
      if (DefaultTransactionIsolation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultTransactionIsolation);
      }
      if (statementTimeout_ != null) {
        size += _single_statementTimeout_codec.CalculateSizeWithTag(StatementTimeout);
      }
      if (lockTimeout_ != null) {
        size += _single_lockTimeout_codec.CalculateSizeWithTag(LockTimeout);
      }
      if (idleInTransactionSessionTimeout_ != null) {
        size += _single_idleInTransactionSessionTimeout_codec.CalculateSizeWithTag(IdleInTransactionSessionTimeout);
      }
      if (ByteaOutput != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ByteaOutput);
      }
      if (Xmlbinary != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmlbinary);
      }
      if (Xmloption != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Xmloption);
      }
      if (ginPendingListLimit_ != null) {
        size += _single_ginPendingListLimit_codec.CalculateSizeWithTag(GinPendingListLimit);
      }
      if (deadlockTimeout_ != null) {
        size += _single_deadlockTimeout_codec.CalculateSizeWithTag(DeadlockTimeout);
      }
      if (maxLocksPerTransaction_ != null) {
        size += _single_maxLocksPerTransaction_codec.CalculateSizeWithTag(MaxLocksPerTransaction);
      }
      if (maxPredLocksPerTransaction_ != null) {
        size += _single_maxPredLocksPerTransaction_codec.CalculateSizeWithTag(MaxPredLocksPerTransaction);
      }
      if (arrayNulls_ != null) {
        size += _single_arrayNulls_codec.CalculateSizeWithTag(ArrayNulls);
      }
      if (BackslashQuote != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BackslashQuote);
      }
      if (defaultWithOids_ != null) {
        size += _single_defaultWithOids_codec.CalculateSizeWithTag(DefaultWithOids);
      }
      if (escapeStringWarning_ != null) {
        size += _single_escapeStringWarning_codec.CalculateSizeWithTag(EscapeStringWarning);
      }
      if (loCompatPrivileges_ != null) {
        size += _single_loCompatPrivileges_codec.CalculateSizeWithTag(LoCompatPrivileges);
      }
      if (operatorPrecedenceWarning_ != null) {
        size += _single_operatorPrecedenceWarning_codec.CalculateSizeWithTag(OperatorPrecedenceWarning);
      }
      if (quoteAllIdentifiers_ != null) {
        size += _single_quoteAllIdentifiers_codec.CalculateSizeWithTag(QuoteAllIdentifiers);
      }
      if (standardConformingStrings_ != null) {
        size += _single_standardConformingStrings_codec.CalculateSizeWithTag(StandardConformingStrings);
      }
      if (synchronizeSeqscans_ != null) {
        size += _single_synchronizeSeqscans_codec.CalculateSizeWithTag(SynchronizeSeqscans);
      }
      if (transformNullEquals_ != null) {
        size += _single_transformNullEquals_codec.CalculateSizeWithTag(TransformNullEquals);
      }
      if (exitOnError_ != null) {
        size += _single_exitOnError_codec.CalculateSizeWithTag(ExitOnError);
      }
      if (seqPageCost_ != null) {
        size += _single_seqPageCost_codec.CalculateSizeWithTag(SeqPageCost);
      }
      if (randomPageCost_ != null) {
        size += _single_randomPageCost_codec.CalculateSizeWithTag(RandomPageCost);
      }
      if (enableBitmapscan_ != null) {
        size += _single_enableBitmapscan_codec.CalculateSizeWithTag(EnableBitmapscan);
      }
      if (enableHashagg_ != null) {
        size += _single_enableHashagg_codec.CalculateSizeWithTag(EnableHashagg);
      }
      if (enableHashjoin_ != null) {
        size += _single_enableHashjoin_codec.CalculateSizeWithTag(EnableHashjoin);
      }
      if (enableIndexscan_ != null) {
        size += _single_enableIndexscan_codec.CalculateSizeWithTag(EnableIndexscan);
      }
      if (enableIndexonlyscan_ != null) {
        size += _single_enableIndexonlyscan_codec.CalculateSizeWithTag(EnableIndexonlyscan);
      }
      if (enableMaterial_ != null) {
        size += _single_enableMaterial_codec.CalculateSizeWithTag(EnableMaterial);
      }
      if (enableMergejoin_ != null) {
        size += _single_enableMergejoin_codec.CalculateSizeWithTag(EnableMergejoin);
      }
      if (enableNestloop_ != null) {
        size += _single_enableNestloop_codec.CalculateSizeWithTag(EnableNestloop);
      }
      if (enableSeqscan_ != null) {
        size += _single_enableSeqscan_codec.CalculateSizeWithTag(EnableSeqscan);
      }
      if (enableSort_ != null) {
        size += _single_enableSort_codec.CalculateSizeWithTag(EnableSort);
      }
      if (enableTidscan_ != null) {
        size += _single_enableTidscan_codec.CalculateSizeWithTag(EnableTidscan);
      }
      if (maxParallelWorkers_ != null) {
        size += _single_maxParallelWorkers_codec.CalculateSizeWithTag(MaxParallelWorkers);
      }
      if (maxParallelWorkersPerGather_ != null) {
        size += _single_maxParallelWorkersPerGather_codec.CalculateSizeWithTag(MaxParallelWorkersPerGather);
      }
      if (Timezone.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (effectiveIoConcurrency_ != null) {
        size += _single_effectiveIoConcurrency_codec.CalculateSizeWithTag(EffectiveIoConcurrency);
      }
      if (effectiveCacheSize_ != null) {
        size += _single_effectiveCacheSize_codec.CalculateSizeWithTag(EffectiveCacheSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PostgresqlHostConfig12 other) {
      if (other == null) {
        return;
      }
      if (other.recoveryMinApplyDelay_ != null) {
        if (recoveryMinApplyDelay_ == null || other.RecoveryMinApplyDelay != 0L) {
          RecoveryMinApplyDelay = other.RecoveryMinApplyDelay;
        }
      }
      if (other.sharedBuffers_ != null) {
        if (sharedBuffers_ == null || other.SharedBuffers != 0L) {
          SharedBuffers = other.SharedBuffers;
        }
      }
      if (other.tempBuffers_ != null) {
        if (tempBuffers_ == null || other.TempBuffers != 0L) {
          TempBuffers = other.TempBuffers;
        }
      }
      if (other.workMem_ != null) {
        if (workMem_ == null || other.WorkMem != 0L) {
          WorkMem = other.WorkMem;
        }
      }
      if (other.tempFileLimit_ != null) {
        if (tempFileLimit_ == null || other.TempFileLimit != 0L) {
          TempFileLimit = other.TempFileLimit;
        }
      }
      if (other.backendFlushAfter_ != null) {
        if (backendFlushAfter_ == null || other.BackendFlushAfter != 0L) {
          BackendFlushAfter = other.BackendFlushAfter;
        }
      }
      if (other.oldSnapshotThreshold_ != null) {
        if (oldSnapshotThreshold_ == null || other.OldSnapshotThreshold != 0L) {
          OldSnapshotThreshold = other.OldSnapshotThreshold;
        }
      }
      if (other.maxStandbyStreamingDelay_ != null) {
        if (maxStandbyStreamingDelay_ == null || other.MaxStandbyStreamingDelay != 0L) {
          MaxStandbyStreamingDelay = other.MaxStandbyStreamingDelay;
        }
      }
      if (other.ConstraintExclusion != 0) {
        ConstraintExclusion = other.ConstraintExclusion;
      }
      if (other.cursorTupleFraction_ != null) {
        if (cursorTupleFraction_ == null || other.CursorTupleFraction != 0D) {
          CursorTupleFraction = other.CursorTupleFraction;
        }
      }
      if (other.fromCollapseLimit_ != null) {
        if (fromCollapseLimit_ == null || other.FromCollapseLimit != 0L) {
          FromCollapseLimit = other.FromCollapseLimit;
        }
      }
      if (other.joinCollapseLimit_ != null) {
        if (joinCollapseLimit_ == null || other.JoinCollapseLimit != 0L) {
          JoinCollapseLimit = other.JoinCollapseLimit;
        }
      }
      if (other.ForceParallelMode != 0) {
        ForceParallelMode = other.ForceParallelMode;
      }
      if (other.ClientMinMessages != 0) {
        ClientMinMessages = other.ClientMinMessages;
      }
      if (other.LogMinMessages != 0) {
        LogMinMessages = other.LogMinMessages;
      }
      if (other.LogMinErrorStatement != 0) {
        LogMinErrorStatement = other.LogMinErrorStatement;
      }
      if (other.logMinDurationStatement_ != null) {
        if (logMinDurationStatement_ == null || other.LogMinDurationStatement != 0L) {
          LogMinDurationStatement = other.LogMinDurationStatement;
        }
      }
      if (other.logCheckpoints_ != null) {
        if (logCheckpoints_ == null || other.LogCheckpoints != false) {
          LogCheckpoints = other.LogCheckpoints;
        }
      }
      if (other.logConnections_ != null) {
        if (logConnections_ == null || other.LogConnections != false) {
          LogConnections = other.LogConnections;
        }
      }
      if (other.logDisconnections_ != null) {
        if (logDisconnections_ == null || other.LogDisconnections != false) {
          LogDisconnections = other.LogDisconnections;
        }
      }
      if (other.logDuration_ != null) {
        if (logDuration_ == null || other.LogDuration != false) {
          LogDuration = other.LogDuration;
        }
      }
      if (other.LogErrorVerbosity != 0) {
        LogErrorVerbosity = other.LogErrorVerbosity;
      }
      if (other.logLockWaits_ != null) {
        if (logLockWaits_ == null || other.LogLockWaits != false) {
          LogLockWaits = other.LogLockWaits;
        }
      }
      if (other.LogStatement != 0) {
        LogStatement = other.LogStatement;
      }
      if (other.logTempFiles_ != null) {
        if (logTempFiles_ == null || other.LogTempFiles != 0L) {
          LogTempFiles = other.LogTempFiles;
        }
      }
      if (other.SearchPath.Length != 0) {
        SearchPath = other.SearchPath;
      }
      if (other.rowSecurity_ != null) {
        if (rowSecurity_ == null || other.RowSecurity != false) {
          RowSecurity = other.RowSecurity;
        }
      }
      if (other.DefaultTransactionIsolation != 0) {
        DefaultTransactionIsolation = other.DefaultTransactionIsolation;
      }
      if (other.statementTimeout_ != null) {
        if (statementTimeout_ == null || other.StatementTimeout != 0L) {
          StatementTimeout = other.StatementTimeout;
        }
      }
      if (other.lockTimeout_ != null) {
        if (lockTimeout_ == null || other.LockTimeout != 0L) {
          LockTimeout = other.LockTimeout;
        }
      }
      if (other.idleInTransactionSessionTimeout_ != null) {
        if (idleInTransactionSessionTimeout_ == null || other.IdleInTransactionSessionTimeout != 0L) {
          IdleInTransactionSessionTimeout = other.IdleInTransactionSessionTimeout;
        }
      }
      if (other.ByteaOutput != 0) {
        ByteaOutput = other.ByteaOutput;
      }
      if (other.Xmlbinary != 0) {
        Xmlbinary = other.Xmlbinary;
      }
      if (other.Xmloption != 0) {
        Xmloption = other.Xmloption;
      }
      if (other.ginPendingListLimit_ != null) {
        if (ginPendingListLimit_ == null || other.GinPendingListLimit != 0L) {
          GinPendingListLimit = other.GinPendingListLimit;
        }
      }
      if (other.deadlockTimeout_ != null) {
        if (deadlockTimeout_ == null || other.DeadlockTimeout != 0L) {
          DeadlockTimeout = other.DeadlockTimeout;
        }
      }
      if (other.maxLocksPerTransaction_ != null) {
        if (maxLocksPerTransaction_ == null || other.MaxLocksPerTransaction != 0L) {
          MaxLocksPerTransaction = other.MaxLocksPerTransaction;
        }
      }
      if (other.maxPredLocksPerTransaction_ != null) {
        if (maxPredLocksPerTransaction_ == null || other.MaxPredLocksPerTransaction != 0L) {
          MaxPredLocksPerTransaction = other.MaxPredLocksPerTransaction;
        }
      }
      if (other.arrayNulls_ != null) {
        if (arrayNulls_ == null || other.ArrayNulls != false) {
          ArrayNulls = other.ArrayNulls;
        }
      }
      if (other.BackslashQuote != 0) {
        BackslashQuote = other.BackslashQuote;
      }
      if (other.defaultWithOids_ != null) {
        if (defaultWithOids_ == null || other.DefaultWithOids != false) {
          DefaultWithOids = other.DefaultWithOids;
        }
      }
      if (other.escapeStringWarning_ != null) {
        if (escapeStringWarning_ == null || other.EscapeStringWarning != false) {
          EscapeStringWarning = other.EscapeStringWarning;
        }
      }
      if (other.loCompatPrivileges_ != null) {
        if (loCompatPrivileges_ == null || other.LoCompatPrivileges != false) {
          LoCompatPrivileges = other.LoCompatPrivileges;
        }
      }
      if (other.operatorPrecedenceWarning_ != null) {
        if (operatorPrecedenceWarning_ == null || other.OperatorPrecedenceWarning != false) {
          OperatorPrecedenceWarning = other.OperatorPrecedenceWarning;
        }
      }
      if (other.quoteAllIdentifiers_ != null) {
        if (quoteAllIdentifiers_ == null || other.QuoteAllIdentifiers != false) {
          QuoteAllIdentifiers = other.QuoteAllIdentifiers;
        }
      }
      if (other.standardConformingStrings_ != null) {
        if (standardConformingStrings_ == null || other.StandardConformingStrings != false) {
          StandardConformingStrings = other.StandardConformingStrings;
        }
      }
      if (other.synchronizeSeqscans_ != null) {
        if (synchronizeSeqscans_ == null || other.SynchronizeSeqscans != false) {
          SynchronizeSeqscans = other.SynchronizeSeqscans;
        }
      }
      if (other.transformNullEquals_ != null) {
        if (transformNullEquals_ == null || other.TransformNullEquals != false) {
          TransformNullEquals = other.TransformNullEquals;
        }
      }
      if (other.exitOnError_ != null) {
        if (exitOnError_ == null || other.ExitOnError != false) {
          ExitOnError = other.ExitOnError;
        }
      }
      if (other.seqPageCost_ != null) {
        if (seqPageCost_ == null || other.SeqPageCost != 0D) {
          SeqPageCost = other.SeqPageCost;
        }
      }
      if (other.randomPageCost_ != null) {
        if (randomPageCost_ == null || other.RandomPageCost != 0D) {
          RandomPageCost = other.RandomPageCost;
        }
      }
      if (other.enableBitmapscan_ != null) {
        if (enableBitmapscan_ == null || other.EnableBitmapscan != false) {
          EnableBitmapscan = other.EnableBitmapscan;
        }
      }
      if (other.enableHashagg_ != null) {
        if (enableHashagg_ == null || other.EnableHashagg != false) {
          EnableHashagg = other.EnableHashagg;
        }
      }
      if (other.enableHashjoin_ != null) {
        if (enableHashjoin_ == null || other.EnableHashjoin != false) {
          EnableHashjoin = other.EnableHashjoin;
        }
      }
      if (other.enableIndexscan_ != null) {
        if (enableIndexscan_ == null || other.EnableIndexscan != false) {
          EnableIndexscan = other.EnableIndexscan;
        }
      }
      if (other.enableIndexonlyscan_ != null) {
        if (enableIndexonlyscan_ == null || other.EnableIndexonlyscan != false) {
          EnableIndexonlyscan = other.EnableIndexonlyscan;
        }
      }
      if (other.enableMaterial_ != null) {
        if (enableMaterial_ == null || other.EnableMaterial != false) {
          EnableMaterial = other.EnableMaterial;
        }
      }
      if (other.enableMergejoin_ != null) {
        if (enableMergejoin_ == null || other.EnableMergejoin != false) {
          EnableMergejoin = other.EnableMergejoin;
        }
      }
      if (other.enableNestloop_ != null) {
        if (enableNestloop_ == null || other.EnableNestloop != false) {
          EnableNestloop = other.EnableNestloop;
        }
      }
      if (other.enableSeqscan_ != null) {
        if (enableSeqscan_ == null || other.EnableSeqscan != false) {
          EnableSeqscan = other.EnableSeqscan;
        }
      }
      if (other.enableSort_ != null) {
        if (enableSort_ == null || other.EnableSort != false) {
          EnableSort = other.EnableSort;
        }
      }
      if (other.enableTidscan_ != null) {
        if (enableTidscan_ == null || other.EnableTidscan != false) {
          EnableTidscan = other.EnableTidscan;
        }
      }
      if (other.maxParallelWorkers_ != null) {
        if (maxParallelWorkers_ == null || other.MaxParallelWorkers != 0L) {
          MaxParallelWorkers = other.MaxParallelWorkers;
        }
      }
      if (other.maxParallelWorkersPerGather_ != null) {
        if (maxParallelWorkersPerGather_ == null || other.MaxParallelWorkersPerGather != 0L) {
          MaxParallelWorkersPerGather = other.MaxParallelWorkersPerGather;
        }
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.effectiveIoConcurrency_ != null) {
        if (effectiveIoConcurrency_ == null || other.EffectiveIoConcurrency != 0L) {
          EffectiveIoConcurrency = other.EffectiveIoConcurrency;
        }
      }
      if (other.effectiveCacheSize_ != null) {
        if (effectiveCacheSize_ == null || other.EffectiveCacheSize != 0L) {
          EffectiveCacheSize = other.EffectiveCacheSize;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_recoveryMinApplyDelay_codec.Read(input);
            if (recoveryMinApplyDelay_ == null || value != 0L) {
              RecoveryMinApplyDelay = value;
            }
            break;
          }
          case 18: {
            long? value = _single_sharedBuffers_codec.Read(input);
            if (sharedBuffers_ == null || value != 0L) {
              SharedBuffers = value;
            }
            break;
          }
          case 26: {
            long? value = _single_tempBuffers_codec.Read(input);
            if (tempBuffers_ == null || value != 0L) {
              TempBuffers = value;
            }
            break;
          }
          case 34: {
            long? value = _single_workMem_codec.Read(input);
            if (workMem_ == null || value != 0L) {
              WorkMem = value;
            }
            break;
          }
          case 42: {
            long? value = _single_tempFileLimit_codec.Read(input);
            if (tempFileLimit_ == null || value != 0L) {
              TempFileLimit = value;
            }
            break;
          }
          case 50: {
            long? value = _single_backendFlushAfter_codec.Read(input);
            if (backendFlushAfter_ == null || value != 0L) {
              BackendFlushAfter = value;
            }
            break;
          }
          case 58: {
            long? value = _single_oldSnapshotThreshold_codec.Read(input);
            if (oldSnapshotThreshold_ == null || value != 0L) {
              OldSnapshotThreshold = value;
            }
            break;
          }
          case 66: {
            long? value = _single_maxStandbyStreamingDelay_codec.Read(input);
            if (maxStandbyStreamingDelay_ == null || value != 0L) {
              MaxStandbyStreamingDelay = value;
            }
            break;
          }
          case 72: {
            ConstraintExclusion = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ConstraintExclusion) input.ReadEnum();
            break;
          }
          case 82: {
            double? value = _single_cursorTupleFraction_codec.Read(input);
            if (cursorTupleFraction_ == null || value != 0D) {
              CursorTupleFraction = value;
            }
            break;
          }
          case 90: {
            long? value = _single_fromCollapseLimit_codec.Read(input);
            if (fromCollapseLimit_ == null || value != 0L) {
              FromCollapseLimit = value;
            }
            break;
          }
          case 98: {
            long? value = _single_joinCollapseLimit_codec.Read(input);
            if (joinCollapseLimit_ == null || value != 0L) {
              JoinCollapseLimit = value;
            }
            break;
          }
          case 104: {
            ForceParallelMode = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ForceParallelMode) input.ReadEnum();
            break;
          }
          case 112: {
            ClientMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 120: {
            LogMinMessages = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 128: {
            LogMinErrorStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 138: {
            long? value = _single_logMinDurationStatement_codec.Read(input);
            if (logMinDurationStatement_ == null || value != 0L) {
              LogMinDurationStatement = value;
            }
            break;
          }
          case 146: {
            bool? value = _single_logCheckpoints_codec.Read(input);
            if (logCheckpoints_ == null || value != false) {
              LogCheckpoints = value;
            }
            break;
          }
          case 154: {
            bool? value = _single_logConnections_codec.Read(input);
            if (logConnections_ == null || value != false) {
              LogConnections = value;
            }
            break;
          }
          case 162: {
            bool? value = _single_logDisconnections_codec.Read(input);
            if (logDisconnections_ == null || value != false) {
              LogDisconnections = value;
            }
            break;
          }
          case 170: {
            bool? value = _single_logDuration_codec.Read(input);
            if (logDuration_ == null || value != false) {
              LogDuration = value;
            }
            break;
          }
          case 176: {
            LogErrorVerbosity = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogErrorVerbosity) input.ReadEnum();
            break;
          }
          case 186: {
            bool? value = _single_logLockWaits_codec.Read(input);
            if (logLockWaits_ == null || value != false) {
              LogLockWaits = value;
            }
            break;
          }
          case 192: {
            LogStatement = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.LogStatement) input.ReadEnum();
            break;
          }
          case 202: {
            long? value = _single_logTempFiles_codec.Read(input);
            if (logTempFiles_ == null || value != 0L) {
              LogTempFiles = value;
            }
            break;
          }
          case 210: {
            SearchPath = input.ReadString();
            break;
          }
          case 218: {
            bool? value = _single_rowSecurity_codec.Read(input);
            if (rowSecurity_ == null || value != false) {
              RowSecurity = value;
            }
            break;
          }
          case 224: {
            DefaultTransactionIsolation = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.TransactionIsolation) input.ReadEnum();
            break;
          }
          case 234: {
            long? value = _single_statementTimeout_codec.Read(input);
            if (statementTimeout_ == null || value != 0L) {
              StatementTimeout = value;
            }
            break;
          }
          case 242: {
            long? value = _single_lockTimeout_codec.Read(input);
            if (lockTimeout_ == null || value != 0L) {
              LockTimeout = value;
            }
            break;
          }
          case 250: {
            long? value = _single_idleInTransactionSessionTimeout_codec.Read(input);
            if (idleInTransactionSessionTimeout_ == null || value != 0L) {
              IdleInTransactionSessionTimeout = value;
            }
            break;
          }
          case 256: {
            ByteaOutput = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.ByteaOutput) input.ReadEnum();
            break;
          }
          case 264: {
            Xmlbinary = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlBinary) input.ReadEnum();
            break;
          }
          case 272: {
            Xmloption = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.XmlOption) input.ReadEnum();
            break;
          }
          case 282: {
            long? value = _single_ginPendingListLimit_codec.Read(input);
            if (ginPendingListLimit_ == null || value != 0L) {
              GinPendingListLimit = value;
            }
            break;
          }
          case 290: {
            long? value = _single_deadlockTimeout_codec.Read(input);
            if (deadlockTimeout_ == null || value != 0L) {
              DeadlockTimeout = value;
            }
            break;
          }
          case 298: {
            long? value = _single_maxLocksPerTransaction_codec.Read(input);
            if (maxLocksPerTransaction_ == null || value != 0L) {
              MaxLocksPerTransaction = value;
            }
            break;
          }
          case 306: {
            long? value = _single_maxPredLocksPerTransaction_codec.Read(input);
            if (maxPredLocksPerTransaction_ == null || value != 0L) {
              MaxPredLocksPerTransaction = value;
            }
            break;
          }
          case 314: {
            bool? value = _single_arrayNulls_codec.Read(input);
            if (arrayNulls_ == null || value != false) {
              ArrayNulls = value;
            }
            break;
          }
          case 320: {
            BackslashQuote = (global::Yandex.Cloud.Mdb.Postgresql.V1.Config.PostgresqlHostConfig12.Types.BackslashQuote) input.ReadEnum();
            break;
          }
          case 330: {
            bool? value = _single_defaultWithOids_codec.Read(input);
            if (defaultWithOids_ == null || value != false) {
              DefaultWithOids = value;
            }
            break;
          }
          case 338: {
            bool? value = _single_escapeStringWarning_codec.Read(input);
            if (escapeStringWarning_ == null || value != false) {
              EscapeStringWarning = value;
            }
            break;
          }
          case 346: {
            bool? value = _single_loCompatPrivileges_codec.Read(input);
            if (loCompatPrivileges_ == null || value != false) {
              LoCompatPrivileges = value;
            }
            break;
          }
          case 354: {
            bool? value = _single_operatorPrecedenceWarning_codec.Read(input);
            if (operatorPrecedenceWarning_ == null || value != false) {
              OperatorPrecedenceWarning = value;
            }
            break;
          }
          case 362: {
            bool? value = _single_quoteAllIdentifiers_codec.Read(input);
            if (quoteAllIdentifiers_ == null || value != false) {
              QuoteAllIdentifiers = value;
            }
            break;
          }
          case 370: {
            bool? value = _single_standardConformingStrings_codec.Read(input);
            if (standardConformingStrings_ == null || value != false) {
              StandardConformingStrings = value;
            }
            break;
          }
          case 378: {
            bool? value = _single_synchronizeSeqscans_codec.Read(input);
            if (synchronizeSeqscans_ == null || value != false) {
              SynchronizeSeqscans = value;
            }
            break;
          }
          case 386: {
            bool? value = _single_transformNullEquals_codec.Read(input);
            if (transformNullEquals_ == null || value != false) {
              TransformNullEquals = value;
            }
            break;
          }
          case 394: {
            bool? value = _single_exitOnError_codec.Read(input);
            if (exitOnError_ == null || value != false) {
              ExitOnError = value;
            }
            break;
          }
          case 402: {
            double? value = _single_seqPageCost_codec.Read(input);
            if (seqPageCost_ == null || value != 0D) {
              SeqPageCost = value;
            }
            break;
          }
          case 410: {
            double? value = _single_randomPageCost_codec.Read(input);
            if (randomPageCost_ == null || value != 0D) {
              RandomPageCost = value;
            }
            break;
          }
          case 434: {
            bool? value = _single_enableBitmapscan_codec.Read(input);
            if (enableBitmapscan_ == null || value != false) {
              EnableBitmapscan = value;
            }
            break;
          }
          case 442: {
            bool? value = _single_enableHashagg_codec.Read(input);
            if (enableHashagg_ == null || value != false) {
              EnableHashagg = value;
            }
            break;
          }
          case 450: {
            bool? value = _single_enableHashjoin_codec.Read(input);
            if (enableHashjoin_ == null || value != false) {
              EnableHashjoin = value;
            }
            break;
          }
          case 458: {
            bool? value = _single_enableIndexscan_codec.Read(input);
            if (enableIndexscan_ == null || value != false) {
              EnableIndexscan = value;
            }
            break;
          }
          case 466: {
            bool? value = _single_enableIndexonlyscan_codec.Read(input);
            if (enableIndexonlyscan_ == null || value != false) {
              EnableIndexonlyscan = value;
            }
            break;
          }
          case 474: {
            bool? value = _single_enableMaterial_codec.Read(input);
            if (enableMaterial_ == null || value != false) {
              EnableMaterial = value;
            }
            break;
          }
          case 482: {
            bool? value = _single_enableMergejoin_codec.Read(input);
            if (enableMergejoin_ == null || value != false) {
              EnableMergejoin = value;
            }
            break;
          }
          case 490: {
            bool? value = _single_enableNestloop_codec.Read(input);
            if (enableNestloop_ == null || value != false) {
              EnableNestloop = value;
            }
            break;
          }
          case 498: {
            bool? value = _single_enableSeqscan_codec.Read(input);
            if (enableSeqscan_ == null || value != false) {
              EnableSeqscan = value;
            }
            break;
          }
          case 506: {
            bool? value = _single_enableSort_codec.Read(input);
            if (enableSort_ == null || value != false) {
              EnableSort = value;
            }
            break;
          }
          case 514: {
            bool? value = _single_enableTidscan_codec.Read(input);
            if (enableTidscan_ == null || value != false) {
              EnableTidscan = value;
            }
            break;
          }
          case 522: {
            long? value = _single_maxParallelWorkers_codec.Read(input);
            if (maxParallelWorkers_ == null || value != 0L) {
              MaxParallelWorkers = value;
            }
            break;
          }
          case 530: {
            long? value = _single_maxParallelWorkersPerGather_codec.Read(input);
            if (maxParallelWorkersPerGather_ == null || value != 0L) {
              MaxParallelWorkersPerGather = value;
            }
            break;
          }
          case 538: {
            Timezone = input.ReadString();
            break;
          }
          case 546: {
            long? value = _single_effectiveIoConcurrency_codec.Read(input);
            if (effectiveIoConcurrency_ == null || value != 0L) {
              EffectiveIoConcurrency = value;
            }
            break;
          }
          case 554: {
            long? value = _single_effectiveCacheSize_codec.Read(input);
            if (effectiveCacheSize_ == null || value != 0L) {
              EffectiveCacheSize = value;
            }
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PostgresqlHostConfig12 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum ConstraintExclusion {
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_ON")] On = 1,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_OFF")] Off = 2,
        [pbr::OriginalName("CONSTRAINT_EXCLUSION_PARTITION")] Partition = 3,
      }

      internal enum ForceParallelMode {
        [pbr::OriginalName("FORCE_PARALLEL_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_ON")] On = 1,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_OFF")] Off = 2,
        [pbr::OriginalName("FORCE_PARALLEL_MODE_REGRESS")] Regress = 3,
      }

      internal enum LogLevel {
        [pbr::OriginalName("LOG_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_LEVEL_DEBUG5")] Debug5 = 1,
        [pbr::OriginalName("LOG_LEVEL_DEBUG4")] Debug4 = 2,
        [pbr::OriginalName("LOG_LEVEL_DEBUG3")] Debug3 = 3,
        [pbr::OriginalName("LOG_LEVEL_DEBUG2")] Debug2 = 4,
        [pbr::OriginalName("LOG_LEVEL_DEBUG1")] Debug1 = 5,
        [pbr::OriginalName("LOG_LEVEL_LOG")] Log = 6,
        [pbr::OriginalName("LOG_LEVEL_NOTICE")] Notice = 7,
        [pbr::OriginalName("LOG_LEVEL_WARNING")] Warning = 8,
        [pbr::OriginalName("LOG_LEVEL_ERROR")] Error = 9,
        [pbr::OriginalName("LOG_LEVEL_FATAL")] Fatal = 10,
        [pbr::OriginalName("LOG_LEVEL_PANIC")] Panic = 11,
      }

      internal enum LogErrorVerbosity {
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_TERSE")] Terse = 1,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_DEFAULT")] Default = 2,
        [pbr::OriginalName("LOG_ERROR_VERBOSITY_VERBOSE")] Verbose = 3,
      }

      internal enum LogStatement {
        [pbr::OriginalName("LOG_STATEMENT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("LOG_STATEMENT_NONE")] None = 1,
        [pbr::OriginalName("LOG_STATEMENT_DDL")] Ddl = 2,
        [pbr::OriginalName("LOG_STATEMENT_MOD")] Mod = 3,
        [pbr::OriginalName("LOG_STATEMENT_ALL")] All = 4,
      }

      internal enum TransactionIsolation {
        [pbr::OriginalName("TRANSACTION_ISOLATION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_UNCOMMITTED")] ReadUncommitted = 1,
        [pbr::OriginalName("TRANSACTION_ISOLATION_READ_COMMITTED")] ReadCommitted = 2,
        [pbr::OriginalName("TRANSACTION_ISOLATION_REPEATABLE_READ")] RepeatableRead = 3,
        [pbr::OriginalName("TRANSACTION_ISOLATION_SERIALIZABLE")] Serializable = 4,
      }

      internal enum ByteaOutput {
        [pbr::OriginalName("BYTEA_OUTPUT_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BYTEA_OUTPUT_HEX")] Hex = 1,
        [pbr::OriginalName("BYTEA_OUTPUT_ESCAPED")] Escaped = 2,
      }

      internal enum XmlBinary {
        [pbr::OriginalName("XML_BINARY_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_BINARY_BASE64")] Base64 = 1,
        [pbr::OriginalName("XML_BINARY_HEX")] Hex = 2,
      }

      internal enum XmlOption {
        [pbr::OriginalName("XML_OPTION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("XML_OPTION_DOCUMENT")] Document = 1,
        [pbr::OriginalName("XML_OPTION_CONTENT")] Content = 2,
      }

      internal enum BackslashQuote {
        [pbr::OriginalName("BACKSLASH_QUOTE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("BACKSLASH_QUOTE")] BackslashQuote = 1,
        [pbr::OriginalName("BACKSLASH_QUOTE_ON")] On = 2,
        [pbr::OriginalName("BACKSLASH_QUOTE_OFF")] Off = 3,
        [pbr::OriginalName("BACKSLASH_QUOTE_SAFE_ENCODING")] SafeEncoding = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
