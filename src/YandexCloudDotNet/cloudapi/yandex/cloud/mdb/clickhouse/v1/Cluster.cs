// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/clickhouse/v1/cluster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Clickhouse.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/clickhouse/v1/cluster.proto</summary>
  internal static partial class ClusterReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/clickhouse/v1/cluster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix5YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjEvY2x1c3Rlci5wcm90",
            "bxIeeWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxGh9nb29nbGUvcHJv",
            "dG9idWYvdGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBl",
            "cnMucHJvdG8aG2dvb2dsZS90eXBlL3RpbWVvZmRheS5wcm90bxo2eWFuZGV4",
            "L2Nsb3VkL21kYi9jbGlja2hvdXNlL3YxL2NvbmZpZy9jbGlja2hvdXNlLnBy",
            "b3RvItMGCgdDbHVzdGVyEgoKAmlkGAEgASgJEhEKCWZvbGRlcl9pZBgCIAEo",
            "CRIuCgpjcmVhdGVkX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIMCgRuYW1lGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJEkMKBmxh",
            "YmVscxgGIAMoCzIzLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5D",
            "bHVzdGVyLkxhYmVsc0VudHJ5EkgKC2Vudmlyb25tZW50GAcgASgOMjMueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkNsdXN0ZXIuRW52aXJvbm1l",
            "bnQSPgoKbW9uaXRvcmluZxgIIAMoCzIqLnlhbmRleC5jbG91ZC5tZGIuY2xp",
            "Y2tob3VzZS52MS5Nb25pdG9yaW5nEj0KBmNvbmZpZxgJIAEoCzItLnlhbmRl",
            "eC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5DbHVzdGVyQ29uZmlnEhIKCm5l",
            "dHdvcmtfaWQYCiABKAkSPgoGaGVhbHRoGAsgASgOMi4ueWFuZGV4LmNsb3Vk",
            "Lm1kYi5jbGlja2hvdXNlLnYxLkNsdXN0ZXIuSGVhbHRoEj4KBnN0YXR1cxgM",
            "IAEoDjIuLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5DbHVzdGVy",
            "LlN0YXR1cxotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIkkKC0Vudmlyb25tZW50EhsKF0VOVklST05NRU5UX1VOU1BF",
            "Q0lGSUVEEAASDgoKUFJPRFVDVElPThABEg0KCVBSRVNUQUJMRRACIj8KBkhl",
            "YWx0aBISCg5IRUFMVEhfVU5LTk9XThAAEgkKBUFMSVZFEAESCAoEREVBRBAC",
            "EgwKCERFR1JBREVEEAMieQoGU3RhdHVzEhIKDlNUQVRVU19VTktOT1dOEAAS",
            "DAoIQ1JFQVRJTkcQARILCgdSVU5OSU5HEAISCQoFRVJST1IQAxIMCghVUERB",
            "VElORxAEEgwKCFNUT1BQSU5HEAUSCwoHU1RPUFBFRBAGEgwKCFNUQVJUSU5H",
            "EAciPQoKTW9uaXRvcmluZxIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9u",
            "GAIgASgJEgwKBGxpbmsYAyABKAkiiwQKDUNsdXN0ZXJDb25maWcSDwoHdmVy",
            "c2lvbhgBIAEoCRJMCgpjbGlja2hvdXNlGAIgASgLMjgueWFuZGV4LmNsb3Vk",
            "Lm1kYi5jbGlja2hvdXNlLnYxLkNsdXN0ZXJDb25maWcuQ2xpY2tob3VzZRJK",
            "Cgl6b29rZWVwZXIYAyABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuQ2x1c3RlckNvbmZpZy5ab29rZWVwZXISMwoTYmFja3VwX3dpbmRv",
            "d19zdGFydBgEIAEoCzIWLmdvb2dsZS50eXBlLlRpbWVPZkRheRI2CgZhY2Nl",
            "c3MYBSABKAsyJi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuQWNj",
            "ZXNzGpYBCgpDbGlja2hvdXNlEkoKBmNvbmZpZxgBIAEoCzI6LnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZp",
            "Z1NldBI8CglyZXNvdXJjZXMYAiABKAsyKS55YW5kZXguY2xvdWQubWRiLmNs",
            "aWNraG91c2UudjEuUmVzb3VyY2VzGkkKCVpvb2tlZXBlchI8CglyZXNvdXJj",
            "ZXMYASABKAsyKS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuUmVz",
            "b3VyY2VzImYKBVNoYXJkEgwKBG5hbWUYASABKAkSEgoKY2x1c3Rlcl9pZBgC",
            "IAEoCRI7CgZjb25maWcYAyABKAsyKy55YW5kZXguY2xvdWQubWRiLmNsaWNr",
            "aG91c2UudjEuU2hhcmRDb25maWcinwIKC1NoYXJkQ29uZmlnEkoKCmNsaWNr",
            "aG91c2UYASABKAsyNi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEu",
            "U2hhcmRDb25maWcuQ2xpY2tob3VzZRrDAQoKQ2xpY2tob3VzZRJKCgZjb25m",
            "aWcYASABKAsyOi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuY29u",
            "ZmlnLkNsaWNraG91c2VDb25maWdTZXQSPAoJcmVzb3VyY2VzGAIgASgLMiku",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlJlc291cmNlcxIrCgZ3",
            "ZWlnaHQYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZSLgAwoE",
            "SG9zdBIMCgRuYW1lGAEgASgJEhIKCmNsdXN0ZXJfaWQYAiABKAkSDwoHem9u",
            "ZV9pZBgDIAEoCRI3CgR0eXBlGAQgASgOMikueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLkhvc3QuVHlwZRI8CglyZXNvdXJjZXMYBSABKAsyKS55",
            "YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuUmVzb3VyY2VzEjsKBmhl",
            "YWx0aBgGIAEoDjIrLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5I",
            "b3N0LkhlYWx0aBI5CghzZXJ2aWNlcxgHIAMoCzInLnlhbmRleC5jbG91ZC5t",
            "ZGIuY2xpY2tob3VzZS52MS5TZXJ2aWNlEhEKCXN1Ym5ldF9pZBgIIAEoCRIY",
            "ChBhc3NpZ25fcHVibGljX2lwGAkgASgIEhIKCnNoYXJkX25hbWUYCiABKAki",
            "OwoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDgoKQ0xJQ0tIT1VTRRAB",
            "Eg0KCVpPT0tFRVBFUhACIjgKBkhlYWx0aBILCgdVTktOT1dOEAASCQoFQUxJ",
            "VkUQARIICgRERUFEEAISDAoIREVHUkFERUQQAyLuAQoHU2VydmljZRI6CgR0",
            "eXBlGAEgASgOMiwueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlNl",
            "cnZpY2UuVHlwZRI+CgZoZWFsdGgYAiABKA4yLi55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuU2VydmljZS5IZWFsdGgiOwoEVHlwZRIUChBUWVBF",
            "X1VOU1BFQ0lGSUVEEAASDgoKQ0xJQ0tIT1VTRRABEg0KCVpPT0tFRVBFUhAC",
            "IioKBkhlYWx0aBILCgdVTktOT1dOEAASCQoFQUxJVkUQARIICgRERUFEEAIi",
            "UAoJUmVzb3VyY2VzEhoKEnJlc291cmNlX3ByZXNldF9pZBgBIAEoCRIRCglk",
            "aXNrX3NpemUYAiABKAMSFAoMZGlza190eXBlX2lkGAMgASgJIiwKBkFjY2Vz",
            "cxIRCglkYXRhX2xlbnMYASABKAgSDwoHd2ViX3NxbBgCIAEoCEJzCiJ5YW5k",
            "ZXguY2xvdWQuYXBpLm1kYi5jbGlja2hvdXNlLnYxWk1naXRodWIuY29tL3lh",
            "bmRleC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL2NsaWNr",
            "aG91c2UvdjE7Y2xpY2tob3VzZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster), global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "Environment", "Monitoring", "Config", "NetworkId", "Health", "Status" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Health), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring), global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring.Parser, new[]{ "Name", "Description", "Link" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig), global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Parser, new[]{ "Version", "Clickhouse", "Zookeeper", "BackupWindowStart", "Access" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper), global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper.Parser, new[]{ "Resources" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard), global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard.Parser, new[]{ "Name", "ClusterId", "Config" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig), global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Parser, new[]{ "Clickhouse" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse.Parser, new[]{ "Config", "Resources", "Weight" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Host), global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Parser, new[]{ "Name", "ClusterId", "ZoneId", "Type", "Resources", "Health", "Services", "SubnetId", "AssignPublicIp", "ShardName" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Health) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Service), global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Parser, new[]{ "Type", "Health" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Type), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Health) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources), global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources.Parser, new[]{ "ResourcePresetId", "DiskSize", "DiskTypeId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Access), global::Yandex.Cloud.Mdb.Clickhouse.V1.Access.Parser, new[]{ "DataLens", "WebSql" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A ClickHouse Cluster resource. For more information, see the
  /// [Cluster](/docs/managed-clickhouse/concepts) section in the Developer's Guide.
  /// </summary>
  internal sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      monitoring_ = other.monitoring_.Clone();
      config_ = other.config_ != null ? other.config_.Clone() : null;
      networkId_ = other.networkId_;
      health_ = other.health_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster.
    /// This ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the ClickHouse cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the ClickHouse cluster.
    /// The name is unique within the folder. 1-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the ClickHouse cluster. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 7;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment environment_ = 0;
    /// <summary>
    /// Deployment environment of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "monitoring" field.</summary>
    public const int MonitoringFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring> _repeated_monitoring_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring> monitoring_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring>();
    /// <summary>
    /// Description of monitoring systems relevant to the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Monitoring> Monitoring {
      get { return monitoring_; }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 9;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig config_;
    /// <summary>
    /// Configuration of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 10;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network that the cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 11;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Health health_ = 0;
    /// <summary>
    /// Aggregated cluster health.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Status status_ = 0;
    /// <summary>
    /// Current state of the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if(!monitoring_.Equals(other.monitoring_)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (Health != other.Health) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != 0) hash ^= Environment.GetHashCode();
      hash ^= monitoring_.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Environment);
      }
      monitoring_.WriteTo(output, _repeated_monitoring_codec);
      if (config_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Config);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkId);
      }
      if (Health != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Health);
      }
      if (Status != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      size += monitoring_.CalculateSize(_repeated_monitoring_codec);
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != 0) {
        Environment = other.Environment;
      }
      monitoring_.Add(other.monitoring_);
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Environment = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 66: {
            monitoring_.AddEntriesFrom(input, _repeated_monitoring_codec);
            break;
          }
          case 74: {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 82: {
            NetworkId = input.ReadString();
            break;
          }
          case 88: {
            Health = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Health) input.ReadEnum();
            break;
          }
          case 96: {
            Status = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cluster message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Deployment environment.
      /// </summary>
      internal enum Environment {
        [pbr::OriginalName("ENVIRONMENT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Stable environment with a conservative update policy:
        /// only hotfixes are applied during regular maintenance.
        /// </summary>
        [pbr::OriginalName("PRODUCTION")] Production = 1,
        /// <summary>
        /// Environment with more aggressive update policy: new versions
        /// are rolled out irrespective of backward compatibility.
        /// </summary>
        [pbr::OriginalName("PRESTABLE")] Prestable = 2,
      }

      internal enum Health {
        /// <summary>
        /// State of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is alive and well ([Host.health] for every host in the cluster is ALIVE).
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

      internal enum Status {
        /// <summary>
        /// Cluster state is unknown.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Cluster is running normally.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Cluster encountered a problem and cannot operate.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
        /// <summary>
        /// Cluster is being updated.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 4,
        /// <summary>
        /// Cluster is stopping.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 5,
        /// <summary>
        /// Cluster stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 6,
        /// <summary>
        /// Cluster is starting.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Monitoring system metadata.
  /// </summary>
  internal sealed partial class Monitoring : pb::IMessage<Monitoring> {
    private static readonly pb::MessageParser<Monitoring> _parser = new pb::MessageParser<Monitoring>(() => new Monitoring());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monitoring> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring(Monitoring other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      link_ = other.link_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring Clone() {
      return new Monitoring(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Description of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    /// <summary>
    /// Link to the monitoring system charts for the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monitoring);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monitoring other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Link != other.Link) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monitoring other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClusterConfig : pb::IMessage<ClusterConfig> {
    private static readonly pb::MessageParser<ClusterConfig> _parser = new pb::MessageParser<ClusterConfig>(() => new ClusterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig(ClusterConfig other) : this() {
      version_ = other.version_;
      clickhouse_ = other.clickhouse_ != null ? other.clickhouse_.Clone() : null;
      zookeeper_ = other.zookeeper_ != null ? other.zookeeper_.Clone() : null;
      backupWindowStart_ = other.backupWindowStart_ != null ? other.backupWindowStart_.Clone() : null;
      access_ = other.access_ != null ? other.access_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig Clone() {
      return new ClusterConfig(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// Version of the ClickHouse server software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clickhouse" field.</summary>
    public const int ClickhouseFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse clickhouse_;
    /// <summary>
    /// Configuration and resource allocation for ClickHouse hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse Clickhouse {
      get { return clickhouse_; }
      set {
        clickhouse_ = value;
      }
    }

    /// <summary>Field number for the "zookeeper" field.</summary>
    public const int ZookeeperFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper zookeeper_;
    /// <summary>
    /// Configuration and resource allocation for ZooKeeper hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper Zookeeper {
      get { return zookeeper_; }
      set {
        zookeeper_ = value;
      }
    }

    /// <summary>Field number for the "backup_window_start" field.</summary>
    public const int BackupWindowStartFieldNumber = 4;
    private global::Google.Type.TimeOfDay backupWindowStart_;
    /// <summary>
    /// Time to start the daily backup, in the UTC timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay BackupWindowStart {
      get { return backupWindowStart_; }
      set {
        backupWindowStart_ = value;
      }
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Access access_;
    /// <summary>
    /// Access policy to DB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Access Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Clickhouse, other.Clickhouse)) return false;
      if (!object.Equals(Zookeeper, other.Zookeeper)) return false;
      if (!object.Equals(BackupWindowStart, other.BackupWindowStart)) return false;
      if (!object.Equals(Access, other.Access)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (clickhouse_ != null) hash ^= Clickhouse.GetHashCode();
      if (zookeeper_ != null) hash ^= Zookeeper.GetHashCode();
      if (backupWindowStart_ != null) hash ^= BackupWindowStart.GetHashCode();
      if (access_ != null) hash ^= Access.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (clickhouse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Clickhouse);
      }
      if (zookeeper_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Zookeeper);
      }
      if (backupWindowStart_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackupWindowStart);
      }
      if (access_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Access);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (clickhouse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clickhouse);
      }
      if (zookeeper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zookeeper);
      }
      if (backupWindowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupWindowStart);
      }
      if (access_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterConfig other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.clickhouse_ != null) {
        if (clickhouse_ == null) {
          Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse();
        }
        Clickhouse.MergeFrom(other.Clickhouse);
      }
      if (other.zookeeper_ != null) {
        if (zookeeper_ == null) {
          Zookeeper = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper();
        }
        Zookeeper.MergeFrom(other.Zookeeper);
      }
      if (other.backupWindowStart_ != null) {
        if (backupWindowStart_ == null) {
          BackupWindowStart = new global::Google.Type.TimeOfDay();
        }
        BackupWindowStart.MergeFrom(other.BackupWindowStart);
      }
      if (other.access_ != null) {
        if (access_ == null) {
          Access = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Access();
        }
        Access.MergeFrom(other.Access);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            if (clickhouse_ == null) {
              Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Clickhouse();
            }
            input.ReadMessage(Clickhouse);
            break;
          }
          case 26: {
            if (zookeeper_ == null) {
              Zookeeper = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Types.Zookeeper();
            }
            input.ReadMessage(Zookeeper);
            break;
          }
          case 34: {
            if (backupWindowStart_ == null) {
              BackupWindowStart = new global::Google.Type.TimeOfDay();
            }
            input.ReadMessage(BackupWindowStart);
            break;
          }
          case 42: {
            if (access_ == null) {
              Access = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Access();
            }
            input.ReadMessage(Access);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClusterConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Clickhouse : pb::IMessage<Clickhouse> {
        private static readonly pb::MessageParser<Clickhouse> _parser = new pb::MessageParser<Clickhouse>(() => new Clickhouse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Clickhouse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse(Clickhouse other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse Clone() {
          return new Clickhouse(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet config_;
        /// <summary>
        /// Configuration settings of a ClickHouse server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to ClickHouse hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Clickhouse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Clickhouse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Clickhouse other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Zookeeper : pb::IMessage<Zookeeper> {
        private static readonly pb::MessageParser<Zookeeper> _parser = new pb::MessageParser<Zookeeper>(() => new Zookeeper());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Zookeeper> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper(Zookeeper other) : this() {
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper Clone() {
          return new Zookeeper(this);
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to ZooKeeper hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Zookeeper);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Zookeeper other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resources_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Zookeeper other) {
          if (other == null) {
            return;
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Shard : pb::IMessage<Shard> {
    private static readonly pb::MessageParser<Shard> _parser = new pb::MessageParser<Shard>(() => new Shard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard(Shard other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      config_ = other.config_ != null ? other.config_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard Clone() {
      return new Shard(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the shard belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig config_;
    /// <summary>
    /// Configuration of the shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(Config, other.Config)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (config_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Config);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shard other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig();
        }
        Config.MergeFrom(other.Config);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig();
            }
            input.ReadMessage(Config);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ShardConfig : pb::IMessage<ShardConfig> {
    private static readonly pb::MessageParser<ShardConfig> _parser = new pb::MessageParser<ShardConfig>(() => new ShardConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfig(ShardConfig other) : this() {
      clickhouse_ = other.clickhouse_ != null ? other.clickhouse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfig Clone() {
      return new ShardConfig(this);
    }

    /// <summary>Field number for the "clickhouse" field.</summary>
    public const int ClickhouseFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse clickhouse_;
    /// <summary>
    /// ClickHouse configuration for a shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse Clickhouse {
      get { return clickhouse_; }
      set {
        clickhouse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Clickhouse, other.Clickhouse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clickhouse_ != null) hash ^= Clickhouse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clickhouse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Clickhouse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clickhouse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clickhouse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardConfig other) {
      if (other == null) {
        return;
      }
      if (other.clickhouse_ != null) {
        if (clickhouse_ == null) {
          Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse();
        }
        Clickhouse.MergeFrom(other.Clickhouse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clickhouse_ == null) {
              Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Types.Clickhouse();
            }
            input.ReadMessage(Clickhouse);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ShardConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Clickhouse : pb::IMessage<Clickhouse> {
        private static readonly pb::MessageParser<Clickhouse> _parser = new pb::MessageParser<Clickhouse>(() => new Clickhouse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Clickhouse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse(Clickhouse other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          Weight = other.Weight;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse Clone() {
          return new Clickhouse(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet config_;
        /// <summary>
        /// ClickHouse settings for a shard.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Computational resources for a shard.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private static readonly pb::FieldCodec<long?> _single_weight_codec = pb::FieldCodec.ForStructWrapper<long>(26);
        private long? weight_;
        /// <summary>
        /// Relative weight of a shard considered when writing data to the cluster.
        /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/table_engines/distributed/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Clickhouse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Clickhouse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          if (Weight != other.Weight) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (weight_ != null) hash ^= Weight.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (weight_ != null) {
            _single_weight_codec.WriteTagAndValue(output, Weight);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (weight_ != null) {
            size += _single_weight_codec.CalculateSizeWithTag(Weight);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Clickhouse other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          if (other.weight_ != null) {
            if (weight_ == null || other.Weight != 0L) {
              Weight = other.Weight;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
              case 26: {
                long? value = _single_weight_codec.Read(input);
                if (weight_ == null || value != 0L) {
                  Weight = value;
                }
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Host : pb::IMessage<Host> {
    private static readonly pb::MessageParser<Host> _parser = new pb::MessageParser<Host>(() => new Host());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Host> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host(Host other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      zoneId_ = other.zoneId_;
      type_ = other.type_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      health_ = other.health_;
      services_ = other.services_.Clone();
      subnetId_ = other.subnetId_;
      assignPublicIp_ = other.assignPublicIp_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host Clone() {
      return new Host(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the ClickHouse host. The host name is assigned by MDB at creation time, and cannot be changed.
    /// 1-63 characters long.
    ///
    /// The name is unique across all existing MDB hosts in Yandex.Cloud, as it defines the FQDN of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse host. The ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 3;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the ClickHouse host resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type type_ = 0;
    /// <summary>
    /// Type of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to the ClickHouse host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Health health_ = 0;
    /// <summary>
    /// Status code of the aggregated health of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Service> services_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Service>();
    /// <summary>
    /// Services provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Service> Services {
      get { return services_; }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 8;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the host belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assign_public_ip" field.</summary>
    public const int AssignPublicIpFieldNumber = 9;
    private bool assignPublicIp_;
    /// <summary>
    /// Flag showing public IP assignment status to this host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIp {
      get { return assignPublicIp_; }
      set {
        assignPublicIp_ = value;
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 10;
    private string shardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Host);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Host other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (Health != other.Health) return false;
      if(!services_.Equals(other.services_)) return false;
      if (SubnetId != other.SubnetId) return false;
      if (AssignPublicIp != other.AssignPublicIp) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      hash ^= services_.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (AssignPublicIp != false) hash ^= AssignPublicIp.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ZoneId);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (resources_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Resources);
      }
      if (Health != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Health);
      }
      services_.WriteTo(output, _repeated_services_codec);
      if (SubnetId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SubnetId);
      }
      if (AssignPublicIp != false) {
        output.WriteRawTag(72);
        output.WriteBool(AssignPublicIp);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      size += services_.CalculateSize(_repeated_services_codec);
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (AssignPublicIp != false) {
        size += 1 + 1;
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Host other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      services_.Add(other.services_);
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.AssignPublicIp != false) {
        AssignPublicIp = other.AssignPublicIp;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            ZoneId = input.ReadString();
            break;
          }
          case 32: {
            Type = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type) input.ReadEnum();
            break;
          }
          case 42: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 48: {
            Health = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Health) input.ReadEnum();
            break;
          }
          case 58: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
          case 66: {
            SubnetId = input.ReadString();
            break;
          }
          case 72: {
            AssignPublicIp = input.ReadBool();
            break;
          }
          case 82: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Host message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// ClickHouse host.
        /// </summary>
        [pbr::OriginalName("CLICKHOUSE")] Clickhouse = 1,
        /// <summary>
        /// ZooKeeper host.
        /// </summary>
        [pbr::OriginalName("ZOOKEEPER")] Zookeeper = 2,
      }

      internal enum Health {
        /// <summary>
        /// Health of the host is unknown.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The host is performing all its functions normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The host is inoperable, and cannot perform any of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// The host is degraded, and can perform only some of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

    }
    #endregion

  }

  internal sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      type_ = other.type_;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Type type_ = 0;
    /// <summary>
    /// Type of the service provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Health health_ = 0;
    /// <summary>
    /// Status code of server availability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Health != 0) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Health != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Health != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Health != 0) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            Health = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Service.Types.Health) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The host is a ClickHouse server.
        /// </summary>
        [pbr::OriginalName("CLICKHOUSE")] Clickhouse = 1,
        /// <summary>
        /// The host is a ZooKeeper server.
        /// </summary>
        [pbr::OriginalName("ZOOKEEPER")] Zookeeper = 2,
      }

      internal enum Health {
        /// <summary>
        /// Health of the server is unknown.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The server is working normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The server is dead or unresponsive.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
      }

    }
    #endregion

  }

  internal sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      resourcePresetId_ = other.resourcePresetId_;
      diskSize_ = other.diskSize_;
      diskTypeId_ = other.diskTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 1;
    private string resourcePresetId_ = "";
    /// <summary>
    /// ID of the preset for computational resources available to a host (CPU, memory etc.).
    /// All available presets are listed in the [documentation](/docs/managed-clickhouse/concepts/instance-types)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 2;
    private long diskSize_;
    /// <summary>
    /// Volume of the storage available to a host, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    /// <summary>Field number for the "disk_type_id" field.</summary>
    public const int DiskTypeIdFieldNumber = 3;
    private string diskTypeId_ = "";
    /// <summary>
    /// Type of the storage environment for the host.
    /// Possible values:
    /// * network-hdd — network HDD drive,
    /// * network-ssd — network SSD drive,
    /// * local-ssd — local SSD storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskTypeId {
      get { return diskTypeId_; }
      set {
        diskTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (DiskSize != other.DiskSize) return false;
      if (DiskTypeId != other.DiskTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (DiskTypeId.Length != 0) hash ^= DiskTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSize);
      }
      if (DiskTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DiskTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (DiskTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      if (other.DiskTypeId.Length != 0) {
        DiskTypeId = other.DiskTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 16: {
            DiskSize = input.ReadInt64();
            break;
          }
          case 26: {
            DiskTypeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Access : pb::IMessage<Access> {
    private static readonly pb::MessageParser<Access> _parser = new pb::MessageParser<Access>(() => new Access());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Access> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access(Access other) : this() {
      dataLens_ = other.dataLens_;
      webSql_ = other.webSql_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access Clone() {
      return new Access(this);
    }

    /// <summary>Field number for the "data_lens" field.</summary>
    public const int DataLensFieldNumber = 1;
    private bool dataLens_;
    /// <summary>
    /// Allow access for DataLens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DataLens {
      get { return dataLens_; }
      set {
        dataLens_ = value;
      }
    }

    /// <summary>Field number for the "web_sql" field.</summary>
    public const int WebSqlFieldNumber = 2;
    private bool webSql_;
    /// <summary>
    /// Allow access for Web SQL
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WebSql {
      get { return webSql_; }
      set {
        webSql_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Access);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Access other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataLens != other.DataLens) return false;
      if (WebSql != other.WebSql) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataLens != false) hash ^= DataLens.GetHashCode();
      if (WebSql != false) hash ^= WebSql.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataLens != false) {
        output.WriteRawTag(8);
        output.WriteBool(DataLens);
      }
      if (WebSql != false) {
        output.WriteRawTag(16);
        output.WriteBool(WebSql);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataLens != false) {
        size += 1 + 1;
      }
      if (WebSql != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Access other) {
      if (other == null) {
        return;
      }
      if (other.DataLens != false) {
        DataLens = other.DataLens;
      }
      if (other.WebSql != false) {
        WebSql = other.WebSql;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataLens = input.ReadBool();
            break;
          }
          case 16: {
            WebSql = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
