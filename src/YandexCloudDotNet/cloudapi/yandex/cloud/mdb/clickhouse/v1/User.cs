// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/clickhouse/v1/user.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Clickhouse.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/clickhouse/v1/user.proto</summary>
  internal static partial class UserReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/clickhouse/v1/user.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil5YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjEvdXNlci5wcm90bxIe",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxGh5nb29nbGUvcHJvdG9i",
            "dWYvd3JhcHBlcnMucHJvdG8aHXlhbmRleC9jbG91ZC92YWxpZGF0aW9uLnBy",
            "b3RvIuQBCgRVc2VyEgwKBG5hbWUYASABKAkSEgoKY2x1c3Rlcl9pZBgCIAEo",
            "CRI/CgtwZXJtaXNzaW9ucxgDIAMoCzIqLnlhbmRleC5jbG91ZC5tZGIuY2xp",
            "Y2tob3VzZS52MS5QZXJtaXNzaW9uEj4KCHNldHRpbmdzGAQgASgLMiwueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlVzZXJTZXR0aW5ncxI5CgZx",
            "dW90YXMYBSADKAsyKS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEu",
            "VXNlclF1b3RhIikKClBlcm1pc3Npb24SFQoNZGF0YWJhc2VfbmFtZRgBIAEo",
            "CUoECAIQAyKUAgoIVXNlclNwZWMSKwoEbmFtZRgBIAEoCUId6McxAYrIMQQ8",
            "PTYz8scxDVthLXpBLVowLTlfXSoSHwoIcGFzc3dvcmQYAiABKAlCDejHMQGK",
            "yDEFOC0xMjgSPwoLcGVybWlzc2lvbnMYAyADKAsyKi55YW5kZXguY2xvdWQu",
            "bWRiLmNsaWNraG91c2UudjEuUGVybWlzc2lvbhI+CghzZXR0aW5ncxgEIAEo",
            "CzIsLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Vc2VyU2V0dGlu",
            "Z3MSOQoGcXVvdGFzGAUgAygLMikueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hv",
            "dXNlLnYxLlVzZXJRdW90YSL3OAoMVXNlclNldHRpbmdzEjYKCHJlYWRvbmx5",
            "GAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQMwLTIS",
            "LQoJYWxsb3dfZGRsGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1",
            "ZRI7Cg1pbnNlcnRfcXVvcnVtGAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWVCB/rHMQM+PTASPAoPY29ubmVjdF90aW1lb3V0GCcgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCBvrHMQI+MBI8Cg9yZWNlaXZl",
            "X3RpbWVvdXQYKCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIG",
            "+scxAj4wEjkKDHNlbmRfdGltZW91dBgpIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQgb6xzECPjASRgoVaW5zZXJ0X3F1b3J1bV90aW1lb3V0",
            "GAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCvrHMQY+PTEw",
            "MDASQQodc2VsZWN0X3NlcXVlbnRpYWxfY29uc2lzdGVuY3kYBSABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEloKKW1heF9yZXBsaWNhX2RlbGF5",
            "X2Zvcl9kaXN0cmlidXRlZF9xdWVyaWVzGAYgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWVCCvrHMQY+PTEwMDASVgoyZmFsbGJhY2tfdG9fc3Rh",
            "bGVfcmVwbGljYXNfZm9yX2Rpc3RyaWJ1dGVkX3F1ZXJpZXMYByABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEk8KIXJlcGxpY2F0aW9uX2FsdGVy",
            "X3BhcnRpdGlvbnNfc3luYxgqIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlQgf6xzEDMC0yEmUKGGRpc3RyaWJ1dGVkX3Byb2R1Y3RfbW9kZRgr",
            "IAEoDjJDLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Vc2VyU2V0",
            "dGluZ3MuRGlzdHJpYnV0ZWRQcm9kdWN0TW9kZRJMCihkaXN0cmlidXRlZF9h",
            "Z2dyZWdhdGlvbl9tZW1vcnlfZWZmaWNpZW50GEggASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLkJvb2xWYWx1ZRJBChxkaXN0cmlidXRlZF9kZGxfdGFza190aW1l",
            "b3V0GEkgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSOwoXc2tp",
            "cF91bmF2YWlsYWJsZV9zaGFyZHMYUSABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEisKB2NvbXBpbGUYLCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEkIKFG1pbl9jb3VudF90b19jb21waWxlGC0gASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASNwoTY29tcGlsZV9l",
            "eHByZXNzaW9ucxguIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUS",
            "TQofbWluX2NvdW50X3RvX2NvbXBpbGVfZXhwcmVzc2lvbhgvIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wEjsKDm1heF9ibG9j",
            "a19zaXplGAkgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCBvrH",
            "MQI+MBJIChptaW5faW5zZXJ0X2Jsb2NrX3NpemVfcm93cxgwIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wEkkKG21pbl9pbnNl",
            "cnRfYmxvY2tfc2l6ZV9ieXRlcxgxIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQ2NFZhbHVlQgf6xzEDPj0wEkIKFW1heF9pbnNlcnRfYmxvY2tfc2l6ZRgK",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgb6xzECPjASSAoa",
            "bWluX2J5dGVzX3RvX3VzZV9kaXJlY3RfaW8YMiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZUIH+scxAz49MBI6ChZ1c2VfdW5jb21wcmVzc2Vk",
            "X2NhY2hlGDMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJNCiBt",
            "ZXJnZV90cmVlX21heF9yb3dzX3RvX3VzZV9jYWNoZRg0IAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgb6xzECPjASTgohbWVyZ2VfdHJlZV9t",
            "YXhfYnl0ZXNfdG9fdXNlX2NhY2hlGDUgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWVCBvrHMQI+MBJUCidtZXJnZV90cmVlX21pbl9yb3dzX2Zv",
            "cl9jb25jdXJyZW50X3JlYWQYNiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZUIG+scxAj4wElUKKG1lcmdlX3RyZWVfbWluX2J5dGVzX2Zvcl9j",
            "b25jdXJyZW50X3JlYWQYNyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZUIG+scxAj4wEkcKIm1heF9ieXRlc19iZWZvcmVfZXh0ZXJuYWxfZ3Jv",
            "dXBfYnkYSiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJDCh5t",
            "YXhfYnl0ZXNfYmVmb3JlX2V4dGVybmFsX3NvcnQYSyABKAsyGy5nb29nbGUu",
            "cHJvdG9idWYuSW50NjRWYWx1ZRJBChxncm91cF9ieV90d29fbGV2ZWxfdGhy",
            "ZXNob2xkGEwgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSRwoi",
            "Z3JvdXBfYnlfdHdvX2xldmVsX3RocmVzaG9sZF9ieXRlcxhNIAEoCzIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjYKCHByaW9yaXR5GDggASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASOAoLbWF4X3Ro",
            "cmVhZHMYCCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIG+scx",
            "Aj4wEj4KEG1heF9tZW1vcnlfdXNhZ2UYCyABKAsyGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZUIH+scxAz49MBJHChltYXhfbWVtb3J5X3VzYWdlX2Zv",
            "cl91c2VyGAwgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rH",
            "MQM+PTASOgoVbWF4X25ldHdvcmtfYmFuZHdpZHRoGDkgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSQwoebWF4X25ldHdvcmtfYmFuZHdpZHRo",
            "X2Zvcl91c2VyGDogASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUS",
            "NwoTZm9yY2VfaW5kZXhfYnlfZGF0ZRg7IAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5Cb29sVmFsdWUSNQoRZm9yY2VfcHJpbWFyeV9rZXkYPCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuQm9vbFZhbHVlEj4KEG1heF9yb3dzX3RvX3JlYWQYDSAB",
            "KAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIH+scxAz49MBI/ChFt",
            "YXhfYnl0ZXNfdG9fcmVhZBgOIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlQgf6xzEDPj0wElUKEnJlYWRfb3ZlcmZsb3dfbW9kZRgPIAEoDjI5",
            "LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Vc2VyU2V0dGluZ3Mu",
            "T3ZlcmZsb3dNb2RlEkIKFG1heF9yb3dzX3RvX2dyb3VwX2J5GBAgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASYAoWZ3JvdXBf",
            "Ynlfb3ZlcmZsb3dfbW9kZRgRIAEoDjJALnlhbmRleC5jbG91ZC5tZGIuY2xp",
            "Y2tob3VzZS52MS5Vc2VyU2V0dGluZ3MuR3JvdXBCeU92ZXJmbG93TW9kZRI+",
            "ChBtYXhfcm93c190b19zb3J0GBIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWVCB/rHMQM+PTASPwoRbWF4X2J5dGVzX3RvX3NvcnQYEyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIH+scxAz49MBJVChJzb3J0",
            "X292ZXJmbG93X21vZGUYFCABKA4yOS55YW5kZXguY2xvdWQubWRiLmNsaWNr",
            "aG91c2UudjEuVXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRI9Cg9tYXhfcmVz",
            "dWx0X3Jvd3MYFSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIH",
            "+scxAz49MBI+ChBtYXhfcmVzdWx0X2J5dGVzGBYgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASVwoUcmVzdWx0X292ZXJmbG93",
            "X21vZGUYFyABKA4yOS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEu",
            "VXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRJCChRtYXhfcm93c19pbl9kaXN0",
            "aW5jdBgYIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzED",
            "Pj0wEkMKFW1heF9ieXRlc19pbl9kaXN0aW5jdBgZIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wElkKFmRpc3RpbmN0X292ZXJm",
            "bG93X21vZGUYGiABKA4yOS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuVXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRJCChRtYXhfcm93c190b190",
            "cmFuc2ZlchgbIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgf6",
            "xzEDPj0wEkMKFW1heF9ieXRlc190b190cmFuc2ZlchgcIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wElkKFnRyYW5zZmVyX292",
            "ZXJmbG93X21vZGUYHSABKA4yOS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuVXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRJAChJtYXhfZXhlY3V0",
            "aW9uX3RpbWUYHiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIH",
            "+scxAz49MBJYChV0aW1lb3V0X292ZXJmbG93X21vZGUYHyABKA4yOS55YW5k",
            "ZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuVXNlclNldHRpbmdzLk92ZXJm",
            "bG93TW9kZRI9Cg9tYXhfcm93c19pbl9zZXQYVyABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZUIH+scxAz49MBI+ChBtYXhfYnl0ZXNfaW5fc2V0",
            "GFggASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTAS",
            "VAoRc2V0X292ZXJmbG93X21vZGUYWSABKA4yOS55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuVXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRI+ChBt",
            "YXhfcm93c19pbl9qb2luGFogASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWVCB/rHMQM+PTASPwoRbWF4X2J5dGVzX2luX2pvaW4YWyABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIH+scxAz49MBJVChJqb2luX292",
            "ZXJmbG93X21vZGUYXCABKA4yOS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuVXNlclNldHRpbmdzLk92ZXJmbG93TW9kZRJBChNtYXhfY29sdW1u",
            "c190b19yZWFkGCAgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "B/rHMQM+PTASQwoVbWF4X3RlbXBvcmFyeV9jb2x1bW5zGCEgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASTQofbWF4X3RlbXBv",
            "cmFyeV9ub25fY29uc3RfY29sdW1ucxgiIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wEjsKDm1heF9xdWVyeV9zaXplGCMgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCBvrHMQI+MBI6Cg1tYXhf",
            "YXN0X2RlcHRoGCQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "BvrHMQI+MBI9ChBtYXhfYXN0X2VsZW1lbnRzGCUgASgLMhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWVCBvrHMQI+MBJGChltYXhfZXhwYW5kZWRfYXN0",
            "X2VsZW1lbnRzGCYgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "BvrHMQI+MBJBChNtaW5fZXhlY3V0aW9uX3NwZWVkGFQgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASRwoZbWluX2V4ZWN1dGlv",
            "bl9zcGVlZF9ieXRlcxhVIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlQgf6xzEDPj0wEm8KHWNvdW50X2Rpc3RpbmN0X2ltcGxlbWVudGF0aW9u",
            "GFYgASgOMkgueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlVzZXJT",
            "ZXR0aW5ncy5Db3VudERpc3RpbmN0SW1wbGVtZW50YXRpb24STQopaW5wdXRf",
            "Zm9ybWF0X3ZhbHVlc19pbnRlcnByZXRfZXhwcmVzc2lvbnMYPSABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEkwKKGlucHV0X2Zvcm1hdF9kZWZh",
            "dWx0c19mb3Jfb21pdHRlZF9maWVsZHMYPiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlEksKJ291dHB1dF9mb3JtYXRfanNvbl9xdW90ZV82NGJp",
            "dF9pbnRlZ2Vycxg/IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUS",
            "Rgoib3V0cHV0X2Zvcm1hdF9qc29uX3F1b3RlX2Rlbm9ybWFscxhAIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWUSSgombG93X2NhcmRpbmFsaXR5",
            "X2FsbG93X2luX25hdGl2ZV9mb3JtYXQYTiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuQm9vbFZhbHVlEk0KKWVtcHR5X3Jlc3VsdF9mb3JfYWdncmVnYXRpb25f",
            "YnlfZW1wdHlfc2V0GE8gASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1",
            "ZRI8ChdodHRwX2Nvbm5lY3Rpb25fdGltZW91dBhBIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEjkKFGh0dHBfcmVjZWl2ZV90aW1lb3V0GEIg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNgoRaHR0cF9zZW5k",
            "X3RpbWVvdXQYQyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI7",
            "ChdlbmFibGVfaHR0cF9jb21wcmVzc2lvbhhEIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5Cb29sVmFsdWUSQQodc2VuZF9wcm9ncmVzc19pbl9odHRwX2hlYWRl",
            "cnMYRSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEkMKHmh0dHBf",
            "aGVhZGVyc19wcm9ncmVzc19pbnRlcnZhbBhGIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQ2NFZhbHVlEjgKFGFkZF9odHRwX2NvcnNfaGVhZGVyGEcgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJKCgpxdW90YV9tb2RlGFAg",
            "ASgOMjYueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlVzZXJTZXR0",
            "aW5ncy5RdW90YU1vZGUiXwoMT3ZlcmZsb3dNb2RlEh0KGU9WRVJGTE9XX01P",
            "REVfVU5TUEVDSUZJRUQQABIXChNPVkVSRkxPV19NT0RFX1RIUk9XEAESFwoT",
            "T1ZFUkZMT1dfTU9ERV9CUkVBSxACIqEBChNHcm91cEJ5T3ZlcmZsb3dNb2Rl",
            "EiYKIkdST1VQX0JZX09WRVJGTE9XX01PREVfVU5TUEVDSUZJRUQQABIgChxH",
            "Uk9VUF9CWV9PVkVSRkxPV19NT0RFX1RIUk9XEAESIAocR1JPVVBfQllfT1ZF",
            "UkZMT1dfTU9ERV9CUkVBSxACEh4KGkdST1VQX0JZX09WRVJGTE9XX01PREVf",
            "QU5ZEAMi0gEKFkRpc3RyaWJ1dGVkUHJvZHVjdE1vZGUSKAokRElTVFJJQlVU",
            "RURfUFJPRFVDVF9NT0RFX1VOU1BFQ0lGSUVEEAASIQodRElTVFJJQlVURURf",
            "UFJPRFVDVF9NT0RFX0RFTlkQARIiCh5ESVNUUklCVVRFRF9QUk9EVUNUX01P",
            "REVfTE9DQUwQAhIjCh9ESVNUUklCVVRFRF9QUk9EVUNUX01PREVfR0xPQkFM",
            "EAMSIgoeRElTVFJJQlVURURfUFJPRFVDVF9NT0RFX0FMTE9XEAQicQoJUXVv",
            "dGFNb2RlEhoKFlFVT1RBX01PREVfVU5TUEVDSUZJRUQQABIWChJRVU9UQV9N",
            "T0RFX0RFRkFVTFQQARIUChBRVU9UQV9NT0RFX0tFWUVEEAISGgoWUVVPVEFf",
            "TU9ERV9LRVlFRF9CWV9JUBADIrYCChtDb3VudERpc3RpbmN0SW1wbGVtZW50",
            "YXRpb24SLQopQ09VTlRfRElTVElOQ1RfSU1QTEVNRU5UQVRJT05fVU5TUEVD",
            "SUZJRUQQABImCiJDT1VOVF9ESVNUSU5DVF9JTVBMRU1FTlRBVElPTl9VTklR",
            "EAESLworQ09VTlRfRElTVElOQ1RfSU1QTEVNRU5UQVRJT05fVU5JUV9DT01C",
            "SU5FRBACEjIKLkNPVU5UX0RJU1RJTkNUX0lNUExFTUVOVEFUSU9OX1VOSVFf",
            "Q09NQklORURfNjQQAxItCilDT1VOVF9ESVNUSU5DVF9JTVBMRU1FTlRBVElP",
            "Tl9VTklRX0hMTF8xMhAEEiwKKENPVU5UX0RJU1RJTkNUX0lNUExFTUVOVEFU",
            "SU9OX1VOSVFfRVhBQ1QQBSLuAgoJVXNlclF1b3RhEkIKEWludGVydmFsX2R1",
            "cmF0aW9uGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCvrH",
            "MQY+PTEwMDASNQoHcXVlcmllcxgCIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQ2NFZhbHVlQgf6xzEDPj0wEjQKBmVycm9ycxgDIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlQgf6xzEDPj0wEjkKC3Jlc3VsdF9yb3dzGAQg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCB/rHMQM+PTASNwoJ",
            "cmVhZF9yb3dzGAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "B/rHMQM+PTASPAoOZXhlY3V0aW9uX3RpbWUYBiABKAsyGy5nb29nbGUucHJv",
            "dG9idWYuSW50NjRWYWx1ZUIH+scxAz49MEJzCiJ5YW5kZXguY2xvdWQuYXBp",
            "Lm1kYi5jbGlja2hvdXNlLnYxWk1naXRodWIuY29tL3lhbmRleC1jbG91ZC9n",
            "by1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjE7Y2xp",
            "Y2tob3VzZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.User), global::Yandex.Cloud.Mdb.Clickhouse.V1.User.Parser, new[]{ "Name", "ClusterId", "Permissions", "Settings", "Quotas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission), global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission.Parser, new[]{ "DatabaseName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec), global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec.Parser, new[]{ "Name", "Password", "Permissions", "Settings", "Quotas" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings), global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Parser, new[]{ "Readonly", "AllowDdl", "InsertQuorum", "ConnectTimeout", "ReceiveTimeout", "SendTimeout", "InsertQuorumTimeout", "SelectSequentialConsistency", "MaxReplicaDelayForDistributedQueries", "FallbackToStaleReplicasForDistributedQueries", "ReplicationAlterPartitionsSync", "DistributedProductMode", "DistributedAggregationMemoryEfficient", "DistributedDdlTaskTimeout", "SkipUnavailableShards", "Compile", "MinCountToCompile", "CompileExpressions", "MinCountToCompileExpression", "MaxBlockSize", "MinInsertBlockSizeRows", "MinInsertBlockSizeBytes", "MaxInsertBlockSize", "MinBytesToUseDirectIo", "UseUncompressedCache", "MergeTreeMaxRowsToUseCache", "MergeTreeMaxBytesToUseCache", "MergeTreeMinRowsForConcurrentRead", "MergeTreeMinBytesForConcurrentRead", "MaxBytesBeforeExternalGroupBy", "MaxBytesBeforeExternalSort", "GroupByTwoLevelThreshold", "GroupByTwoLevelThresholdBytes", "Priority", "MaxThreads", "MaxMemoryUsage", "MaxMemoryUsageForUser", "MaxNetworkBandwidth", "MaxNetworkBandwidthForUser", "ForceIndexByDate", "ForcePrimaryKey", "MaxRowsToRead", "MaxBytesToRead", "ReadOverflowMode", "MaxRowsToGroupBy", "GroupByOverflowMode", "MaxRowsToSort", "MaxBytesToSort", "SortOverflowMode", "MaxResultRows", "MaxResultBytes", "ResultOverflowMode", "MaxRowsInDistinct", "MaxBytesInDistinct", "DistinctOverflowMode", "MaxRowsToTransfer", "MaxBytesToTransfer", "TransferOverflowMode", "MaxExecutionTime", "TimeoutOverflowMode", "MaxRowsInSet", "MaxBytesInSet", "SetOverflowMode", "MaxRowsInJoin", "MaxBytesInJoin", "JoinOverflowMode", "MaxColumnsToRead", "MaxTemporaryColumns", "MaxTemporaryNonConstColumns", "MaxQuerySize", "MaxAstDepth", "MaxAstElements", "MaxExpandedAstElements", "MinExecutionSpeed", "MinExecutionSpeedBytes", "CountDistinctImplementation", "InputFormatValuesInterpretExpressions", "InputFormatDefaultsForOmittedFields", "OutputFormatJsonQuote64BitIntegers", "OutputFormatJsonQuoteDenormals", "LowCardinalityAllowInNativeFormat", "EmptyResultForAggregationByEmptySet", "HttpConnectionTimeout", "HttpReceiveTimeout", "HttpSendTimeout", "EnableHttpCompression", "SendProgressInHttpHeaders", "HttpHeadersProgressInterval", "AddHttpCorsHeader", "QuotaMode" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota), global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota.Parser, new[]{ "IntervalDuration", "Queries", "Errors", "ResultRows", "ReadRows", "ExecutionTime" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A ClickHouse User resource. For more information, see 
  /// the [Developer's guide](/docs/managed-clickhouse/concepts).
  /// </summary>
  internal sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      permissions_ = other.permissions_.Clone();
      settings_ = other.settings_ != null ? other.settings_.Clone() : null;
      quotas_ = other.quotas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the ClickHouse user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster the user belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> _repeated_permissions_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> permissions_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission>();
    /// <summary>
    /// Set of permissions granted to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> Permissions {
      get { return permissions_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    /// <summary>Field number for the "quotas" field.</summary>
    public const int QuotasFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> _repeated_quotas_codec
        = pb::FieldCodec.ForMessage(42, global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> quotas_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota>();
    /// <summary>
    /// Set of quotas assigned to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> Quotas {
      get { return quotas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      if(!permissions_.Equals(other.permissions_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if(!quotas_.Equals(other.quotas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= permissions_.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      hash ^= quotas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (settings_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Settings);
      }
      quotas_.WriteTo(output, _repeated_quotas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      size += quotas_.CalculateSize(_repeated_quotas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      permissions_.Add(other.permissions_);
      if (other.settings_ != null) {
        if (settings_ == null) {
          Settings = new global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      quotas_.Add(other.quotas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
          case 34: {
            if (settings_ == null) {
              Settings = new global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 42: {
            quotas_.AddEntriesFrom(input, _repeated_quotas_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Permission : pb::IMessage<Permission> {
    private static readonly pb::MessageParser<Permission> _parser = new pb::MessageParser<Permission>(() => new Permission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Permission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission(Permission other) : this() {
      databaseName_ = other.databaseName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Permission Clone() {
      return new Permission(this);
    }

    /// <summary>Field number for the "database_name" field.</summary>
    public const int DatabaseNameFieldNumber = 1;
    private string databaseName_ = "";
    /// <summary>
    /// Name of the database that the permission grants access to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatabaseName {
      get { return databaseName_; }
      set {
        databaseName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Permission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Permission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatabaseName != other.DatabaseName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatabaseName.Length != 0) hash ^= DatabaseName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatabaseName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DatabaseName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatabaseName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DatabaseName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Permission other) {
      if (other == null) {
        return;
      }
      if (other.DatabaseName.Length != 0) {
        DatabaseName = other.DatabaseName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DatabaseName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UserSpec : pb::IMessage<UserSpec> {
    private static readonly pb::MessageParser<UserSpec> _parser = new pb::MessageParser<UserSpec>(() => new UserSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpec(UserSpec other) : this() {
      name_ = other.name_;
      password_ = other.password_;
      permissions_ = other.permissions_.Clone();
      settings_ = other.settings_ != null ? other.settings_.Clone() : null;
      quotas_ = other.quotas_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSpec Clone() {
      return new UserSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the ClickHouse user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    /// <summary>
    /// Password of the ClickHouse user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> _repeated_permissions_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> permissions_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission>();
    /// <summary>
    /// Set of permissions to grant to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Permission> Permissions {
      get { return permissions_; }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    /// <summary>Field number for the "quotas" field.</summary>
    public const int QuotasFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> _repeated_quotas_codec
        = pb::FieldCodec.ForMessage(42, global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> quotas_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota>();
    /// <summary>
    /// Set of quotas assigned to the user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserQuota> Quotas {
      get { return quotas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      if(!permissions_.Equals(other.permissions_)) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      if(!quotas_.Equals(other.quotas_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      hash ^= permissions_.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      hash ^= quotas_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (settings_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Settings);
      }
      quotas_.WriteTo(output, _repeated_quotas_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      size += quotas_.CalculateSize(_repeated_quotas_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      permissions_.Add(other.permissions_);
      if (other.settings_ != null) {
        if (settings_ == null) {
          Settings = new global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings();
        }
        Settings.MergeFrom(other.Settings);
      }
      quotas_.Add(other.quotas_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
          case 34: {
            if (settings_ == null) {
              Settings = new global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings();
            }
            input.ReadMessage(Settings);
            break;
          }
          case 42: {
            quotas_.AddEntriesFrom(input, _repeated_quotas_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ClickHouse user settings. Supported settings are a limited subset of all settings
  /// described in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/).
  /// </summary>
  internal sealed partial class UserSettings : pb::IMessage<UserSettings> {
    private static readonly pb::MessageParser<UserSettings> _parser = new pb::MessageParser<UserSettings>(() => new UserSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettings(UserSettings other) : this() {
      Readonly = other.Readonly;
      AllowDdl = other.AllowDdl;
      InsertQuorum = other.InsertQuorum;
      ConnectTimeout = other.ConnectTimeout;
      ReceiveTimeout = other.ReceiveTimeout;
      SendTimeout = other.SendTimeout;
      InsertQuorumTimeout = other.InsertQuorumTimeout;
      SelectSequentialConsistency = other.SelectSequentialConsistency;
      MaxReplicaDelayForDistributedQueries = other.MaxReplicaDelayForDistributedQueries;
      FallbackToStaleReplicasForDistributedQueries = other.FallbackToStaleReplicasForDistributedQueries;
      ReplicationAlterPartitionsSync = other.ReplicationAlterPartitionsSync;
      distributedProductMode_ = other.distributedProductMode_;
      DistributedAggregationMemoryEfficient = other.DistributedAggregationMemoryEfficient;
      DistributedDdlTaskTimeout = other.DistributedDdlTaskTimeout;
      SkipUnavailableShards = other.SkipUnavailableShards;
      Compile = other.Compile;
      MinCountToCompile = other.MinCountToCompile;
      CompileExpressions = other.CompileExpressions;
      MinCountToCompileExpression = other.MinCountToCompileExpression;
      MaxBlockSize = other.MaxBlockSize;
      MinInsertBlockSizeRows = other.MinInsertBlockSizeRows;
      MinInsertBlockSizeBytes = other.MinInsertBlockSizeBytes;
      MaxInsertBlockSize = other.MaxInsertBlockSize;
      MinBytesToUseDirectIo = other.MinBytesToUseDirectIo;
      UseUncompressedCache = other.UseUncompressedCache;
      MergeTreeMaxRowsToUseCache = other.MergeTreeMaxRowsToUseCache;
      MergeTreeMaxBytesToUseCache = other.MergeTreeMaxBytesToUseCache;
      MergeTreeMinRowsForConcurrentRead = other.MergeTreeMinRowsForConcurrentRead;
      MergeTreeMinBytesForConcurrentRead = other.MergeTreeMinBytesForConcurrentRead;
      MaxBytesBeforeExternalGroupBy = other.MaxBytesBeforeExternalGroupBy;
      MaxBytesBeforeExternalSort = other.MaxBytesBeforeExternalSort;
      GroupByTwoLevelThreshold = other.GroupByTwoLevelThreshold;
      GroupByTwoLevelThresholdBytes = other.GroupByTwoLevelThresholdBytes;
      Priority = other.Priority;
      MaxThreads = other.MaxThreads;
      MaxMemoryUsage = other.MaxMemoryUsage;
      MaxMemoryUsageForUser = other.MaxMemoryUsageForUser;
      MaxNetworkBandwidth = other.MaxNetworkBandwidth;
      MaxNetworkBandwidthForUser = other.MaxNetworkBandwidthForUser;
      ForceIndexByDate = other.ForceIndexByDate;
      ForcePrimaryKey = other.ForcePrimaryKey;
      MaxRowsToRead = other.MaxRowsToRead;
      MaxBytesToRead = other.MaxBytesToRead;
      readOverflowMode_ = other.readOverflowMode_;
      MaxRowsToGroupBy = other.MaxRowsToGroupBy;
      groupByOverflowMode_ = other.groupByOverflowMode_;
      MaxRowsToSort = other.MaxRowsToSort;
      MaxBytesToSort = other.MaxBytesToSort;
      sortOverflowMode_ = other.sortOverflowMode_;
      MaxResultRows = other.MaxResultRows;
      MaxResultBytes = other.MaxResultBytes;
      resultOverflowMode_ = other.resultOverflowMode_;
      MaxRowsInDistinct = other.MaxRowsInDistinct;
      MaxBytesInDistinct = other.MaxBytesInDistinct;
      distinctOverflowMode_ = other.distinctOverflowMode_;
      MaxRowsToTransfer = other.MaxRowsToTransfer;
      MaxBytesToTransfer = other.MaxBytesToTransfer;
      transferOverflowMode_ = other.transferOverflowMode_;
      MaxExecutionTime = other.MaxExecutionTime;
      timeoutOverflowMode_ = other.timeoutOverflowMode_;
      MaxRowsInSet = other.MaxRowsInSet;
      MaxBytesInSet = other.MaxBytesInSet;
      setOverflowMode_ = other.setOverflowMode_;
      MaxRowsInJoin = other.MaxRowsInJoin;
      MaxBytesInJoin = other.MaxBytesInJoin;
      joinOverflowMode_ = other.joinOverflowMode_;
      MaxColumnsToRead = other.MaxColumnsToRead;
      MaxTemporaryColumns = other.MaxTemporaryColumns;
      MaxTemporaryNonConstColumns = other.MaxTemporaryNonConstColumns;
      MaxQuerySize = other.MaxQuerySize;
      MaxAstDepth = other.MaxAstDepth;
      MaxAstElements = other.MaxAstElements;
      MaxExpandedAstElements = other.MaxExpandedAstElements;
      MinExecutionSpeed = other.MinExecutionSpeed;
      MinExecutionSpeedBytes = other.MinExecutionSpeedBytes;
      countDistinctImplementation_ = other.countDistinctImplementation_;
      InputFormatValuesInterpretExpressions = other.InputFormatValuesInterpretExpressions;
      InputFormatDefaultsForOmittedFields = other.InputFormatDefaultsForOmittedFields;
      OutputFormatJsonQuote64BitIntegers = other.OutputFormatJsonQuote64BitIntegers;
      OutputFormatJsonQuoteDenormals = other.OutputFormatJsonQuoteDenormals;
      LowCardinalityAllowInNativeFormat = other.LowCardinalityAllowInNativeFormat;
      EmptyResultForAggregationByEmptySet = other.EmptyResultForAggregationByEmptySet;
      HttpConnectionTimeout = other.HttpConnectionTimeout;
      HttpReceiveTimeout = other.HttpReceiveTimeout;
      HttpSendTimeout = other.HttpSendTimeout;
      EnableHttpCompression = other.EnableHttpCompression;
      SendProgressInHttpHeaders = other.SendProgressInHttpHeaders;
      HttpHeadersProgressInterval = other.HttpHeadersProgressInterval;
      AddHttpCorsHeader = other.AddHttpCorsHeader;
      quotaMode_ = other.quotaMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSettings Clone() {
      return new UserSettings(this);
    }

    /// <summary>Field number for the "readonly" field.</summary>
    public const int ReadonlyFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_readonly_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? readonly_;
    /// <summary>
    /// Restricts permissions for non-DDL queries. To restrict permissions for DDL queries, use [allow_ddl] instead.
    /// * **0** (default)—no restrictions.
    /// * **1**—only read data queries are allowed.
    /// * **2**—read data and change settings queries are allowed.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/permissions-for-queries/#settings_readonly).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Readonly {
      get { return readonly_; }
      set {
        readonly_ = value;
      }
    }


    /// <summary>Field number for the "allow_ddl" field.</summary>
    public const int AllowDdlFieldNumber = 2;
    private static readonly pb::FieldCodec<bool?> _single_allowDdl_codec = pb::FieldCodec.ForStructWrapper<bool>(18);
    private bool? allowDdl_;
    /// <summary>
    /// Determines whether DDL queries are allowed (e.g., **CREATE**, **ALTER**, **RENAME**, etc).
    ///
    /// Default value: **true**.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/permissions-for-queries/#settings_allow_ddl).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AllowDdl {
      get { return allowDdl_; }
      set {
        allowDdl_ = value;
      }
    }


    /// <summary>Field number for the "insert_quorum" field.</summary>
    public const int InsertQuorumFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_insertQuorum_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? insertQuorum_;
    /// <summary>
    /// Enables or disables write quorum for ClickHouse cluster.
    /// If the value is less than **2**, then write quorum is disabled, otherwise it is enabled.
    ///
    /// When used, write quorum guarantees that ClickHouse has written data to the quorum of **insert_quorum** replicas with no errors until the [insert_quorum_timeout] expires.
    /// All replicas in the quorum are in the consistent state, meaning that they contain linearized data from the previous **INSERT** queries.
    /// Employ write quorum, if you need the guarantees that the written data would not be lost in case of one or more replicas failure.
    ///
    /// You can use [select_sequential_consistency] setting to read the data written with write quorum.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-insert_quorum).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InsertQuorum {
      get { return insertQuorum_; }
      set {
        insertQuorum_ = value;
      }
    }


    /// <summary>Field number for the "connect_timeout" field.</summary>
    public const int ConnectTimeoutFieldNumber = 39;
    private static readonly pb::FieldCodec<long?> _single_connectTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(314);
    private long? connectTimeout_;
    /// <summary>
    /// Connection timeout in milliseconds.
    ///
    /// Value must be greater than **0** (default: **10000**, 10 seconds).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ConnectTimeout {
      get { return connectTimeout_; }
      set {
        connectTimeout_ = value;
      }
    }


    /// <summary>Field number for the "receive_timeout" field.</summary>
    public const int ReceiveTimeoutFieldNumber = 40;
    private static readonly pb::FieldCodec<long?> _single_receiveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(322);
    private long? receiveTimeout_;
    /// <summary>
    /// Receive timeout in milliseconds.
    ///
    /// Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ReceiveTimeout {
      get { return receiveTimeout_; }
      set {
        receiveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "send_timeout" field.</summary>
    public const int SendTimeoutFieldNumber = 41;
    private static readonly pb::FieldCodec<long?> _single_sendTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(330);
    private long? sendTimeout_;
    /// <summary>
    /// Send timeout in milliseconds.
    ///
    /// Value must be greater than **0** (default: **300000**, 300 seconds or 5 minutes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? SendTimeout {
      get { return sendTimeout_; }
      set {
        sendTimeout_ = value;
      }
    }


    /// <summary>Field number for the "insert_quorum_timeout" field.</summary>
    public const int InsertQuorumTimeoutFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_insertQuorumTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? insertQuorumTimeout_;
    /// <summary>
    /// Quorum write timeout in milliseconds.
    ///
    /// If the write quorum is enabled in the cluster, this timeout expires and some data is not written to the [insert_quorum] replicas, then ClickHouse will abort the execution of **INSERT** query and return an error.
    /// In this case, the client must send the query again to write the data block into the same or another replica.
    ///
    /// Minimum value: **1000**, 1 second (default: **60000**, 1 minute).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InsertQuorumTimeout {
      get { return insertQuorumTimeout_; }
      set {
        insertQuorumTimeout_ = value;
      }
    }


    /// <summary>Field number for the "select_sequential_consistency" field.</summary>
    public const int SelectSequentialConsistencyFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_selectSequentialConsistency_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? selectSequentialConsistency_;
    /// <summary>
    /// Determines the behavior of **SELECT** queries from the replicated table: if enabled, ClickHouse will terminate a query with error message in case the replica does not have a chunk written with the quorum and will not read the parts that have not yet been written with the quorum.
    ///
    /// Default value: **false** (sequential consistency is disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SelectSequentialConsistency {
      get { return selectSequentialConsistency_; }
      set {
        selectSequentialConsistency_ = value;
      }
    }


    /// <summary>Field number for the "max_replica_delay_for_distributed_queries" field.</summary>
    public const int MaxReplicaDelayForDistributedQueriesFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_maxReplicaDelayForDistributedQueries_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? maxReplicaDelayForDistributedQueries_;
    /// <summary>
    /// Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used and becomes a stale one.
    ///
    /// Minimum value: **1000**, 1 second (default: **300000**, 300 seconds or 5 minutes).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_replica_delay_for_distributed_queries).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxReplicaDelayForDistributedQueries {
      get { return maxReplicaDelayForDistributedQueries_; }
      set {
        maxReplicaDelayForDistributedQueries_ = value;
      }
    }


    /// <summary>Field number for the "fallback_to_stale_replicas_for_distributed_queries" field.</summary>
    public const int FallbackToStaleReplicasForDistributedQueriesFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_fallbackToStaleReplicasForDistributedQueries_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? fallbackToStaleReplicasForDistributedQueries_;
    /// <summary>
    /// Enables or disables query forcing to a stale replica in case the actual data is unavailable.
    /// If enabled, ClickHouse will choose the most up-to-date replica and force the query to use the data in this replica.
    /// This setting can be used when doing **SELECT** query from a distributed table that points to replicated tables.
    ///
    /// Default value: **true** (query forcing is enabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-fallback_to_stale_replicas_for_distributed_queries).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? FallbackToStaleReplicasForDistributedQueries {
      get { return fallbackToStaleReplicasForDistributedQueries_; }
      set {
        fallbackToStaleReplicasForDistributedQueries_ = value;
      }
    }


    /// <summary>Field number for the "replication_alter_partitions_sync" field.</summary>
    public const int ReplicationAlterPartitionsSyncFieldNumber = 42;
    private static readonly pb::FieldCodec<long?> _single_replicationAlterPartitionsSync_codec = pb::FieldCodec.ForStructWrapper<long>(338);
    private long? replicationAlterPartitionsSync_;
    /// <summary>
    /// Wait mode for asynchronous actions in **ALTER** queries on replicated tables:
    ///
    /// * **0**—do not wait for replicas.
    /// * **1**—only wait for own execution (default).
    /// * **2**—wait for all replicas.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/sql-reference/statements/alter/#synchronicity-of-alter-queries).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ReplicationAlterPartitionsSync {
      get { return replicationAlterPartitionsSync_; }
      set {
        replicationAlterPartitionsSync_ = value;
      }
    }


    /// <summary>Field number for the "distributed_product_mode" field.</summary>
    public const int DistributedProductModeFieldNumber = 43;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode distributedProductMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode.Unspecified;
    /// <summary>
    /// Determine the behavior of distributed subqueries.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#distributed-product-mode).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode DistributedProductMode {
      get { return distributedProductMode_; }
      set {
        distributedProductMode_ = value;
      }
    }

    /// <summary>Field number for the "distributed_aggregation_memory_efficient" field.</summary>
    public const int DistributedAggregationMemoryEfficientFieldNumber = 72;
    private static readonly pb::FieldCodec<bool?> _single_distributedAggregationMemoryEfficient_codec = pb::FieldCodec.ForStructWrapper<bool>(578);
    private bool? distributedAggregationMemoryEfficient_;
    /// <summary>
    /// Enables of disables memory saving mode when doing distributed aggregation.
    ///
    /// When ClickHouse works with a distributed query, external aggregation is done on remote servers.
    /// Enable this setting to achieve a smaller memory footprint on the server that sourced such a distributed query.
    ///
    /// Default value: **false** (memory saving mode is disabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? DistributedAggregationMemoryEfficient {
      get { return distributedAggregationMemoryEfficient_; }
      set {
        distributedAggregationMemoryEfficient_ = value;
      }
    }


    /// <summary>Field number for the "distributed_ddl_task_timeout" field.</summary>
    public const int DistributedDdlTaskTimeoutFieldNumber = 73;
    private static readonly pb::FieldCodec<long?> _single_distributedDdlTaskTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(586);
    private long? distributedDdlTaskTimeout_;
    /// <summary>
    /// Timeout for DDL queries, in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? DistributedDdlTaskTimeout {
      get { return distributedDdlTaskTimeout_; }
      set {
        distributedDdlTaskTimeout_ = value;
      }
    }


    /// <summary>Field number for the "skip_unavailable_shards" field.</summary>
    public const int SkipUnavailableShardsFieldNumber = 81;
    private static readonly pb::FieldCodec<bool?> _single_skipUnavailableShards_codec = pb::FieldCodec.ForStructWrapper<bool>(650);
    private bool? skipUnavailableShards_;
    /// <summary>
    /// Enables or disables silent skipping of unavailable shards.
    ///
    /// A shard is considered unavailable if all its replicas are also unavailable.
    ///
    /// Default value: **false** (silent skipping is disabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-skip_unavailable_shards).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SkipUnavailableShards {
      get { return skipUnavailableShards_; }
      set {
        skipUnavailableShards_ = value;
      }
    }


    /// <summary>Field number for the "compile" field.</summary>
    public const int CompileFieldNumber = 44;
    private static readonly pb::FieldCodec<bool?> _single_compile_codec = pb::FieldCodec.ForStructWrapper<bool>(354);
    private bool? compile_;
    /// <summary>
    /// Enables or disables query compilation.
    /// If you execute a lot of structurally identical queries, then enable this setting.
    /// As a result, such queries may be executed faster due to use of queries' compiled parts.
    ///
    /// Use this setting in combination with [min_count_to_compile] setting.
    ///
    /// Default value: **false** (compilation is disabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#compile).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? Compile {
      get { return compile_; }
      set {
        compile_ = value;
      }
    }


    /// <summary>Field number for the "min_count_to_compile" field.</summary>
    public const int MinCountToCompileFieldNumber = 45;
    private static readonly pb::FieldCodec<long?> _single_minCountToCompile_codec = pb::FieldCodec.ForStructWrapper<long>(362);
    private long? minCountToCompile_;
    /// <summary>
    /// How many structurally identical queries ClickHouse has to encounter before they are compiled.
    ///
    /// Minimum value: **0** (default: **3**).
    ///
    /// For the **0** value compilation is synchronous: a query waits for compilation process to complete prior to continuing execution.
    /// It is recommended to set this value only for testing purposes.
    ///
    /// For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
    /// When a compiled part of query is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#min-count-to-compile).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinCountToCompile {
      get { return minCountToCompile_; }
      set {
        minCountToCompile_ = value;
      }
    }


    /// <summary>Field number for the "compile_expressions" field.</summary>
    public const int CompileExpressionsFieldNumber = 46;
    private static readonly pb::FieldCodec<bool?> _single_compileExpressions_codec = pb::FieldCodec.ForStructWrapper<bool>(370);
    private bool? compileExpressions_;
    /// <summary>
    /// Enables or disables expression compilation.
    /// If you execute a lot of queries that contain identical expressions, then enable this setting.
    /// As a result, such queries may be executed faster due to use of compiled expressions.
    ///
    /// Use this setting in combination with [min_count_to_compile_expression] setting.
    ///
    /// Default value: **false** (expression compilation is disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? CompileExpressions {
      get { return compileExpressions_; }
      set {
        compileExpressions_ = value;
      }
    }


    /// <summary>Field number for the "min_count_to_compile_expression" field.</summary>
    public const int MinCountToCompileExpressionFieldNumber = 47;
    private static readonly pb::FieldCodec<long?> _single_minCountToCompileExpression_codec = pb::FieldCodec.ForStructWrapper<long>(378);
    private long? minCountToCompileExpression_;
    /// <summary>
    /// How many identical expressions ClickHouse has to encounter before they are compiled.
    ///
    /// Minimum value: **0** (default: **3**).
    ///
    /// For the **0** value compilation is synchronous: a query waits for expression compilation process to complete prior to continuing execution.
    /// It is recommended to set this value only for testing purposes.
    ///
    /// For all other values, compilation is asynchronous: the compilation process executes in a separate thread.
    /// When a compiled expression is ready, it will be used by ClickHouse for eligible queries, including the ones that are currently running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinCountToCompileExpression {
      get { return minCountToCompileExpression_; }
      set {
        minCountToCompileExpression_ = value;
      }
    }


    /// <summary>Field number for the "max_block_size" field.</summary>
    public const int MaxBlockSizeFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_maxBlockSize_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? maxBlockSize_;
    /// <summary>
    /// The maximum block size for reading.
    ///
    /// Data in ClickHouse is organized and processed by blocks (block is a set of columns' parts).
    /// The internal processing cycles for a single block are efficient enough, but there are noticeable expenditures on each block.
    ///
    /// This setting is a recommendation for size of block (in a count of rows) that should be loaded from tables.
    ///
    /// Value must be greater than **0** (default: **65536**).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#setting-max_block_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBlockSize {
      get { return maxBlockSize_; }
      set {
        maxBlockSize_ = value;
      }
    }


    /// <summary>Field number for the "min_insert_block_size_rows" field.</summary>
    public const int MinInsertBlockSizeRowsFieldNumber = 48;
    private static readonly pb::FieldCodec<long?> _single_minInsertBlockSizeRows_codec = pb::FieldCodec.ForStructWrapper<long>(386);
    private long? minInsertBlockSizeRows_;
    /// <summary>
    /// Limits the minimum number of rows in a block to be inserted in a table by **INSERT** query.
    /// Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
    ///
    /// Minimal value: **0**, block squashing is disabled (default: **1048576**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinInsertBlockSizeRows {
      get { return minInsertBlockSizeRows_; }
      set {
        minInsertBlockSizeRows_ = value;
      }
    }


    /// <summary>Field number for the "min_insert_block_size_bytes" field.</summary>
    public const int MinInsertBlockSizeBytesFieldNumber = 49;
    private static readonly pb::FieldCodec<long?> _single_minInsertBlockSizeBytes_codec = pb::FieldCodec.ForStructWrapper<long>(394);
    private long? minInsertBlockSizeBytes_;
    /// <summary>
    /// Limits the minimum number of bytes in a block to be inserted in a table by **INSERT** query.
    /// Blocks that are smaller than the specified value, will be squashed together into the bigger blocks.
    ///
    /// Minimal value: **0**, block squashing is disabled (default: **‭268435456‬‬**, 256 MB).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinInsertBlockSizeBytes {
      get { return minInsertBlockSizeBytes_; }
      set {
        minInsertBlockSizeBytes_ = value;
      }
    }


    /// <summary>Field number for the "max_insert_block_size" field.</summary>
    public const int MaxInsertBlockSizeFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_maxInsertBlockSize_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? maxInsertBlockSize_;
    /// <summary>
    /// Allows to form blocks of the specified size (in bytes) when inserting data in a table.
    /// This setting has effect only if server is creating such blocks by itself.
    ///
    /// Value must be greater than **0** (default: **1048576**).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_insert_block_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxInsertBlockSize {
      get { return maxInsertBlockSize_; }
      set {
        maxInsertBlockSize_ = value;
      }
    }


    /// <summary>Field number for the "min_bytes_to_use_direct_io" field.</summary>
    public const int MinBytesToUseDirectIoFieldNumber = 50;
    private static readonly pb::FieldCodec<long?> _single_minBytesToUseDirectIo_codec = pb::FieldCodec.ForStructWrapper<long>(402);
    private long? minBytesToUseDirectIo_;
    /// <summary>
    /// Limits the minimum number of bytes to enable unbuffered direct reads from disk (Direct I/O).
    ///
    /// By default, ClickHouse does not read data directly from disk, but relies on the filesystem and its cache instead.
    /// Such reading strategy is effective when the data volume is small.
    /// If the amount of the data to read is huge, it is more effective to read directly from the disk, bypassing the filesystem cache.
    ///
    /// If the total amount of the data to read is greater than the value of this setting, then ClickHouse will fetch this data directly from the disk.
    ///
    /// Minimal value and default value: **0**, Direct I/O is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinBytesToUseDirectIo {
      get { return minBytesToUseDirectIo_; }
      set {
        minBytesToUseDirectIo_ = value;
      }
    }


    /// <summary>Field number for the "use_uncompressed_cache" field.</summary>
    public const int UseUncompressedCacheFieldNumber = 51;
    private static readonly pb::FieldCodec<bool?> _single_useUncompressedCache_codec = pb::FieldCodec.ForStructWrapper<bool>(410);
    private bool? useUncompressedCache_;
    /// <summary>
    /// Determines whether to use the cache of uncompressed blocks, or not.
    /// Using this cache can significantly reduce latency and increase the throughput when a huge amount of small queries is to be processed.
    /// Enable this setting for the users who instantiates small queries frequently.
    ///
    /// This setting has effect only for tables of the MergeTree family.
    ///
    /// Default value: **false** (uncompressed cache is disabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#setting-use_uncompressed_cache).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? UseUncompressedCache {
      get { return useUncompressedCache_; }
      set {
        useUncompressedCache_ = value;
      }
    }


    /// <summary>Field number for the "merge_tree_max_rows_to_use_cache" field.</summary>
    public const int MergeTreeMaxRowsToUseCacheFieldNumber = 52;
    private static readonly pb::FieldCodec<long?> _single_mergeTreeMaxRowsToUseCache_codec = pb::FieldCodec.ForStructWrapper<long>(418);
    private long? mergeTreeMaxRowsToUseCache_;
    /// <summary>
    /// Limits the maximum size in rows of the request that can use the cache of uncompressed data. The cache is not used for requests larger
    /// than the specified value.
    ///
    /// Use this setting in combination with [use_uncompressed_cache] setting.
    ///
    /// Value must be greater than **0** (default: **128x8192**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MergeTreeMaxRowsToUseCache {
      get { return mergeTreeMaxRowsToUseCache_; }
      set {
        mergeTreeMaxRowsToUseCache_ = value;
      }
    }


    /// <summary>Field number for the "merge_tree_max_bytes_to_use_cache" field.</summary>
    public const int MergeTreeMaxBytesToUseCacheFieldNumber = 53;
    private static readonly pb::FieldCodec<long?> _single_mergeTreeMaxBytesToUseCache_codec = pb::FieldCodec.ForStructWrapper<long>(426);
    private long? mergeTreeMaxBytesToUseCache_;
    /// <summary>
    /// Limits the maximum size in bytes of the request that can use the cache of uncompressed data. The cache is not used for requests larger
    /// than the specified value.
    ///
    /// Use this setting in combination with [use_uncompressed_cache] setting.
    ///
    /// Value must be greater than **0** (default: **192x10x1024x1024**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MergeTreeMaxBytesToUseCache {
      get { return mergeTreeMaxBytesToUseCache_; }
      set {
        mergeTreeMaxBytesToUseCache_ = value;
      }
    }


    /// <summary>Field number for the "merge_tree_min_rows_for_concurrent_read" field.</summary>
    public const int MergeTreeMinRowsForConcurrentReadFieldNumber = 54;
    private static readonly pb::FieldCodec<long?> _single_mergeTreeMinRowsForConcurrentRead_codec = pb::FieldCodec.ForStructWrapper<long>(434);
    private long? mergeTreeMinRowsForConcurrentRead_;
    /// <summary>
    /// Limits the minimum number of rows to be read from a file to enable concurrent read.
    /// If the number of rows to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
    ///
    /// This setting has effect only for tables of the MergeTree family.
    ///
    /// Value must be greater than **0** (default: **20x8192**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MergeTreeMinRowsForConcurrentRead {
      get { return mergeTreeMinRowsForConcurrentRead_; }
      set {
        mergeTreeMinRowsForConcurrentRead_ = value;
      }
    }


    /// <summary>Field number for the "merge_tree_min_bytes_for_concurrent_read" field.</summary>
    public const int MergeTreeMinBytesForConcurrentReadFieldNumber = 55;
    private static readonly pb::FieldCodec<long?> _single_mergeTreeMinBytesForConcurrentRead_codec = pb::FieldCodec.ForStructWrapper<long>(442);
    private long? mergeTreeMinBytesForConcurrentRead_;
    /// <summary>
    /// Limits the number of bytes to be read from a file to enable concurrent read.
    /// If the number of bytes to be read exceeds this value, then ClickHouse will try to use a few threads to read from a file concurrently.
    ///
    /// This setting has effect only for tables of the MergeTree family.
    ///
    /// Value must be greater than **0** (default: **24x10x1024x1024**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MergeTreeMinBytesForConcurrentRead {
      get { return mergeTreeMinBytesForConcurrentRead_; }
      set {
        mergeTreeMinBytesForConcurrentRead_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_before_external_group_by" field.</summary>
    public const int MaxBytesBeforeExternalGroupByFieldNumber = 74;
    private static readonly pb::FieldCodec<long?> _single_maxBytesBeforeExternalGroupBy_codec = pb::FieldCodec.ForStructWrapper<long>(594);
    private long? maxBytesBeforeExternalGroupBy_;
    /// <summary>
    /// Sets the threshold of RAM consumption (in bytes) after that the temporary data, collected during the **GROUP BY** operation, should be flushed to disk to limit the RAM comsumption.
    ///
    /// By default, aggregation is done by employing hash table that resides in RAM.
    /// A query can result in aggregation of huge data volumes that can lead to memory exhaustion and abortion of the query (see the [max_memory_usage] setting).
    /// For such queries, you can use this setting to force ClickHouse to do flushing and complete aggregation successfully.
    ///
    /// Minimal value and default value: **0**, **GROUP BY** in the external memory is disabled.
    ///
    /// When using aggregation in external memory, it is recommended to set the value of this setting twice as low as the [max_memory_usage] setting value (by default, the maximum memory usage is limited to ten gigabytes).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/sql-reference/statements/select/group-by/#select-group-by-in-external-memory).
    ///
    /// See also: the [distributed_aggregation_memory_efficient] setting.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesBeforeExternalGroupBy {
      get { return maxBytesBeforeExternalGroupBy_; }
      set {
        maxBytesBeforeExternalGroupBy_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_before_external_sort" field.</summary>
    public const int MaxBytesBeforeExternalSortFieldNumber = 75;
    private static readonly pb::FieldCodec<long?> _single_maxBytesBeforeExternalSort_codec = pb::FieldCodec.ForStructWrapper<long>(602);
    private long? maxBytesBeforeExternalSort_;
    /// <summary>
    /// This setting is equivalent of the [max_bytes_before_external_group_by] setting, except for it is for sort operation (**ORDER BY**), not aggregation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesBeforeExternalSort {
      get { return maxBytesBeforeExternalSort_; }
      set {
        maxBytesBeforeExternalSort_ = value;
      }
    }


    /// <summary>Field number for the "group_by_two_level_threshold" field.</summary>
    public const int GroupByTwoLevelThresholdFieldNumber = 76;
    private static readonly pb::FieldCodec<long?> _single_groupByTwoLevelThreshold_codec = pb::FieldCodec.ForStructWrapper<long>(610);
    private long? groupByTwoLevelThreshold_;
    /// <summary>
    /// Sets the threshold of the number of keys, after that the two-level aggregation should be used.
    ///
    /// Minimal value: **0**, threshold is not set (default: **10000‬‬**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GroupByTwoLevelThreshold {
      get { return groupByTwoLevelThreshold_; }
      set {
        groupByTwoLevelThreshold_ = value;
      }
    }


    /// <summary>Field number for the "group_by_two_level_threshold_bytes" field.</summary>
    public const int GroupByTwoLevelThresholdBytesFieldNumber = 77;
    private static readonly pb::FieldCodec<long?> _single_groupByTwoLevelThresholdBytes_codec = pb::FieldCodec.ForStructWrapper<long>(618);
    private long? groupByTwoLevelThresholdBytes_;
    /// <summary>
    /// Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
    ///
    /// Minimal value: **0**, threshold is not set (default: **100000000‬‬**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? GroupByTwoLevelThresholdBytes {
      get { return groupByTwoLevelThresholdBytes_; }
      set {
        groupByTwoLevelThresholdBytes_ = value;
      }
    }


    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 56;
    private static readonly pb::FieldCodec<long?> _single_priority_codec = pb::FieldCodec.ForStructWrapper<long>(450);
    private long? priority_;
    /// <summary>
    /// Sets the priority of a query.
    ///
    /// * **0**—priority is not used.
    /// * **1**—the highest priority.
    /// * and so on. The higher the number, the lower a query's priority.
    ///
    /// This setting should be set up for each query individually.
    ///
    /// If ClickHouse is working with the high-priority queries, and a low-priority query enters, then the low-priority query is paused until higher-priority queries are completed.
    ///
    /// Minimal value and default value: **0**, priority is not used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }


    /// <summary>Field number for the "max_threads" field.</summary>
    public const int MaxThreadsFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_maxThreads_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? maxThreads_;
    /// <summary>
    /// Limits the maximum number of threads to process the request (setting does not take threads that read data from remote servers into account).
    ///
    /// This setting applies to threads that perform the same stages of the query processing pipeline in parallel.
    ///
    /// Minimal value and default value: **0** (the thread number is calculated automatically based on the number of physical CPU cores, no HyperThreading cores are taken into account).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_threads).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxThreads {
      get { return maxThreads_; }
      set {
        maxThreads_ = value;
      }
    }


    /// <summary>Field number for the "max_memory_usage" field.</summary>
    public const int MaxMemoryUsageFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_maxMemoryUsage_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? maxMemoryUsage_;
    /// <summary>
    /// Limits the maximum memory usage (in bytes) for processing of a single user's query on a single server.
    /// This setting does not take server's free RAM amount or total RAM amount into account.
    ///
    /// This limitation is enforced for any user's single query on a single server.
    ///
    /// Minimal value: **0**, no limitation is set.
    /// Value that is set in the ClickHouse default config file: **10737418240** (10 GB).
    ///
    /// If you use [max_bytes_before_external_group_by] or [max_bytes_before_external_sort] setting, then it is recommended to set their values twice as low as [max_memory_usage] setting value.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#settings_max_memory_usage).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxMemoryUsage {
      get { return maxMemoryUsage_; }
      set {
        maxMemoryUsage_ = value;
      }
    }


    /// <summary>Field number for the "max_memory_usage_for_user" field.</summary>
    public const int MaxMemoryUsageForUserFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_maxMemoryUsageForUser_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? maxMemoryUsageForUser_;
    /// <summary>
    /// Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
    /// This setting does not take server's free RAM amount or total RAM amount into account.
    ///
    /// This limitation is enforced for all queries that belong to one user and run simultaneously on a single server.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxMemoryUsageForUser {
      get { return maxMemoryUsageForUser_; }
      set {
        maxMemoryUsageForUser_ = value;
      }
    }


    /// <summary>Field number for the "max_network_bandwidth" field.</summary>
    public const int MaxNetworkBandwidthFieldNumber = 57;
    private static readonly pb::FieldCodec<long?> _single_maxNetworkBandwidth_codec = pb::FieldCodec.ForStructWrapper<long>(458);
    private long? maxNetworkBandwidth_;
    /// <summary>
    /// The maximum speed of data exchange over the network in bytes per second for a query.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxNetworkBandwidth {
      get { return maxNetworkBandwidth_; }
      set {
        maxNetworkBandwidth_ = value;
      }
    }


    /// <summary>Field number for the "max_network_bandwidth_for_user" field.</summary>
    public const int MaxNetworkBandwidthForUserFieldNumber = 58;
    private static readonly pb::FieldCodec<long?> _single_maxNetworkBandwidthForUser_codec = pb::FieldCodec.ForStructWrapper<long>(466);
    private long? maxNetworkBandwidthForUser_;
    /// <summary>
    /// The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxNetworkBandwidthForUser {
      get { return maxNetworkBandwidthForUser_; }
      set {
        maxNetworkBandwidthForUser_ = value;
      }
    }


    /// <summary>Field number for the "force_index_by_date" field.</summary>
    public const int ForceIndexByDateFieldNumber = 59;
    private static readonly pb::FieldCodec<bool?> _single_forceIndexByDate_codec = pb::FieldCodec.ForStructWrapper<bool>(474);
    private bool? forceIndexByDate_;
    /// <summary>
    /// If enabled, query is not executed if the ClickHouse can’t use index by date.
    /// This setting has effect only for tables of the MergeTree family.
    ///
    /// Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by date).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-force_index_by_date).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ForceIndexByDate {
      get { return forceIndexByDate_; }
      set {
        forceIndexByDate_ = value;
      }
    }


    /// <summary>Field number for the "force_primary_key" field.</summary>
    public const int ForcePrimaryKeyFieldNumber = 60;
    private static readonly pb::FieldCodec<bool?> _single_forcePrimaryKey_codec = pb::FieldCodec.ForStructWrapper<bool>(482);
    private bool? forcePrimaryKey_;
    /// <summary>
    /// If enabled, query is not executed if the ClickHouse can’t use index by primary key.
    /// This setting has effect only for tables of the MergeTree family.
    ///
    /// Default value: **false** (setting is disabled, query executes even if ClickHouse can't use index by primary key).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#force-primary-key).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? ForcePrimaryKey {
      get { return forcePrimaryKey_; }
      set {
        forcePrimaryKey_ = value;
      }
    }


    /// <summary>Field number for the "max_rows_to_read" field.</summary>
    public const int MaxRowsToReadFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_maxRowsToRead_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? maxRowsToRead_;
    /// <summary>
    /// Limits the maximum number of rows that can be read from a table when running a query.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#max-rows-to-read).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsToRead {
      get { return maxRowsToRead_; }
      set {
        maxRowsToRead_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_to_read" field.</summary>
    public const int MaxBytesToReadFieldNumber = 14;
    private static readonly pb::FieldCodec<long?> _single_maxBytesToRead_codec = pb::FieldCodec.ForStructWrapper<long>(114);
    private long? maxBytesToRead_;
    /// <summary>
    /// Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesToRead {
      get { return maxBytesToRead_; }
      set {
        maxBytesToRead_ = value;
      }
    }


    /// <summary>Field number for the "read_overflow_mode" field.</summary>
    public const int ReadOverflowModeFieldNumber = 15;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode readOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while reading the data.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode ReadOverflowMode {
      get { return readOverflowMode_; }
      set {
        readOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_to_group_by" field.</summary>
    public const int MaxRowsToGroupByFieldNumber = 16;
    private static readonly pb::FieldCodec<long?> _single_maxRowsToGroupBy_codec = pb::FieldCodec.ForStructWrapper<long>(130);
    private long? maxRowsToGroupBy_;
    /// <summary>
    /// Limits the maximum number of unique keys received from aggregation function.
    /// This setting helps to reduce RAM consumption while doing aggregation.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsToGroupBy {
      get { return maxRowsToGroupBy_; }
      set {
        maxRowsToGroupBy_ = value;
      }
    }


    /// <summary>Field number for the "group_by_overflow_mode" field.</summary>
    public const int GroupByOverflowModeFieldNumber = 17;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode groupByOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing aggregation.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// * **any**—perform approximate **GROUP BY** operation by continuing aggregation for the keys that got into the set, but don’t add new keys to the set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode GroupByOverflowMode {
      get { return groupByOverflowMode_; }
      set {
        groupByOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_to_sort" field.</summary>
    public const int MaxRowsToSortFieldNumber = 18;
    private static readonly pb::FieldCodec<long?> _single_maxRowsToSort_codec = pb::FieldCodec.ForStructWrapper<long>(146);
    private long? maxRowsToSort_;
    /// <summary>
    /// Limits the maximum number of rows that can be read from a table for sorting.
    /// This setting helps to reduce RAM consumption.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsToSort {
      get { return maxRowsToSort_; }
      set {
        maxRowsToSort_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_to_sort" field.</summary>
    public const int MaxBytesToSortFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_maxBytesToSort_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? maxBytesToSort_;
    /// <summary>
    /// Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
    /// This setting helps to reduce RAM consumption.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesToSort {
      get { return maxBytesToSort_; }
      set {
        maxBytesToSort_ = value;
      }
    }


    /// <summary>Field number for the "sort_overflow_mode" field.</summary>
    public const int SortOverflowModeFieldNumber = 20;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode sortOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while sorting.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode SortOverflowMode {
      get { return sortOverflowMode_; }
      set {
        sortOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_result_rows" field.</summary>
    public const int MaxResultRowsFieldNumber = 21;
    private static readonly pb::FieldCodec<long?> _single_maxResultRows_codec = pb::FieldCodec.ForStructWrapper<long>(170);
    private long? maxResultRows_;
    /// <summary>
    /// Limits the number of rows in the result.
    /// This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxResultRows {
      get { return maxResultRows_; }
      set {
        maxResultRows_ = value;
      }
    }


    /// <summary>Field number for the "max_result_bytes" field.</summary>
    public const int MaxResultBytesFieldNumber = 22;
    private static readonly pb::FieldCodec<long?> _single_maxResultBytes_codec = pb::FieldCodec.ForStructWrapper<long>(178);
    private long? maxResultBytes_;
    /// <summary>
    /// Limits the number of bytes in the result.
    /// This limitation is also checked for subqueries and parts of distributed queries that run on remote servers.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxResultBytes {
      get { return maxResultBytes_; }
      set {
        maxResultBytes_ = value;
      }
    }


    /// <summary>Field number for the "result_overflow_mode" field.</summary>
    public const int ResultOverflowModeFieldNumber = 23;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode resultOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while forming result.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode ResultOverflowMode {
      get { return resultOverflowMode_; }
      set {
        resultOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_in_distinct" field.</summary>
    public const int MaxRowsInDistinctFieldNumber = 24;
    private static readonly pb::FieldCodec<long?> _single_maxRowsInDistinct_codec = pb::FieldCodec.ForStructWrapper<long>(194);
    private long? maxRowsInDistinct_;
    /// <summary>
    /// Limits the maximum number of different rows when using **DISTINCT**.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsInDistinct {
      get { return maxRowsInDistinct_; }
      set {
        maxRowsInDistinct_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_in_distinct" field.</summary>
    public const int MaxBytesInDistinctFieldNumber = 25;
    private static readonly pb::FieldCodec<long?> _single_maxBytesInDistinct_codec = pb::FieldCodec.ForStructWrapper<long>(202);
    private long? maxBytesInDistinct_;
    /// <summary>
    /// Limits the maximum size of a hash table in bytes (uncompressed data) when using **DISTINCT**.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesInDistinct {
      get { return maxBytesInDistinct_; }
      set {
        maxBytesInDistinct_ = value;
      }
    }


    /// <summary>Field number for the "distinct_overflow_mode" field.</summary>
    public const int DistinctOverflowModeFieldNumber = 26;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode distinctOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing **DISCTINCT**.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode DistinctOverflowMode {
      get { return distinctOverflowMode_; }
      set {
        distinctOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_to_transfer" field.</summary>
    public const int MaxRowsToTransferFieldNumber = 27;
    private static readonly pb::FieldCodec<long?> _single_maxRowsToTransfer_codec = pb::FieldCodec.ForStructWrapper<long>(218);
    private long? maxRowsToTransfer_;
    /// <summary>
    /// Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using **GLOBAL IN**.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsToTransfer {
      get { return maxRowsToTransfer_; }
      set {
        maxRowsToTransfer_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_to_transfer" field.</summary>
    public const int MaxBytesToTransferFieldNumber = 28;
    private static readonly pb::FieldCodec<long?> _single_maxBytesToTransfer_codec = pb::FieldCodec.ForStructWrapper<long>(226);
    private long? maxBytesToTransfer_;
    /// <summary>
    /// Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
    /// table when using **GLOBAL IN**.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesToTransfer {
      get { return maxBytesToTransfer_; }
      set {
        maxBytesToTransfer_ = value;
      }
    }


    /// <summary>Field number for the "transfer_overflow_mode" field.</summary>
    public const int TransferOverflowModeFieldNumber = 29;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode transferOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) while doing transfers.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode TransferOverflowMode {
      get { return transferOverflowMode_; }
      set {
        transferOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_execution_time" field.</summary>
    public const int MaxExecutionTimeFieldNumber = 30;
    private static readonly pb::FieldCodec<long?> _single_maxExecutionTime_codec = pb::FieldCodec.ForStructWrapper<long>(242);
    private long? maxExecutionTime_;
    /// <summary>
    /// Limits the maximum query execution time in milliseconds.
    /// At this moment, this limitation is not checked when passing one of the sorting stages, as well as merging and finalizing aggregation funictions.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxExecutionTime {
      get { return maxExecutionTime_; }
      set {
        maxExecutionTime_ = value;
      }
    }


    /// <summary>Field number for the "timeout_overflow_mode" field.</summary>
    public const int TimeoutOverflowModeFieldNumber = 31;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode timeoutOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determines the behavior on exceeding [limits](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#restrictions-on-query-complexity) of execution time.
    ///
    /// * **throw**—abort query execution, return an error.
    /// * **break**—stop query execution, return partial result.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode TimeoutOverflowMode {
      get { return timeoutOverflowMode_; }
      set {
        timeoutOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_in_set" field.</summary>
    public const int MaxRowsInSetFieldNumber = 87;
    private static readonly pb::FieldCodec<long?> _single_maxRowsInSet_codec = pb::FieldCodec.ForStructWrapper<long>(698);
    private long? maxRowsInSet_;
    /// <summary>
    /// Limit on the number of rows in the set resulting from the execution of the IN section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsInSet {
      get { return maxRowsInSet_; }
      set {
        maxRowsInSet_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_in_set" field.</summary>
    public const int MaxBytesInSetFieldNumber = 88;
    private static readonly pb::FieldCodec<long?> _single_maxBytesInSet_codec = pb::FieldCodec.ForStructWrapper<long>(706);
    private long? maxBytesInSet_;
    /// <summary>
    /// Limit on the number of bytes in the set resulting from the execution of the IN section.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesInSet {
      get { return maxBytesInSet_; }
      set {
        maxBytesInSet_ = value;
      }
    }


    /// <summary>Field number for the "set_overflow_mode" field.</summary>
    public const int SetOverflowModeFieldNumber = 89;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode setOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determine the behavior on exceeding max_rows_in_set or max_bytes_in_set limit.
    /// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode SetOverflowMode {
      get { return setOverflowMode_; }
      set {
        setOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_rows_in_join" field.</summary>
    public const int MaxRowsInJoinFieldNumber = 90;
    private static readonly pb::FieldCodec<long?> _single_maxRowsInJoin_codec = pb::FieldCodec.ForStructWrapper<long>(722);
    private long? maxRowsInJoin_;
    /// <summary>
    /// Limit on maximum size of the hash table for JOIN, in rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxRowsInJoin {
      get { return maxRowsInJoin_; }
      set {
        maxRowsInJoin_ = value;
      }
    }


    /// <summary>Field number for the "max_bytes_in_join" field.</summary>
    public const int MaxBytesInJoinFieldNumber = 91;
    private static readonly pb::FieldCodec<long?> _single_maxBytesInJoin_codec = pb::FieldCodec.ForStructWrapper<long>(730);
    private long? maxBytesInJoin_;
    /// <summary>
    /// Limit on maximum size of the hash table for JOIN, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxBytesInJoin {
      get { return maxBytesInJoin_; }
      set {
        maxBytesInJoin_ = value;
      }
    }


    /// <summary>Field number for the "join_overflow_mode" field.</summary>
    public const int JoinOverflowModeFieldNumber = 92;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode joinOverflowMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified;
    /// <summary>
    /// Determine the behavior on exceeding max_rows_in_join or max_bytes_in_join limit.
    /// Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode JoinOverflowMode {
      get { return joinOverflowMode_; }
      set {
        joinOverflowMode_ = value;
      }
    }

    /// <summary>Field number for the "max_columns_to_read" field.</summary>
    public const int MaxColumnsToReadFieldNumber = 32;
    private static readonly pb::FieldCodec<long?> _single_maxColumnsToRead_codec = pb::FieldCodec.ForStructWrapper<long>(258);
    private long? maxColumnsToRead_;
    /// <summary>
    /// Limits the maximum number of columns that can be read from a table in a single query.
    /// If the query requires to read more columns to complete, then it will be aborted.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxColumnsToRead {
      get { return maxColumnsToRead_; }
      set {
        maxColumnsToRead_ = value;
      }
    }


    /// <summary>Field number for the "max_temporary_columns" field.</summary>
    public const int MaxTemporaryColumnsFieldNumber = 33;
    private static readonly pb::FieldCodec<long?> _single_maxTemporaryColumns_codec = pb::FieldCodec.ForStructWrapper<long>(266);
    private long? maxTemporaryColumns_;
    /// <summary>
    /// Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxTemporaryColumns {
      get { return maxTemporaryColumns_; }
      set {
        maxTemporaryColumns_ = value;
      }
    }


    /// <summary>Field number for the "max_temporary_non_const_columns" field.</summary>
    public const int MaxTemporaryNonConstColumnsFieldNumber = 34;
    private static readonly pb::FieldCodec<long?> _single_maxTemporaryNonConstColumns_codec = pb::FieldCodec.ForStructWrapper<long>(274);
    private long? maxTemporaryNonConstColumns_;
    /// <summary>
    /// Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
    ///
    /// Minimal value and default value: **0**, no limitation is set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxTemporaryNonConstColumns {
      get { return maxTemporaryNonConstColumns_; }
      set {
        maxTemporaryNonConstColumns_ = value;
      }
    }


    /// <summary>Field number for the "max_query_size" field.</summary>
    public const int MaxQuerySizeFieldNumber = 35;
    private static readonly pb::FieldCodec<long?> _single_maxQuerySize_codec = pb::FieldCodec.ForStructWrapper<long>(282);
    private long? maxQuerySize_;
    /// <summary>
    /// Limits the size of the part of a query that can be transferred to RAM for parsing with the SQL parser, in bytes.
    ///
    /// Value must be greater than **0** (default: **262144**).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_query_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxQuerySize {
      get { return maxQuerySize_; }
      set {
        maxQuerySize_ = value;
      }
    }


    /// <summary>Field number for the "max_ast_depth" field.</summary>
    public const int MaxAstDepthFieldNumber = 36;
    private static readonly pb::FieldCodec<long?> _single_maxAstDepth_codec = pb::FieldCodec.ForStructWrapper<long>(290);
    private long? maxAstDepth_;
    /// <summary>
    /// Limits the maximum depth of query syntax tree.
    ///
    /// Executing a big and complex query may result in building a syntax tree of enormous depth.
    /// By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
    ///
    /// For example, the **SELECT *** query may result in more complex and deeper syntax tree, compared to the **SELECT ... WHERE ...** query, containing constraints and conditions, in the most cases.
    /// A user can be forced to construct more optimized queries, if this setting is used.
    ///
    /// Value must be greater than **0** (default: **1000**).
    /// If a too small value is set, it may render ClickHouse unable to execute even simple queries.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#max-ast-depth).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxAstDepth {
      get { return maxAstDepth_; }
      set {
        maxAstDepth_ = value;
      }
    }


    /// <summary>Field number for the "max_ast_elements" field.</summary>
    public const int MaxAstElementsFieldNumber = 37;
    private static readonly pb::FieldCodec<long?> _single_maxAstElements_codec = pb::FieldCodec.ForStructWrapper<long>(298);
    private long? maxAstElements_;
    /// <summary>
    /// Limits the maximum size of query syntax tree in number of nodes.
    ///
    /// Executing a big and complex query may result in building a syntax tree of enormous size.
    /// By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
    ///
    /// Value must be greater than **0** (default: **50000**).
    /// If a too small value is set, it may render ClickHouse unable to execute even simple queries.
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/query-complexity/#max-ast-elements).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxAstElements {
      get { return maxAstElements_; }
      set {
        maxAstElements_ = value;
      }
    }


    /// <summary>Field number for the "max_expanded_ast_elements" field.</summary>
    public const int MaxExpandedAstElementsFieldNumber = 38;
    private static readonly pb::FieldCodec<long?> _single_maxExpandedAstElements_codec = pb::FieldCodec.ForStructWrapper<long>(306);
    private long? maxExpandedAstElements_;
    /// <summary>
    /// Limits the maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk values.
    ///
    /// Executing a big and complex query may result in building a syntax tree of enormous size.
    /// By using this setting, you can prohibit execution of over-sized or non-optimized queries for huge tables.
    ///
    /// Value must be greater than **0** (default: **500000**).
    /// If a too small value is set, it may render ClickHouse unable to execute even simple queries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxExpandedAstElements {
      get { return maxExpandedAstElements_; }
      set {
        maxExpandedAstElements_ = value;
      }
    }


    /// <summary>Field number for the "min_execution_speed" field.</summary>
    public const int MinExecutionSpeedFieldNumber = 84;
    private static readonly pb::FieldCodec<long?> _single_minExecutionSpeed_codec = pb::FieldCodec.ForStructWrapper<long>(674);
    private long? minExecutionSpeed_;
    /// <summary>
    /// Minimal execution speed in rows per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinExecutionSpeed {
      get { return minExecutionSpeed_; }
      set {
        minExecutionSpeed_ = value;
      }
    }


    /// <summary>Field number for the "min_execution_speed_bytes" field.</summary>
    public const int MinExecutionSpeedBytesFieldNumber = 85;
    private static readonly pb::FieldCodec<long?> _single_minExecutionSpeedBytes_codec = pb::FieldCodec.ForStructWrapper<long>(682);
    private long? minExecutionSpeedBytes_;
    /// <summary>
    /// Minimal execution speed in bytes per second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MinExecutionSpeedBytes {
      get { return minExecutionSpeedBytes_; }
      set {
        minExecutionSpeedBytes_ = value;
      }
    }


    /// <summary>Field number for the "count_distinct_implementation" field.</summary>
    public const int CountDistinctImplementationFieldNumber = 86;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation countDistinctImplementation_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation.Unspecified;
    /// <summary>
    /// Aggregate function to use for implementation of count(DISTINCT ...).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation CountDistinctImplementation {
      get { return countDistinctImplementation_; }
      set {
        countDistinctImplementation_ = value;
      }
    }

    /// <summary>Field number for the "input_format_values_interpret_expressions" field.</summary>
    public const int InputFormatValuesInterpretExpressionsFieldNumber = 61;
    private static readonly pb::FieldCodec<bool?> _single_inputFormatValuesInterpretExpressions_codec = pb::FieldCodec.ForStructWrapper<bool>(490);
    private bool? inputFormatValuesInterpretExpressions_;
    /// <summary>
    /// Enables or disables SQL parser if the fast stream parser cannot parse the data.
    ///
    /// Enable this setting, if the data that you want to insert into a table contains SQL expressions.
    ///
    /// For example, the stream parser is unable to parse a value that contains **now()** expression; therefore an **INSERT** query for this value will fail and no data will be inserted into a table.
    /// With enabled SQL parser, this expression is parsed correctly: the **now()** expression will be parsed as SQL function, interpreted, and the current date and time will be inserted into the table as a result.
    ///
    /// This setting has effect only if you use [Values](https://clickhouse.tech/docs/en/interfaces/formats/#data-format-values) format when inserting data.
    ///
    /// Default value: **true** (SQL parser is enabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/operations/settings/settings/#settings-input_format_values_interpret_expressions).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? InputFormatValuesInterpretExpressions {
      get { return inputFormatValuesInterpretExpressions_; }
      set {
        inputFormatValuesInterpretExpressions_ = value;
      }
    }


    /// <summary>Field number for the "input_format_defaults_for_omitted_fields" field.</summary>
    public const int InputFormatDefaultsForOmittedFieldsFieldNumber = 62;
    private static readonly pb::FieldCodec<bool?> _single_inputFormatDefaultsForOmittedFields_codec = pb::FieldCodec.ForStructWrapper<bool>(498);
    private bool? inputFormatDefaultsForOmittedFields_;
    /// <summary>
    /// Enables or disables replacing omitted input values with default values of the respective columns when performing **INSERT** queries.
    ///
    /// Default value: **true** (replacing is enabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? InputFormatDefaultsForOmittedFields {
      get { return inputFormatDefaultsForOmittedFields_; }
      set {
        inputFormatDefaultsForOmittedFields_ = value;
      }
    }


    /// <summary>Field number for the "output_format_json_quote_64bit_integers" field.</summary>
    public const int OutputFormatJsonQuote64BitIntegersFieldNumber = 63;
    private static readonly pb::FieldCodec<bool?> _single_outputFormatJsonQuote64BitIntegers_codec = pb::FieldCodec.ForStructWrapper<bool>(506);
    private bool? outputFormatJsonQuote64BitIntegers_;
    /// <summary>
    /// Enables quoting of 64-bit integers in JSON output format.
    ///
    /// If this setting is enabled, then 64-bit integers (**UInt64** and **Int64**) will be quoted when written to JSON output in order to maintain compatibility with the most of the JavaScript engines.
    /// Otherwise, such integers will not be quoted.
    ///
    /// Default value: **false** (quoting 64-bit integers is disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OutputFormatJsonQuote64BitIntegers {
      get { return outputFormatJsonQuote64BitIntegers_; }
      set {
        outputFormatJsonQuote64BitIntegers_ = value;
      }
    }


    /// <summary>Field number for the "output_format_json_quote_denormals" field.</summary>
    public const int OutputFormatJsonQuoteDenormalsFieldNumber = 64;
    private static readonly pb::FieldCodec<bool?> _single_outputFormatJsonQuoteDenormals_codec = pb::FieldCodec.ForStructWrapper<bool>(514);
    private bool? outputFormatJsonQuoteDenormals_;
    /// <summary>
    /// Enables special floating-point values (**+nan**, **-nan**, **+inf** and **-inf**) in JSON output format.
    ///
    /// Default value: **false** (special values do not present in output).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? OutputFormatJsonQuoteDenormals {
      get { return outputFormatJsonQuoteDenormals_; }
      set {
        outputFormatJsonQuoteDenormals_ = value;
      }
    }


    /// <summary>Field number for the "low_cardinality_allow_in_native_format" field.</summary>
    public const int LowCardinalityAllowInNativeFormatFieldNumber = 78;
    private static readonly pb::FieldCodec<bool?> _single_lowCardinalityAllowInNativeFormat_codec = pb::FieldCodec.ForStructWrapper<bool>(626);
    private bool? lowCardinalityAllowInNativeFormat_;
    /// <summary>
    /// Determines whether to use LowCardinality type in Native format.
    ///
    /// * **true** (default)—yes, use.
    /// * **false**—convert LowCardinality columns to regular columns when doing **SELECT**, and convert regular columns to LowCardinality when doing **INSERT**.
    ///
    /// LowCardinality columns (aka sparse columns) store data in more effective way, compared to regular columns, by using hash tables.
    /// If data to insert suits this storage format, ClickHouse will place them into LowCardinality column.
    ///
    /// If you use a third-party ClickHouse client that can't work with LowCardinality columns, then this client will not be able to correctly interpret the result of the query that asks for data stored in LowCardinality column.
    /// Disable this setting to convert LowCardinality column to regular column when creating the result, so such clients will be able to process the result.
    ///
    /// Official ClickHouse client works with LowCardinality columns out-of-the-box.
    ///
    /// Default value: **true** (LowCardinality columns are used in Native format).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? LowCardinalityAllowInNativeFormat {
      get { return lowCardinalityAllowInNativeFormat_; }
      set {
        lowCardinalityAllowInNativeFormat_ = value;
      }
    }


    /// <summary>Field number for the "empty_result_for_aggregation_by_empty_set" field.</summary>
    public const int EmptyResultForAggregationByEmptySetFieldNumber = 79;
    private static readonly pb::FieldCodec<bool?> _single_emptyResultForAggregationByEmptySet_codec = pb::FieldCodec.ForStructWrapper<bool>(634);
    private bool? emptyResultForAggregationByEmptySet_;
    /// <summary>
    /// Enables returning of empty result when aggregating without keys (with **GROUP BY** operation absent) on empty set (e.g., **SELECT count(*) FROM table WHERE 0**).
    ///
    /// * **true**—ClickHouse will return an empty result for such queries.
    /// * **false** (default)—ClickHouse will return a single-line result consisting of **NULL** values for aggregation functions, in accordance with SQL standard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EmptyResultForAggregationByEmptySet {
      get { return emptyResultForAggregationByEmptySet_; }
      set {
        emptyResultForAggregationByEmptySet_ = value;
      }
    }


    /// <summary>Field number for the "http_connection_timeout" field.</summary>
    public const int HttpConnectionTimeoutFieldNumber = 65;
    private static readonly pb::FieldCodec<long?> _single_httpConnectionTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(522);
    private long? httpConnectionTimeout_;
    /// <summary>
    /// HTTP connection timeout, in milliseconds.
    ///
    /// Value must be greater than **0** (default: **1000**, 1 second).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HttpConnectionTimeout {
      get { return httpConnectionTimeout_; }
      set {
        httpConnectionTimeout_ = value;
      }
    }


    /// <summary>Field number for the "http_receive_timeout" field.</summary>
    public const int HttpReceiveTimeoutFieldNumber = 66;
    private static readonly pb::FieldCodec<long?> _single_httpReceiveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(530);
    private long? httpReceiveTimeout_;
    /// <summary>
    /// HTTP receive timeout, in milliseconds.
    ///
    /// Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HttpReceiveTimeout {
      get { return httpReceiveTimeout_; }
      set {
        httpReceiveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "http_send_timeout" field.</summary>
    public const int HttpSendTimeoutFieldNumber = 67;
    private static readonly pb::FieldCodec<long?> _single_httpSendTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(538);
    private long? httpSendTimeout_;
    /// <summary>
    /// HTTP send timeout, in milliseconds.
    ///
    /// Value must be greater than **0** (default: **1800000**, 1800 seconds, 30 minutes).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HttpSendTimeout {
      get { return httpSendTimeout_; }
      set {
        httpSendTimeout_ = value;
      }
    }


    /// <summary>Field number for the "enable_http_compression" field.</summary>
    public const int EnableHttpCompressionFieldNumber = 68;
    private static readonly pb::FieldCodec<bool?> _single_enableHttpCompression_codec = pb::FieldCodec.ForStructWrapper<bool>(546);
    private bool? enableHttpCompression_;
    /// <summary>
    /// Enables or disables data compression in HTTP responses.
    ///
    /// By default, ClickHouse stores data compressed. When executing a query, its result is uncompressed.
    /// Use this setting to command ClickHouse to compress the result when sending it via HTTP.
    ///
    /// Enable this setting and add the **Accept-Encoding: &lt;compression method>** HTTP header in a HTTP request to force compression of HTTP response from ClickHouse.
    ///
    /// ClickHouse support the following compression methods: **gzip**, **br** and **deflate**.
    ///
    /// Default value: **false** (compression is disabled).
    ///
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.tech/docs/en/interfaces/http/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? EnableHttpCompression {
      get { return enableHttpCompression_; }
      set {
        enableHttpCompression_ = value;
      }
    }


    /// <summary>Field number for the "send_progress_in_http_headers" field.</summary>
    public const int SendProgressInHttpHeadersFieldNumber = 69;
    private static readonly pb::FieldCodec<bool?> _single_sendProgressInHttpHeaders_codec = pb::FieldCodec.ForStructWrapper<bool>(554);
    private bool? sendProgressInHttpHeaders_;
    /// <summary>
    /// Enables progress notifications using **X-ClickHouse-Progress** HTTP header.
    ///
    /// Default value: **false** (notifications disabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SendProgressInHttpHeaders {
      get { return sendProgressInHttpHeaders_; }
      set {
        sendProgressInHttpHeaders_ = value;
      }
    }


    /// <summary>Field number for the "http_headers_progress_interval" field.</summary>
    public const int HttpHeadersProgressIntervalFieldNumber = 70;
    private static readonly pb::FieldCodec<long?> _single_httpHeadersProgressInterval_codec = pb::FieldCodec.ForStructWrapper<long>(562);
    private long? httpHeadersProgressInterval_;
    /// <summary>
    /// Minimum interval between progress notifications with **X-ClickHouse-Progress** HTTP header, in milliseconds.
    ///
    /// Value must be greater than **0** (default: **100**).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? HttpHeadersProgressInterval {
      get { return httpHeadersProgressInterval_; }
      set {
        httpHeadersProgressInterval_ = value;
      }
    }


    /// <summary>Field number for the "add_http_cors_header" field.</summary>
    public const int AddHttpCorsHeaderFieldNumber = 71;
    private static readonly pb::FieldCodec<bool?> _single_addHttpCorsHeader_codec = pb::FieldCodec.ForStructWrapper<bool>(570);
    private bool? addHttpCorsHeader_;
    /// <summary>
    /// Adds CORS header in HTTP responses.
    ///
    /// Default value: **false** (header is not added).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AddHttpCorsHeader {
      get { return addHttpCorsHeader_; }
      set {
        addHttpCorsHeader_ = value;
      }
    }


    /// <summary>Field number for the "quota_mode" field.</summary>
    public const int QuotaModeFieldNumber = 80;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode quotaMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode.Unspecified;
    /// <summary>
    /// Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode QuotaMode {
      get { return quotaMode_; }
      set {
        quotaMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Readonly != other.Readonly) return false;
      if (AllowDdl != other.AllowDdl) return false;
      if (InsertQuorum != other.InsertQuorum) return false;
      if (ConnectTimeout != other.ConnectTimeout) return false;
      if (ReceiveTimeout != other.ReceiveTimeout) return false;
      if (SendTimeout != other.SendTimeout) return false;
      if (InsertQuorumTimeout != other.InsertQuorumTimeout) return false;
      if (SelectSequentialConsistency != other.SelectSequentialConsistency) return false;
      if (MaxReplicaDelayForDistributedQueries != other.MaxReplicaDelayForDistributedQueries) return false;
      if (FallbackToStaleReplicasForDistributedQueries != other.FallbackToStaleReplicasForDistributedQueries) return false;
      if (ReplicationAlterPartitionsSync != other.ReplicationAlterPartitionsSync) return false;
      if (DistributedProductMode != other.DistributedProductMode) return false;
      if (DistributedAggregationMemoryEfficient != other.DistributedAggregationMemoryEfficient) return false;
      if (DistributedDdlTaskTimeout != other.DistributedDdlTaskTimeout) return false;
      if (SkipUnavailableShards != other.SkipUnavailableShards) return false;
      if (Compile != other.Compile) return false;
      if (MinCountToCompile != other.MinCountToCompile) return false;
      if (CompileExpressions != other.CompileExpressions) return false;
      if (MinCountToCompileExpression != other.MinCountToCompileExpression) return false;
      if (MaxBlockSize != other.MaxBlockSize) return false;
      if (MinInsertBlockSizeRows != other.MinInsertBlockSizeRows) return false;
      if (MinInsertBlockSizeBytes != other.MinInsertBlockSizeBytes) return false;
      if (MaxInsertBlockSize != other.MaxInsertBlockSize) return false;
      if (MinBytesToUseDirectIo != other.MinBytesToUseDirectIo) return false;
      if (UseUncompressedCache != other.UseUncompressedCache) return false;
      if (MergeTreeMaxRowsToUseCache != other.MergeTreeMaxRowsToUseCache) return false;
      if (MergeTreeMaxBytesToUseCache != other.MergeTreeMaxBytesToUseCache) return false;
      if (MergeTreeMinRowsForConcurrentRead != other.MergeTreeMinRowsForConcurrentRead) return false;
      if (MergeTreeMinBytesForConcurrentRead != other.MergeTreeMinBytesForConcurrentRead) return false;
      if (MaxBytesBeforeExternalGroupBy != other.MaxBytesBeforeExternalGroupBy) return false;
      if (MaxBytesBeforeExternalSort != other.MaxBytesBeforeExternalSort) return false;
      if (GroupByTwoLevelThreshold != other.GroupByTwoLevelThreshold) return false;
      if (GroupByTwoLevelThresholdBytes != other.GroupByTwoLevelThresholdBytes) return false;
      if (Priority != other.Priority) return false;
      if (MaxThreads != other.MaxThreads) return false;
      if (MaxMemoryUsage != other.MaxMemoryUsage) return false;
      if (MaxMemoryUsageForUser != other.MaxMemoryUsageForUser) return false;
      if (MaxNetworkBandwidth != other.MaxNetworkBandwidth) return false;
      if (MaxNetworkBandwidthForUser != other.MaxNetworkBandwidthForUser) return false;
      if (ForceIndexByDate != other.ForceIndexByDate) return false;
      if (ForcePrimaryKey != other.ForcePrimaryKey) return false;
      if (MaxRowsToRead != other.MaxRowsToRead) return false;
      if (MaxBytesToRead != other.MaxBytesToRead) return false;
      if (ReadOverflowMode != other.ReadOverflowMode) return false;
      if (MaxRowsToGroupBy != other.MaxRowsToGroupBy) return false;
      if (GroupByOverflowMode != other.GroupByOverflowMode) return false;
      if (MaxRowsToSort != other.MaxRowsToSort) return false;
      if (MaxBytesToSort != other.MaxBytesToSort) return false;
      if (SortOverflowMode != other.SortOverflowMode) return false;
      if (MaxResultRows != other.MaxResultRows) return false;
      if (MaxResultBytes != other.MaxResultBytes) return false;
      if (ResultOverflowMode != other.ResultOverflowMode) return false;
      if (MaxRowsInDistinct != other.MaxRowsInDistinct) return false;
      if (MaxBytesInDistinct != other.MaxBytesInDistinct) return false;
      if (DistinctOverflowMode != other.DistinctOverflowMode) return false;
      if (MaxRowsToTransfer != other.MaxRowsToTransfer) return false;
      if (MaxBytesToTransfer != other.MaxBytesToTransfer) return false;
      if (TransferOverflowMode != other.TransferOverflowMode) return false;
      if (MaxExecutionTime != other.MaxExecutionTime) return false;
      if (TimeoutOverflowMode != other.TimeoutOverflowMode) return false;
      if (MaxRowsInSet != other.MaxRowsInSet) return false;
      if (MaxBytesInSet != other.MaxBytesInSet) return false;
      if (SetOverflowMode != other.SetOverflowMode) return false;
      if (MaxRowsInJoin != other.MaxRowsInJoin) return false;
      if (MaxBytesInJoin != other.MaxBytesInJoin) return false;
      if (JoinOverflowMode != other.JoinOverflowMode) return false;
      if (MaxColumnsToRead != other.MaxColumnsToRead) return false;
      if (MaxTemporaryColumns != other.MaxTemporaryColumns) return false;
      if (MaxTemporaryNonConstColumns != other.MaxTemporaryNonConstColumns) return false;
      if (MaxQuerySize != other.MaxQuerySize) return false;
      if (MaxAstDepth != other.MaxAstDepth) return false;
      if (MaxAstElements != other.MaxAstElements) return false;
      if (MaxExpandedAstElements != other.MaxExpandedAstElements) return false;
      if (MinExecutionSpeed != other.MinExecutionSpeed) return false;
      if (MinExecutionSpeedBytes != other.MinExecutionSpeedBytes) return false;
      if (CountDistinctImplementation != other.CountDistinctImplementation) return false;
      if (InputFormatValuesInterpretExpressions != other.InputFormatValuesInterpretExpressions) return false;
      if (InputFormatDefaultsForOmittedFields != other.InputFormatDefaultsForOmittedFields) return false;
      if (OutputFormatJsonQuote64BitIntegers != other.OutputFormatJsonQuote64BitIntegers) return false;
      if (OutputFormatJsonQuoteDenormals != other.OutputFormatJsonQuoteDenormals) return false;
      if (LowCardinalityAllowInNativeFormat != other.LowCardinalityAllowInNativeFormat) return false;
      if (EmptyResultForAggregationByEmptySet != other.EmptyResultForAggregationByEmptySet) return false;
      if (HttpConnectionTimeout != other.HttpConnectionTimeout) return false;
      if (HttpReceiveTimeout != other.HttpReceiveTimeout) return false;
      if (HttpSendTimeout != other.HttpSendTimeout) return false;
      if (EnableHttpCompression != other.EnableHttpCompression) return false;
      if (SendProgressInHttpHeaders != other.SendProgressInHttpHeaders) return false;
      if (HttpHeadersProgressInterval != other.HttpHeadersProgressInterval) return false;
      if (AddHttpCorsHeader != other.AddHttpCorsHeader) return false;
      if (QuotaMode != other.QuotaMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (readonly_ != null) hash ^= Readonly.GetHashCode();
      if (allowDdl_ != null) hash ^= AllowDdl.GetHashCode();
      if (insertQuorum_ != null) hash ^= InsertQuorum.GetHashCode();
      if (connectTimeout_ != null) hash ^= ConnectTimeout.GetHashCode();
      if (receiveTimeout_ != null) hash ^= ReceiveTimeout.GetHashCode();
      if (sendTimeout_ != null) hash ^= SendTimeout.GetHashCode();
      if (insertQuorumTimeout_ != null) hash ^= InsertQuorumTimeout.GetHashCode();
      if (selectSequentialConsistency_ != null) hash ^= SelectSequentialConsistency.GetHashCode();
      if (maxReplicaDelayForDistributedQueries_ != null) hash ^= MaxReplicaDelayForDistributedQueries.GetHashCode();
      if (fallbackToStaleReplicasForDistributedQueries_ != null) hash ^= FallbackToStaleReplicasForDistributedQueries.GetHashCode();
      if (replicationAlterPartitionsSync_ != null) hash ^= ReplicationAlterPartitionsSync.GetHashCode();
      if (DistributedProductMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode.Unspecified) hash ^= DistributedProductMode.GetHashCode();
      if (distributedAggregationMemoryEfficient_ != null) hash ^= DistributedAggregationMemoryEfficient.GetHashCode();
      if (distributedDdlTaskTimeout_ != null) hash ^= DistributedDdlTaskTimeout.GetHashCode();
      if (skipUnavailableShards_ != null) hash ^= SkipUnavailableShards.GetHashCode();
      if (compile_ != null) hash ^= Compile.GetHashCode();
      if (minCountToCompile_ != null) hash ^= MinCountToCompile.GetHashCode();
      if (compileExpressions_ != null) hash ^= CompileExpressions.GetHashCode();
      if (minCountToCompileExpression_ != null) hash ^= MinCountToCompileExpression.GetHashCode();
      if (maxBlockSize_ != null) hash ^= MaxBlockSize.GetHashCode();
      if (minInsertBlockSizeRows_ != null) hash ^= MinInsertBlockSizeRows.GetHashCode();
      if (minInsertBlockSizeBytes_ != null) hash ^= MinInsertBlockSizeBytes.GetHashCode();
      if (maxInsertBlockSize_ != null) hash ^= MaxInsertBlockSize.GetHashCode();
      if (minBytesToUseDirectIo_ != null) hash ^= MinBytesToUseDirectIo.GetHashCode();
      if (useUncompressedCache_ != null) hash ^= UseUncompressedCache.GetHashCode();
      if (mergeTreeMaxRowsToUseCache_ != null) hash ^= MergeTreeMaxRowsToUseCache.GetHashCode();
      if (mergeTreeMaxBytesToUseCache_ != null) hash ^= MergeTreeMaxBytesToUseCache.GetHashCode();
      if (mergeTreeMinRowsForConcurrentRead_ != null) hash ^= MergeTreeMinRowsForConcurrentRead.GetHashCode();
      if (mergeTreeMinBytesForConcurrentRead_ != null) hash ^= MergeTreeMinBytesForConcurrentRead.GetHashCode();
      if (maxBytesBeforeExternalGroupBy_ != null) hash ^= MaxBytesBeforeExternalGroupBy.GetHashCode();
      if (maxBytesBeforeExternalSort_ != null) hash ^= MaxBytesBeforeExternalSort.GetHashCode();
      if (groupByTwoLevelThreshold_ != null) hash ^= GroupByTwoLevelThreshold.GetHashCode();
      if (groupByTwoLevelThresholdBytes_ != null) hash ^= GroupByTwoLevelThresholdBytes.GetHashCode();
      if (priority_ != null) hash ^= Priority.GetHashCode();
      if (maxThreads_ != null) hash ^= MaxThreads.GetHashCode();
      if (maxMemoryUsage_ != null) hash ^= MaxMemoryUsage.GetHashCode();
      if (maxMemoryUsageForUser_ != null) hash ^= MaxMemoryUsageForUser.GetHashCode();
      if (maxNetworkBandwidth_ != null) hash ^= MaxNetworkBandwidth.GetHashCode();
      if (maxNetworkBandwidthForUser_ != null) hash ^= MaxNetworkBandwidthForUser.GetHashCode();
      if (forceIndexByDate_ != null) hash ^= ForceIndexByDate.GetHashCode();
      if (forcePrimaryKey_ != null) hash ^= ForcePrimaryKey.GetHashCode();
      if (maxRowsToRead_ != null) hash ^= MaxRowsToRead.GetHashCode();
      if (maxBytesToRead_ != null) hash ^= MaxBytesToRead.GetHashCode();
      if (ReadOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= ReadOverflowMode.GetHashCode();
      if (maxRowsToGroupBy_ != null) hash ^= MaxRowsToGroupBy.GetHashCode();
      if (GroupByOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode.Unspecified) hash ^= GroupByOverflowMode.GetHashCode();
      if (maxRowsToSort_ != null) hash ^= MaxRowsToSort.GetHashCode();
      if (maxBytesToSort_ != null) hash ^= MaxBytesToSort.GetHashCode();
      if (SortOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= SortOverflowMode.GetHashCode();
      if (maxResultRows_ != null) hash ^= MaxResultRows.GetHashCode();
      if (maxResultBytes_ != null) hash ^= MaxResultBytes.GetHashCode();
      if (ResultOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= ResultOverflowMode.GetHashCode();
      if (maxRowsInDistinct_ != null) hash ^= MaxRowsInDistinct.GetHashCode();
      if (maxBytesInDistinct_ != null) hash ^= MaxBytesInDistinct.GetHashCode();
      if (DistinctOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= DistinctOverflowMode.GetHashCode();
      if (maxRowsToTransfer_ != null) hash ^= MaxRowsToTransfer.GetHashCode();
      if (maxBytesToTransfer_ != null) hash ^= MaxBytesToTransfer.GetHashCode();
      if (TransferOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= TransferOverflowMode.GetHashCode();
      if (maxExecutionTime_ != null) hash ^= MaxExecutionTime.GetHashCode();
      if (TimeoutOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= TimeoutOverflowMode.GetHashCode();
      if (maxRowsInSet_ != null) hash ^= MaxRowsInSet.GetHashCode();
      if (maxBytesInSet_ != null) hash ^= MaxBytesInSet.GetHashCode();
      if (SetOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= SetOverflowMode.GetHashCode();
      if (maxRowsInJoin_ != null) hash ^= MaxRowsInJoin.GetHashCode();
      if (maxBytesInJoin_ != null) hash ^= MaxBytesInJoin.GetHashCode();
      if (JoinOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) hash ^= JoinOverflowMode.GetHashCode();
      if (maxColumnsToRead_ != null) hash ^= MaxColumnsToRead.GetHashCode();
      if (maxTemporaryColumns_ != null) hash ^= MaxTemporaryColumns.GetHashCode();
      if (maxTemporaryNonConstColumns_ != null) hash ^= MaxTemporaryNonConstColumns.GetHashCode();
      if (maxQuerySize_ != null) hash ^= MaxQuerySize.GetHashCode();
      if (maxAstDepth_ != null) hash ^= MaxAstDepth.GetHashCode();
      if (maxAstElements_ != null) hash ^= MaxAstElements.GetHashCode();
      if (maxExpandedAstElements_ != null) hash ^= MaxExpandedAstElements.GetHashCode();
      if (minExecutionSpeed_ != null) hash ^= MinExecutionSpeed.GetHashCode();
      if (minExecutionSpeedBytes_ != null) hash ^= MinExecutionSpeedBytes.GetHashCode();
      if (CountDistinctImplementation != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation.Unspecified) hash ^= CountDistinctImplementation.GetHashCode();
      if (inputFormatValuesInterpretExpressions_ != null) hash ^= InputFormatValuesInterpretExpressions.GetHashCode();
      if (inputFormatDefaultsForOmittedFields_ != null) hash ^= InputFormatDefaultsForOmittedFields.GetHashCode();
      if (outputFormatJsonQuote64BitIntegers_ != null) hash ^= OutputFormatJsonQuote64BitIntegers.GetHashCode();
      if (outputFormatJsonQuoteDenormals_ != null) hash ^= OutputFormatJsonQuoteDenormals.GetHashCode();
      if (lowCardinalityAllowInNativeFormat_ != null) hash ^= LowCardinalityAllowInNativeFormat.GetHashCode();
      if (emptyResultForAggregationByEmptySet_ != null) hash ^= EmptyResultForAggregationByEmptySet.GetHashCode();
      if (httpConnectionTimeout_ != null) hash ^= HttpConnectionTimeout.GetHashCode();
      if (httpReceiveTimeout_ != null) hash ^= HttpReceiveTimeout.GetHashCode();
      if (httpSendTimeout_ != null) hash ^= HttpSendTimeout.GetHashCode();
      if (enableHttpCompression_ != null) hash ^= EnableHttpCompression.GetHashCode();
      if (sendProgressInHttpHeaders_ != null) hash ^= SendProgressInHttpHeaders.GetHashCode();
      if (httpHeadersProgressInterval_ != null) hash ^= HttpHeadersProgressInterval.GetHashCode();
      if (addHttpCorsHeader_ != null) hash ^= AddHttpCorsHeader.GetHashCode();
      if (QuotaMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode.Unspecified) hash ^= QuotaMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (readonly_ != null) {
        _single_readonly_codec.WriteTagAndValue(output, Readonly);
      }
      if (allowDdl_ != null) {
        _single_allowDdl_codec.WriteTagAndValue(output, AllowDdl);
      }
      if (insertQuorum_ != null) {
        _single_insertQuorum_codec.WriteTagAndValue(output, InsertQuorum);
      }
      if (insertQuorumTimeout_ != null) {
        _single_insertQuorumTimeout_codec.WriteTagAndValue(output, InsertQuorumTimeout);
      }
      if (selectSequentialConsistency_ != null) {
        _single_selectSequentialConsistency_codec.WriteTagAndValue(output, SelectSequentialConsistency);
      }
      if (maxReplicaDelayForDistributedQueries_ != null) {
        _single_maxReplicaDelayForDistributedQueries_codec.WriteTagAndValue(output, MaxReplicaDelayForDistributedQueries);
      }
      if (fallbackToStaleReplicasForDistributedQueries_ != null) {
        _single_fallbackToStaleReplicasForDistributedQueries_codec.WriteTagAndValue(output, FallbackToStaleReplicasForDistributedQueries);
      }
      if (maxThreads_ != null) {
        _single_maxThreads_codec.WriteTagAndValue(output, MaxThreads);
      }
      if (maxBlockSize_ != null) {
        _single_maxBlockSize_codec.WriteTagAndValue(output, MaxBlockSize);
      }
      if (maxInsertBlockSize_ != null) {
        _single_maxInsertBlockSize_codec.WriteTagAndValue(output, MaxInsertBlockSize);
      }
      if (maxMemoryUsage_ != null) {
        _single_maxMemoryUsage_codec.WriteTagAndValue(output, MaxMemoryUsage);
      }
      if (maxMemoryUsageForUser_ != null) {
        _single_maxMemoryUsageForUser_codec.WriteTagAndValue(output, MaxMemoryUsageForUser);
      }
      if (maxRowsToRead_ != null) {
        _single_maxRowsToRead_codec.WriteTagAndValue(output, MaxRowsToRead);
      }
      if (maxBytesToRead_ != null) {
        _single_maxBytesToRead_codec.WriteTagAndValue(output, MaxBytesToRead);
      }
      if (ReadOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ReadOverflowMode);
      }
      if (maxRowsToGroupBy_ != null) {
        _single_maxRowsToGroupBy_codec.WriteTagAndValue(output, MaxRowsToGroupBy);
      }
      if (GroupByOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode.Unspecified) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) GroupByOverflowMode);
      }
      if (maxRowsToSort_ != null) {
        _single_maxRowsToSort_codec.WriteTagAndValue(output, MaxRowsToSort);
      }
      if (maxBytesToSort_ != null) {
        _single_maxBytesToSort_codec.WriteTagAndValue(output, MaxBytesToSort);
      }
      if (SortOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(160, 1);
        output.WriteEnum((int) SortOverflowMode);
      }
      if (maxResultRows_ != null) {
        _single_maxResultRows_codec.WriteTagAndValue(output, MaxResultRows);
      }
      if (maxResultBytes_ != null) {
        _single_maxResultBytes_codec.WriteTagAndValue(output, MaxResultBytes);
      }
      if (ResultOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(184, 1);
        output.WriteEnum((int) ResultOverflowMode);
      }
      if (maxRowsInDistinct_ != null) {
        _single_maxRowsInDistinct_codec.WriteTagAndValue(output, MaxRowsInDistinct);
      }
      if (maxBytesInDistinct_ != null) {
        _single_maxBytesInDistinct_codec.WriteTagAndValue(output, MaxBytesInDistinct);
      }
      if (DistinctOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) DistinctOverflowMode);
      }
      if (maxRowsToTransfer_ != null) {
        _single_maxRowsToTransfer_codec.WriteTagAndValue(output, MaxRowsToTransfer);
      }
      if (maxBytesToTransfer_ != null) {
        _single_maxBytesToTransfer_codec.WriteTagAndValue(output, MaxBytesToTransfer);
      }
      if (TransferOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) TransferOverflowMode);
      }
      if (maxExecutionTime_ != null) {
        _single_maxExecutionTime_codec.WriteTagAndValue(output, MaxExecutionTime);
      }
      if (TimeoutOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) TimeoutOverflowMode);
      }
      if (maxColumnsToRead_ != null) {
        _single_maxColumnsToRead_codec.WriteTagAndValue(output, MaxColumnsToRead);
      }
      if (maxTemporaryColumns_ != null) {
        _single_maxTemporaryColumns_codec.WriteTagAndValue(output, MaxTemporaryColumns);
      }
      if (maxTemporaryNonConstColumns_ != null) {
        _single_maxTemporaryNonConstColumns_codec.WriteTagAndValue(output, MaxTemporaryNonConstColumns);
      }
      if (maxQuerySize_ != null) {
        _single_maxQuerySize_codec.WriteTagAndValue(output, MaxQuerySize);
      }
      if (maxAstDepth_ != null) {
        _single_maxAstDepth_codec.WriteTagAndValue(output, MaxAstDepth);
      }
      if (maxAstElements_ != null) {
        _single_maxAstElements_codec.WriteTagAndValue(output, MaxAstElements);
      }
      if (maxExpandedAstElements_ != null) {
        _single_maxExpandedAstElements_codec.WriteTagAndValue(output, MaxExpandedAstElements);
      }
      if (connectTimeout_ != null) {
        _single_connectTimeout_codec.WriteTagAndValue(output, ConnectTimeout);
      }
      if (receiveTimeout_ != null) {
        _single_receiveTimeout_codec.WriteTagAndValue(output, ReceiveTimeout);
      }
      if (sendTimeout_ != null) {
        _single_sendTimeout_codec.WriteTagAndValue(output, SendTimeout);
      }
      if (replicationAlterPartitionsSync_ != null) {
        _single_replicationAlterPartitionsSync_codec.WriteTagAndValue(output, ReplicationAlterPartitionsSync);
      }
      if (DistributedProductMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode.Unspecified) {
        output.WriteRawTag(216, 2);
        output.WriteEnum((int) DistributedProductMode);
      }
      if (compile_ != null) {
        _single_compile_codec.WriteTagAndValue(output, Compile);
      }
      if (minCountToCompile_ != null) {
        _single_minCountToCompile_codec.WriteTagAndValue(output, MinCountToCompile);
      }
      if (compileExpressions_ != null) {
        _single_compileExpressions_codec.WriteTagAndValue(output, CompileExpressions);
      }
      if (minCountToCompileExpression_ != null) {
        _single_minCountToCompileExpression_codec.WriteTagAndValue(output, MinCountToCompileExpression);
      }
      if (minInsertBlockSizeRows_ != null) {
        _single_minInsertBlockSizeRows_codec.WriteTagAndValue(output, MinInsertBlockSizeRows);
      }
      if (minInsertBlockSizeBytes_ != null) {
        _single_minInsertBlockSizeBytes_codec.WriteTagAndValue(output, MinInsertBlockSizeBytes);
      }
      if (minBytesToUseDirectIo_ != null) {
        _single_minBytesToUseDirectIo_codec.WriteTagAndValue(output, MinBytesToUseDirectIo);
      }
      if (useUncompressedCache_ != null) {
        _single_useUncompressedCache_codec.WriteTagAndValue(output, UseUncompressedCache);
      }
      if (mergeTreeMaxRowsToUseCache_ != null) {
        _single_mergeTreeMaxRowsToUseCache_codec.WriteTagAndValue(output, MergeTreeMaxRowsToUseCache);
      }
      if (mergeTreeMaxBytesToUseCache_ != null) {
        _single_mergeTreeMaxBytesToUseCache_codec.WriteTagAndValue(output, MergeTreeMaxBytesToUseCache);
      }
      if (mergeTreeMinRowsForConcurrentRead_ != null) {
        _single_mergeTreeMinRowsForConcurrentRead_codec.WriteTagAndValue(output, MergeTreeMinRowsForConcurrentRead);
      }
      if (mergeTreeMinBytesForConcurrentRead_ != null) {
        _single_mergeTreeMinBytesForConcurrentRead_codec.WriteTagAndValue(output, MergeTreeMinBytesForConcurrentRead);
      }
      if (priority_ != null) {
        _single_priority_codec.WriteTagAndValue(output, Priority);
      }
      if (maxNetworkBandwidth_ != null) {
        _single_maxNetworkBandwidth_codec.WriteTagAndValue(output, MaxNetworkBandwidth);
      }
      if (maxNetworkBandwidthForUser_ != null) {
        _single_maxNetworkBandwidthForUser_codec.WriteTagAndValue(output, MaxNetworkBandwidthForUser);
      }
      if (forceIndexByDate_ != null) {
        _single_forceIndexByDate_codec.WriteTagAndValue(output, ForceIndexByDate);
      }
      if (forcePrimaryKey_ != null) {
        _single_forcePrimaryKey_codec.WriteTagAndValue(output, ForcePrimaryKey);
      }
      if (inputFormatValuesInterpretExpressions_ != null) {
        _single_inputFormatValuesInterpretExpressions_codec.WriteTagAndValue(output, InputFormatValuesInterpretExpressions);
      }
      if (inputFormatDefaultsForOmittedFields_ != null) {
        _single_inputFormatDefaultsForOmittedFields_codec.WriteTagAndValue(output, InputFormatDefaultsForOmittedFields);
      }
      if (outputFormatJsonQuote64BitIntegers_ != null) {
        _single_outputFormatJsonQuote64BitIntegers_codec.WriteTagAndValue(output, OutputFormatJsonQuote64BitIntegers);
      }
      if (outputFormatJsonQuoteDenormals_ != null) {
        _single_outputFormatJsonQuoteDenormals_codec.WriteTagAndValue(output, OutputFormatJsonQuoteDenormals);
      }
      if (httpConnectionTimeout_ != null) {
        _single_httpConnectionTimeout_codec.WriteTagAndValue(output, HttpConnectionTimeout);
      }
      if (httpReceiveTimeout_ != null) {
        _single_httpReceiveTimeout_codec.WriteTagAndValue(output, HttpReceiveTimeout);
      }
      if (httpSendTimeout_ != null) {
        _single_httpSendTimeout_codec.WriteTagAndValue(output, HttpSendTimeout);
      }
      if (enableHttpCompression_ != null) {
        _single_enableHttpCompression_codec.WriteTagAndValue(output, EnableHttpCompression);
      }
      if (sendProgressInHttpHeaders_ != null) {
        _single_sendProgressInHttpHeaders_codec.WriteTagAndValue(output, SendProgressInHttpHeaders);
      }
      if (httpHeadersProgressInterval_ != null) {
        _single_httpHeadersProgressInterval_codec.WriteTagAndValue(output, HttpHeadersProgressInterval);
      }
      if (addHttpCorsHeader_ != null) {
        _single_addHttpCorsHeader_codec.WriteTagAndValue(output, AddHttpCorsHeader);
      }
      if (distributedAggregationMemoryEfficient_ != null) {
        _single_distributedAggregationMemoryEfficient_codec.WriteTagAndValue(output, DistributedAggregationMemoryEfficient);
      }
      if (distributedDdlTaskTimeout_ != null) {
        _single_distributedDdlTaskTimeout_codec.WriteTagAndValue(output, DistributedDdlTaskTimeout);
      }
      if (maxBytesBeforeExternalGroupBy_ != null) {
        _single_maxBytesBeforeExternalGroupBy_codec.WriteTagAndValue(output, MaxBytesBeforeExternalGroupBy);
      }
      if (maxBytesBeforeExternalSort_ != null) {
        _single_maxBytesBeforeExternalSort_codec.WriteTagAndValue(output, MaxBytesBeforeExternalSort);
      }
      if (groupByTwoLevelThreshold_ != null) {
        _single_groupByTwoLevelThreshold_codec.WriteTagAndValue(output, GroupByTwoLevelThreshold);
      }
      if (groupByTwoLevelThresholdBytes_ != null) {
        _single_groupByTwoLevelThresholdBytes_codec.WriteTagAndValue(output, GroupByTwoLevelThresholdBytes);
      }
      if (lowCardinalityAllowInNativeFormat_ != null) {
        _single_lowCardinalityAllowInNativeFormat_codec.WriteTagAndValue(output, LowCardinalityAllowInNativeFormat);
      }
      if (emptyResultForAggregationByEmptySet_ != null) {
        _single_emptyResultForAggregationByEmptySet_codec.WriteTagAndValue(output, EmptyResultForAggregationByEmptySet);
      }
      if (QuotaMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode.Unspecified) {
        output.WriteRawTag(128, 5);
        output.WriteEnum((int) QuotaMode);
      }
      if (skipUnavailableShards_ != null) {
        _single_skipUnavailableShards_codec.WriteTagAndValue(output, SkipUnavailableShards);
      }
      if (minExecutionSpeed_ != null) {
        _single_minExecutionSpeed_codec.WriteTagAndValue(output, MinExecutionSpeed);
      }
      if (minExecutionSpeedBytes_ != null) {
        _single_minExecutionSpeedBytes_codec.WriteTagAndValue(output, MinExecutionSpeedBytes);
      }
      if (CountDistinctImplementation != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation.Unspecified) {
        output.WriteRawTag(176, 5);
        output.WriteEnum((int) CountDistinctImplementation);
      }
      if (maxRowsInSet_ != null) {
        _single_maxRowsInSet_codec.WriteTagAndValue(output, MaxRowsInSet);
      }
      if (maxBytesInSet_ != null) {
        _single_maxBytesInSet_codec.WriteTagAndValue(output, MaxBytesInSet);
      }
      if (SetOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(200, 5);
        output.WriteEnum((int) SetOverflowMode);
      }
      if (maxRowsInJoin_ != null) {
        _single_maxRowsInJoin_codec.WriteTagAndValue(output, MaxRowsInJoin);
      }
      if (maxBytesInJoin_ != null) {
        _single_maxBytesInJoin_codec.WriteTagAndValue(output, MaxBytesInJoin);
      }
      if (JoinOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        output.WriteRawTag(224, 5);
        output.WriteEnum((int) JoinOverflowMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (readonly_ != null) {
        size += _single_readonly_codec.CalculateSizeWithTag(Readonly);
      }
      if (allowDdl_ != null) {
        size += _single_allowDdl_codec.CalculateSizeWithTag(AllowDdl);
      }
      if (insertQuorum_ != null) {
        size += _single_insertQuorum_codec.CalculateSizeWithTag(InsertQuorum);
      }
      if (connectTimeout_ != null) {
        size += _single_connectTimeout_codec.CalculateSizeWithTag(ConnectTimeout);
      }
      if (receiveTimeout_ != null) {
        size += _single_receiveTimeout_codec.CalculateSizeWithTag(ReceiveTimeout);
      }
      if (sendTimeout_ != null) {
        size += _single_sendTimeout_codec.CalculateSizeWithTag(SendTimeout);
      }
      if (insertQuorumTimeout_ != null) {
        size += _single_insertQuorumTimeout_codec.CalculateSizeWithTag(InsertQuorumTimeout);
      }
      if (selectSequentialConsistency_ != null) {
        size += _single_selectSequentialConsistency_codec.CalculateSizeWithTag(SelectSequentialConsistency);
      }
      if (maxReplicaDelayForDistributedQueries_ != null) {
        size += _single_maxReplicaDelayForDistributedQueries_codec.CalculateSizeWithTag(MaxReplicaDelayForDistributedQueries);
      }
      if (fallbackToStaleReplicasForDistributedQueries_ != null) {
        size += _single_fallbackToStaleReplicasForDistributedQueries_codec.CalculateSizeWithTag(FallbackToStaleReplicasForDistributedQueries);
      }
      if (replicationAlterPartitionsSync_ != null) {
        size += _single_replicationAlterPartitionsSync_codec.CalculateSizeWithTag(ReplicationAlterPartitionsSync);
      }
      if (DistributedProductMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DistributedProductMode);
      }
      if (distributedAggregationMemoryEfficient_ != null) {
        size += _single_distributedAggregationMemoryEfficient_codec.CalculateSizeWithTag(DistributedAggregationMemoryEfficient);
      }
      if (distributedDdlTaskTimeout_ != null) {
        size += _single_distributedDdlTaskTimeout_codec.CalculateSizeWithTag(DistributedDdlTaskTimeout);
      }
      if (skipUnavailableShards_ != null) {
        size += _single_skipUnavailableShards_codec.CalculateSizeWithTag(SkipUnavailableShards);
      }
      if (compile_ != null) {
        size += _single_compile_codec.CalculateSizeWithTag(Compile);
      }
      if (minCountToCompile_ != null) {
        size += _single_minCountToCompile_codec.CalculateSizeWithTag(MinCountToCompile);
      }
      if (compileExpressions_ != null) {
        size += _single_compileExpressions_codec.CalculateSizeWithTag(CompileExpressions);
      }
      if (minCountToCompileExpression_ != null) {
        size += _single_minCountToCompileExpression_codec.CalculateSizeWithTag(MinCountToCompileExpression);
      }
      if (maxBlockSize_ != null) {
        size += _single_maxBlockSize_codec.CalculateSizeWithTag(MaxBlockSize);
      }
      if (minInsertBlockSizeRows_ != null) {
        size += _single_minInsertBlockSizeRows_codec.CalculateSizeWithTag(MinInsertBlockSizeRows);
      }
      if (minInsertBlockSizeBytes_ != null) {
        size += _single_minInsertBlockSizeBytes_codec.CalculateSizeWithTag(MinInsertBlockSizeBytes);
      }
      if (maxInsertBlockSize_ != null) {
        size += _single_maxInsertBlockSize_codec.CalculateSizeWithTag(MaxInsertBlockSize);
      }
      if (minBytesToUseDirectIo_ != null) {
        size += _single_minBytesToUseDirectIo_codec.CalculateSizeWithTag(MinBytesToUseDirectIo);
      }
      if (useUncompressedCache_ != null) {
        size += _single_useUncompressedCache_codec.CalculateSizeWithTag(UseUncompressedCache);
      }
      if (mergeTreeMaxRowsToUseCache_ != null) {
        size += _single_mergeTreeMaxRowsToUseCache_codec.CalculateSizeWithTag(MergeTreeMaxRowsToUseCache);
      }
      if (mergeTreeMaxBytesToUseCache_ != null) {
        size += _single_mergeTreeMaxBytesToUseCache_codec.CalculateSizeWithTag(MergeTreeMaxBytesToUseCache);
      }
      if (mergeTreeMinRowsForConcurrentRead_ != null) {
        size += _single_mergeTreeMinRowsForConcurrentRead_codec.CalculateSizeWithTag(MergeTreeMinRowsForConcurrentRead);
      }
      if (mergeTreeMinBytesForConcurrentRead_ != null) {
        size += _single_mergeTreeMinBytesForConcurrentRead_codec.CalculateSizeWithTag(MergeTreeMinBytesForConcurrentRead);
      }
      if (maxBytesBeforeExternalGroupBy_ != null) {
        size += _single_maxBytesBeforeExternalGroupBy_codec.CalculateSizeWithTag(MaxBytesBeforeExternalGroupBy);
      }
      if (maxBytesBeforeExternalSort_ != null) {
        size += _single_maxBytesBeforeExternalSort_codec.CalculateSizeWithTag(MaxBytesBeforeExternalSort);
      }
      if (groupByTwoLevelThreshold_ != null) {
        size += _single_groupByTwoLevelThreshold_codec.CalculateSizeWithTag(GroupByTwoLevelThreshold);
      }
      if (groupByTwoLevelThresholdBytes_ != null) {
        size += _single_groupByTwoLevelThresholdBytes_codec.CalculateSizeWithTag(GroupByTwoLevelThresholdBytes);
      }
      if (priority_ != null) {
        size += _single_priority_codec.CalculateSizeWithTag(Priority);
      }
      if (maxThreads_ != null) {
        size += _single_maxThreads_codec.CalculateSizeWithTag(MaxThreads);
      }
      if (maxMemoryUsage_ != null) {
        size += _single_maxMemoryUsage_codec.CalculateSizeWithTag(MaxMemoryUsage);
      }
      if (maxMemoryUsageForUser_ != null) {
        size += _single_maxMemoryUsageForUser_codec.CalculateSizeWithTag(MaxMemoryUsageForUser);
      }
      if (maxNetworkBandwidth_ != null) {
        size += _single_maxNetworkBandwidth_codec.CalculateSizeWithTag(MaxNetworkBandwidth);
      }
      if (maxNetworkBandwidthForUser_ != null) {
        size += _single_maxNetworkBandwidthForUser_codec.CalculateSizeWithTag(MaxNetworkBandwidthForUser);
      }
      if (forceIndexByDate_ != null) {
        size += _single_forceIndexByDate_codec.CalculateSizeWithTag(ForceIndexByDate);
      }
      if (forcePrimaryKey_ != null) {
        size += _single_forcePrimaryKey_codec.CalculateSizeWithTag(ForcePrimaryKey);
      }
      if (maxRowsToRead_ != null) {
        size += _single_maxRowsToRead_codec.CalculateSizeWithTag(MaxRowsToRead);
      }
      if (maxBytesToRead_ != null) {
        size += _single_maxBytesToRead_codec.CalculateSizeWithTag(MaxBytesToRead);
      }
      if (ReadOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReadOverflowMode);
      }
      if (maxRowsToGroupBy_ != null) {
        size += _single_maxRowsToGroupBy_codec.CalculateSizeWithTag(MaxRowsToGroupBy);
      }
      if (GroupByOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GroupByOverflowMode);
      }
      if (maxRowsToSort_ != null) {
        size += _single_maxRowsToSort_codec.CalculateSizeWithTag(MaxRowsToSort);
      }
      if (maxBytesToSort_ != null) {
        size += _single_maxBytesToSort_codec.CalculateSizeWithTag(MaxBytesToSort);
      }
      if (SortOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SortOverflowMode);
      }
      if (maxResultRows_ != null) {
        size += _single_maxResultRows_codec.CalculateSizeWithTag(MaxResultRows);
      }
      if (maxResultBytes_ != null) {
        size += _single_maxResultBytes_codec.CalculateSizeWithTag(MaxResultBytes);
      }
      if (ResultOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ResultOverflowMode);
      }
      if (maxRowsInDistinct_ != null) {
        size += _single_maxRowsInDistinct_codec.CalculateSizeWithTag(MaxRowsInDistinct);
      }
      if (maxBytesInDistinct_ != null) {
        size += _single_maxBytesInDistinct_codec.CalculateSizeWithTag(MaxBytesInDistinct);
      }
      if (DistinctOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DistinctOverflowMode);
      }
      if (maxRowsToTransfer_ != null) {
        size += _single_maxRowsToTransfer_codec.CalculateSizeWithTag(MaxRowsToTransfer);
      }
      if (maxBytesToTransfer_ != null) {
        size += _single_maxBytesToTransfer_codec.CalculateSizeWithTag(MaxBytesToTransfer);
      }
      if (TransferOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TransferOverflowMode);
      }
      if (maxExecutionTime_ != null) {
        size += _single_maxExecutionTime_codec.CalculateSizeWithTag(MaxExecutionTime);
      }
      if (TimeoutOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TimeoutOverflowMode);
      }
      if (maxRowsInSet_ != null) {
        size += _single_maxRowsInSet_codec.CalculateSizeWithTag(MaxRowsInSet);
      }
      if (maxBytesInSet_ != null) {
        size += _single_maxBytesInSet_codec.CalculateSizeWithTag(MaxBytesInSet);
      }
      if (SetOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SetOverflowMode);
      }
      if (maxRowsInJoin_ != null) {
        size += _single_maxRowsInJoin_codec.CalculateSizeWithTag(MaxRowsInJoin);
      }
      if (maxBytesInJoin_ != null) {
        size += _single_maxBytesInJoin_codec.CalculateSizeWithTag(MaxBytesInJoin);
      }
      if (JoinOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) JoinOverflowMode);
      }
      if (maxColumnsToRead_ != null) {
        size += _single_maxColumnsToRead_codec.CalculateSizeWithTag(MaxColumnsToRead);
      }
      if (maxTemporaryColumns_ != null) {
        size += _single_maxTemporaryColumns_codec.CalculateSizeWithTag(MaxTemporaryColumns);
      }
      if (maxTemporaryNonConstColumns_ != null) {
        size += _single_maxTemporaryNonConstColumns_codec.CalculateSizeWithTag(MaxTemporaryNonConstColumns);
      }
      if (maxQuerySize_ != null) {
        size += _single_maxQuerySize_codec.CalculateSizeWithTag(MaxQuerySize);
      }
      if (maxAstDepth_ != null) {
        size += _single_maxAstDepth_codec.CalculateSizeWithTag(MaxAstDepth);
      }
      if (maxAstElements_ != null) {
        size += _single_maxAstElements_codec.CalculateSizeWithTag(MaxAstElements);
      }
      if (maxExpandedAstElements_ != null) {
        size += _single_maxExpandedAstElements_codec.CalculateSizeWithTag(MaxExpandedAstElements);
      }
      if (minExecutionSpeed_ != null) {
        size += _single_minExecutionSpeed_codec.CalculateSizeWithTag(MinExecutionSpeed);
      }
      if (minExecutionSpeedBytes_ != null) {
        size += _single_minExecutionSpeedBytes_codec.CalculateSizeWithTag(MinExecutionSpeedBytes);
      }
      if (CountDistinctImplementation != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CountDistinctImplementation);
      }
      if (inputFormatValuesInterpretExpressions_ != null) {
        size += _single_inputFormatValuesInterpretExpressions_codec.CalculateSizeWithTag(InputFormatValuesInterpretExpressions);
      }
      if (inputFormatDefaultsForOmittedFields_ != null) {
        size += _single_inputFormatDefaultsForOmittedFields_codec.CalculateSizeWithTag(InputFormatDefaultsForOmittedFields);
      }
      if (outputFormatJsonQuote64BitIntegers_ != null) {
        size += _single_outputFormatJsonQuote64BitIntegers_codec.CalculateSizeWithTag(OutputFormatJsonQuote64BitIntegers);
      }
      if (outputFormatJsonQuoteDenormals_ != null) {
        size += _single_outputFormatJsonQuoteDenormals_codec.CalculateSizeWithTag(OutputFormatJsonQuoteDenormals);
      }
      if (lowCardinalityAllowInNativeFormat_ != null) {
        size += _single_lowCardinalityAllowInNativeFormat_codec.CalculateSizeWithTag(LowCardinalityAllowInNativeFormat);
      }
      if (emptyResultForAggregationByEmptySet_ != null) {
        size += _single_emptyResultForAggregationByEmptySet_codec.CalculateSizeWithTag(EmptyResultForAggregationByEmptySet);
      }
      if (httpConnectionTimeout_ != null) {
        size += _single_httpConnectionTimeout_codec.CalculateSizeWithTag(HttpConnectionTimeout);
      }
      if (httpReceiveTimeout_ != null) {
        size += _single_httpReceiveTimeout_codec.CalculateSizeWithTag(HttpReceiveTimeout);
      }
      if (httpSendTimeout_ != null) {
        size += _single_httpSendTimeout_codec.CalculateSizeWithTag(HttpSendTimeout);
      }
      if (enableHttpCompression_ != null) {
        size += _single_enableHttpCompression_codec.CalculateSizeWithTag(EnableHttpCompression);
      }
      if (sendProgressInHttpHeaders_ != null) {
        size += _single_sendProgressInHttpHeaders_codec.CalculateSizeWithTag(SendProgressInHttpHeaders);
      }
      if (httpHeadersProgressInterval_ != null) {
        size += _single_httpHeadersProgressInterval_codec.CalculateSizeWithTag(HttpHeadersProgressInterval);
      }
      if (addHttpCorsHeader_ != null) {
        size += _single_addHttpCorsHeader_codec.CalculateSizeWithTag(AddHttpCorsHeader);
      }
      if (QuotaMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) QuotaMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSettings other) {
      if (other == null) {
        return;
      }
      if (other.readonly_ != null) {
        if (readonly_ == null || other.Readonly != 0L) {
          Readonly = other.Readonly;
        }
      }
      if (other.allowDdl_ != null) {
        if (allowDdl_ == null || other.AllowDdl != false) {
          AllowDdl = other.AllowDdl;
        }
      }
      if (other.insertQuorum_ != null) {
        if (insertQuorum_ == null || other.InsertQuorum != 0L) {
          InsertQuorum = other.InsertQuorum;
        }
      }
      if (other.connectTimeout_ != null) {
        if (connectTimeout_ == null || other.ConnectTimeout != 0L) {
          ConnectTimeout = other.ConnectTimeout;
        }
      }
      if (other.receiveTimeout_ != null) {
        if (receiveTimeout_ == null || other.ReceiveTimeout != 0L) {
          ReceiveTimeout = other.ReceiveTimeout;
        }
      }
      if (other.sendTimeout_ != null) {
        if (sendTimeout_ == null || other.SendTimeout != 0L) {
          SendTimeout = other.SendTimeout;
        }
      }
      if (other.insertQuorumTimeout_ != null) {
        if (insertQuorumTimeout_ == null || other.InsertQuorumTimeout != 0L) {
          InsertQuorumTimeout = other.InsertQuorumTimeout;
        }
      }
      if (other.selectSequentialConsistency_ != null) {
        if (selectSequentialConsistency_ == null || other.SelectSequentialConsistency != false) {
          SelectSequentialConsistency = other.SelectSequentialConsistency;
        }
      }
      if (other.maxReplicaDelayForDistributedQueries_ != null) {
        if (maxReplicaDelayForDistributedQueries_ == null || other.MaxReplicaDelayForDistributedQueries != 0L) {
          MaxReplicaDelayForDistributedQueries = other.MaxReplicaDelayForDistributedQueries;
        }
      }
      if (other.fallbackToStaleReplicasForDistributedQueries_ != null) {
        if (fallbackToStaleReplicasForDistributedQueries_ == null || other.FallbackToStaleReplicasForDistributedQueries != false) {
          FallbackToStaleReplicasForDistributedQueries = other.FallbackToStaleReplicasForDistributedQueries;
        }
      }
      if (other.replicationAlterPartitionsSync_ != null) {
        if (replicationAlterPartitionsSync_ == null || other.ReplicationAlterPartitionsSync != 0L) {
          ReplicationAlterPartitionsSync = other.ReplicationAlterPartitionsSync;
        }
      }
      if (other.DistributedProductMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode.Unspecified) {
        DistributedProductMode = other.DistributedProductMode;
      }
      if (other.distributedAggregationMemoryEfficient_ != null) {
        if (distributedAggregationMemoryEfficient_ == null || other.DistributedAggregationMemoryEfficient != false) {
          DistributedAggregationMemoryEfficient = other.DistributedAggregationMemoryEfficient;
        }
      }
      if (other.distributedDdlTaskTimeout_ != null) {
        if (distributedDdlTaskTimeout_ == null || other.DistributedDdlTaskTimeout != 0L) {
          DistributedDdlTaskTimeout = other.DistributedDdlTaskTimeout;
        }
      }
      if (other.skipUnavailableShards_ != null) {
        if (skipUnavailableShards_ == null || other.SkipUnavailableShards != false) {
          SkipUnavailableShards = other.SkipUnavailableShards;
        }
      }
      if (other.compile_ != null) {
        if (compile_ == null || other.Compile != false) {
          Compile = other.Compile;
        }
      }
      if (other.minCountToCompile_ != null) {
        if (minCountToCompile_ == null || other.MinCountToCompile != 0L) {
          MinCountToCompile = other.MinCountToCompile;
        }
      }
      if (other.compileExpressions_ != null) {
        if (compileExpressions_ == null || other.CompileExpressions != false) {
          CompileExpressions = other.CompileExpressions;
        }
      }
      if (other.minCountToCompileExpression_ != null) {
        if (minCountToCompileExpression_ == null || other.MinCountToCompileExpression != 0L) {
          MinCountToCompileExpression = other.MinCountToCompileExpression;
        }
      }
      if (other.maxBlockSize_ != null) {
        if (maxBlockSize_ == null || other.MaxBlockSize != 0L) {
          MaxBlockSize = other.MaxBlockSize;
        }
      }
      if (other.minInsertBlockSizeRows_ != null) {
        if (minInsertBlockSizeRows_ == null || other.MinInsertBlockSizeRows != 0L) {
          MinInsertBlockSizeRows = other.MinInsertBlockSizeRows;
        }
      }
      if (other.minInsertBlockSizeBytes_ != null) {
        if (minInsertBlockSizeBytes_ == null || other.MinInsertBlockSizeBytes != 0L) {
          MinInsertBlockSizeBytes = other.MinInsertBlockSizeBytes;
        }
      }
      if (other.maxInsertBlockSize_ != null) {
        if (maxInsertBlockSize_ == null || other.MaxInsertBlockSize != 0L) {
          MaxInsertBlockSize = other.MaxInsertBlockSize;
        }
      }
      if (other.minBytesToUseDirectIo_ != null) {
        if (minBytesToUseDirectIo_ == null || other.MinBytesToUseDirectIo != 0L) {
          MinBytesToUseDirectIo = other.MinBytesToUseDirectIo;
        }
      }
      if (other.useUncompressedCache_ != null) {
        if (useUncompressedCache_ == null || other.UseUncompressedCache != false) {
          UseUncompressedCache = other.UseUncompressedCache;
        }
      }
      if (other.mergeTreeMaxRowsToUseCache_ != null) {
        if (mergeTreeMaxRowsToUseCache_ == null || other.MergeTreeMaxRowsToUseCache != 0L) {
          MergeTreeMaxRowsToUseCache = other.MergeTreeMaxRowsToUseCache;
        }
      }
      if (other.mergeTreeMaxBytesToUseCache_ != null) {
        if (mergeTreeMaxBytesToUseCache_ == null || other.MergeTreeMaxBytesToUseCache != 0L) {
          MergeTreeMaxBytesToUseCache = other.MergeTreeMaxBytesToUseCache;
        }
      }
      if (other.mergeTreeMinRowsForConcurrentRead_ != null) {
        if (mergeTreeMinRowsForConcurrentRead_ == null || other.MergeTreeMinRowsForConcurrentRead != 0L) {
          MergeTreeMinRowsForConcurrentRead = other.MergeTreeMinRowsForConcurrentRead;
        }
      }
      if (other.mergeTreeMinBytesForConcurrentRead_ != null) {
        if (mergeTreeMinBytesForConcurrentRead_ == null || other.MergeTreeMinBytesForConcurrentRead != 0L) {
          MergeTreeMinBytesForConcurrentRead = other.MergeTreeMinBytesForConcurrentRead;
        }
      }
      if (other.maxBytesBeforeExternalGroupBy_ != null) {
        if (maxBytesBeforeExternalGroupBy_ == null || other.MaxBytesBeforeExternalGroupBy != 0L) {
          MaxBytesBeforeExternalGroupBy = other.MaxBytesBeforeExternalGroupBy;
        }
      }
      if (other.maxBytesBeforeExternalSort_ != null) {
        if (maxBytesBeforeExternalSort_ == null || other.MaxBytesBeforeExternalSort != 0L) {
          MaxBytesBeforeExternalSort = other.MaxBytesBeforeExternalSort;
        }
      }
      if (other.groupByTwoLevelThreshold_ != null) {
        if (groupByTwoLevelThreshold_ == null || other.GroupByTwoLevelThreshold != 0L) {
          GroupByTwoLevelThreshold = other.GroupByTwoLevelThreshold;
        }
      }
      if (other.groupByTwoLevelThresholdBytes_ != null) {
        if (groupByTwoLevelThresholdBytes_ == null || other.GroupByTwoLevelThresholdBytes != 0L) {
          GroupByTwoLevelThresholdBytes = other.GroupByTwoLevelThresholdBytes;
        }
      }
      if (other.priority_ != null) {
        if (priority_ == null || other.Priority != 0L) {
          Priority = other.Priority;
        }
      }
      if (other.maxThreads_ != null) {
        if (maxThreads_ == null || other.MaxThreads != 0L) {
          MaxThreads = other.MaxThreads;
        }
      }
      if (other.maxMemoryUsage_ != null) {
        if (maxMemoryUsage_ == null || other.MaxMemoryUsage != 0L) {
          MaxMemoryUsage = other.MaxMemoryUsage;
        }
      }
      if (other.maxMemoryUsageForUser_ != null) {
        if (maxMemoryUsageForUser_ == null || other.MaxMemoryUsageForUser != 0L) {
          MaxMemoryUsageForUser = other.MaxMemoryUsageForUser;
        }
      }
      if (other.maxNetworkBandwidth_ != null) {
        if (maxNetworkBandwidth_ == null || other.MaxNetworkBandwidth != 0L) {
          MaxNetworkBandwidth = other.MaxNetworkBandwidth;
        }
      }
      if (other.maxNetworkBandwidthForUser_ != null) {
        if (maxNetworkBandwidthForUser_ == null || other.MaxNetworkBandwidthForUser != 0L) {
          MaxNetworkBandwidthForUser = other.MaxNetworkBandwidthForUser;
        }
      }
      if (other.forceIndexByDate_ != null) {
        if (forceIndexByDate_ == null || other.ForceIndexByDate != false) {
          ForceIndexByDate = other.ForceIndexByDate;
        }
      }
      if (other.forcePrimaryKey_ != null) {
        if (forcePrimaryKey_ == null || other.ForcePrimaryKey != false) {
          ForcePrimaryKey = other.ForcePrimaryKey;
        }
      }
      if (other.maxRowsToRead_ != null) {
        if (maxRowsToRead_ == null || other.MaxRowsToRead != 0L) {
          MaxRowsToRead = other.MaxRowsToRead;
        }
      }
      if (other.maxBytesToRead_ != null) {
        if (maxBytesToRead_ == null || other.MaxBytesToRead != 0L) {
          MaxBytesToRead = other.MaxBytesToRead;
        }
      }
      if (other.ReadOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        ReadOverflowMode = other.ReadOverflowMode;
      }
      if (other.maxRowsToGroupBy_ != null) {
        if (maxRowsToGroupBy_ == null || other.MaxRowsToGroupBy != 0L) {
          MaxRowsToGroupBy = other.MaxRowsToGroupBy;
        }
      }
      if (other.GroupByOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode.Unspecified) {
        GroupByOverflowMode = other.GroupByOverflowMode;
      }
      if (other.maxRowsToSort_ != null) {
        if (maxRowsToSort_ == null || other.MaxRowsToSort != 0L) {
          MaxRowsToSort = other.MaxRowsToSort;
        }
      }
      if (other.maxBytesToSort_ != null) {
        if (maxBytesToSort_ == null || other.MaxBytesToSort != 0L) {
          MaxBytesToSort = other.MaxBytesToSort;
        }
      }
      if (other.SortOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        SortOverflowMode = other.SortOverflowMode;
      }
      if (other.maxResultRows_ != null) {
        if (maxResultRows_ == null || other.MaxResultRows != 0L) {
          MaxResultRows = other.MaxResultRows;
        }
      }
      if (other.maxResultBytes_ != null) {
        if (maxResultBytes_ == null || other.MaxResultBytes != 0L) {
          MaxResultBytes = other.MaxResultBytes;
        }
      }
      if (other.ResultOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        ResultOverflowMode = other.ResultOverflowMode;
      }
      if (other.maxRowsInDistinct_ != null) {
        if (maxRowsInDistinct_ == null || other.MaxRowsInDistinct != 0L) {
          MaxRowsInDistinct = other.MaxRowsInDistinct;
        }
      }
      if (other.maxBytesInDistinct_ != null) {
        if (maxBytesInDistinct_ == null || other.MaxBytesInDistinct != 0L) {
          MaxBytesInDistinct = other.MaxBytesInDistinct;
        }
      }
      if (other.DistinctOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        DistinctOverflowMode = other.DistinctOverflowMode;
      }
      if (other.maxRowsToTransfer_ != null) {
        if (maxRowsToTransfer_ == null || other.MaxRowsToTransfer != 0L) {
          MaxRowsToTransfer = other.MaxRowsToTransfer;
        }
      }
      if (other.maxBytesToTransfer_ != null) {
        if (maxBytesToTransfer_ == null || other.MaxBytesToTransfer != 0L) {
          MaxBytesToTransfer = other.MaxBytesToTransfer;
        }
      }
      if (other.TransferOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        TransferOverflowMode = other.TransferOverflowMode;
      }
      if (other.maxExecutionTime_ != null) {
        if (maxExecutionTime_ == null || other.MaxExecutionTime != 0L) {
          MaxExecutionTime = other.MaxExecutionTime;
        }
      }
      if (other.TimeoutOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        TimeoutOverflowMode = other.TimeoutOverflowMode;
      }
      if (other.maxRowsInSet_ != null) {
        if (maxRowsInSet_ == null || other.MaxRowsInSet != 0L) {
          MaxRowsInSet = other.MaxRowsInSet;
        }
      }
      if (other.maxBytesInSet_ != null) {
        if (maxBytesInSet_ == null || other.MaxBytesInSet != 0L) {
          MaxBytesInSet = other.MaxBytesInSet;
        }
      }
      if (other.SetOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        SetOverflowMode = other.SetOverflowMode;
      }
      if (other.maxRowsInJoin_ != null) {
        if (maxRowsInJoin_ == null || other.MaxRowsInJoin != 0L) {
          MaxRowsInJoin = other.MaxRowsInJoin;
        }
      }
      if (other.maxBytesInJoin_ != null) {
        if (maxBytesInJoin_ == null || other.MaxBytesInJoin != 0L) {
          MaxBytesInJoin = other.MaxBytesInJoin;
        }
      }
      if (other.JoinOverflowMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode.Unspecified) {
        JoinOverflowMode = other.JoinOverflowMode;
      }
      if (other.maxColumnsToRead_ != null) {
        if (maxColumnsToRead_ == null || other.MaxColumnsToRead != 0L) {
          MaxColumnsToRead = other.MaxColumnsToRead;
        }
      }
      if (other.maxTemporaryColumns_ != null) {
        if (maxTemporaryColumns_ == null || other.MaxTemporaryColumns != 0L) {
          MaxTemporaryColumns = other.MaxTemporaryColumns;
        }
      }
      if (other.maxTemporaryNonConstColumns_ != null) {
        if (maxTemporaryNonConstColumns_ == null || other.MaxTemporaryNonConstColumns != 0L) {
          MaxTemporaryNonConstColumns = other.MaxTemporaryNonConstColumns;
        }
      }
      if (other.maxQuerySize_ != null) {
        if (maxQuerySize_ == null || other.MaxQuerySize != 0L) {
          MaxQuerySize = other.MaxQuerySize;
        }
      }
      if (other.maxAstDepth_ != null) {
        if (maxAstDepth_ == null || other.MaxAstDepth != 0L) {
          MaxAstDepth = other.MaxAstDepth;
        }
      }
      if (other.maxAstElements_ != null) {
        if (maxAstElements_ == null || other.MaxAstElements != 0L) {
          MaxAstElements = other.MaxAstElements;
        }
      }
      if (other.maxExpandedAstElements_ != null) {
        if (maxExpandedAstElements_ == null || other.MaxExpandedAstElements != 0L) {
          MaxExpandedAstElements = other.MaxExpandedAstElements;
        }
      }
      if (other.minExecutionSpeed_ != null) {
        if (minExecutionSpeed_ == null || other.MinExecutionSpeed != 0L) {
          MinExecutionSpeed = other.MinExecutionSpeed;
        }
      }
      if (other.minExecutionSpeedBytes_ != null) {
        if (minExecutionSpeedBytes_ == null || other.MinExecutionSpeedBytes != 0L) {
          MinExecutionSpeedBytes = other.MinExecutionSpeedBytes;
        }
      }
      if (other.CountDistinctImplementation != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation.Unspecified) {
        CountDistinctImplementation = other.CountDistinctImplementation;
      }
      if (other.inputFormatValuesInterpretExpressions_ != null) {
        if (inputFormatValuesInterpretExpressions_ == null || other.InputFormatValuesInterpretExpressions != false) {
          InputFormatValuesInterpretExpressions = other.InputFormatValuesInterpretExpressions;
        }
      }
      if (other.inputFormatDefaultsForOmittedFields_ != null) {
        if (inputFormatDefaultsForOmittedFields_ == null || other.InputFormatDefaultsForOmittedFields != false) {
          InputFormatDefaultsForOmittedFields = other.InputFormatDefaultsForOmittedFields;
        }
      }
      if (other.outputFormatJsonQuote64BitIntegers_ != null) {
        if (outputFormatJsonQuote64BitIntegers_ == null || other.OutputFormatJsonQuote64BitIntegers != false) {
          OutputFormatJsonQuote64BitIntegers = other.OutputFormatJsonQuote64BitIntegers;
        }
      }
      if (other.outputFormatJsonQuoteDenormals_ != null) {
        if (outputFormatJsonQuoteDenormals_ == null || other.OutputFormatJsonQuoteDenormals != false) {
          OutputFormatJsonQuoteDenormals = other.OutputFormatJsonQuoteDenormals;
        }
      }
      if (other.lowCardinalityAllowInNativeFormat_ != null) {
        if (lowCardinalityAllowInNativeFormat_ == null || other.LowCardinalityAllowInNativeFormat != false) {
          LowCardinalityAllowInNativeFormat = other.LowCardinalityAllowInNativeFormat;
        }
      }
      if (other.emptyResultForAggregationByEmptySet_ != null) {
        if (emptyResultForAggregationByEmptySet_ == null || other.EmptyResultForAggregationByEmptySet != false) {
          EmptyResultForAggregationByEmptySet = other.EmptyResultForAggregationByEmptySet;
        }
      }
      if (other.httpConnectionTimeout_ != null) {
        if (httpConnectionTimeout_ == null || other.HttpConnectionTimeout != 0L) {
          HttpConnectionTimeout = other.HttpConnectionTimeout;
        }
      }
      if (other.httpReceiveTimeout_ != null) {
        if (httpReceiveTimeout_ == null || other.HttpReceiveTimeout != 0L) {
          HttpReceiveTimeout = other.HttpReceiveTimeout;
        }
      }
      if (other.httpSendTimeout_ != null) {
        if (httpSendTimeout_ == null || other.HttpSendTimeout != 0L) {
          HttpSendTimeout = other.HttpSendTimeout;
        }
      }
      if (other.enableHttpCompression_ != null) {
        if (enableHttpCompression_ == null || other.EnableHttpCompression != false) {
          EnableHttpCompression = other.EnableHttpCompression;
        }
      }
      if (other.sendProgressInHttpHeaders_ != null) {
        if (sendProgressInHttpHeaders_ == null || other.SendProgressInHttpHeaders != false) {
          SendProgressInHttpHeaders = other.SendProgressInHttpHeaders;
        }
      }
      if (other.httpHeadersProgressInterval_ != null) {
        if (httpHeadersProgressInterval_ == null || other.HttpHeadersProgressInterval != 0L) {
          HttpHeadersProgressInterval = other.HttpHeadersProgressInterval;
        }
      }
      if (other.addHttpCorsHeader_ != null) {
        if (addHttpCorsHeader_ == null || other.AddHttpCorsHeader != false) {
          AddHttpCorsHeader = other.AddHttpCorsHeader;
        }
      }
      if (other.QuotaMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode.Unspecified) {
        QuotaMode = other.QuotaMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_readonly_codec.Read(input);
            if (readonly_ == null || value != 0L) {
              Readonly = value;
            }
            break;
          }
          case 18: {
            bool? value = _single_allowDdl_codec.Read(input);
            if (allowDdl_ == null || value != false) {
              AllowDdl = value;
            }
            break;
          }
          case 26: {
            long? value = _single_insertQuorum_codec.Read(input);
            if (insertQuorum_ == null || value != 0L) {
              InsertQuorum = value;
            }
            break;
          }
          case 34: {
            long? value = _single_insertQuorumTimeout_codec.Read(input);
            if (insertQuorumTimeout_ == null || value != 0L) {
              InsertQuorumTimeout = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_selectSequentialConsistency_codec.Read(input);
            if (selectSequentialConsistency_ == null || value != false) {
              SelectSequentialConsistency = value;
            }
            break;
          }
          case 50: {
            long? value = _single_maxReplicaDelayForDistributedQueries_codec.Read(input);
            if (maxReplicaDelayForDistributedQueries_ == null || value != 0L) {
              MaxReplicaDelayForDistributedQueries = value;
            }
            break;
          }
          case 58: {
            bool? value = _single_fallbackToStaleReplicasForDistributedQueries_codec.Read(input);
            if (fallbackToStaleReplicasForDistributedQueries_ == null || value != false) {
              FallbackToStaleReplicasForDistributedQueries = value;
            }
            break;
          }
          case 66: {
            long? value = _single_maxThreads_codec.Read(input);
            if (maxThreads_ == null || value != 0L) {
              MaxThreads = value;
            }
            break;
          }
          case 74: {
            long? value = _single_maxBlockSize_codec.Read(input);
            if (maxBlockSize_ == null || value != 0L) {
              MaxBlockSize = value;
            }
            break;
          }
          case 82: {
            long? value = _single_maxInsertBlockSize_codec.Read(input);
            if (maxInsertBlockSize_ == null || value != 0L) {
              MaxInsertBlockSize = value;
            }
            break;
          }
          case 90: {
            long? value = _single_maxMemoryUsage_codec.Read(input);
            if (maxMemoryUsage_ == null || value != 0L) {
              MaxMemoryUsage = value;
            }
            break;
          }
          case 98: {
            long? value = _single_maxMemoryUsageForUser_codec.Read(input);
            if (maxMemoryUsageForUser_ == null || value != 0L) {
              MaxMemoryUsageForUser = value;
            }
            break;
          }
          case 106: {
            long? value = _single_maxRowsToRead_codec.Read(input);
            if (maxRowsToRead_ == null || value != 0L) {
              MaxRowsToRead = value;
            }
            break;
          }
          case 114: {
            long? value = _single_maxBytesToRead_codec.Read(input);
            if (maxBytesToRead_ == null || value != 0L) {
              MaxBytesToRead = value;
            }
            break;
          }
          case 120: {
            ReadOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 130: {
            long? value = _single_maxRowsToGroupBy_codec.Read(input);
            if (maxRowsToGroupBy_ == null || value != 0L) {
              MaxRowsToGroupBy = value;
            }
            break;
          }
          case 136: {
            GroupByOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.GroupByOverflowMode) input.ReadEnum();
            break;
          }
          case 146: {
            long? value = _single_maxRowsToSort_codec.Read(input);
            if (maxRowsToSort_ == null || value != 0L) {
              MaxRowsToSort = value;
            }
            break;
          }
          case 154: {
            long? value = _single_maxBytesToSort_codec.Read(input);
            if (maxBytesToSort_ == null || value != 0L) {
              MaxBytesToSort = value;
            }
            break;
          }
          case 160: {
            SortOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 170: {
            long? value = _single_maxResultRows_codec.Read(input);
            if (maxResultRows_ == null || value != 0L) {
              MaxResultRows = value;
            }
            break;
          }
          case 178: {
            long? value = _single_maxResultBytes_codec.Read(input);
            if (maxResultBytes_ == null || value != 0L) {
              MaxResultBytes = value;
            }
            break;
          }
          case 184: {
            ResultOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 194: {
            long? value = _single_maxRowsInDistinct_codec.Read(input);
            if (maxRowsInDistinct_ == null || value != 0L) {
              MaxRowsInDistinct = value;
            }
            break;
          }
          case 202: {
            long? value = _single_maxBytesInDistinct_codec.Read(input);
            if (maxBytesInDistinct_ == null || value != 0L) {
              MaxBytesInDistinct = value;
            }
            break;
          }
          case 208: {
            DistinctOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 218: {
            long? value = _single_maxRowsToTransfer_codec.Read(input);
            if (maxRowsToTransfer_ == null || value != 0L) {
              MaxRowsToTransfer = value;
            }
            break;
          }
          case 226: {
            long? value = _single_maxBytesToTransfer_codec.Read(input);
            if (maxBytesToTransfer_ == null || value != 0L) {
              MaxBytesToTransfer = value;
            }
            break;
          }
          case 232: {
            TransferOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 242: {
            long? value = _single_maxExecutionTime_codec.Read(input);
            if (maxExecutionTime_ == null || value != 0L) {
              MaxExecutionTime = value;
            }
            break;
          }
          case 248: {
            TimeoutOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 258: {
            long? value = _single_maxColumnsToRead_codec.Read(input);
            if (maxColumnsToRead_ == null || value != 0L) {
              MaxColumnsToRead = value;
            }
            break;
          }
          case 266: {
            long? value = _single_maxTemporaryColumns_codec.Read(input);
            if (maxTemporaryColumns_ == null || value != 0L) {
              MaxTemporaryColumns = value;
            }
            break;
          }
          case 274: {
            long? value = _single_maxTemporaryNonConstColumns_codec.Read(input);
            if (maxTemporaryNonConstColumns_ == null || value != 0L) {
              MaxTemporaryNonConstColumns = value;
            }
            break;
          }
          case 282: {
            long? value = _single_maxQuerySize_codec.Read(input);
            if (maxQuerySize_ == null || value != 0L) {
              MaxQuerySize = value;
            }
            break;
          }
          case 290: {
            long? value = _single_maxAstDepth_codec.Read(input);
            if (maxAstDepth_ == null || value != 0L) {
              MaxAstDepth = value;
            }
            break;
          }
          case 298: {
            long? value = _single_maxAstElements_codec.Read(input);
            if (maxAstElements_ == null || value != 0L) {
              MaxAstElements = value;
            }
            break;
          }
          case 306: {
            long? value = _single_maxExpandedAstElements_codec.Read(input);
            if (maxExpandedAstElements_ == null || value != 0L) {
              MaxExpandedAstElements = value;
            }
            break;
          }
          case 314: {
            long? value = _single_connectTimeout_codec.Read(input);
            if (connectTimeout_ == null || value != 0L) {
              ConnectTimeout = value;
            }
            break;
          }
          case 322: {
            long? value = _single_receiveTimeout_codec.Read(input);
            if (receiveTimeout_ == null || value != 0L) {
              ReceiveTimeout = value;
            }
            break;
          }
          case 330: {
            long? value = _single_sendTimeout_codec.Read(input);
            if (sendTimeout_ == null || value != 0L) {
              SendTimeout = value;
            }
            break;
          }
          case 338: {
            long? value = _single_replicationAlterPartitionsSync_codec.Read(input);
            if (replicationAlterPartitionsSync_ == null || value != 0L) {
              ReplicationAlterPartitionsSync = value;
            }
            break;
          }
          case 344: {
            DistributedProductMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.DistributedProductMode) input.ReadEnum();
            break;
          }
          case 354: {
            bool? value = _single_compile_codec.Read(input);
            if (compile_ == null || value != false) {
              Compile = value;
            }
            break;
          }
          case 362: {
            long? value = _single_minCountToCompile_codec.Read(input);
            if (minCountToCompile_ == null || value != 0L) {
              MinCountToCompile = value;
            }
            break;
          }
          case 370: {
            bool? value = _single_compileExpressions_codec.Read(input);
            if (compileExpressions_ == null || value != false) {
              CompileExpressions = value;
            }
            break;
          }
          case 378: {
            long? value = _single_minCountToCompileExpression_codec.Read(input);
            if (minCountToCompileExpression_ == null || value != 0L) {
              MinCountToCompileExpression = value;
            }
            break;
          }
          case 386: {
            long? value = _single_minInsertBlockSizeRows_codec.Read(input);
            if (minInsertBlockSizeRows_ == null || value != 0L) {
              MinInsertBlockSizeRows = value;
            }
            break;
          }
          case 394: {
            long? value = _single_minInsertBlockSizeBytes_codec.Read(input);
            if (minInsertBlockSizeBytes_ == null || value != 0L) {
              MinInsertBlockSizeBytes = value;
            }
            break;
          }
          case 402: {
            long? value = _single_minBytesToUseDirectIo_codec.Read(input);
            if (minBytesToUseDirectIo_ == null || value != 0L) {
              MinBytesToUseDirectIo = value;
            }
            break;
          }
          case 410: {
            bool? value = _single_useUncompressedCache_codec.Read(input);
            if (useUncompressedCache_ == null || value != false) {
              UseUncompressedCache = value;
            }
            break;
          }
          case 418: {
            long? value = _single_mergeTreeMaxRowsToUseCache_codec.Read(input);
            if (mergeTreeMaxRowsToUseCache_ == null || value != 0L) {
              MergeTreeMaxRowsToUseCache = value;
            }
            break;
          }
          case 426: {
            long? value = _single_mergeTreeMaxBytesToUseCache_codec.Read(input);
            if (mergeTreeMaxBytesToUseCache_ == null || value != 0L) {
              MergeTreeMaxBytesToUseCache = value;
            }
            break;
          }
          case 434: {
            long? value = _single_mergeTreeMinRowsForConcurrentRead_codec.Read(input);
            if (mergeTreeMinRowsForConcurrentRead_ == null || value != 0L) {
              MergeTreeMinRowsForConcurrentRead = value;
            }
            break;
          }
          case 442: {
            long? value = _single_mergeTreeMinBytesForConcurrentRead_codec.Read(input);
            if (mergeTreeMinBytesForConcurrentRead_ == null || value != 0L) {
              MergeTreeMinBytesForConcurrentRead = value;
            }
            break;
          }
          case 450: {
            long? value = _single_priority_codec.Read(input);
            if (priority_ == null || value != 0L) {
              Priority = value;
            }
            break;
          }
          case 458: {
            long? value = _single_maxNetworkBandwidth_codec.Read(input);
            if (maxNetworkBandwidth_ == null || value != 0L) {
              MaxNetworkBandwidth = value;
            }
            break;
          }
          case 466: {
            long? value = _single_maxNetworkBandwidthForUser_codec.Read(input);
            if (maxNetworkBandwidthForUser_ == null || value != 0L) {
              MaxNetworkBandwidthForUser = value;
            }
            break;
          }
          case 474: {
            bool? value = _single_forceIndexByDate_codec.Read(input);
            if (forceIndexByDate_ == null || value != false) {
              ForceIndexByDate = value;
            }
            break;
          }
          case 482: {
            bool? value = _single_forcePrimaryKey_codec.Read(input);
            if (forcePrimaryKey_ == null || value != false) {
              ForcePrimaryKey = value;
            }
            break;
          }
          case 490: {
            bool? value = _single_inputFormatValuesInterpretExpressions_codec.Read(input);
            if (inputFormatValuesInterpretExpressions_ == null || value != false) {
              InputFormatValuesInterpretExpressions = value;
            }
            break;
          }
          case 498: {
            bool? value = _single_inputFormatDefaultsForOmittedFields_codec.Read(input);
            if (inputFormatDefaultsForOmittedFields_ == null || value != false) {
              InputFormatDefaultsForOmittedFields = value;
            }
            break;
          }
          case 506: {
            bool? value = _single_outputFormatJsonQuote64BitIntegers_codec.Read(input);
            if (outputFormatJsonQuote64BitIntegers_ == null || value != false) {
              OutputFormatJsonQuote64BitIntegers = value;
            }
            break;
          }
          case 514: {
            bool? value = _single_outputFormatJsonQuoteDenormals_codec.Read(input);
            if (outputFormatJsonQuoteDenormals_ == null || value != false) {
              OutputFormatJsonQuoteDenormals = value;
            }
            break;
          }
          case 522: {
            long? value = _single_httpConnectionTimeout_codec.Read(input);
            if (httpConnectionTimeout_ == null || value != 0L) {
              HttpConnectionTimeout = value;
            }
            break;
          }
          case 530: {
            long? value = _single_httpReceiveTimeout_codec.Read(input);
            if (httpReceiveTimeout_ == null || value != 0L) {
              HttpReceiveTimeout = value;
            }
            break;
          }
          case 538: {
            long? value = _single_httpSendTimeout_codec.Read(input);
            if (httpSendTimeout_ == null || value != 0L) {
              HttpSendTimeout = value;
            }
            break;
          }
          case 546: {
            bool? value = _single_enableHttpCompression_codec.Read(input);
            if (enableHttpCompression_ == null || value != false) {
              EnableHttpCompression = value;
            }
            break;
          }
          case 554: {
            bool? value = _single_sendProgressInHttpHeaders_codec.Read(input);
            if (sendProgressInHttpHeaders_ == null || value != false) {
              SendProgressInHttpHeaders = value;
            }
            break;
          }
          case 562: {
            long? value = _single_httpHeadersProgressInterval_codec.Read(input);
            if (httpHeadersProgressInterval_ == null || value != 0L) {
              HttpHeadersProgressInterval = value;
            }
            break;
          }
          case 570: {
            bool? value = _single_addHttpCorsHeader_codec.Read(input);
            if (addHttpCorsHeader_ == null || value != false) {
              AddHttpCorsHeader = value;
            }
            break;
          }
          case 578: {
            bool? value = _single_distributedAggregationMemoryEfficient_codec.Read(input);
            if (distributedAggregationMemoryEfficient_ == null || value != false) {
              DistributedAggregationMemoryEfficient = value;
            }
            break;
          }
          case 586: {
            long? value = _single_distributedDdlTaskTimeout_codec.Read(input);
            if (distributedDdlTaskTimeout_ == null || value != 0L) {
              DistributedDdlTaskTimeout = value;
            }
            break;
          }
          case 594: {
            long? value = _single_maxBytesBeforeExternalGroupBy_codec.Read(input);
            if (maxBytesBeforeExternalGroupBy_ == null || value != 0L) {
              MaxBytesBeforeExternalGroupBy = value;
            }
            break;
          }
          case 602: {
            long? value = _single_maxBytesBeforeExternalSort_codec.Read(input);
            if (maxBytesBeforeExternalSort_ == null || value != 0L) {
              MaxBytesBeforeExternalSort = value;
            }
            break;
          }
          case 610: {
            long? value = _single_groupByTwoLevelThreshold_codec.Read(input);
            if (groupByTwoLevelThreshold_ == null || value != 0L) {
              GroupByTwoLevelThreshold = value;
            }
            break;
          }
          case 618: {
            long? value = _single_groupByTwoLevelThresholdBytes_codec.Read(input);
            if (groupByTwoLevelThresholdBytes_ == null || value != 0L) {
              GroupByTwoLevelThresholdBytes = value;
            }
            break;
          }
          case 626: {
            bool? value = _single_lowCardinalityAllowInNativeFormat_codec.Read(input);
            if (lowCardinalityAllowInNativeFormat_ == null || value != false) {
              LowCardinalityAllowInNativeFormat = value;
            }
            break;
          }
          case 634: {
            bool? value = _single_emptyResultForAggregationByEmptySet_codec.Read(input);
            if (emptyResultForAggregationByEmptySet_ == null || value != false) {
              EmptyResultForAggregationByEmptySet = value;
            }
            break;
          }
          case 640: {
            QuotaMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.QuotaMode) input.ReadEnum();
            break;
          }
          case 650: {
            bool? value = _single_skipUnavailableShards_codec.Read(input);
            if (skipUnavailableShards_ == null || value != false) {
              SkipUnavailableShards = value;
            }
            break;
          }
          case 674: {
            long? value = _single_minExecutionSpeed_codec.Read(input);
            if (minExecutionSpeed_ == null || value != 0L) {
              MinExecutionSpeed = value;
            }
            break;
          }
          case 682: {
            long? value = _single_minExecutionSpeedBytes_codec.Read(input);
            if (minExecutionSpeedBytes_ == null || value != 0L) {
              MinExecutionSpeedBytes = value;
            }
            break;
          }
          case 688: {
            CountDistinctImplementation = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.CountDistinctImplementation) input.ReadEnum();
            break;
          }
          case 698: {
            long? value = _single_maxRowsInSet_codec.Read(input);
            if (maxRowsInSet_ == null || value != 0L) {
              MaxRowsInSet = value;
            }
            break;
          }
          case 706: {
            long? value = _single_maxBytesInSet_codec.Read(input);
            if (maxBytesInSet_ == null || value != 0L) {
              MaxBytesInSet = value;
            }
            break;
          }
          case 712: {
            SetOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
          case 722: {
            long? value = _single_maxRowsInJoin_codec.Read(input);
            if (maxRowsInJoin_ == null || value != 0L) {
              MaxRowsInJoin = value;
            }
            break;
          }
          case 730: {
            long? value = _single_maxBytesInJoin_codec.Read(input);
            if (maxBytesInJoin_ == null || value != 0L) {
              MaxBytesInJoin = value;
            }
            break;
          }
          case 736: {
            JoinOverflowMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSettings.Types.OverflowMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UserSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum OverflowMode {
        [pbr::OriginalName("OVERFLOW_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("OVERFLOW_MODE_THROW")] Throw = 1,
        [pbr::OriginalName("OVERFLOW_MODE_BREAK")] Break = 2,
      }

      internal enum GroupByOverflowMode {
        [pbr::OriginalName("GROUP_BY_OVERFLOW_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("GROUP_BY_OVERFLOW_MODE_THROW")] Throw = 1,
        [pbr::OriginalName("GROUP_BY_OVERFLOW_MODE_BREAK")] Break = 2,
        [pbr::OriginalName("GROUP_BY_OVERFLOW_MODE_ANY")] Any = 3,
      }

      internal enum DistributedProductMode {
        [pbr::OriginalName("DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
        /// </summary>
        [pbr::OriginalName("DISTRIBUTED_PRODUCT_MODE_DENY")] Deny = 1,
        /// <summary>
        /// Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
        /// </summary>
        [pbr::OriginalName("DISTRIBUTED_PRODUCT_MODE_LOCAL")] Local = 2,
        /// <summary>
        /// Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
        /// </summary>
        [pbr::OriginalName("DISTRIBUTED_PRODUCT_MODE_GLOBAL")] Global = 3,
        /// <summary>
        /// Allows the use of these types of subqueries.
        /// </summary>
        [pbr::OriginalName("DISTRIBUTED_PRODUCT_MODE_ALLOW")] Allow = 4,
      }

      internal enum QuotaMode {
        [pbr::OriginalName("QUOTA_MODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("QUOTA_MODE_DEFAULT")] Default = 1,
        [pbr::OriginalName("QUOTA_MODE_KEYED")] Keyed = 2,
        [pbr::OriginalName("QUOTA_MODE_KEYED_BY_IP")] KeyedByIp = 3,
      }

      internal enum CountDistinctImplementation {
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNIQ")] Uniq = 1,
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED")] UniqCombined = 2,
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNIQ_COMBINED_64")] UniqCombined64 = 3,
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNIQ_HLL_12")] UniqHll12 = 4,
        [pbr::OriginalName("COUNT_DISTINCT_IMPLEMENTATION_UNIQ_EXACT")] UniqExact = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
  /// See in-depth description [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/quotas/).
  /// </summary>
  internal sealed partial class UserQuota : pb::IMessage<UserQuota> {
    private static readonly pb::MessageParser<UserQuota> _parser = new pb::MessageParser<UserQuota>(() => new UserQuota());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserQuota> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserQuota() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserQuota(UserQuota other) : this() {
      IntervalDuration = other.IntervalDuration;
      Queries = other.Queries;
      Errors = other.Errors;
      ResultRows = other.ResultRows;
      ReadRows = other.ReadRows;
      ExecutionTime = other.ExecutionTime;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserQuota Clone() {
      return new UserQuota(this);
    }

    /// <summary>Field number for the "interval_duration" field.</summary>
    public const int IntervalDurationFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_intervalDuration_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? intervalDuration_;
    /// <summary>
    /// Duration of interval for quota in milliseconds.
    /// Minimal value is 1 second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? IntervalDuration {
      get { return intervalDuration_; }
      set {
        intervalDuration_ = value;
      }
    }


    /// <summary>Field number for the "queries" field.</summary>
    public const int QueriesFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_queries_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? queries_;
    /// <summary>
    /// The total number of queries.
    /// 0 - unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Queries {
      get { return queries_; }
      set {
        queries_ = value;
      }
    }


    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private static readonly pb::FieldCodec<long?> _single_errors_codec = pb::FieldCodec.ForStructWrapper<long>(26);
    private long? errors_;
    /// <summary>
    /// The number of queries that threw exception.
    /// 0 - unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }


    /// <summary>Field number for the "result_rows" field.</summary>
    public const int ResultRowsFieldNumber = 4;
    private static readonly pb::FieldCodec<long?> _single_resultRows_codec = pb::FieldCodec.ForStructWrapper<long>(34);
    private long? resultRows_;
    /// <summary>
    /// The total number of rows given as the result..
    /// 0 - unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ResultRows {
      get { return resultRows_; }
      set {
        resultRows_ = value;
      }
    }


    /// <summary>Field number for the "read_rows" field.</summary>
    public const int ReadRowsFieldNumber = 5;
    private static readonly pb::FieldCodec<long?> _single_readRows_codec = pb::FieldCodec.ForStructWrapper<long>(42);
    private long? readRows_;
    /// <summary>
    /// The total number of source rows read from tables for running the query, on all remote servers.
    /// 0 - unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ReadRows {
      get { return readRows_; }
      set {
        readRows_ = value;
      }
    }


    /// <summary>Field number for the "execution_time" field.</summary>
    public const int ExecutionTimeFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_executionTime_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? executionTime_;
    /// <summary>
    /// The total query execution time, in milliseconds (wall time).
    /// 0 - unlimited.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? ExecutionTime {
      get { return executionTime_; }
      set {
        executionTime_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserQuota);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserQuota other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntervalDuration != other.IntervalDuration) return false;
      if (Queries != other.Queries) return false;
      if (Errors != other.Errors) return false;
      if (ResultRows != other.ResultRows) return false;
      if (ReadRows != other.ReadRows) return false;
      if (ExecutionTime != other.ExecutionTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (intervalDuration_ != null) hash ^= IntervalDuration.GetHashCode();
      if (queries_ != null) hash ^= Queries.GetHashCode();
      if (errors_ != null) hash ^= Errors.GetHashCode();
      if (resultRows_ != null) hash ^= ResultRows.GetHashCode();
      if (readRows_ != null) hash ^= ReadRows.GetHashCode();
      if (executionTime_ != null) hash ^= ExecutionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (intervalDuration_ != null) {
        _single_intervalDuration_codec.WriteTagAndValue(output, IntervalDuration);
      }
      if (queries_ != null) {
        _single_queries_codec.WriteTagAndValue(output, Queries);
      }
      if (errors_ != null) {
        _single_errors_codec.WriteTagAndValue(output, Errors);
      }
      if (resultRows_ != null) {
        _single_resultRows_codec.WriteTagAndValue(output, ResultRows);
      }
      if (readRows_ != null) {
        _single_readRows_codec.WriteTagAndValue(output, ReadRows);
      }
      if (executionTime_ != null) {
        _single_executionTime_codec.WriteTagAndValue(output, ExecutionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (intervalDuration_ != null) {
        size += _single_intervalDuration_codec.CalculateSizeWithTag(IntervalDuration);
      }
      if (queries_ != null) {
        size += _single_queries_codec.CalculateSizeWithTag(Queries);
      }
      if (errors_ != null) {
        size += _single_errors_codec.CalculateSizeWithTag(Errors);
      }
      if (resultRows_ != null) {
        size += _single_resultRows_codec.CalculateSizeWithTag(ResultRows);
      }
      if (readRows_ != null) {
        size += _single_readRows_codec.CalculateSizeWithTag(ReadRows);
      }
      if (executionTime_ != null) {
        size += _single_executionTime_codec.CalculateSizeWithTag(ExecutionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserQuota other) {
      if (other == null) {
        return;
      }
      if (other.intervalDuration_ != null) {
        if (intervalDuration_ == null || other.IntervalDuration != 0L) {
          IntervalDuration = other.IntervalDuration;
        }
      }
      if (other.queries_ != null) {
        if (queries_ == null || other.Queries != 0L) {
          Queries = other.Queries;
        }
      }
      if (other.errors_ != null) {
        if (errors_ == null || other.Errors != 0L) {
          Errors = other.Errors;
        }
      }
      if (other.resultRows_ != null) {
        if (resultRows_ == null || other.ResultRows != 0L) {
          ResultRows = other.ResultRows;
        }
      }
      if (other.readRows_ != null) {
        if (readRows_ == null || other.ReadRows != 0L) {
          ReadRows = other.ReadRows;
        }
      }
      if (other.executionTime_ != null) {
        if (executionTime_ == null || other.ExecutionTime != 0L) {
          ExecutionTime = other.ExecutionTime;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_intervalDuration_codec.Read(input);
            if (intervalDuration_ == null || value != 0L) {
              IntervalDuration = value;
            }
            break;
          }
          case 18: {
            long? value = _single_queries_codec.Read(input);
            if (queries_ == null || value != 0L) {
              Queries = value;
            }
            break;
          }
          case 26: {
            long? value = _single_errors_codec.Read(input);
            if (errors_ == null || value != 0L) {
              Errors = value;
            }
            break;
          }
          case 34: {
            long? value = _single_resultRows_codec.Read(input);
            if (resultRows_ == null || value != 0L) {
              ResultRows = value;
            }
            break;
          }
          case 42: {
            long? value = _single_readRows_codec.Read(input);
            if (readRows_ == null || value != 0L) {
              ReadRows = value;
            }
            break;
          }
          case 50: {
            long? value = _single_executionTime_codec.Read(input);
            if (executionTime_ == null || value != 0L) {
              ExecutionTime = value;
            }
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
