// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Clickhouse.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto</summary>
  internal static partial class ClickhouseReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClickhouseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZ5YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjEvY29uZmlnL2NsaWNr",
            "aG91c2UucHJvdG8SJXlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5j",
            "b25maWcaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxodeWFuZGV4",
            "L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8ihjsKEENsaWNraG91c2VDb25maWcS",
            "UwoJbG9nX2xldmVsGAEgASgOMkAueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hv",
            "dXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkxvZ0xldmVsElUKCm1l",
            "cmdlX3RyZWUYAiABKAsyQS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuY29uZmlnLkNsaWNraG91c2VDb25maWcuTWVyZ2VUcmVlElgKC2NvbXBy",
            "ZXNzaW9uGAMgAygLMkMueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYx",
            "LmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkNvbXByZXNzaW9uEmAKDGRpY3Rp",
            "b25hcmllcxgEIAMoCzJKLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5jb25maWcuQ2xpY2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkS",
            "XwoPZ3JhcGhpdGVfcm9sbHVwGAUgAygLMkYueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkdyYXBoaXRl",
            "Um9sbHVwEkwKBWthZmthGCMgASgLMj0ueWFuZGV4LmNsb3VkLm1kYi5jbGlj",
            "a2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkthZmthEj4KD21h",
            "eF9jb25uZWN0aW9ucxgGIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlQgj6xzEEPj0xMBJFChZtYXhfY29uY3VycmVudF9xdWVyaWVzGAcgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCPrHMQQ+PTEwEjcKEmtl",
            "ZXBfYWxpdmVfdGltZW91dBgIIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2",
            "NFZhbHVlEjwKF3VuY29tcHJlc3NlZF9jYWNoZV9zaXplGAkgASgLMhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUSRQoPbWFya19jYWNoZV9zaXplGAog",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCD/rHMQs+NTM2ODcw",
            "OTEyMBI7ChZtYXhfdGFibGVfc2l6ZV90b19kcm9wGAsgASgLMhsuZ29vZ2xl",
            "LnByb3RvYnVmLkludDY0VmFsdWUSPwoabWF4X3BhcnRpdGlvbl9zaXplX3Rv",
            "X2Ryb3AYDSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJNCiRi",
            "dWlsdGluX2RpY3Rpb25hcmllc19yZWxvYWRfaW50ZXJ2YWwYDCABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUICGAESEAoIdGltZXpvbmUYDiAB",
            "KAkSEwoLZ2VvYmFzZV91cmkYDyABKAkSPQoYcXVlcnlfbG9nX3JldGVudGlv",
            "bl9zaXplGBAgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSPQoY",
            "cXVlcnlfbG9nX3JldGVudGlvbl90aW1lGBEgASgLMhsuZ29vZ2xlLnByb3Rv",
            "YnVmLkludDY0VmFsdWUSPAoYcXVlcnlfdGhyZWFkX2xvZ19lbmFibGVkGBIg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZRJECh9xdWVyeV90aHJl",
            "YWRfbG9nX3JldGVudGlvbl9zaXplGBMgASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUSRAofcXVlcnlfdGhyZWFkX2xvZ19yZXRlbnRpb25fdGlt",
            "ZRgUIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjwKF3BhcnRf",
            "bG9nX3JldGVudGlvbl9zaXplGBUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWUSPAoXcGFydF9sb2dfcmV0ZW50aW9uX3RpbWUYFiABKAsyGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRI2ChJtZXRyaWNfbG9nX2VuYWJs",
            "ZWQYFyABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEj4KGW1ldHJp",
            "Y19sb2dfcmV0ZW50aW9uX3NpemUYGCABKAsyGy5nb29nbGUucHJvdG9idWYu",
            "SW50NjRWYWx1ZRI+ChltZXRyaWNfbG9nX3JldGVudGlvbl90aW1lGBkgASgL",
            "MhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSNQoRdHJhY2VfbG9nX2Vu",
            "YWJsZWQYGiABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEj0KGHRy",
            "YWNlX2xvZ19yZXRlbnRpb25fc2l6ZRgbIAEoCzIbLmdvb2dsZS5wcm90b2J1",
            "Zi5JbnQ2NFZhbHVlEj0KGHRyYWNlX2xvZ19yZXRlbnRpb25fdGltZRgcIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjQKEHRleHRfbG9nX2Vu",
            "YWJsZWQYHSABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjwKF3Rl",
            "eHRfbG9nX3JldGVudGlvbl9zaXplGB4gASgLMhsuZ29vZ2xlLnByb3RvYnVm",
            "LkludDY0VmFsdWUSPAoXdGV4dF9sb2dfcmV0ZW50aW9uX3RpbWUYHyABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRJYCg50ZXh0X2xvZ19sZXZl",
            "bBggIAEoDjJALnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25m",
            "aWcuQ2xpY2tob3VzZUNvbmZpZy5Mb2dMZXZlbBJBChRiYWNrZ3JvdW5kX3Bv",
            "b2xfc2l6ZRghIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlQgb6",
            "xzECPjASSgodYmFja2dyb3VuZF9zY2hlZHVsZV9wb29sX3NpemUYIiABKAsy",
            "Gy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIG+scxAj4wGooECglNZXJn",
            "ZVRyZWUSRAofcmVwbGljYXRlZF9kZWR1cGxpY2F0aW9uX3dpbmRvdxgBIAEo",
            "CzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkwKJ3JlcGxpY2F0ZWRf",
            "ZGVkdXBsaWNhdGlvbl93aW5kb3dfc2Vjb25kcxgCIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEjoKFXBhcnRzX3RvX2RlbGF5X2luc2VydBgD",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEjoKFXBhcnRzX3Rv",
            "X3Rocm93X2luc2VydBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZh",
            "bHVlEkMKHm1heF9yZXBsaWNhdGVkX21lcmdlc19pbl9xdWV1ZRgFIAEoCzIb",
            "Lmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEl4KOW51bWJlcl9vZl9mcmVl",
            "X2VudHJpZXNfaW5fcG9vbF90b19sb3dlcl9tYXhfc2l6ZV9vZl9tZXJnZRgG",
            "IAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlEkwKJ21heF9ieXRl",
            "c190b19tZXJnZV9hdF9taW5fc3BhY2VfaW5fcG9vbBgHIAEoCzIbLmdvb2ds",
            "ZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGuoECgVLYWZrYRJpChFzZWN1cml0eV9w",
            "cm90b2NvbBgBIAEoDjJOLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5jb25maWcuQ2xpY2tob3VzZUNvbmZpZy5LYWZrYS5TZWN1cml0eVByb3Rv",
            "Y29sEmMKDnNhc2xfbWVjaGFuaXNtGAIgASgOMksueWFuZGV4LmNsb3VkLm1k",
            "Yi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkthZmth",
            "LlNhc2xNZWNoYW5pc20SFQoNc2FzbF91c2VybmFtZRgDIAEoCRIVCg1zYXNs",
            "X3Bhc3N3b3JkGAQgASgJIrcBChBTZWN1cml0eVByb3RvY29sEiEKHVNFQ1VS",
            "SVRZX1BST1RPQ09MX1VOU1BFQ0lGSUVEEAASHwobU0VDVVJJVFlfUFJPVE9D",
            "T0xfUExBSU5URVhUEAESGQoVU0VDVVJJVFlfUFJPVE9DT0xfU1NMEAISJAog",
            "U0VDVVJJVFlfUFJPVE9DT0xfU0FTTF9QTEFJTlRFWFQQAxIeChpTRUNVUklU",
            "WV9QUk9UT0NPTF9TQVNMX1NTTBAEIqgBCg1TYXNsTWVjaGFuaXNtEh4KGlNB",
            "U0xfTUVDSEFOSVNNX1VOU1BFQ0lGSUVEEAASGQoVU0FTTF9NRUNIQU5JU01f",
            "R1NTQVBJEAESGAoUU0FTTF9NRUNIQU5JU01fUExBSU4QAhIgChxTQVNMX01F",
            "Q0hBTklTTV9TQ1JBTV9TSEFfMjU2EAMSIAocU0FTTF9NRUNIQU5JU01fU0NS",
            "QU1fU0hBXzUxMhAEGtsBCgtDb21wcmVzc2lvbhJaCgZtZXRob2QYASABKA4y",
            "Si55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNr",
            "aG91c2VDb25maWcuQ29tcHJlc3Npb24uTWV0aG9kEh4KDW1pbl9wYXJ0X3Np",
            "emUYAiABKANCB/rHMQM+PTESGwoTbWluX3BhcnRfc2l6ZV9yYXRpbxgDIAEo",
            "ASIzCgZNZXRob2QSFgoSTUVUSE9EX1VOU1BFQ0lGSUVEEAASBwoDTFo0EAES",
            "CAoEWlNURBACGqAaChJFeHRlcm5hbERpY3Rpb25hcnkSEgoEbmFtZRgBIAEo",
            "CUIE6McxARJtCglzdHJ1Y3R1cmUYAiABKAsyVC55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcuRXh0ZXJu",
            "YWxEaWN0aW9uYXJ5LlN0cnVjdHVyZUIE6McxARJnCgZsYXlvdXQYAyABKAsy",
            "US55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNr",
            "aG91c2VDb25maWcuRXh0ZXJuYWxEaWN0aW9uYXJ5LkxheW91dEIE6McxARIY",
            "Cg5maXhlZF9saWZldGltZRgEIAEoA0gAEmoKDmxpZmV0aW1lX3JhbmdlGAUg",
            "ASgLMlAueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5D",
            "bGlja2hvdXNlQ29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5SYW5nZUgAEmwK",
            "C2h0dHBfc291cmNlGAYgASgLMlUueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hv",
            "dXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4dGVybmFsRGljdGlv",
            "bmFyeS5IdHRwU291cmNlSAESbgoMbXlzcWxfc291cmNlGAcgASgLMlYueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNl",
            "Q29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5NeXNxbFNvdXJjZUgBEngKEWNs",
            "aWNraG91c2Vfc291cmNlGAggASgLMlsueWFuZGV4LmNsb3VkLm1kYi5jbGlj",
            "a2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4dGVybmFsRGlj",
            "dGlvbmFyeS5DbGlja2hvdXNlU291cmNlSAEScgoObW9uZ29kYl9zb3VyY2UY",
            "CSABKAsyWC55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuY29uZmln",
            "LkNsaWNraG91c2VDb25maWcuRXh0ZXJuYWxEaWN0aW9uYXJ5Lk1vbmdvZGJT",
            "b3VyY2VIARJ4ChFwb3N0Z3Jlc3FsX3NvdXJjZRgKIAEoCzJbLnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZp",
            "Zy5FeHRlcm5hbERpY3Rpb25hcnkuUG9zdGdyZXNxbFNvdXJjZUgBGjUKCkh0",
            "dHBTb3VyY2USEQoDdXJsGAEgASgJQgToxzEBEhQKBmZvcm1hdBgCIAEoCUIE",
            "6McxARqTAwoLTXlzcWxTb3VyY2USEAoCZGIYASABKAlCBOjHMQESEwoFdGFi",
            "bGUYAiABKAlCBOjHMQESGQoEcG9ydBgDIAEoA0IL+scxBzAtNjU1MzUSDAoE",
            "dXNlchgEIAEoCRIQCghwYXNzd29yZBgFIAEoCRJ4CghyZXBsaWNhcxgGIAMo",
            "CzJeLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xp",
            "Y2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuTXlzcWxTb3VyY2Uu",
            "UmVwbGljYUIGgsgxAj4wEg0KBXdoZXJlGAcgASgJEhgKEGludmFsaWRhdGVf",
            "cXVlcnkYCCABKAkafwoHUmVwbGljYRIbCgRob3N0GAEgASgJQg3oxzEBisgx",
            "BTw9MjUzEhwKCHByaW9yaXR5GAIgASgDQgroxzEB+scxAj4wEhkKBHBvcnQY",
            "AyABKANCC/rHMQcwLTY1NTM1EgwKBHVzZXIYBCABKAkSEAoIcGFzc3dvcmQY",
            "BSABKAkapgEKEENsaWNraG91c2VTb3VyY2USEAoCZGIYASABKAlCBOjHMQES",
            "EwoFdGFibGUYAiABKAlCBOjHMQESGwoEaG9zdBgDIAEoCUIN6McxAYrIMQU8",
            "PTI1MxIZCgRwb3J0GAQgASgDQgv6xzEHMC02NTUzNRISCgR1c2VyGAUgASgJ",
            "QgToxzEBEhAKCHBhc3N3b3JkGAYgASgJEg0KBXdoZXJlGAcgASgJGpkBCg1N",
            "b25nb2RiU291cmNlEhAKAmRiGAEgASgJQgToxzEBEhgKCmNvbGxlY3Rpb24Y",
            "AiABKAlCBOjHMQESGwoEaG9zdBgDIAEoCUIN6McxAYrIMQU8PTI1MxIZCgRw",
            "b3J0GAQgASgDQgv6xzEHMC02NTUzNRISCgR1c2VyGAUgASgJQgToxzEBEhAK",
            "CHBhc3N3b3JkGAYgASgJGosDChBQb3N0Z3Jlc3FsU291cmNlEhAKAmRiGAEg",
            "ASgJQgToxzEBEhMKBXRhYmxlGAIgASgJQgToxzEBEhUKBWhvc3RzGAMgAygJ",
            "QgaCyDECPjASGQoEcG9ydBgEIAEoA0IL+scxBzAtNjU1MzUSEgoEdXNlchgF",
            "IAEoCUIE6McxARIQCghwYXNzd29yZBgGIAEoCRIYChBpbnZhbGlkYXRlX3F1",
            "ZXJ5GAcgASgJEnUKCHNzbF9tb2RlGAggASgOMmMueWFuZGV4LmNsb3VkLm1k",
            "Yi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4dGVy",
            "bmFsRGljdGlvbmFyeS5Qb3N0Z3Jlc3FsU291cmNlLlNzbE1vZGUiZwoHU3Ns",
            "TW9kZRIYChRTU0xfTU9ERV9VTlNQRUNJRklFRBAAEgsKB0RJU0FCTEUQARIJ",
            "CgVBTExPVxACEgoKBlBSRUZFUhADEg0KCVZFUklGWV9DQRAEEg8KC1ZFUklG",
            "WV9GVUxMEAUa3gYKCVN0cnVjdHVyZRJjCgJpZBgBIAEoCzJXLnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZp",
            "Zy5FeHRlcm5hbERpY3Rpb25hcnkuU3RydWN0dXJlLklkEmUKA2tleRgDIAEo",
            "CzJYLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xp",
            "Y2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuU3RydWN0dXJlLktl",
            "eRJxCglyYW5nZV9taW4YBCABKAsyXi55YW5kZXguY2xvdWQubWRiLmNsaWNr",
            "aG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcuRXh0ZXJuYWxEaWN0",
            "aW9uYXJ5LlN0cnVjdHVyZS5BdHRyaWJ1dGUScQoJcmFuZ2VfbWF4GAUgASgL",
            "Ml4ueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlj",
            "a2hvdXNlQ29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5TdHJ1Y3R1cmUuQXR0",
            "cmlidXRlEnoKCmF0dHJpYnV0ZXMYAiADKAsyXi55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcuRXh0ZXJu",
            "YWxEaWN0aW9uYXJ5LlN0cnVjdHVyZS5BdHRyaWJ1dGVCBoLIMQI+MBqEAQoJ",
            "QXR0cmlidXRlEhIKBG5hbWUYASABKAlCBOjHMQESEgoEdHlwZRgCIAEoCUIE",
            "6McxARISCgpudWxsX3ZhbHVlGAMgASgJEhIKCmV4cHJlc3Npb24YBCABKAkS",
            "FAoMaGllcmFyY2hpY2FsGAUgASgIEhEKCWluamVjdGl2ZRgGIAEoCBoYCgJJ",
            "ZBISCgRuYW1lGAEgASgJQgToxzEBGoEBCgNLZXkSegoKYXR0cmlidXRlcxgB",
            "IAMoCzJeLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcu",
            "Q2xpY2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuU3RydWN0dXJl",
            "LkF0dHJpYnV0ZUIGgsgxAj4wGosCCgZMYXlvdXQSagoEdHlwZRgBIAEoDjJW",
            "LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2to",
            "b3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuTGF5b3V0LlR5cGVCBOjH",
            "MQESFQoNc2l6ZV9pbl9jZWxscxgCIAEoAyJ+CgRUeXBlEhQKEFRZUEVfVU5T",
            "UEVDSUZJRUQQABIICgRGTEFUEAESCgoGSEFTSEVEEAISFgoSQ09NUExFWF9L",
            "RVlfSEFTSEVEEAMSEAoMUkFOR0VfSEFTSEVEEAQSCQoFQ0FDSEUQBRIVChFD",
            "T01QTEVYX0tFWV9DQUNIRRAGGiEKBVJhbmdlEgsKA21pbhgBIAEoAxILCgNt",
            "YXgYAiABKANCEAoIbGlmZXRpbWUSBMDBMQFCDgoGc291cmNlEgTAwTEBGvQC",
            "Cg5HcmFwaGl0ZVJvbGx1cBISCgRuYW1lGAEgASgJQgToxzEBEmgKCHBhdHRl",
            "cm5zGAIgAygLMk4ueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNv",
            "bmZpZy5DbGlja2hvdXNlQ29uZmlnLkdyYXBoaXRlUm9sbHVwLlBhdHRlcm5C",
            "BoLIMQI+MBrjAQoHUGF0dGVybhIOCgZyZWdleHAYASABKAkSFgoIZnVuY3Rp",
            "b24YAiABKAlCBOjHMQEScwoJcmV0ZW50aW9uGAMgAygLMlgueWFuZGV4LmNs",
            "b3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmln",
            "LkdyYXBoaXRlUm9sbHVwLlBhdHRlcm4uUmV0ZW50aW9uQgaCyDECPjAaOwoJ",
            "UmV0ZW50aW9uEhMKA2FnZRgBIAEoA0IG+scxAj4wEhkKCXByZWNpc2lvbhgC",
            "IAEoA0IG+scxAj4wImQKCExvZ0xldmVsEhkKFUxPR19MRVZFTF9VTlNQRUNJ",
            "RklFRBAAEgkKBVRSQUNFEAESCQoFREVCVUcQAhIPCgtJTkZPUk1BVElPThAD",
            "EgsKB1dBUk5JTkcQBBIJCgVFUlJPUhAFIo0CChNDbGlja2hvdXNlQ29uZmln",
            "U2V0ElcKEGVmZmVjdGl2ZV9jb25maWcYASABKAsyNy55YW5kZXguY2xvdWQu",
            "bWRiLmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWdCBOjH",
            "MQESTAoLdXNlcl9jb25maWcYAiABKAsyNy55YW5kZXguY2xvdWQubWRiLmNs",
            "aWNraG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcSTwoOZGVmYXVs",
            "dF9jb25maWcYAyABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuY29uZmlnLkNsaWNraG91c2VDb25maWdCgQEKKXlhbmRleC5jbG91ZC5h",
            "cGkubWRiLmNsaWNraG91c2UudjEuY29uZmlnWlRnaXRodWIuY29tL3lhbmRl",
            "eC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91",
            "c2UvdjEvY29uZmlnO2NsaWNraG91c2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Parser, new[]{ "LogLevel", "MergeTree", "Compression", "Dictionaries", "GraphiteRollup", "Kafka", "MaxConnections", "MaxConcurrentQueries", "KeepAliveTimeout", "UncompressedCacheSize", "MarkCacheSize", "MaxTableSizeToDrop", "MaxPartitionSizeToDrop", "BuiltinDictionariesReloadInterval", "Timezone", "GeobaseUri", "QueryLogRetentionSize", "QueryLogRetentionTime", "QueryThreadLogEnabled", "QueryThreadLogRetentionSize", "QueryThreadLogRetentionTime", "PartLogRetentionSize", "PartLogRetentionTime", "MetricLogEnabled", "MetricLogRetentionSize", "MetricLogRetentionTime", "TraceLogEnabled", "TraceLogRetentionSize", "TraceLogRetentionTime", "TextLogEnabled", "TextLogRetentionSize", "TextLogRetentionTime", "TextLogLevel", "BackgroundPoolSize", "BackgroundSchedulePoolSize" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree.Parser, new[]{ "ReplicatedDeduplicationWindow", "ReplicatedDeduplicationWindowSeconds", "PartsToDelayInsert", "PartsToThrowInsert", "MaxReplicatedMergesInQueue", "NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge", "MaxBytesToMergeAtMinSpaceInPool" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Parser, new[]{ "SecurityProtocol", "SaslMechanism", "SaslUsername", "SaslPassword" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol), typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Parser, new[]{ "Method", "MinPartSize", "MinPartSizeRatio" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Parser, new[]{ "Name", "Structure", "Layout", "FixedLifetime", "LifetimeRange", "HttpSource", "MysqlSource", "ClickhouseSource", "MongodbSource", "PostgresqlSource" }, new[]{ "Lifetime", "Source" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource.Parser, new[]{ "Url", "Format" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Parser, new[]{ "Db", "Table", "Port", "User", "Password", "Replicas", "Where", "InvalidateQuery" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica.Parser, new[]{ "Host", "Priority", "Port", "User", "Password" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource.Parser, new[]{ "Db", "Table", "Host", "Port", "User", "Password", "Where" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource.Parser, new[]{ "Db", "Collection", "Host", "Port", "User", "Password" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Parser, new[]{ "Db", "Table", "Hosts", "Port", "User", "Password", "InvalidateQuery", "SslMode" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Parser, new[]{ "Id", "Key", "RangeMin", "RangeMax", "Attributes" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser, new[]{ "Name", "Type", "NullValue", "Expression", "Hierarchical", "Injective" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id.Parser, new[]{ "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key.Parser, new[]{ "Attributes" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Parser, new[]{ "Type", "SizeInCells" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range.Parser, new[]{ "Min", "Max" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Parser, new[]{ "Name", "Patterns" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Parser, new[]{ "Regexp", "Function", "Retention" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention.Parser, new[]{ "Age", "Precision" }, null, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet.Parser, new[]{ "EffectiveConfig", "UserConfig", "DefaultConfig" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ClickHouse configuration options. Detailed description for each set of options
  /// is available in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/).
  ///
  /// Any options not listed here are not supported.
  /// </summary>
  internal sealed partial class ClickhouseConfig : pb::IMessage<ClickhouseConfig> {
    private static readonly pb::MessageParser<ClickhouseConfig> _parser = new pb::MessageParser<ClickhouseConfig>(() => new ClickhouseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickhouseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig(ClickhouseConfig other) : this() {
      logLevel_ = other.logLevel_;
      mergeTree_ = other.mergeTree_ != null ? other.mergeTree_.Clone() : null;
      compression_ = other.compression_.Clone();
      dictionaries_ = other.dictionaries_.Clone();
      graphiteRollup_ = other.graphiteRollup_.Clone();
      kafka_ = other.kafka_ != null ? other.kafka_.Clone() : null;
      MaxConnections = other.MaxConnections;
      MaxConcurrentQueries = other.MaxConcurrentQueries;
      KeepAliveTimeout = other.KeepAliveTimeout;
      UncompressedCacheSize = other.UncompressedCacheSize;
      MarkCacheSize = other.MarkCacheSize;
      MaxTableSizeToDrop = other.MaxTableSizeToDrop;
      MaxPartitionSizeToDrop = other.MaxPartitionSizeToDrop;
      BuiltinDictionariesReloadInterval = other.BuiltinDictionariesReloadInterval;
      timezone_ = other.timezone_;
      geobaseUri_ = other.geobaseUri_;
      QueryLogRetentionSize = other.QueryLogRetentionSize;
      QueryLogRetentionTime = other.QueryLogRetentionTime;
      QueryThreadLogEnabled = other.QueryThreadLogEnabled;
      QueryThreadLogRetentionSize = other.QueryThreadLogRetentionSize;
      QueryThreadLogRetentionTime = other.QueryThreadLogRetentionTime;
      PartLogRetentionSize = other.PartLogRetentionSize;
      PartLogRetentionTime = other.PartLogRetentionTime;
      MetricLogEnabled = other.MetricLogEnabled;
      MetricLogRetentionSize = other.MetricLogRetentionSize;
      MetricLogRetentionTime = other.MetricLogRetentionTime;
      TraceLogEnabled = other.TraceLogEnabled;
      TraceLogRetentionSize = other.TraceLogRetentionSize;
      TraceLogRetentionTime = other.TraceLogRetentionTime;
      TextLogEnabled = other.TextLogEnabled;
      TextLogRetentionSize = other.TextLogRetentionSize;
      TextLogRetentionTime = other.TextLogRetentionTime;
      textLogLevel_ = other.textLogLevel_;
      BackgroundPoolSize = other.BackgroundPoolSize;
      BackgroundSchedulePoolSize = other.BackgroundSchedulePoolSize;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig Clone() {
      return new ClickhouseConfig(this);
    }

    /// <summary>Field number for the "log_level" field.</summary>
    public const int LogLevelFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel logLevel_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified;
    /// <summary>
    /// Logging level for the ClickHouse cluster. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "merge_tree" field.</summary>
    public const int MergeTreeFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree mergeTree_;
    /// <summary>
    /// Settings for the MergeTree engine.
    /// See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree MergeTree {
      get { return mergeTree_; }
      set {
        mergeTree_ = value;
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> _repeated_compression_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> compression_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression>();
    /// <summary>
    /// Compression settings for the ClickHouse cluster.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> Compression {
      get { return compression_; }
    }

    /// <summary>Field number for the "dictionaries" field.</summary>
    public const int DictionariesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> _repeated_dictionaries_codec
        = pb::FieldCodec.ForMessage(34, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> dictionaries_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary>();
    /// <summary>
    /// Configuration of external dictionaries to be used by the ClickHouse cluster.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> Dictionaries {
      get { return dictionaries_; }
    }

    /// <summary>Field number for the "graphite_rollup" field.</summary>
    public const int GraphiteRollupFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> _repeated_graphiteRollup_codec
        = pb::FieldCodec.ForMessage(42, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> graphiteRollup_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup>();
    /// <summary>
    /// Settings for thinning Graphite data.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> GraphiteRollup {
      get { return graphiteRollup_; }
    }

    /// <summary>Field number for the "kafka" field.</summary>
    public const int KafkaFieldNumber = 35;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka kafka_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka Kafka {
      get { return kafka_; }
      set {
        kafka_ = value;
      }
    }

    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_maxConnections_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? maxConnections_;
    /// <summary>
    /// Maximum number of inbound connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }


    /// <summary>Field number for the "max_concurrent_queries" field.</summary>
    public const int MaxConcurrentQueriesFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_maxConcurrentQueries_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? maxConcurrentQueries_;
    /// <summary>
    /// Maximum number of simultaneously processed requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConcurrentQueries {
      get { return maxConcurrentQueries_; }
      set {
        maxConcurrentQueries_ = value;
      }
    }


    /// <summary>Field number for the "keep_alive_timeout" field.</summary>
    public const int KeepAliveTimeoutFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_keepAliveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? keepAliveTimeout_;
    /// <summary>
    /// Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? KeepAliveTimeout {
      get { return keepAliveTimeout_; }
      set {
        keepAliveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "uncompressed_cache_size" field.</summary>
    public const int UncompressedCacheSizeFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_uncompressedCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? uncompressedCacheSize_;
    /// <summary>
    /// Cache size (in bytes) for uncompressed data used by MergeTree tables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? UncompressedCacheSize {
      get { return uncompressedCacheSize_; }
      set {
        uncompressedCacheSize_ = value;
      }
    }


    /// <summary>Field number for the "mark_cache_size" field.</summary>
    public const int MarkCacheSizeFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_markCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? markCacheSize_;
    /// <summary>
    /// Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MarkCacheSize {
      get { return markCacheSize_; }
      set {
        markCacheSize_ = value;
      }
    }


    /// <summary>Field number for the "max_table_size_to_drop" field.</summary>
    public const int MaxTableSizeToDropFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_maxTableSizeToDrop_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? maxTableSizeToDrop_;
    /// <summary>
    /// Maximum size of the table that can be deleted using a DROP query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxTableSizeToDrop {
      get { return maxTableSizeToDrop_; }
      set {
        maxTableSizeToDrop_ = value;
      }
    }


    /// <summary>Field number for the "max_partition_size_to_drop" field.</summary>
    public const int MaxPartitionSizeToDropFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_maxPartitionSizeToDrop_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? maxPartitionSizeToDrop_;
    /// <summary>
    /// Maximum size of the partition that can be deleted using a DROP query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPartitionSizeToDrop {
      get { return maxPartitionSizeToDrop_; }
      set {
        maxPartitionSizeToDrop_ = value;
      }
    }


    /// <summary>Field number for the "builtin_dictionaries_reload_interval" field.</summary>
    public const int BuiltinDictionariesReloadIntervalFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_builtinDictionariesReloadInterval_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? builtinDictionariesReloadInterval_;
    /// <summary>
    /// The setting is deprecated and has no effect.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BuiltinDictionariesReloadInterval {
      get { return builtinDictionariesReloadInterval_; }
      set {
        builtinDictionariesReloadInterval_ = value;
      }
    }


    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 14;
    private string timezone_ = "";
    /// <summary>
    /// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "geobase_uri" field.</summary>
    public const int GeobaseUriFieldNumber = 15;
    private string geobaseUri_ = "";
    /// <summary>
    /// Address of the archive with the user geobase in Object Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GeobaseUri {
      get { return geobaseUri_; }
      set {
        geobaseUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_log_retention_size" field.</summary>
    public const int QueryLogRetentionSizeFieldNumber = 16;
    private static readonly pb::FieldCodec<long?> _single_queryLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(130);
    private long? queryLogRetentionSize_;
    /// <summary>
    /// The maximum size that query_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// query_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? QueryLogRetentionSize {
      get { return queryLogRetentionSize_; }
      set {
        queryLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "query_log_retention_time" field.</summary>
    public const int QueryLogRetentionTimeFieldNumber = 17;
    private static readonly pb::FieldCodec<long?> _single_queryLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(138);
    private long? queryLogRetentionTime_;
    /// <summary>
    /// The maximum time that query_log records will be retained before removal. If set to 0, automatic removal of
    /// query_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? QueryLogRetentionTime {
      get { return queryLogRetentionTime_; }
      set {
        queryLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "query_thread_log_enabled" field.</summary>
    public const int QueryThreadLogEnabledFieldNumber = 18;
    private static readonly pb::FieldCodec<bool?> _single_queryThreadLogEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(146);
    private bool? queryThreadLogEnabled_;
    /// <summary>
    /// Whether query_thread_log system table is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? QueryThreadLogEnabled {
      get { return queryThreadLogEnabled_; }
      set {
        queryThreadLogEnabled_ = value;
      }
    }


    /// <summary>Field number for the "query_thread_log_retention_size" field.</summary>
    public const int QueryThreadLogRetentionSizeFieldNumber = 19;
    private static readonly pb::FieldCodec<long?> _single_queryThreadLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(154);
    private long? queryThreadLogRetentionSize_;
    /// <summary>
    /// The maximum size that query_thread_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// query_thread_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? QueryThreadLogRetentionSize {
      get { return queryThreadLogRetentionSize_; }
      set {
        queryThreadLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "query_thread_log_retention_time" field.</summary>
    public const int QueryThreadLogRetentionTimeFieldNumber = 20;
    private static readonly pb::FieldCodec<long?> _single_queryThreadLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(162);
    private long? queryThreadLogRetentionTime_;
    /// <summary>
    /// The maximum time that query_thread_log records will be retained before removal. If set to 0, automatic removal of
    /// query_thread_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? QueryThreadLogRetentionTime {
      get { return queryThreadLogRetentionTime_; }
      set {
        queryThreadLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "part_log_retention_size" field.</summary>
    public const int PartLogRetentionSizeFieldNumber = 21;
    private static readonly pb::FieldCodec<long?> _single_partLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(170);
    private long? partLogRetentionSize_;
    /// <summary>
    /// The maximum size that part_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// part_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PartLogRetentionSize {
      get { return partLogRetentionSize_; }
      set {
        partLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "part_log_retention_time" field.</summary>
    public const int PartLogRetentionTimeFieldNumber = 22;
    private static readonly pb::FieldCodec<long?> _single_partLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(178);
    private long? partLogRetentionTime_;
    /// <summary>
    /// The maximum time that part_log records will be retained before removal. If set to 0, automatic removal of
    /// part_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? PartLogRetentionTime {
      get { return partLogRetentionTime_; }
      set {
        partLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "metric_log_enabled" field.</summary>
    public const int MetricLogEnabledFieldNumber = 23;
    private static readonly pb::FieldCodec<bool?> _single_metricLogEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(186);
    private bool? metricLogEnabled_;
    /// <summary>
    /// Whether metric_log system table is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? MetricLogEnabled {
      get { return metricLogEnabled_; }
      set {
        metricLogEnabled_ = value;
      }
    }


    /// <summary>Field number for the "metric_log_retention_size" field.</summary>
    public const int MetricLogRetentionSizeFieldNumber = 24;
    private static readonly pb::FieldCodec<long?> _single_metricLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(194);
    private long? metricLogRetentionSize_;
    /// <summary>
    /// The maximum size that metric_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// metric_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MetricLogRetentionSize {
      get { return metricLogRetentionSize_; }
      set {
        metricLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "metric_log_retention_time" field.</summary>
    public const int MetricLogRetentionTimeFieldNumber = 25;
    private static readonly pb::FieldCodec<long?> _single_metricLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(202);
    private long? metricLogRetentionTime_;
    /// <summary>
    /// The maximum time that metric_log records will be retained before removal. If set to 0, automatic removal of
    /// metric_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MetricLogRetentionTime {
      get { return metricLogRetentionTime_; }
      set {
        metricLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "trace_log_enabled" field.</summary>
    public const int TraceLogEnabledFieldNumber = 26;
    private static readonly pb::FieldCodec<bool?> _single_traceLogEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(210);
    private bool? traceLogEnabled_;
    /// <summary>
    /// Whether trace_log system table is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TraceLogEnabled {
      get { return traceLogEnabled_; }
      set {
        traceLogEnabled_ = value;
      }
    }


    /// <summary>Field number for the "trace_log_retention_size" field.</summary>
    public const int TraceLogRetentionSizeFieldNumber = 27;
    private static readonly pb::FieldCodec<long?> _single_traceLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(218);
    private long? traceLogRetentionSize_;
    /// <summary>
    /// The maximum size that trace_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// trace_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TraceLogRetentionSize {
      get { return traceLogRetentionSize_; }
      set {
        traceLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "trace_log_retention_time" field.</summary>
    public const int TraceLogRetentionTimeFieldNumber = 28;
    private static readonly pb::FieldCodec<long?> _single_traceLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(226);
    private long? traceLogRetentionTime_;
    /// <summary>
    /// The maximum time that trace_log records will be retained before removal. If set to 0, automatic removal of
    /// trace_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TraceLogRetentionTime {
      get { return traceLogRetentionTime_; }
      set {
        traceLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "text_log_enabled" field.</summary>
    public const int TextLogEnabledFieldNumber = 29;
    private static readonly pb::FieldCodec<bool?> _single_textLogEnabled_codec = pb::FieldCodec.ForStructWrapper<bool>(234);
    private bool? textLogEnabled_;
    /// <summary>
    /// Whether text_log system table is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? TextLogEnabled {
      get { return textLogEnabled_; }
      set {
        textLogEnabled_ = value;
      }
    }


    /// <summary>Field number for the "text_log_retention_size" field.</summary>
    public const int TextLogRetentionSizeFieldNumber = 30;
    private static readonly pb::FieldCodec<long?> _single_textLogRetentionSize_codec = pb::FieldCodec.ForStructWrapper<long>(242);
    private long? textLogRetentionSize_;
    /// <summary>
    /// The maximum size that text_log can grow to before old data will be removed. If set to 0, automatic removal of
    /// text_log data based on size is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TextLogRetentionSize {
      get { return textLogRetentionSize_; }
      set {
        textLogRetentionSize_ = value;
      }
    }


    /// <summary>Field number for the "text_log_retention_time" field.</summary>
    public const int TextLogRetentionTimeFieldNumber = 31;
    private static readonly pb::FieldCodec<long?> _single_textLogRetentionTime_codec = pb::FieldCodec.ForStructWrapper<long>(250);
    private long? textLogRetentionTime_;
    /// <summary>
    /// The maximum time that text_log records will be retained before removal. If set to 0, automatic removal of
    /// text_log data based on time is disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? TextLogRetentionTime {
      get { return textLogRetentionTime_; }
      set {
        textLogRetentionTime_ = value;
      }
    }


    /// <summary>Field number for the "text_log_level" field.</summary>
    public const int TextLogLevelFieldNumber = 32;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel textLogLevel_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified;
    /// <summary>
    /// Logging level for text_log system table. Possible values: TRACE, DEBUG, INFORMATION, WARNING, ERROR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel TextLogLevel {
      get { return textLogLevel_; }
      set {
        textLogLevel_ = value;
      }
    }

    /// <summary>Field number for the "background_pool_size" field.</summary>
    public const int BackgroundPoolSizeFieldNumber = 33;
    private static readonly pb::FieldCodec<long?> _single_backgroundPoolSize_codec = pb::FieldCodec.ForStructWrapper<long>(266);
    private long? backgroundPoolSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackgroundPoolSize {
      get { return backgroundPoolSize_; }
      set {
        backgroundPoolSize_ = value;
      }
    }


    /// <summary>Field number for the "background_schedule_pool_size" field.</summary>
    public const int BackgroundSchedulePoolSizeFieldNumber = 34;
    private static readonly pb::FieldCodec<long?> _single_backgroundSchedulePoolSize_codec = pb::FieldCodec.ForStructWrapper<long>(274);
    private long? backgroundSchedulePoolSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackgroundSchedulePoolSize {
      get { return backgroundSchedulePoolSize_; }
      set {
        backgroundSchedulePoolSize_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickhouseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickhouseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogLevel != other.LogLevel) return false;
      if (!object.Equals(MergeTree, other.MergeTree)) return false;
      if(!compression_.Equals(other.compression_)) return false;
      if(!dictionaries_.Equals(other.dictionaries_)) return false;
      if(!graphiteRollup_.Equals(other.graphiteRollup_)) return false;
      if (!object.Equals(Kafka, other.Kafka)) return false;
      if (MaxConnections != other.MaxConnections) return false;
      if (MaxConcurrentQueries != other.MaxConcurrentQueries) return false;
      if (KeepAliveTimeout != other.KeepAliveTimeout) return false;
      if (UncompressedCacheSize != other.UncompressedCacheSize) return false;
      if (MarkCacheSize != other.MarkCacheSize) return false;
      if (MaxTableSizeToDrop != other.MaxTableSizeToDrop) return false;
      if (MaxPartitionSizeToDrop != other.MaxPartitionSizeToDrop) return false;
      if (BuiltinDictionariesReloadInterval != other.BuiltinDictionariesReloadInterval) return false;
      if (Timezone != other.Timezone) return false;
      if (GeobaseUri != other.GeobaseUri) return false;
      if (QueryLogRetentionSize != other.QueryLogRetentionSize) return false;
      if (QueryLogRetentionTime != other.QueryLogRetentionTime) return false;
      if (QueryThreadLogEnabled != other.QueryThreadLogEnabled) return false;
      if (QueryThreadLogRetentionSize != other.QueryThreadLogRetentionSize) return false;
      if (QueryThreadLogRetentionTime != other.QueryThreadLogRetentionTime) return false;
      if (PartLogRetentionSize != other.PartLogRetentionSize) return false;
      if (PartLogRetentionTime != other.PartLogRetentionTime) return false;
      if (MetricLogEnabled != other.MetricLogEnabled) return false;
      if (MetricLogRetentionSize != other.MetricLogRetentionSize) return false;
      if (MetricLogRetentionTime != other.MetricLogRetentionTime) return false;
      if (TraceLogEnabled != other.TraceLogEnabled) return false;
      if (TraceLogRetentionSize != other.TraceLogRetentionSize) return false;
      if (TraceLogRetentionTime != other.TraceLogRetentionTime) return false;
      if (TextLogEnabled != other.TextLogEnabled) return false;
      if (TextLogRetentionSize != other.TextLogRetentionSize) return false;
      if (TextLogRetentionTime != other.TextLogRetentionTime) return false;
      if (TextLogLevel != other.TextLogLevel) return false;
      if (BackgroundPoolSize != other.BackgroundPoolSize) return false;
      if (BackgroundSchedulePoolSize != other.BackgroundSchedulePoolSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) hash ^= LogLevel.GetHashCode();
      if (mergeTree_ != null) hash ^= MergeTree.GetHashCode();
      hash ^= compression_.GetHashCode();
      hash ^= dictionaries_.GetHashCode();
      hash ^= graphiteRollup_.GetHashCode();
      if (kafka_ != null) hash ^= Kafka.GetHashCode();
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (maxConcurrentQueries_ != null) hash ^= MaxConcurrentQueries.GetHashCode();
      if (keepAliveTimeout_ != null) hash ^= KeepAliveTimeout.GetHashCode();
      if (uncompressedCacheSize_ != null) hash ^= UncompressedCacheSize.GetHashCode();
      if (markCacheSize_ != null) hash ^= MarkCacheSize.GetHashCode();
      if (maxTableSizeToDrop_ != null) hash ^= MaxTableSizeToDrop.GetHashCode();
      if (maxPartitionSizeToDrop_ != null) hash ^= MaxPartitionSizeToDrop.GetHashCode();
      if (builtinDictionariesReloadInterval_ != null) hash ^= BuiltinDictionariesReloadInterval.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (GeobaseUri.Length != 0) hash ^= GeobaseUri.GetHashCode();
      if (queryLogRetentionSize_ != null) hash ^= QueryLogRetentionSize.GetHashCode();
      if (queryLogRetentionTime_ != null) hash ^= QueryLogRetentionTime.GetHashCode();
      if (queryThreadLogEnabled_ != null) hash ^= QueryThreadLogEnabled.GetHashCode();
      if (queryThreadLogRetentionSize_ != null) hash ^= QueryThreadLogRetentionSize.GetHashCode();
      if (queryThreadLogRetentionTime_ != null) hash ^= QueryThreadLogRetentionTime.GetHashCode();
      if (partLogRetentionSize_ != null) hash ^= PartLogRetentionSize.GetHashCode();
      if (partLogRetentionTime_ != null) hash ^= PartLogRetentionTime.GetHashCode();
      if (metricLogEnabled_ != null) hash ^= MetricLogEnabled.GetHashCode();
      if (metricLogRetentionSize_ != null) hash ^= MetricLogRetentionSize.GetHashCode();
      if (metricLogRetentionTime_ != null) hash ^= MetricLogRetentionTime.GetHashCode();
      if (traceLogEnabled_ != null) hash ^= TraceLogEnabled.GetHashCode();
      if (traceLogRetentionSize_ != null) hash ^= TraceLogRetentionSize.GetHashCode();
      if (traceLogRetentionTime_ != null) hash ^= TraceLogRetentionTime.GetHashCode();
      if (textLogEnabled_ != null) hash ^= TextLogEnabled.GetHashCode();
      if (textLogRetentionSize_ != null) hash ^= TextLogRetentionSize.GetHashCode();
      if (textLogRetentionTime_ != null) hash ^= TextLogRetentionTime.GetHashCode();
      if (TextLogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) hash ^= TextLogLevel.GetHashCode();
      if (backgroundPoolSize_ != null) hash ^= BackgroundPoolSize.GetHashCode();
      if (backgroundSchedulePoolSize_ != null) hash ^= BackgroundSchedulePoolSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogLevel);
      }
      if (mergeTree_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MergeTree);
      }
      compression_.WriteTo(output, _repeated_compression_codec);
      dictionaries_.WriteTo(output, _repeated_dictionaries_codec);
      graphiteRollup_.WriteTo(output, _repeated_graphiteRollup_codec);
      if (maxConnections_ != null) {
        _single_maxConnections_codec.WriteTagAndValue(output, MaxConnections);
      }
      if (maxConcurrentQueries_ != null) {
        _single_maxConcurrentQueries_codec.WriteTagAndValue(output, MaxConcurrentQueries);
      }
      if (keepAliveTimeout_ != null) {
        _single_keepAliveTimeout_codec.WriteTagAndValue(output, KeepAliveTimeout);
      }
      if (uncompressedCacheSize_ != null) {
        _single_uncompressedCacheSize_codec.WriteTagAndValue(output, UncompressedCacheSize);
      }
      if (markCacheSize_ != null) {
        _single_markCacheSize_codec.WriteTagAndValue(output, MarkCacheSize);
      }
      if (maxTableSizeToDrop_ != null) {
        _single_maxTableSizeToDrop_codec.WriteTagAndValue(output, MaxTableSizeToDrop);
      }
      if (builtinDictionariesReloadInterval_ != null) {
        _single_builtinDictionariesReloadInterval_codec.WriteTagAndValue(output, BuiltinDictionariesReloadInterval);
      }
      if (maxPartitionSizeToDrop_ != null) {
        _single_maxPartitionSizeToDrop_codec.WriteTagAndValue(output, MaxPartitionSizeToDrop);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Timezone);
      }
      if (GeobaseUri.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(GeobaseUri);
      }
      if (queryLogRetentionSize_ != null) {
        _single_queryLogRetentionSize_codec.WriteTagAndValue(output, QueryLogRetentionSize);
      }
      if (queryLogRetentionTime_ != null) {
        _single_queryLogRetentionTime_codec.WriteTagAndValue(output, QueryLogRetentionTime);
      }
      if (queryThreadLogEnabled_ != null) {
        _single_queryThreadLogEnabled_codec.WriteTagAndValue(output, QueryThreadLogEnabled);
      }
      if (queryThreadLogRetentionSize_ != null) {
        _single_queryThreadLogRetentionSize_codec.WriteTagAndValue(output, QueryThreadLogRetentionSize);
      }
      if (queryThreadLogRetentionTime_ != null) {
        _single_queryThreadLogRetentionTime_codec.WriteTagAndValue(output, QueryThreadLogRetentionTime);
      }
      if (partLogRetentionSize_ != null) {
        _single_partLogRetentionSize_codec.WriteTagAndValue(output, PartLogRetentionSize);
      }
      if (partLogRetentionTime_ != null) {
        _single_partLogRetentionTime_codec.WriteTagAndValue(output, PartLogRetentionTime);
      }
      if (metricLogEnabled_ != null) {
        _single_metricLogEnabled_codec.WriteTagAndValue(output, MetricLogEnabled);
      }
      if (metricLogRetentionSize_ != null) {
        _single_metricLogRetentionSize_codec.WriteTagAndValue(output, MetricLogRetentionSize);
      }
      if (metricLogRetentionTime_ != null) {
        _single_metricLogRetentionTime_codec.WriteTagAndValue(output, MetricLogRetentionTime);
      }
      if (traceLogEnabled_ != null) {
        _single_traceLogEnabled_codec.WriteTagAndValue(output, TraceLogEnabled);
      }
      if (traceLogRetentionSize_ != null) {
        _single_traceLogRetentionSize_codec.WriteTagAndValue(output, TraceLogRetentionSize);
      }
      if (traceLogRetentionTime_ != null) {
        _single_traceLogRetentionTime_codec.WriteTagAndValue(output, TraceLogRetentionTime);
      }
      if (textLogEnabled_ != null) {
        _single_textLogEnabled_codec.WriteTagAndValue(output, TextLogEnabled);
      }
      if (textLogRetentionSize_ != null) {
        _single_textLogRetentionSize_codec.WriteTagAndValue(output, TextLogRetentionSize);
      }
      if (textLogRetentionTime_ != null) {
        _single_textLogRetentionTime_codec.WriteTagAndValue(output, TextLogRetentionTime);
      }
      if (TextLogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        output.WriteRawTag(128, 2);
        output.WriteEnum((int) TextLogLevel);
      }
      if (backgroundPoolSize_ != null) {
        _single_backgroundPoolSize_codec.WriteTagAndValue(output, BackgroundPoolSize);
      }
      if (backgroundSchedulePoolSize_ != null) {
        _single_backgroundSchedulePoolSize_codec.WriteTagAndValue(output, BackgroundSchedulePoolSize);
      }
      if (kafka_ != null) {
        output.WriteRawTag(154, 2);
        output.WriteMessage(Kafka);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (mergeTree_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MergeTree);
      }
      size += compression_.CalculateSize(_repeated_compression_codec);
      size += dictionaries_.CalculateSize(_repeated_dictionaries_codec);
      size += graphiteRollup_.CalculateSize(_repeated_graphiteRollup_codec);
      if (kafka_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Kafka);
      }
      if (maxConnections_ != null) {
        size += _single_maxConnections_codec.CalculateSizeWithTag(MaxConnections);
      }
      if (maxConcurrentQueries_ != null) {
        size += _single_maxConcurrentQueries_codec.CalculateSizeWithTag(MaxConcurrentQueries);
      }
      if (keepAliveTimeout_ != null) {
        size += _single_keepAliveTimeout_codec.CalculateSizeWithTag(KeepAliveTimeout);
      }
      if (uncompressedCacheSize_ != null) {
        size += _single_uncompressedCacheSize_codec.CalculateSizeWithTag(UncompressedCacheSize);
      }
      if (markCacheSize_ != null) {
        size += _single_markCacheSize_codec.CalculateSizeWithTag(MarkCacheSize);
      }
      if (maxTableSizeToDrop_ != null) {
        size += _single_maxTableSizeToDrop_codec.CalculateSizeWithTag(MaxTableSizeToDrop);
      }
      if (maxPartitionSizeToDrop_ != null) {
        size += _single_maxPartitionSizeToDrop_codec.CalculateSizeWithTag(MaxPartitionSizeToDrop);
      }
      if (builtinDictionariesReloadInterval_ != null) {
        size += _single_builtinDictionariesReloadInterval_codec.CalculateSizeWithTag(BuiltinDictionariesReloadInterval);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (GeobaseUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GeobaseUri);
      }
      if (queryLogRetentionSize_ != null) {
        size += _single_queryLogRetentionSize_codec.CalculateSizeWithTag(QueryLogRetentionSize);
      }
      if (queryLogRetentionTime_ != null) {
        size += _single_queryLogRetentionTime_codec.CalculateSizeWithTag(QueryLogRetentionTime);
      }
      if (queryThreadLogEnabled_ != null) {
        size += _single_queryThreadLogEnabled_codec.CalculateSizeWithTag(QueryThreadLogEnabled);
      }
      if (queryThreadLogRetentionSize_ != null) {
        size += _single_queryThreadLogRetentionSize_codec.CalculateSizeWithTag(QueryThreadLogRetentionSize);
      }
      if (queryThreadLogRetentionTime_ != null) {
        size += _single_queryThreadLogRetentionTime_codec.CalculateSizeWithTag(QueryThreadLogRetentionTime);
      }
      if (partLogRetentionSize_ != null) {
        size += _single_partLogRetentionSize_codec.CalculateSizeWithTag(PartLogRetentionSize);
      }
      if (partLogRetentionTime_ != null) {
        size += _single_partLogRetentionTime_codec.CalculateSizeWithTag(PartLogRetentionTime);
      }
      if (metricLogEnabled_ != null) {
        size += _single_metricLogEnabled_codec.CalculateSizeWithTag(MetricLogEnabled);
      }
      if (metricLogRetentionSize_ != null) {
        size += _single_metricLogRetentionSize_codec.CalculateSizeWithTag(MetricLogRetentionSize);
      }
      if (metricLogRetentionTime_ != null) {
        size += _single_metricLogRetentionTime_codec.CalculateSizeWithTag(MetricLogRetentionTime);
      }
      if (traceLogEnabled_ != null) {
        size += _single_traceLogEnabled_codec.CalculateSizeWithTag(TraceLogEnabled);
      }
      if (traceLogRetentionSize_ != null) {
        size += _single_traceLogRetentionSize_codec.CalculateSizeWithTag(TraceLogRetentionSize);
      }
      if (traceLogRetentionTime_ != null) {
        size += _single_traceLogRetentionTime_codec.CalculateSizeWithTag(TraceLogRetentionTime);
      }
      if (textLogEnabled_ != null) {
        size += _single_textLogEnabled_codec.CalculateSizeWithTag(TextLogEnabled);
      }
      if (textLogRetentionSize_ != null) {
        size += _single_textLogRetentionSize_codec.CalculateSizeWithTag(TextLogRetentionSize);
      }
      if (textLogRetentionTime_ != null) {
        size += _single_textLogRetentionTime_codec.CalculateSizeWithTag(TextLogRetentionTime);
      }
      if (TextLogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TextLogLevel);
      }
      if (backgroundPoolSize_ != null) {
        size += _single_backgroundPoolSize_codec.CalculateSizeWithTag(BackgroundPoolSize);
      }
      if (backgroundSchedulePoolSize_ != null) {
        size += _single_backgroundSchedulePoolSize_codec.CalculateSizeWithTag(BackgroundSchedulePoolSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickhouseConfig other) {
      if (other == null) {
        return;
      }
      if (other.LogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        LogLevel = other.LogLevel;
      }
      if (other.mergeTree_ != null) {
        if (mergeTree_ == null) {
          MergeTree = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree();
        }
        MergeTree.MergeFrom(other.MergeTree);
      }
      compression_.Add(other.compression_);
      dictionaries_.Add(other.dictionaries_);
      graphiteRollup_.Add(other.graphiteRollup_);
      if (other.kafka_ != null) {
        if (kafka_ == null) {
          Kafka = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka();
        }
        Kafka.MergeFrom(other.Kafka);
      }
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null || other.MaxConnections != 0L) {
          MaxConnections = other.MaxConnections;
        }
      }
      if (other.maxConcurrentQueries_ != null) {
        if (maxConcurrentQueries_ == null || other.MaxConcurrentQueries != 0L) {
          MaxConcurrentQueries = other.MaxConcurrentQueries;
        }
      }
      if (other.keepAliveTimeout_ != null) {
        if (keepAliveTimeout_ == null || other.KeepAliveTimeout != 0L) {
          KeepAliveTimeout = other.KeepAliveTimeout;
        }
      }
      if (other.uncompressedCacheSize_ != null) {
        if (uncompressedCacheSize_ == null || other.UncompressedCacheSize != 0L) {
          UncompressedCacheSize = other.UncompressedCacheSize;
        }
      }
      if (other.markCacheSize_ != null) {
        if (markCacheSize_ == null || other.MarkCacheSize != 0L) {
          MarkCacheSize = other.MarkCacheSize;
        }
      }
      if (other.maxTableSizeToDrop_ != null) {
        if (maxTableSizeToDrop_ == null || other.MaxTableSizeToDrop != 0L) {
          MaxTableSizeToDrop = other.MaxTableSizeToDrop;
        }
      }
      if (other.maxPartitionSizeToDrop_ != null) {
        if (maxPartitionSizeToDrop_ == null || other.MaxPartitionSizeToDrop != 0L) {
          MaxPartitionSizeToDrop = other.MaxPartitionSizeToDrop;
        }
      }
      if (other.builtinDictionariesReloadInterval_ != null) {
        if (builtinDictionariesReloadInterval_ == null || other.BuiltinDictionariesReloadInterval != 0L) {
          BuiltinDictionariesReloadInterval = other.BuiltinDictionariesReloadInterval;
        }
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      if (other.GeobaseUri.Length != 0) {
        GeobaseUri = other.GeobaseUri;
      }
      if (other.queryLogRetentionSize_ != null) {
        if (queryLogRetentionSize_ == null || other.QueryLogRetentionSize != 0L) {
          QueryLogRetentionSize = other.QueryLogRetentionSize;
        }
      }
      if (other.queryLogRetentionTime_ != null) {
        if (queryLogRetentionTime_ == null || other.QueryLogRetentionTime != 0L) {
          QueryLogRetentionTime = other.QueryLogRetentionTime;
        }
      }
      if (other.queryThreadLogEnabled_ != null) {
        if (queryThreadLogEnabled_ == null || other.QueryThreadLogEnabled != false) {
          QueryThreadLogEnabled = other.QueryThreadLogEnabled;
        }
      }
      if (other.queryThreadLogRetentionSize_ != null) {
        if (queryThreadLogRetentionSize_ == null || other.QueryThreadLogRetentionSize != 0L) {
          QueryThreadLogRetentionSize = other.QueryThreadLogRetentionSize;
        }
      }
      if (other.queryThreadLogRetentionTime_ != null) {
        if (queryThreadLogRetentionTime_ == null || other.QueryThreadLogRetentionTime != 0L) {
          QueryThreadLogRetentionTime = other.QueryThreadLogRetentionTime;
        }
      }
      if (other.partLogRetentionSize_ != null) {
        if (partLogRetentionSize_ == null || other.PartLogRetentionSize != 0L) {
          PartLogRetentionSize = other.PartLogRetentionSize;
        }
      }
      if (other.partLogRetentionTime_ != null) {
        if (partLogRetentionTime_ == null || other.PartLogRetentionTime != 0L) {
          PartLogRetentionTime = other.PartLogRetentionTime;
        }
      }
      if (other.metricLogEnabled_ != null) {
        if (metricLogEnabled_ == null || other.MetricLogEnabled != false) {
          MetricLogEnabled = other.MetricLogEnabled;
        }
      }
      if (other.metricLogRetentionSize_ != null) {
        if (metricLogRetentionSize_ == null || other.MetricLogRetentionSize != 0L) {
          MetricLogRetentionSize = other.MetricLogRetentionSize;
        }
      }
      if (other.metricLogRetentionTime_ != null) {
        if (metricLogRetentionTime_ == null || other.MetricLogRetentionTime != 0L) {
          MetricLogRetentionTime = other.MetricLogRetentionTime;
        }
      }
      if (other.traceLogEnabled_ != null) {
        if (traceLogEnabled_ == null || other.TraceLogEnabled != false) {
          TraceLogEnabled = other.TraceLogEnabled;
        }
      }
      if (other.traceLogRetentionSize_ != null) {
        if (traceLogRetentionSize_ == null || other.TraceLogRetentionSize != 0L) {
          TraceLogRetentionSize = other.TraceLogRetentionSize;
        }
      }
      if (other.traceLogRetentionTime_ != null) {
        if (traceLogRetentionTime_ == null || other.TraceLogRetentionTime != 0L) {
          TraceLogRetentionTime = other.TraceLogRetentionTime;
        }
      }
      if (other.textLogEnabled_ != null) {
        if (textLogEnabled_ == null || other.TextLogEnabled != false) {
          TextLogEnabled = other.TextLogEnabled;
        }
      }
      if (other.textLogRetentionSize_ != null) {
        if (textLogRetentionSize_ == null || other.TextLogRetentionSize != 0L) {
          TextLogRetentionSize = other.TextLogRetentionSize;
        }
      }
      if (other.textLogRetentionTime_ != null) {
        if (textLogRetentionTime_ == null || other.TextLogRetentionTime != 0L) {
          TextLogRetentionTime = other.TextLogRetentionTime;
        }
      }
      if (other.TextLogLevel != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel.Unspecified) {
        TextLogLevel = other.TextLogLevel;
      }
      if (other.backgroundPoolSize_ != null) {
        if (backgroundPoolSize_ == null || other.BackgroundPoolSize != 0L) {
          BackgroundPoolSize = other.BackgroundPoolSize;
        }
      }
      if (other.backgroundSchedulePoolSize_ != null) {
        if (backgroundSchedulePoolSize_ == null || other.BackgroundSchedulePoolSize != 0L) {
          BackgroundSchedulePoolSize = other.BackgroundSchedulePoolSize;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LogLevel = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 18: {
            if (mergeTree_ == null) {
              MergeTree = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree();
            }
            input.ReadMessage(MergeTree);
            break;
          }
          case 26: {
            compression_.AddEntriesFrom(input, _repeated_compression_codec);
            break;
          }
          case 34: {
            dictionaries_.AddEntriesFrom(input, _repeated_dictionaries_codec);
            break;
          }
          case 42: {
            graphiteRollup_.AddEntriesFrom(input, _repeated_graphiteRollup_codec);
            break;
          }
          case 50: {
            long? value = _single_maxConnections_codec.Read(input);
            if (maxConnections_ == null || value != 0L) {
              MaxConnections = value;
            }
            break;
          }
          case 58: {
            long? value = _single_maxConcurrentQueries_codec.Read(input);
            if (maxConcurrentQueries_ == null || value != 0L) {
              MaxConcurrentQueries = value;
            }
            break;
          }
          case 66: {
            long? value = _single_keepAliveTimeout_codec.Read(input);
            if (keepAliveTimeout_ == null || value != 0L) {
              KeepAliveTimeout = value;
            }
            break;
          }
          case 74: {
            long? value = _single_uncompressedCacheSize_codec.Read(input);
            if (uncompressedCacheSize_ == null || value != 0L) {
              UncompressedCacheSize = value;
            }
            break;
          }
          case 82: {
            long? value = _single_markCacheSize_codec.Read(input);
            if (markCacheSize_ == null || value != 0L) {
              MarkCacheSize = value;
            }
            break;
          }
          case 90: {
            long? value = _single_maxTableSizeToDrop_codec.Read(input);
            if (maxTableSizeToDrop_ == null || value != 0L) {
              MaxTableSizeToDrop = value;
            }
            break;
          }
          case 98: {
            long? value = _single_builtinDictionariesReloadInterval_codec.Read(input);
            if (builtinDictionariesReloadInterval_ == null || value != 0L) {
              BuiltinDictionariesReloadInterval = value;
            }
            break;
          }
          case 106: {
            long? value = _single_maxPartitionSizeToDrop_codec.Read(input);
            if (maxPartitionSizeToDrop_ == null || value != 0L) {
              MaxPartitionSizeToDrop = value;
            }
            break;
          }
          case 114: {
            Timezone = input.ReadString();
            break;
          }
          case 122: {
            GeobaseUri = input.ReadString();
            break;
          }
          case 130: {
            long? value = _single_queryLogRetentionSize_codec.Read(input);
            if (queryLogRetentionSize_ == null || value != 0L) {
              QueryLogRetentionSize = value;
            }
            break;
          }
          case 138: {
            long? value = _single_queryLogRetentionTime_codec.Read(input);
            if (queryLogRetentionTime_ == null || value != 0L) {
              QueryLogRetentionTime = value;
            }
            break;
          }
          case 146: {
            bool? value = _single_queryThreadLogEnabled_codec.Read(input);
            if (queryThreadLogEnabled_ == null || value != false) {
              QueryThreadLogEnabled = value;
            }
            break;
          }
          case 154: {
            long? value = _single_queryThreadLogRetentionSize_codec.Read(input);
            if (queryThreadLogRetentionSize_ == null || value != 0L) {
              QueryThreadLogRetentionSize = value;
            }
            break;
          }
          case 162: {
            long? value = _single_queryThreadLogRetentionTime_codec.Read(input);
            if (queryThreadLogRetentionTime_ == null || value != 0L) {
              QueryThreadLogRetentionTime = value;
            }
            break;
          }
          case 170: {
            long? value = _single_partLogRetentionSize_codec.Read(input);
            if (partLogRetentionSize_ == null || value != 0L) {
              PartLogRetentionSize = value;
            }
            break;
          }
          case 178: {
            long? value = _single_partLogRetentionTime_codec.Read(input);
            if (partLogRetentionTime_ == null || value != 0L) {
              PartLogRetentionTime = value;
            }
            break;
          }
          case 186: {
            bool? value = _single_metricLogEnabled_codec.Read(input);
            if (metricLogEnabled_ == null || value != false) {
              MetricLogEnabled = value;
            }
            break;
          }
          case 194: {
            long? value = _single_metricLogRetentionSize_codec.Read(input);
            if (metricLogRetentionSize_ == null || value != 0L) {
              MetricLogRetentionSize = value;
            }
            break;
          }
          case 202: {
            long? value = _single_metricLogRetentionTime_codec.Read(input);
            if (metricLogRetentionTime_ == null || value != 0L) {
              MetricLogRetentionTime = value;
            }
            break;
          }
          case 210: {
            bool? value = _single_traceLogEnabled_codec.Read(input);
            if (traceLogEnabled_ == null || value != false) {
              TraceLogEnabled = value;
            }
            break;
          }
          case 218: {
            long? value = _single_traceLogRetentionSize_codec.Read(input);
            if (traceLogRetentionSize_ == null || value != 0L) {
              TraceLogRetentionSize = value;
            }
            break;
          }
          case 226: {
            long? value = _single_traceLogRetentionTime_codec.Read(input);
            if (traceLogRetentionTime_ == null || value != 0L) {
              TraceLogRetentionTime = value;
            }
            break;
          }
          case 234: {
            bool? value = _single_textLogEnabled_codec.Read(input);
            if (textLogEnabled_ == null || value != false) {
              TextLogEnabled = value;
            }
            break;
          }
          case 242: {
            long? value = _single_textLogRetentionSize_codec.Read(input);
            if (textLogRetentionSize_ == null || value != 0L) {
              TextLogRetentionSize = value;
            }
            break;
          }
          case 250: {
            long? value = _single_textLogRetentionTime_codec.Read(input);
            if (textLogRetentionTime_ == null || value != 0L) {
              TextLogRetentionTime = value;
            }
            break;
          }
          case 256: {
            TextLogLevel = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 266: {
            long? value = _single_backgroundPoolSize_codec.Read(input);
            if (backgroundPoolSize_ == null || value != 0L) {
              BackgroundPoolSize = value;
            }
            break;
          }
          case 274: {
            long? value = _single_backgroundSchedulePoolSize_codec.Read(input);
            if (backgroundSchedulePoolSize_ == null || value != 0L) {
              BackgroundSchedulePoolSize = value;
            }
            break;
          }
          case 282: {
            if (kafka_ == null) {
              Kafka = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka();
            }
            input.ReadMessage(Kafka);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClickhouseConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum LogLevel {
        [pbr::OriginalName("LOG_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TRACE")] Trace = 1,
        [pbr::OriginalName("DEBUG")] Debug = 2,
        [pbr::OriginalName("INFORMATION")] Information = 3,
        [pbr::OriginalName("WARNING")] Warning = 4,
        [pbr::OriginalName("ERROR")] Error = 5,
      }

      /// <summary>
      /// Options specific to the MergeTree table engine.
      /// </summary>
      internal sealed partial class MergeTree : pb::IMessage<MergeTree> {
        private static readonly pb::MessageParser<MergeTree> _parser = new pb::MessageParser<MergeTree>(() => new MergeTree());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MergeTree> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree(MergeTree other) : this() {
          ReplicatedDeduplicationWindow = other.ReplicatedDeduplicationWindow;
          ReplicatedDeduplicationWindowSeconds = other.ReplicatedDeduplicationWindowSeconds;
          PartsToDelayInsert = other.PartsToDelayInsert;
          PartsToThrowInsert = other.PartsToThrowInsert;
          MaxReplicatedMergesInQueue = other.MaxReplicatedMergesInQueue;
          NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = other.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge;
          MaxBytesToMergeAtMinSpaceInPool = other.MaxBytesToMergeAtMinSpaceInPool;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree Clone() {
          return new MergeTree(this);
        }

        /// <summary>Field number for the "replicated_deduplication_window" field.</summary>
        public const int ReplicatedDeduplicationWindowFieldNumber = 1;
        private static readonly pb::FieldCodec<long?> _single_replicatedDeduplicationWindow_codec = pb::FieldCodec.ForStructWrapper<long>(10);
        private long? replicatedDeduplicationWindow_;
        /// <summary>
        /// Number of blocks of hashes to keep in ZooKeeper.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? ReplicatedDeduplicationWindow {
          get { return replicatedDeduplicationWindow_; }
          set {
            replicatedDeduplicationWindow_ = value;
          }
        }


        /// <summary>Field number for the "replicated_deduplication_window_seconds" field.</summary>
        public const int ReplicatedDeduplicationWindowSecondsFieldNumber = 2;
        private static readonly pb::FieldCodec<long?> _single_replicatedDeduplicationWindowSeconds_codec = pb::FieldCodec.ForStructWrapper<long>(18);
        private long? replicatedDeduplicationWindowSeconds_;
        /// <summary>
        /// Period of time to keep blocks of hashes for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? ReplicatedDeduplicationWindowSeconds {
          get { return replicatedDeduplicationWindowSeconds_; }
          set {
            replicatedDeduplicationWindowSeconds_ = value;
          }
        }


        /// <summary>Field number for the "parts_to_delay_insert" field.</summary>
        public const int PartsToDelayInsertFieldNumber = 3;
        private static readonly pb::FieldCodec<long?> _single_partsToDelayInsert_codec = pb::FieldCodec.ForStructWrapper<long>(26);
        private long? partsToDelayInsert_;
        /// <summary>
        /// If table contains at least that many active parts in single partition, artificially slow down insert into table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? PartsToDelayInsert {
          get { return partsToDelayInsert_; }
          set {
            partsToDelayInsert_ = value;
          }
        }


        /// <summary>Field number for the "parts_to_throw_insert" field.</summary>
        public const int PartsToThrowInsertFieldNumber = 4;
        private static readonly pb::FieldCodec<long?> _single_partsToThrowInsert_codec = pb::FieldCodec.ForStructWrapper<long>(34);
        private long? partsToThrowInsert_;
        /// <summary>
        /// If more than this number active parts in single partition, throw 'Too many parts ...' exception.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? PartsToThrowInsert {
          get { return partsToThrowInsert_; }
          set {
            partsToThrowInsert_ = value;
          }
        }


        /// <summary>Field number for the "max_replicated_merges_in_queue" field.</summary>
        public const int MaxReplicatedMergesInQueueFieldNumber = 5;
        private static readonly pb::FieldCodec<long?> _single_maxReplicatedMergesInQueue_codec = pb::FieldCodec.ForStructWrapper<long>(42);
        private long? maxReplicatedMergesInQueue_;
        /// <summary>
        /// How many tasks of merging and mutating parts are allowed simultaneously in ReplicatedMergeTree queue.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? MaxReplicatedMergesInQueue {
          get { return maxReplicatedMergesInQueue_; }
          set {
            maxReplicatedMergesInQueue_ = value;
          }
        }


        /// <summary>Field number for the "number_of_free_entries_in_pool_to_lower_max_size_of_merge" field.</summary>
        public const int NumberOfFreeEntriesInPoolToLowerMaxSizeOfMergeFieldNumber = 6;
        private static readonly pb::FieldCodec<long?> _single_numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_codec = pb::FieldCodec.ForStructWrapper<long>(50);
        private long? numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_;
        /// <summary>
        /// If there is less than specified number of free entries in background pool (or replicated queue), start to lower
        /// maximum size of merge to process.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge {
          get { return numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_; }
          set {
            numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ = value;
          }
        }


        /// <summary>Field number for the "max_bytes_to_merge_at_min_space_in_pool" field.</summary>
        public const int MaxBytesToMergeAtMinSpaceInPoolFieldNumber = 7;
        private static readonly pb::FieldCodec<long?> _single_maxBytesToMergeAtMinSpaceInPool_codec = pb::FieldCodec.ForStructWrapper<long>(58);
        private long? maxBytesToMergeAtMinSpaceInPool_;
        /// <summary>
        /// Maximum in total size of parts to merge, when there are minimum free threads in background pool (or entries
        /// in replication queue).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? MaxBytesToMergeAtMinSpaceInPool {
          get { return maxBytesToMergeAtMinSpaceInPool_; }
          set {
            maxBytesToMergeAtMinSpaceInPool_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MergeTree);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MergeTree other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReplicatedDeduplicationWindow != other.ReplicatedDeduplicationWindow) return false;
          if (ReplicatedDeduplicationWindowSeconds != other.ReplicatedDeduplicationWindowSeconds) return false;
          if (PartsToDelayInsert != other.PartsToDelayInsert) return false;
          if (PartsToThrowInsert != other.PartsToThrowInsert) return false;
          if (MaxReplicatedMergesInQueue != other.MaxReplicatedMergesInQueue) return false;
          if (NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != other.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge) return false;
          if (MaxBytesToMergeAtMinSpaceInPool != other.MaxBytesToMergeAtMinSpaceInPool) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (replicatedDeduplicationWindow_ != null) hash ^= ReplicatedDeduplicationWindow.GetHashCode();
          if (replicatedDeduplicationWindowSeconds_ != null) hash ^= ReplicatedDeduplicationWindowSeconds.GetHashCode();
          if (partsToDelayInsert_ != null) hash ^= PartsToDelayInsert.GetHashCode();
          if (partsToThrowInsert_ != null) hash ^= PartsToThrowInsert.GetHashCode();
          if (maxReplicatedMergesInQueue_ != null) hash ^= MaxReplicatedMergesInQueue.GetHashCode();
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) hash ^= NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge.GetHashCode();
          if (maxBytesToMergeAtMinSpaceInPool_ != null) hash ^= MaxBytesToMergeAtMinSpaceInPool.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (replicatedDeduplicationWindow_ != null) {
            _single_replicatedDeduplicationWindow_codec.WriteTagAndValue(output, ReplicatedDeduplicationWindow);
          }
          if (replicatedDeduplicationWindowSeconds_ != null) {
            _single_replicatedDeduplicationWindowSeconds_codec.WriteTagAndValue(output, ReplicatedDeduplicationWindowSeconds);
          }
          if (partsToDelayInsert_ != null) {
            _single_partsToDelayInsert_codec.WriteTagAndValue(output, PartsToDelayInsert);
          }
          if (partsToThrowInsert_ != null) {
            _single_partsToThrowInsert_codec.WriteTagAndValue(output, PartsToThrowInsert);
          }
          if (maxReplicatedMergesInQueue_ != null) {
            _single_maxReplicatedMergesInQueue_codec.WriteTagAndValue(output, MaxReplicatedMergesInQueue);
          }
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
            _single_numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_codec.WriteTagAndValue(output, NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge);
          }
          if (maxBytesToMergeAtMinSpaceInPool_ != null) {
            _single_maxBytesToMergeAtMinSpaceInPool_codec.WriteTagAndValue(output, MaxBytesToMergeAtMinSpaceInPool);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (replicatedDeduplicationWindow_ != null) {
            size += _single_replicatedDeduplicationWindow_codec.CalculateSizeWithTag(ReplicatedDeduplicationWindow);
          }
          if (replicatedDeduplicationWindowSeconds_ != null) {
            size += _single_replicatedDeduplicationWindowSeconds_codec.CalculateSizeWithTag(ReplicatedDeduplicationWindowSeconds);
          }
          if (partsToDelayInsert_ != null) {
            size += _single_partsToDelayInsert_codec.CalculateSizeWithTag(PartsToDelayInsert);
          }
          if (partsToThrowInsert_ != null) {
            size += _single_partsToThrowInsert_codec.CalculateSizeWithTag(PartsToThrowInsert);
          }
          if (maxReplicatedMergesInQueue_ != null) {
            size += _single_maxReplicatedMergesInQueue_codec.CalculateSizeWithTag(MaxReplicatedMergesInQueue);
          }
          if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
            size += _single_numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_codec.CalculateSizeWithTag(NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge);
          }
          if (maxBytesToMergeAtMinSpaceInPool_ != null) {
            size += _single_maxBytesToMergeAtMinSpaceInPool_codec.CalculateSizeWithTag(MaxBytesToMergeAtMinSpaceInPool);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MergeTree other) {
          if (other == null) {
            return;
          }
          if (other.replicatedDeduplicationWindow_ != null) {
            if (replicatedDeduplicationWindow_ == null || other.ReplicatedDeduplicationWindow != 0L) {
              ReplicatedDeduplicationWindow = other.ReplicatedDeduplicationWindow;
            }
          }
          if (other.replicatedDeduplicationWindowSeconds_ != null) {
            if (replicatedDeduplicationWindowSeconds_ == null || other.ReplicatedDeduplicationWindowSeconds != 0L) {
              ReplicatedDeduplicationWindowSeconds = other.ReplicatedDeduplicationWindowSeconds;
            }
          }
          if (other.partsToDelayInsert_ != null) {
            if (partsToDelayInsert_ == null || other.PartsToDelayInsert != 0L) {
              PartsToDelayInsert = other.PartsToDelayInsert;
            }
          }
          if (other.partsToThrowInsert_ != null) {
            if (partsToThrowInsert_ == null || other.PartsToThrowInsert != 0L) {
              PartsToThrowInsert = other.PartsToThrowInsert;
            }
          }
          if (other.maxReplicatedMergesInQueue_ != null) {
            if (maxReplicatedMergesInQueue_ == null || other.MaxReplicatedMergesInQueue != 0L) {
              MaxReplicatedMergesInQueue = other.MaxReplicatedMergesInQueue;
            }
          }
          if (other.numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ != null) {
            if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ == null || other.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != 0L) {
              NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = other.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge;
            }
          }
          if (other.maxBytesToMergeAtMinSpaceInPool_ != null) {
            if (maxBytesToMergeAtMinSpaceInPool_ == null || other.MaxBytesToMergeAtMinSpaceInPool != 0L) {
              MaxBytesToMergeAtMinSpaceInPool = other.MaxBytesToMergeAtMinSpaceInPool;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                long? value = _single_replicatedDeduplicationWindow_codec.Read(input);
                if (replicatedDeduplicationWindow_ == null || value != 0L) {
                  ReplicatedDeduplicationWindow = value;
                }
                break;
              }
              case 18: {
                long? value = _single_replicatedDeduplicationWindowSeconds_codec.Read(input);
                if (replicatedDeduplicationWindowSeconds_ == null || value != 0L) {
                  ReplicatedDeduplicationWindowSeconds = value;
                }
                break;
              }
              case 26: {
                long? value = _single_partsToDelayInsert_codec.Read(input);
                if (partsToDelayInsert_ == null || value != 0L) {
                  PartsToDelayInsert = value;
                }
                break;
              }
              case 34: {
                long? value = _single_partsToThrowInsert_codec.Read(input);
                if (partsToThrowInsert_ == null || value != 0L) {
                  PartsToThrowInsert = value;
                }
                break;
              }
              case 42: {
                long? value = _single_maxReplicatedMergesInQueue_codec.Read(input);
                if (maxReplicatedMergesInQueue_ == null || value != 0L) {
                  MaxReplicatedMergesInQueue = value;
                }
                break;
              }
              case 50: {
                long? value = _single_numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_codec.Read(input);
                if (numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge_ == null || value != 0L) {
                  NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge = value;
                }
                break;
              }
              case 58: {
                long? value = _single_maxBytesToMergeAtMinSpaceInPool_codec.Read(input);
                if (maxBytesToMergeAtMinSpaceInPool_ == null || value != 0L) {
                  MaxBytesToMergeAtMinSpaceInPool = value;
                }
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Kafka : pb::IMessage<Kafka> {
        private static readonly pb::MessageParser<Kafka> _parser = new pb::MessageParser<Kafka>(() => new Kafka());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Kafka> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kafka() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kafka(Kafka other) : this() {
          securityProtocol_ = other.securityProtocol_;
          saslMechanism_ = other.saslMechanism_;
          saslUsername_ = other.saslUsername_;
          saslPassword_ = other.saslPassword_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kafka Clone() {
          return new Kafka(this);
        }

        /// <summary>Field number for the "security_protocol" field.</summary>
        public const int SecurityProtocolFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol securityProtocol_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol SecurityProtocol {
          get { return securityProtocol_; }
          set {
            securityProtocol_ = value;
          }
        }

        /// <summary>Field number for the "sasl_mechanism" field.</summary>
        public const int SaslMechanismFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism saslMechanism_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism.Unspecified;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism SaslMechanism {
          get { return saslMechanism_; }
          set {
            saslMechanism_ = value;
          }
        }

        /// <summary>Field number for the "sasl_username" field.</summary>
        public const int SaslUsernameFieldNumber = 3;
        private string saslUsername_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SaslUsername {
          get { return saslUsername_; }
          set {
            saslUsername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "sasl_password" field.</summary>
        public const int SaslPasswordFieldNumber = 4;
        private string saslPassword_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SaslPassword {
          get { return saslPassword_; }
          set {
            saslPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Kafka);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Kafka other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (SecurityProtocol != other.SecurityProtocol) return false;
          if (SaslMechanism != other.SaslMechanism) return false;
          if (SaslUsername != other.SaslUsername) return false;
          if (SaslPassword != other.SaslPassword) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SecurityProtocol != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol.Unspecified) hash ^= SecurityProtocol.GetHashCode();
          if (SaslMechanism != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism.Unspecified) hash ^= SaslMechanism.GetHashCode();
          if (SaslUsername.Length != 0) hash ^= SaslUsername.GetHashCode();
          if (SaslPassword.Length != 0) hash ^= SaslPassword.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SecurityProtocol != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) SecurityProtocol);
          }
          if (SaslMechanism != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) SaslMechanism);
          }
          if (SaslUsername.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(SaslUsername);
          }
          if (SaslPassword.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SaslPassword);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SecurityProtocol != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SecurityProtocol);
          }
          if (SaslMechanism != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SaslMechanism);
          }
          if (SaslUsername.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SaslUsername);
          }
          if (SaslPassword.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SaslPassword);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Kafka other) {
          if (other == null) {
            return;
          }
          if (other.SecurityProtocol != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol.Unspecified) {
            SecurityProtocol = other.SecurityProtocol;
          }
          if (other.SaslMechanism != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism.Unspecified) {
            SaslMechanism = other.SaslMechanism;
          }
          if (other.SaslUsername.Length != 0) {
            SaslUsername = other.SaslUsername;
          }
          if (other.SaslPassword.Length != 0) {
            SaslPassword = other.SaslPassword;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                SecurityProtocol = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SecurityProtocol) input.ReadEnum();
                break;
              }
              case 16: {
                SaslMechanism = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Kafka.Types.SaslMechanism) input.ReadEnum();
                break;
              }
              case 26: {
                SaslUsername = input.ReadString();
                break;
              }
              case 34: {
                SaslPassword = input.ReadString();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Kafka message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum SecurityProtocol {
            [pbr::OriginalName("SECURITY_PROTOCOL_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("SECURITY_PROTOCOL_PLAINTEXT")] Plaintext = 1,
            [pbr::OriginalName("SECURITY_PROTOCOL_SSL")] Ssl = 2,
            [pbr::OriginalName("SECURITY_PROTOCOL_SASL_PLAINTEXT")] SaslPlaintext = 3,
            [pbr::OriginalName("SECURITY_PROTOCOL_SASL_SSL")] SaslSsl = 4,
          }

          internal enum SaslMechanism {
            [pbr::OriginalName("SASL_MECHANISM_UNSPECIFIED")] Unspecified = 0,
            [pbr::OriginalName("SASL_MECHANISM_GSSAPI")] Gssapi = 1,
            [pbr::OriginalName("SASL_MECHANISM_PLAIN")] Plain = 2,
            [pbr::OriginalName("SASL_MECHANISM_SCRAM_SHA_256")] ScramSha256 = 3,
            [pbr::OriginalName("SASL_MECHANISM_SCRAM_SHA_512")] ScramSha512 = 4,
          }

        }
        #endregion

      }

      internal sealed partial class Compression : pb::IMessage<Compression> {
        private static readonly pb::MessageParser<Compression> _parser = new pb::MessageParser<Compression>(() => new Compression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Compression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression(Compression other) : this() {
          method_ = other.method_;
          minPartSize_ = other.minPartSize_;
          minPartSizeRatio_ = other.minPartSizeRatio_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression Clone() {
          return new Compression(this);
        }

        /// <summary>Field number for the "method" field.</summary>
        public const int MethodFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method method_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method.Unspecified;
        /// <summary>
        /// Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method Method {
          get { return method_; }
          set {
            method_ = value;
          }
        }

        /// <summary>Field number for the "min_part_size" field.</summary>
        public const int MinPartSizeFieldNumber = 2;
        private long minPartSize_;
        /// <summary>
        /// Minimum size of a part of a table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MinPartSize {
          get { return minPartSize_; }
          set {
            minPartSize_ = value;
          }
        }

        /// <summary>Field number for the "min_part_size_ratio" field.</summary>
        public const int MinPartSizeRatioFieldNumber = 3;
        private double minPartSizeRatio_;
        /// <summary>
        /// Minimum ratio of a part relative to the size of all the data in the table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MinPartSizeRatio {
          get { return minPartSizeRatio_; }
          set {
            minPartSizeRatio_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Compression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Compression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Method != other.Method) return false;
          if (MinPartSize != other.MinPartSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinPartSizeRatio, other.MinPartSizeRatio)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Method != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method.Unspecified) hash ^= Method.GetHashCode();
          if (MinPartSize != 0L) hash ^= MinPartSize.GetHashCode();
          if (MinPartSizeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinPartSizeRatio);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Method != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Method);
          }
          if (MinPartSize != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(MinPartSize);
          }
          if (MinPartSizeRatio != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MinPartSizeRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Method != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
          }
          if (MinPartSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinPartSize);
          }
          if (MinPartSizeRatio != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Compression other) {
          if (other == null) {
            return;
          }
          if (other.Method != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method.Unspecified) {
            Method = other.Method;
          }
          if (other.MinPartSize != 0L) {
            MinPartSize = other.MinPartSize;
          }
          if (other.MinPartSizeRatio != 0D) {
            MinPartSizeRatio = other.MinPartSizeRatio;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Method = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method) input.ReadEnum();
                break;
              }
              case 16: {
                MinPartSize = input.ReadInt64();
                break;
              }
              case 25: {
                MinPartSizeRatio = input.ReadDouble();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Compression message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum Method {
            [pbr::OriginalName("METHOD_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// [LZ4 compression algorithm](https://lz4.github.io/lz4/).
            /// </summary>
            [pbr::OriginalName("LZ4")] Lz4 = 1,
            /// <summary>
            /// [Zstandard compression algorithm](https://facebook.github.io/zstd/).
            /// </summary>
            [pbr::OriginalName("ZSTD")] Zstd = 2,
          }

        }
        #endregion

      }

      internal sealed partial class ExternalDictionary : pb::IMessage<ExternalDictionary> {
        private static readonly pb::MessageParser<ExternalDictionary> _parser = new pb::MessageParser<ExternalDictionary>(() => new ExternalDictionary());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExternalDictionary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary(ExternalDictionary other) : this() {
          name_ = other.name_;
          structure_ = other.structure_ != null ? other.structure_.Clone() : null;
          layout_ = other.layout_ != null ? other.layout_.Clone() : null;
          switch (other.LifetimeCase) {
            case LifetimeOneofCase.FixedLifetime:
              FixedLifetime = other.FixedLifetime;
              break;
            case LifetimeOneofCase.LifetimeRange:
              LifetimeRange = other.LifetimeRange.Clone();
              break;
          }

          switch (other.SourceCase) {
            case SourceOneofCase.HttpSource:
              HttpSource = other.HttpSource.Clone();
              break;
            case SourceOneofCase.MysqlSource:
              MysqlSource = other.MysqlSource.Clone();
              break;
            case SourceOneofCase.ClickhouseSource:
              ClickhouseSource = other.ClickhouseSource.Clone();
              break;
            case SourceOneofCase.MongodbSource:
              MongodbSource = other.MongodbSource.Clone();
              break;
            case SourceOneofCase.PostgresqlSource:
              PostgresqlSource = other.PostgresqlSource.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary Clone() {
          return new ExternalDictionary(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name of the external dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "structure" field.</summary>
        public const int StructureFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure structure_;
        /// <summary>
        /// Set of attributes for the external dictionary.
        /// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure Structure {
          get { return structure_; }
          set {
            structure_ = value;
          }
        }

        /// <summary>Field number for the "layout" field.</summary>
        public const int LayoutFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout layout_;
        /// <summary>
        /// Layout for storing the dictionary in memory.
        /// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout Layout {
          get { return layout_; }
          set {
            layout_ = value;
          }
        }

        /// <summary>Field number for the "fixed_lifetime" field.</summary>
        public const int FixedLifetimeFieldNumber = 4;
        /// <summary>
        /// Fixed interval between dictionary updates.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FixedLifetime {
          get { return lifetimeCase_ == LifetimeOneofCase.FixedLifetime ? (long) lifetime_ : 0L; }
          set {
            lifetime_ = value;
            lifetimeCase_ = LifetimeOneofCase.FixedLifetime;
          }
        }

        /// <summary>Field number for the "lifetime_range" field.</summary>
        public const int LifetimeRangeFieldNumber = 5;
        /// <summary>
        /// Range of intervals between dictionary updates for ClickHouse to choose from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range LifetimeRange {
          get { return lifetimeCase_ == LifetimeOneofCase.LifetimeRange ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range) lifetime_ : null; }
          set {
            lifetime_ = value;
            lifetimeCase_ = value == null ? LifetimeOneofCase.None : LifetimeOneofCase.LifetimeRange;
          }
        }

        /// <summary>Field number for the "http_source" field.</summary>
        public const int HttpSourceFieldNumber = 6;
        /// <summary>
        /// HTTP source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource HttpSource {
          get { return sourceCase_ == SourceOneofCase.HttpSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.HttpSource;
          }
        }

        /// <summary>Field number for the "mysql_source" field.</summary>
        public const int MysqlSourceFieldNumber = 7;
        /// <summary>
        /// MySQL source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource MysqlSource {
          get { return sourceCase_ == SourceOneofCase.MysqlSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.MysqlSource;
          }
        }

        /// <summary>Field number for the "clickhouse_source" field.</summary>
        public const int ClickhouseSourceFieldNumber = 8;
        /// <summary>
        /// ClickHouse source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource ClickhouseSource {
          get { return sourceCase_ == SourceOneofCase.ClickhouseSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.ClickhouseSource;
          }
        }

        /// <summary>Field number for the "mongodb_source" field.</summary>
        public const int MongodbSourceFieldNumber = 9;
        /// <summary>
        /// MongoDB source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource MongodbSource {
          get { return sourceCase_ == SourceOneofCase.MongodbSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.MongodbSource;
          }
        }

        /// <summary>Field number for the "postgresql_source" field.</summary>
        public const int PostgresqlSourceFieldNumber = 10;
        /// <summary>
        /// PostgreSQL source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource PostgresqlSource {
          get { return sourceCase_ == SourceOneofCase.PostgresqlSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.PostgresqlSource;
          }
        }

        private object lifetime_;
        /// <summary>Enum of possible cases for the "lifetime" oneof.</summary>
        public enum LifetimeOneofCase {
          None = 0,
          FixedLifetime = 4,
          LifetimeRange = 5,
        }
        private LifetimeOneofCase lifetimeCase_ = LifetimeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LifetimeOneofCase LifetimeCase {
          get { return lifetimeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLifetime() {
          lifetimeCase_ = LifetimeOneofCase.None;
          lifetime_ = null;
        }

        private object source_;
        /// <summary>Enum of possible cases for the "source" oneof.</summary>
        public enum SourceOneofCase {
          None = 0,
          HttpSource = 6,
          MysqlSource = 7,
          ClickhouseSource = 8,
          MongodbSource = 9,
          PostgresqlSource = 10,
        }
        private SourceOneofCase sourceCase_ = SourceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceOneofCase SourceCase {
          get { return sourceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSource() {
          sourceCase_ = SourceOneofCase.None;
          source_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ExternalDictionary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExternalDictionary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Structure, other.Structure)) return false;
          if (!object.Equals(Layout, other.Layout)) return false;
          if (FixedLifetime != other.FixedLifetime) return false;
          if (!object.Equals(LifetimeRange, other.LifetimeRange)) return false;
          if (!object.Equals(HttpSource, other.HttpSource)) return false;
          if (!object.Equals(MysqlSource, other.MysqlSource)) return false;
          if (!object.Equals(ClickhouseSource, other.ClickhouseSource)) return false;
          if (!object.Equals(MongodbSource, other.MongodbSource)) return false;
          if (!object.Equals(PostgresqlSource, other.PostgresqlSource)) return false;
          if (LifetimeCase != other.LifetimeCase) return false;
          if (SourceCase != other.SourceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (structure_ != null) hash ^= Structure.GetHashCode();
          if (layout_ != null) hash ^= Layout.GetHashCode();
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) hash ^= FixedLifetime.GetHashCode();
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) hash ^= LifetimeRange.GetHashCode();
          if (sourceCase_ == SourceOneofCase.HttpSource) hash ^= HttpSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.MysqlSource) hash ^= MysqlSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) hash ^= ClickhouseSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.MongodbSource) hash ^= MongodbSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.PostgresqlSource) hash ^= PostgresqlSource.GetHashCode();
          hash ^= (int) lifetimeCase_;
          hash ^= (int) sourceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (structure_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Structure);
          }
          if (layout_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Layout);
          }
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) {
            output.WriteRawTag(32);
            output.WriteInt64(FixedLifetime);
          }
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
            output.WriteRawTag(42);
            output.WriteMessage(LifetimeRange);
          }
          if (sourceCase_ == SourceOneofCase.HttpSource) {
            output.WriteRawTag(50);
            output.WriteMessage(HttpSource);
          }
          if (sourceCase_ == SourceOneofCase.MysqlSource) {
            output.WriteRawTag(58);
            output.WriteMessage(MysqlSource);
          }
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
            output.WriteRawTag(66);
            output.WriteMessage(ClickhouseSource);
          }
          if (sourceCase_ == SourceOneofCase.MongodbSource) {
            output.WriteRawTag(74);
            output.WriteMessage(MongodbSource);
          }
          if (sourceCase_ == SourceOneofCase.PostgresqlSource) {
            output.WriteRawTag(82);
            output.WriteMessage(PostgresqlSource);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (structure_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Structure);
          }
          if (layout_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Layout);
          }
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedLifetime);
          }
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeRange);
          }
          if (sourceCase_ == SourceOneofCase.HttpSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpSource);
          }
          if (sourceCase_ == SourceOneofCase.MysqlSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MysqlSource);
          }
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClickhouseSource);
          }
          if (sourceCase_ == SourceOneofCase.MongodbSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MongodbSource);
          }
          if (sourceCase_ == SourceOneofCase.PostgresqlSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PostgresqlSource);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExternalDictionary other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.structure_ != null) {
            if (structure_ == null) {
              Structure = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure();
            }
            Structure.MergeFrom(other.Structure);
          }
          if (other.layout_ != null) {
            if (layout_ == null) {
              Layout = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout();
            }
            Layout.MergeFrom(other.Layout);
          }
          switch (other.LifetimeCase) {
            case LifetimeOneofCase.FixedLifetime:
              FixedLifetime = other.FixedLifetime;
              break;
            case LifetimeOneofCase.LifetimeRange:
              if (LifetimeRange == null) {
                LifetimeRange = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range();
              }
              LifetimeRange.MergeFrom(other.LifetimeRange);
              break;
          }

          switch (other.SourceCase) {
            case SourceOneofCase.HttpSource:
              if (HttpSource == null) {
                HttpSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource();
              }
              HttpSource.MergeFrom(other.HttpSource);
              break;
            case SourceOneofCase.MysqlSource:
              if (MysqlSource == null) {
                MysqlSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource();
              }
              MysqlSource.MergeFrom(other.MysqlSource);
              break;
            case SourceOneofCase.ClickhouseSource:
              if (ClickhouseSource == null) {
                ClickhouseSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource();
              }
              ClickhouseSource.MergeFrom(other.ClickhouseSource);
              break;
            case SourceOneofCase.MongodbSource:
              if (MongodbSource == null) {
                MongodbSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource();
              }
              MongodbSource.MergeFrom(other.MongodbSource);
              break;
            case SourceOneofCase.PostgresqlSource:
              if (PostgresqlSource == null) {
                PostgresqlSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource();
              }
              PostgresqlSource.MergeFrom(other.PostgresqlSource);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (structure_ == null) {
                  Structure = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure();
                }
                input.ReadMessage(Structure);
                break;
              }
              case 26: {
                if (layout_ == null) {
                  Layout = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout();
                }
                input.ReadMessage(Layout);
                break;
              }
              case 32: {
                FixedLifetime = input.ReadInt64();
                break;
              }
              case 42: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range();
                if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
                  subBuilder.MergeFrom(LifetimeRange);
                }
                input.ReadMessage(subBuilder);
                LifetimeRange = subBuilder;
                break;
              }
              case 50: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource();
                if (sourceCase_ == SourceOneofCase.HttpSource) {
                  subBuilder.MergeFrom(HttpSource);
                }
                input.ReadMessage(subBuilder);
                HttpSource = subBuilder;
                break;
              }
              case 58: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource();
                if (sourceCase_ == SourceOneofCase.MysqlSource) {
                  subBuilder.MergeFrom(MysqlSource);
                }
                input.ReadMessage(subBuilder);
                MysqlSource = subBuilder;
                break;
              }
              case 66: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource();
                if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
                  subBuilder.MergeFrom(ClickhouseSource);
                }
                input.ReadMessage(subBuilder);
                ClickhouseSource = subBuilder;
                break;
              }
              case 74: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource();
                if (sourceCase_ == SourceOneofCase.MongodbSource) {
                  subBuilder.MergeFrom(MongodbSource);
                }
                input.ReadMessage(subBuilder);
                MongodbSource = subBuilder;
                break;
              }
              case 82: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource();
                if (sourceCase_ == SourceOneofCase.PostgresqlSource) {
                  subBuilder.MergeFrom(PostgresqlSource);
                }
                input.ReadMessage(subBuilder);
                PostgresqlSource = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ExternalDictionary message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal sealed partial class HttpSource : pb::IMessage<HttpSource> {
            private static readonly pb::MessageParser<HttpSource> _parser = new pb::MessageParser<HttpSource>(() => new HttpSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<HttpSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource(HttpSource other) : this() {
              url_ = other.url_;
              format_ = other.format_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource Clone() {
              return new HttpSource(this);
            }

            /// <summary>Field number for the "url" field.</summary>
            public const int UrlFieldNumber = 1;
            private string url_ = "";
            /// <summary>
            /// URL of the source dictionary available over HTTP.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Url {
              get { return url_; }
              set {
                url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "format" field.</summary>
            public const int FormatFieldNumber = 2;
            private string format_ = "";
            /// <summary>
            /// The data format. Valid values are all formats supported by ClickHouse SQL dialect.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Format {
              get { return format_; }
              set {
                format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as HttpSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(HttpSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Url != other.Url) return false;
              if (Format != other.Format) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Url.Length != 0) hash ^= Url.GetHashCode();
              if (Format.Length != 0) hash ^= Format.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Url.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Url);
              }
              if (Format.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Format);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Url.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
              }
              if (Format.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(HttpSource other) {
              if (other == null) {
                return;
              }
              if (other.Url.Length != 0) {
                Url = other.Url;
              }
              if (other.Format.Length != 0) {
                Format = other.Format;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Url = input.ReadString();
                    break;
                  }
                  case 18: {
                    Format = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class MysqlSource : pb::IMessage<MysqlSource> {
            private static readonly pb::MessageParser<MysqlSource> _parser = new pb::MessageParser<MysqlSource>(() => new MysqlSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MysqlSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource(MysqlSource other) : this() {
              db_ = other.db_;
              table_ = other.table_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              replicas_ = other.replicas_.Clone();
              where_ = other.where_;
              invalidateQuery_ = other.invalidateQuery_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource Clone() {
              return new MysqlSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the MySQL database to connect to.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 2;
            private string table_ = "";
            /// <summary>
            /// Name of the database table to use as a ClickHouse dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Table {
              get { return table_; }
              set {
                table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 3;
            private long port_;
            /// <summary>
            /// Default port to use when connecting to a replica of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 4;
            private string user_ = "";
            /// <summary>
            /// Name of the default user for replicas of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 5;
            private string password_ = "";
            /// <summary>
            /// Password of the default user for replicas of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "replicas" field.</summary>
            public const int ReplicasFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> _repeated_replicas_codec
                = pb::FieldCodec.ForMessage(50, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> replicas_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica>();
            /// <summary>
            /// List of MySQL replicas of the database used as dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> Replicas {
              get { return replicas_; }
            }

            /// <summary>Field number for the "where" field.</summary>
            public const int WhereFieldNumber = 7;
            private string where_ = "";
            /// <summary>
            /// Selection criteria for the data in the specified MySQL table.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Where {
              get { return where_; }
              set {
                where_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "invalidate_query" field.</summary>
            public const int InvalidateQueryFieldNumber = 8;
            private string invalidateQuery_ = "";
            /// <summary>
            /// Query for checking the dictionary status, to pull only updated data.
            /// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string InvalidateQuery {
              get { return invalidateQuery_; }
              set {
                invalidateQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MysqlSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MysqlSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Table != other.Table) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              if(!replicas_.Equals(other.replicas_)) return false;
              if (Where != other.Where) return false;
              if (InvalidateQuery != other.InvalidateQuery) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Table.Length != 0) hash ^= Table.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              hash ^= replicas_.GetHashCode();
              if (Where.Length != 0) hash ^= Where.GetHashCode();
              if (InvalidateQuery.Length != 0) hash ^= InvalidateQuery.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Table.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Table);
              }
              if (Port != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(Password);
              }
              replicas_.WriteTo(output, _repeated_replicas_codec);
              if (Where.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(Where);
              }
              if (InvalidateQuery.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(InvalidateQuery);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Table.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              size += replicas_.CalculateSize(_repeated_replicas_codec);
              if (Where.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Where);
              }
              if (InvalidateQuery.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(InvalidateQuery);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MysqlSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Table.Length != 0) {
                Table = other.Table;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              replicas_.Add(other.replicas_);
              if (other.Where.Length != 0) {
                Where = other.Where;
              }
              if (other.InvalidateQuery.Length != 0) {
                InvalidateQuery = other.InvalidateQuery;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Table = input.ReadString();
                    break;
                  }
                  case 24: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    User = input.ReadString();
                    break;
                  }
                  case 42: {
                    Password = input.ReadString();
                    break;
                  }
                  case 50: {
                    replicas_.AddEntriesFrom(input, _repeated_replicas_codec);
                    break;
                  }
                  case 58: {
                    Where = input.ReadString();
                    break;
                  }
                  case 66: {
                    InvalidateQuery = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the MysqlSource message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Replica : pb::IMessage<Replica> {
                private static readonly pb::MessageParser<Replica> _parser = new pb::MessageParser<Replica>(() => new Replica());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Replica> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica(Replica other) : this() {
                  host_ = other.host_;
                  priority_ = other.priority_;
                  port_ = other.port_;
                  user_ = other.user_;
                  password_ = other.password_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica Clone() {
                  return new Replica(this);
                }

                /// <summary>Field number for the "host" field.</summary>
                public const int HostFieldNumber = 1;
                private string host_ = "";
                /// <summary>
                /// MySQL host of the replica.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Host {
                  get { return host_; }
                  set {
                    host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "priority" field.</summary>
                public const int PriorityFieldNumber = 2;
                private long priority_;
                /// <summary>
                /// The priority of the replica that ClickHouse takes into account when connecting.
                /// Replica with the highest priority should have this field set to the lowest number.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Priority {
                  get { return priority_; }
                  set {
                    priority_ = value;
                  }
                }

                /// <summary>Field number for the "port" field.</summary>
                public const int PortFieldNumber = 3;
                private long port_;
                /// <summary>
                /// Port to use when connecting to the replica.
                /// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Port {
                  get { return port_; }
                  set {
                    port_ = value;
                  }
                }

                /// <summary>Field number for the "user" field.</summary>
                public const int UserFieldNumber = 4;
                private string user_ = "";
                /// <summary>
                /// Name of the MySQL database user.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string User {
                  get { return user_; }
                  set {
                    user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "password" field.</summary>
                public const int PasswordFieldNumber = 5;
                private string password_ = "";
                /// <summary>
                /// Password of the MySQL database user.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Password {
                  get { return password_; }
                  set {
                    password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Replica);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Replica other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Host != other.Host) return false;
                  if (Priority != other.Priority) return false;
                  if (Port != other.Port) return false;
                  if (User != other.User) return false;
                  if (Password != other.Password) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Host.Length != 0) hash ^= Host.GetHashCode();
                  if (Priority != 0L) hash ^= Priority.GetHashCode();
                  if (Port != 0L) hash ^= Port.GetHashCode();
                  if (User.Length != 0) hash ^= User.GetHashCode();
                  if (Password.Length != 0) hash ^= Password.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Host.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Host);
                  }
                  if (Priority != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(Priority);
                  }
                  if (Port != 0L) {
                    output.WriteRawTag(24);
                    output.WriteInt64(Port);
                  }
                  if (User.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(User);
                  }
                  if (Password.Length != 0) {
                    output.WriteRawTag(42);
                    output.WriteString(Password);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Host.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
                  }
                  if (Priority != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Priority);
                  }
                  if (Port != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
                  }
                  if (User.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
                  }
                  if (Password.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Replica other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Host.Length != 0) {
                    Host = other.Host;
                  }
                  if (other.Priority != 0L) {
                    Priority = other.Priority;
                  }
                  if (other.Port != 0L) {
                    Port = other.Port;
                  }
                  if (other.User.Length != 0) {
                    User = other.User;
                  }
                  if (other.Password.Length != 0) {
                    Password = other.Password;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Host = input.ReadString();
                        break;
                      }
                      case 16: {
                        Priority = input.ReadInt64();
                        break;
                      }
                      case 24: {
                        Port = input.ReadInt64();
                        break;
                      }
                      case 34: {
                        User = input.ReadString();
                        break;
                      }
                      case 42: {
                        Password = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          internal sealed partial class ClickhouseSource : pb::IMessage<ClickhouseSource> {
            private static readonly pb::MessageParser<ClickhouseSource> _parser = new pb::MessageParser<ClickhouseSource>(() => new ClickhouseSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ClickhouseSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource(ClickhouseSource other) : this() {
              db_ = other.db_;
              table_ = other.table_;
              host_ = other.host_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              where_ = other.where_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource Clone() {
              return new ClickhouseSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the ClickHouse database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 2;
            private string table_ = "";
            /// <summary>
            /// Name of the table in the specified database to be used as the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Table {
              get { return table_; }
              set {
                table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "host" field.</summary>
            public const int HostFieldNumber = 3;
            private string host_ = "";
            /// <summary>
            /// ClickHouse host of the specified database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Host {
              get { return host_; }
              set {
                host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 4;
            private long port_;
            /// <summary>
            /// Port to use when connecting to the host.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 5;
            private string user_ = "";
            /// <summary>
            /// Name of the ClickHouse database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 6;
            private string password_ = "";
            /// <summary>
            /// Password of the ClickHouse database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "where" field.</summary>
            public const int WhereFieldNumber = 7;
            private string where_ = "";
            /// <summary>
            /// Selection criteria for the data in the specified ClickHouse table.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Where {
              get { return where_; }
              set {
                where_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ClickhouseSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ClickhouseSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Table != other.Table) return false;
              if (Host != other.Host) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              if (Where != other.Where) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Table.Length != 0) hash ^= Table.GetHashCode();
              if (Host.Length != 0) hash ^= Host.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              if (Where.Length != 0) hash ^= Where.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Table.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Table);
              }
              if (Host.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Host);
              }
              if (Port != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Password);
              }
              if (Where.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(Where);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Table.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
              }
              if (Host.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              if (Where.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Where);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ClickhouseSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Table.Length != 0) {
                Table = other.Table;
              }
              if (other.Host.Length != 0) {
                Host = other.Host;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              if (other.Where.Length != 0) {
                Where = other.Where;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Table = input.ReadString();
                    break;
                  }
                  case 26: {
                    Host = input.ReadString();
                    break;
                  }
                  case 32: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 42: {
                    User = input.ReadString();
                    break;
                  }
                  case 50: {
                    Password = input.ReadString();
                    break;
                  }
                  case 58: {
                    Where = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class MongodbSource : pb::IMessage<MongodbSource> {
            private static readonly pb::MessageParser<MongodbSource> _parser = new pb::MessageParser<MongodbSource>(() => new MongodbSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MongodbSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource(MongodbSource other) : this() {
              db_ = other.db_;
              collection_ = other.collection_;
              host_ = other.host_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource Clone() {
              return new MongodbSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the MongoDB database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "collection" field.</summary>
            public const int CollectionFieldNumber = 2;
            private string collection_ = "";
            /// <summary>
            /// Name of the collection in the specified database to be used as the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Collection {
              get { return collection_; }
              set {
                collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "host" field.</summary>
            public const int HostFieldNumber = 3;
            private string host_ = "";
            /// <summary>
            /// MongoDB host of the specified database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Host {
              get { return host_; }
              set {
                host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 4;
            private long port_;
            /// <summary>
            /// Port to use when connecting to the host.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 5;
            private string user_ = "";
            /// <summary>
            /// Name of the MongoDB database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 6;
            private string password_ = "";
            /// <summary>
            /// Password of the MongoDB database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MongodbSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MongodbSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Collection != other.Collection) return false;
              if (Host != other.Host) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Collection.Length != 0) hash ^= Collection.GetHashCode();
              if (Host.Length != 0) hash ^= Host.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Collection.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Collection);
              }
              if (Host.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Host);
              }
              if (Port != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Password);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Collection.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
              }
              if (Host.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MongodbSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Collection.Length != 0) {
                Collection = other.Collection;
              }
              if (other.Host.Length != 0) {
                Host = other.Host;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Collection = input.ReadString();
                    break;
                  }
                  case 26: {
                    Host = input.ReadString();
                    break;
                  }
                  case 32: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 42: {
                    User = input.ReadString();
                    break;
                  }
                  case 50: {
                    Password = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class PostgresqlSource : pb::IMessage<PostgresqlSource> {
            private static readonly pb::MessageParser<PostgresqlSource> _parser = new pb::MessageParser<PostgresqlSource>(() => new PostgresqlSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<PostgresqlSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostgresqlSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostgresqlSource(PostgresqlSource other) : this() {
              db_ = other.db_;
              table_ = other.table_;
              hosts_ = other.hosts_.Clone();
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              invalidateQuery_ = other.invalidateQuery_;
              sslMode_ = other.sslMode_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public PostgresqlSource Clone() {
              return new PostgresqlSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the PostrgreSQL database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 2;
            private string table_ = "";
            /// <summary>
            /// Name of the table in the specified database to be used as the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Table {
              get { return table_; }
              set {
                table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "hosts" field.</summary>
            public const int HostsFieldNumber = 3;
            private static readonly pb::FieldCodec<string> _repeated_hosts_codec
                = pb::FieldCodec.ForString(26);
            private readonly pbc::RepeatedField<string> hosts_ = new pbc::RepeatedField<string>();
            /// <summary>
            /// Name of the PostrgreSQL host
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<string> Hosts {
              get { return hosts_; }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 4;
            private long port_;
            /// <summary>
            /// Port to use when connecting to the host.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 5;
            private string user_ = "";
            /// <summary>
            /// Name of the PostrgreSQL database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 6;
            private string password_ = "";
            /// <summary>
            /// Password of the PostrgreSQL database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "invalidate_query" field.</summary>
            public const int InvalidateQueryFieldNumber = 7;
            private string invalidateQuery_ = "";
            /// <summary>
            /// Query for checking the dictionary status, to pull only updated data.
            /// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string InvalidateQuery {
              get { return invalidateQuery_; }
              set {
                invalidateQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "ssl_mode" field.</summary>
            public const int SslModeFieldNumber = 8;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode sslMode_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode.Unspecified;
            /// <summary>
            /// Mode of SSL TCP/IP connection to the PostgreSQL host.
            /// For more details, see [PostgreSQL documentation](https://www.postgresql.org/docs/current/libpq-ssl.html).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode SslMode {
              get { return sslMode_; }
              set {
                sslMode_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as PostgresqlSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(PostgresqlSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Table != other.Table) return false;
              if(!hosts_.Equals(other.hosts_)) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              if (InvalidateQuery != other.InvalidateQuery) return false;
              if (SslMode != other.SslMode) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Table.Length != 0) hash ^= Table.GetHashCode();
              hash ^= hosts_.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              if (InvalidateQuery.Length != 0) hash ^= InvalidateQuery.GetHashCode();
              if (SslMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode.Unspecified) hash ^= SslMode.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Table.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Table);
              }
              hosts_.WriteTo(output, _repeated_hosts_codec);
              if (Port != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Password);
              }
              if (InvalidateQuery.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(InvalidateQuery);
              }
              if (SslMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode.Unspecified) {
                output.WriteRawTag(64);
                output.WriteEnum((int) SslMode);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Table.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
              }
              size += hosts_.CalculateSize(_repeated_hosts_codec);
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              if (InvalidateQuery.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(InvalidateQuery);
              }
              if (SslMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode.Unspecified) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SslMode);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(PostgresqlSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Table.Length != 0) {
                Table = other.Table;
              }
              hosts_.Add(other.hosts_);
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              if (other.InvalidateQuery.Length != 0) {
                InvalidateQuery = other.InvalidateQuery;
              }
              if (other.SslMode != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode.Unspecified) {
                SslMode = other.SslMode;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Table = input.ReadString();
                    break;
                  }
                  case 26: {
                    hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
                    break;
                  }
                  case 32: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 42: {
                    User = input.ReadString();
                    break;
                  }
                  case 50: {
                    Password = input.ReadString();
                    break;
                  }
                  case 58: {
                    InvalidateQuery = input.ReadString();
                    break;
                  }
                  case 64: {
                    SslMode = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.PostgresqlSource.Types.SslMode) input.ReadEnum();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the PostgresqlSource message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal enum SslMode {
                [pbr::OriginalName("SSL_MODE_UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// Only try a non-SSL connection.
                /// </summary>
                [pbr::OriginalName("DISABLE")] Disable = 1,
                /// <summary>
                /// First try a non-SSL connection; if that fails, try an SSL connection.
                /// </summary>
                [pbr::OriginalName("ALLOW")] Allow = 2,
                /// <summary>
                /// First try an SSL connection; if that fails, try a non-SSL connection.
                /// </summary>
                [pbr::OriginalName("PREFER")] Prefer = 3,
                /// <summary>
                /// Only try an SSL connection, and verify that the server certificate is issued by a trusted certificate authority (CA).
                /// </summary>
                [pbr::OriginalName("VERIFY_CA")] VerifyCa = 4,
                /// <summary>
                /// Only try an SSL connection, verify that the server certificate is issued by a trusted CA and that the requested server host name matches that in the certificate.
                /// </summary>
                [pbr::OriginalName("VERIFY_FULL")] VerifyFull = 5,
              }

            }
            #endregion

          }

          internal sealed partial class Structure : pb::IMessage<Structure> {
            private static readonly pb::MessageParser<Structure> _parser = new pb::MessageParser<Structure>(() => new Structure());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Structure> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure(Structure other) : this() {
              id_ = other.id_ != null ? other.id_.Clone() : null;
              key_ = other.key_ != null ? other.key_.Clone() : null;
              rangeMin_ = other.rangeMin_ != null ? other.rangeMin_.Clone() : null;
              rangeMax_ = other.rangeMax_ != null ? other.rangeMax_.Clone() : null;
              attributes_ = other.attributes_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure Clone() {
              return new Structure(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id id_;
            /// <summary>
            /// Single numeric key column for the dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "key" field.</summary>
            public const int KeyFieldNumber = 3;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key key_;
            /// <summary>
            /// Composite key for the dictionary, containing of one or more key columns.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key Key {
              get { return key_; }
              set {
                key_ = value;
              }
            }

            /// <summary>Field number for the "range_min" field.</summary>
            public const int RangeMinFieldNumber = 4;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute rangeMin_;
            /// <summary>
            /// Field holding the beginning of the range for dictionaries with `RANGE_HASHED` layout.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute RangeMin {
              get { return rangeMin_; }
              set {
                rangeMin_ = value;
              }
            }

            /// <summary>Field number for the "range_max" field.</summary>
            public const int RangeMaxFieldNumber = 5;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute rangeMax_;
            /// <summary>
            /// Field holding the end of the range for dictionaries with `RANGE_HASHED` layout.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/#range-hashed).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute RangeMax {
              get { return rangeMax_; }
              set {
                rangeMax_ = value;
              }
            }

            /// <summary>Field number for the "attributes" field.</summary>
            public const int AttributesFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> _repeated_attributes_codec
                = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute>();
            /// <summary>
            /// Description of the fields available for database queries.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> Attributes {
              get { return attributes_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Structure);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Structure other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Id, other.Id)) return false;
              if (!object.Equals(Key, other.Key)) return false;
              if (!object.Equals(RangeMin, other.RangeMin)) return false;
              if (!object.Equals(RangeMax, other.RangeMax)) return false;
              if(!attributes_.Equals(other.attributes_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (id_ != null) hash ^= Id.GetHashCode();
              if (key_ != null) hash ^= Key.GetHashCode();
              if (rangeMin_ != null) hash ^= RangeMin.GetHashCode();
              if (rangeMax_ != null) hash ^= RangeMax.GetHashCode();
              hash ^= attributes_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (id_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Id);
              }
              attributes_.WriteTo(output, _repeated_attributes_codec);
              if (key_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Key);
              }
              if (rangeMin_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(RangeMin);
              }
              if (rangeMax_ != null) {
                output.WriteRawTag(42);
                output.WriteMessage(RangeMax);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (id_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
              }
              if (key_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
              }
              if (rangeMin_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RangeMin);
              }
              if (rangeMax_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(RangeMax);
              }
              size += attributes_.CalculateSize(_repeated_attributes_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Structure other) {
              if (other == null) {
                return;
              }
              if (other.id_ != null) {
                if (id_ == null) {
                  Id = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id();
                }
                Id.MergeFrom(other.Id);
              }
              if (other.key_ != null) {
                if (key_ == null) {
                  Key = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key();
                }
                Key.MergeFrom(other.Key);
              }
              if (other.rangeMin_ != null) {
                if (rangeMin_ == null) {
                  RangeMin = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute();
                }
                RangeMin.MergeFrom(other.RangeMin);
              }
              if (other.rangeMax_ != null) {
                if (rangeMax_ == null) {
                  RangeMax = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute();
                }
                RangeMax.MergeFrom(other.RangeMax);
              }
              attributes_.Add(other.attributes_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (id_ == null) {
                      Id = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id();
                    }
                    input.ReadMessage(Id);
                    break;
                  }
                  case 18: {
                    attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                    break;
                  }
                  case 26: {
                    if (key_ == null) {
                      Key = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key();
                    }
                    input.ReadMessage(Key);
                    break;
                  }
                  case 34: {
                    if (rangeMin_ == null) {
                      RangeMin = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute();
                    }
                    input.ReadMessage(RangeMin);
                    break;
                  }
                  case 42: {
                    if (rangeMax_ == null) {
                      RangeMax = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute();
                    }
                    input.ReadMessage(RangeMax);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Structure message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Attribute : pb::IMessage<Attribute> {
                private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute(Attribute other) : this() {
                  name_ = other.name_;
                  type_ = other.type_;
                  nullValue_ = other.nullValue_;
                  expression_ = other.expression_;
                  hierarchical_ = other.hierarchical_;
                  injective_ = other.injective_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute Clone() {
                  return new Attribute(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                /// <summary>
                /// Name of the column.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 2;
                private string type_ = "";
                /// <summary>
                /// Type of the column.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Type {
                  get { return type_; }
                  set {
                    type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "null_value" field.</summary>
                public const int NullValueFieldNumber = 3;
                private string nullValue_ = "";
                /// <summary>
                /// Default value for an element without data (for example, an empty string).
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string NullValue {
                  get { return nullValue_; }
                  set {
                    nullValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "expression" field.</summary>
                public const int ExpressionFieldNumber = 4;
                private string expression_ = "";
                /// <summary>
                /// Expression, describing the attribute, if applicable.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Expression {
                  get { return expression_; }
                  set {
                    expression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "hierarchical" field.</summary>
                public const int HierarchicalFieldNumber = 5;
                private bool hierarchical_;
                /// <summary>
                /// Indication of hierarchy support.
                /// Default value: `false`.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Hierarchical {
                  get { return hierarchical_; }
                  set {
                    hierarchical_ = value;
                  }
                }

                /// <summary>Field number for the "injective" field.</summary>
                public const int InjectiveFieldNumber = 6;
                private bool injective_;
                /// <summary>
                /// Indication of injective mapping "id -> attribute".
                /// Default value: `false`.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Injective {
                  get { return injective_; }
                  set {
                    injective_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Attribute);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Attribute other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Name != other.Name) return false;
                  if (Type != other.Type) return false;
                  if (NullValue != other.NullValue) return false;
                  if (Expression != other.Expression) return false;
                  if (Hierarchical != other.Hierarchical) return false;
                  if (Injective != other.Injective) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Type.Length != 0) hash ^= Type.GetHashCode();
                  if (NullValue.Length != 0) hash ^= NullValue.GetHashCode();
                  if (Expression.Length != 0) hash ^= Expression.GetHashCode();
                  if (Hierarchical != false) hash ^= Hierarchical.GetHashCode();
                  if (Injective != false) hash ^= Injective.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Name.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Name);
                  }
                  if (Type.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Type);
                  }
                  if (NullValue.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(NullValue);
                  }
                  if (Expression.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(Expression);
                  }
                  if (Hierarchical != false) {
                    output.WriteRawTag(40);
                    output.WriteBool(Hierarchical);
                  }
                  if (Injective != false) {
                    output.WriteRawTag(48);
                    output.WriteBool(Injective);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Type.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
                  }
                  if (NullValue.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(NullValue);
                  }
                  if (Expression.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Expression);
                  }
                  if (Hierarchical != false) {
                    size += 1 + 1;
                  }
                  if (Injective != false) {
                    size += 1 + 1;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Attribute other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Type.Length != 0) {
                    Type = other.Type;
                  }
                  if (other.NullValue.Length != 0) {
                    NullValue = other.NullValue;
                  }
                  if (other.Expression.Length != 0) {
                    Expression = other.Expression;
                  }
                  if (other.Hierarchical != false) {
                    Hierarchical = other.Hierarchical;
                  }
                  if (other.Injective != false) {
                    Injective = other.Injective;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Name = input.ReadString();
                        break;
                      }
                      case 18: {
                        Type = input.ReadString();
                        break;
                      }
                      case 26: {
                        NullValue = input.ReadString();
                        break;
                      }
                      case 34: {
                        Expression = input.ReadString();
                        break;
                      }
                      case 40: {
                        Hierarchical = input.ReadBool();
                        break;
                      }
                      case 48: {
                        Injective = input.ReadBool();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              /// Numeric key.
              /// </summary>
              internal sealed partial class Id : pb::IMessage<Id> {
                private static readonly pb::MessageParser<Id> _parser = new pb::MessageParser<Id>(() => new Id());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Id> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id(Id other) : this() {
                  name_ = other.name_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id Clone() {
                  return new Id(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                /// <summary>
                /// Name of the numeric key.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Id);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Id other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Name != other.Name) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Name.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Name);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Id other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Name = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              /// Complex key.
              /// </summary>
              internal sealed partial class Key : pb::IMessage<Key> {
                private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Key> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key(Key other) : this() {
                  attributes_ = other.attributes_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key Clone() {
                  return new Key(this);
                }

                /// <summary>Field number for the "attributes" field.</summary>
                public const int AttributesFieldNumber = 1;
                private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> _repeated_attributes_codec
                    = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser);
                private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute>();
                /// <summary>
                /// Attributes of a complex key.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> Attributes {
                  get { return attributes_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Key);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Key other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!attributes_.Equals(other.attributes_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= attributes_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  attributes_.WriteTo(output, _repeated_attributes_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += attributes_.CalculateSize(_repeated_attributes_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Key other) {
                  if (other == null) {
                    return;
                  }
                  attributes_.Add(other.attributes_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          /// Layout determining how to store the dictionary in memory.
          /// </summary>
          internal sealed partial class Layout : pb::IMessage<Layout> {
            private static readonly pb::MessageParser<Layout> _parser = new pb::MessageParser<Layout>(() => new Layout());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Layout> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout(Layout other) : this() {
              type_ = other.type_;
              sizeInCells_ = other.sizeInCells_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout Clone() {
              return new Layout(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type type_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type.Unspecified;
            /// <summary>
            /// Layout type for an external dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "size_in_cells" field.</summary>
            public const int SizeInCellsFieldNumber = 2;
            private long sizeInCells_;
            /// <summary>
            /// Number of cells in the cache. Rounded up to a power of two.
            /// Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SizeInCells {
              get { return sizeInCells_; }
              set {
                sizeInCells_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Layout);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Layout other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (SizeInCells != other.SizeInCells) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type.Unspecified) hash ^= Type.GetHashCode();
              if (SizeInCells != 0L) hash ^= SizeInCells.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type.Unspecified) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (SizeInCells != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(SizeInCells);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type.Unspecified) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (SizeInCells != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeInCells);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Layout other) {
              if (other == null) {
                return;
              }
              if (other.Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type.Unspecified) {
                Type = other.Type;
              }
              if (other.SizeInCells != 0L) {
                SizeInCells = other.SizeInCells;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    SizeInCells = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Layout message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal enum Type {
                [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of flat arrays.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("FLAT")] Flat = 1,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of a hash table.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("HASHED")] Hashed = 2,
                /// <summary>
                /// Similar to HASHED, to be used with composite keys.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("COMPLEX_KEY_HASHED")] ComplexKeyHashed = 3,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of a hash table,
                /// with an ordered array of ranges and their corresponding values.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("RANGE_HASHED")] RangeHashed = 4,
                /// <summary>
                /// The dictionary is stored in a cache with a set number of cells.
                /// Available for MySQL, ClickHouse and HTTP dictionary sources.
                /// </summary>
                [pbr::OriginalName("CACHE")] Cache = 5,
                /// <summary>
                /// Similar to CACHE, to be used with composite keys.
                /// Available for MySQL, ClickHouse and HTTP dictionary sources.
                /// </summary>
                [pbr::OriginalName("COMPLEX_KEY_CACHE")] ComplexKeyCache = 6,
              }

            }
            #endregion

          }

          internal sealed partial class Range : pb::IMessage<Range> {
            private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Range> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range(Range other) : this() {
              min_ = other.min_;
              max_ = other.max_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range Clone() {
              return new Range(this);
            }

            /// <summary>Field number for the "min" field.</summary>
            public const int MinFieldNumber = 1;
            private long min_;
            /// <summary>
            /// Minimum dictionary lifetime.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Min {
              get { return min_; }
              set {
                min_ = value;
              }
            }

            /// <summary>Field number for the "max" field.</summary>
            public const int MaxFieldNumber = 2;
            private long max_;
            /// <summary>
            /// Maximum dictionary lifetime.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Max {
              get { return max_; }
              set {
                max_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Range);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Range other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Min != other.Min) return false;
              if (Max != other.Max) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Min != 0L) hash ^= Min.GetHashCode();
              if (Max != 0L) hash ^= Max.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Min != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Min);
              }
              if (Max != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Max);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Min != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Min);
              }
              if (Max != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Range other) {
              if (other == null) {
                return;
              }
              if (other.Min != 0L) {
                Min = other.Min;
              }
              if (other.Max != 0L) {
                Max = other.Max;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Min = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    Max = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Rollup settings for the GraphiteMergeTree table engine.
      /// </summary>
      internal sealed partial class GraphiteRollup : pb::IMessage<GraphiteRollup> {
        private static readonly pb::MessageParser<GraphiteRollup> _parser = new pb::MessageParser<GraphiteRollup>(() => new GraphiteRollup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphiteRollup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup(GraphiteRollup other) : this() {
          name_ = other.name_;
          patterns_ = other.patterns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup Clone() {
          return new GraphiteRollup(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name for the specified combination of settings for Graphite rollup.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "patterns" field.</summary>
        public const int PatternsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> _repeated_patterns_codec
            = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> patterns_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern>();
        /// <summary>
        /// Pattern to use for the rollup.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> Patterns {
          get { return patterns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphiteRollup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphiteRollup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!patterns_.Equals(other.patterns_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= patterns_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          patterns_.WriteTo(output, _repeated_patterns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += patterns_.CalculateSize(_repeated_patterns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphiteRollup other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          patterns_.Add(other.patterns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GraphiteRollup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal sealed partial class Pattern : pb::IMessage<Pattern> {
            private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern(Pattern other) : this() {
              regexp_ = other.regexp_;
              function_ = other.function_;
              retention_ = other.retention_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern Clone() {
              return new Pattern(this);
            }

            /// <summary>Field number for the "regexp" field.</summary>
            public const int RegexpFieldNumber = 1;
            private string regexp_ = "";
            /// <summary>
            /// Pattern for metric names.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Regexp {
              get { return regexp_; }
              set {
                regexp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "function" field.</summary>
            public const int FunctionFieldNumber = 2;
            private string function_ = "";
            /// <summary>
            /// Name of the aggregating function to apply to data of the age specified in [retention].
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Function {
              get { return function_; }
              set {
                function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "retention" field.</summary>
            public const int RetentionFieldNumber = 3;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> _repeated_retention_codec
                = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> retention_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention>();
            /// <summary>
            /// Age of data to use for thinning.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> Retention {
              get { return retention_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Pattern);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Pattern other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Regexp != other.Regexp) return false;
              if (Function != other.Function) return false;
              if(!retention_.Equals(other.retention_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Regexp.Length != 0) hash ^= Regexp.GetHashCode();
              if (Function.Length != 0) hash ^= Function.GetHashCode();
              hash ^= retention_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Regexp.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Regexp);
              }
              if (Function.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Function);
              }
              retention_.WriteTo(output, _repeated_retention_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Regexp.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Regexp);
              }
              if (Function.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
              }
              size += retention_.CalculateSize(_repeated_retention_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Pattern other) {
              if (other == null) {
                return;
              }
              if (other.Regexp.Length != 0) {
                Regexp = other.Regexp;
              }
              if (other.Function.Length != 0) {
                Function = other.Function;
              }
              retention_.Add(other.retention_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Regexp = input.ReadString();
                    break;
                  }
                  case 18: {
                    Function = input.ReadString();
                    break;
                  }
                  case 26: {
                    retention_.AddEntriesFrom(input, _repeated_retention_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Pattern message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Retention : pb::IMessage<Retention> {
                private static readonly pb::MessageParser<Retention> _parser = new pb::MessageParser<Retention>(() => new Retention());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Retention> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention(Retention other) : this() {
                  age_ = other.age_;
                  precision_ = other.precision_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention Clone() {
                  return new Retention(this);
                }

                /// <summary>Field number for the "age" field.</summary>
                public const int AgeFieldNumber = 1;
                private long age_;
                /// <summary>
                /// Minimum age of the data in seconds.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Age {
                  get { return age_; }
                  set {
                    age_ = value;
                  }
                }

                /// <summary>Field number for the "precision" field.</summary>
                public const int PrecisionFieldNumber = 2;
                private long precision_;
                /// <summary>
                /// Precision of determining the age of the data, in seconds.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Precision {
                  get { return precision_; }
                  set {
                    precision_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Retention);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Retention other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Age != other.Age) return false;
                  if (Precision != other.Precision) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Age != 0L) hash ^= Age.GetHashCode();
                  if (Precision != 0L) hash ^= Precision.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Age != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Age);
                  }
                  if (Precision != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(Precision);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Age != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Age);
                  }
                  if (Precision != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Precision);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Retention other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Age != 0L) {
                    Age = other.Age;
                  }
                  if (other.Precision != 0L) {
                    Precision = other.Precision;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Age = input.ReadInt64();
                        break;
                      }
                      case 16: {
                        Precision = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  internal sealed partial class ClickhouseConfigSet : pb::IMessage<ClickhouseConfigSet> {
    private static readonly pb::MessageParser<ClickhouseConfigSet> _parser = new pb::MessageParser<ClickhouseConfigSet>(() => new ClickhouseConfigSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickhouseConfigSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet(ClickhouseConfigSet other) : this() {
      effectiveConfig_ = other.effectiveConfig_ != null ? other.effectiveConfig_.Clone() : null;
      userConfig_ = other.userConfig_ != null ? other.userConfig_.Clone() : null;
      defaultConfig_ = other.defaultConfig_ != null ? other.defaultConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet Clone() {
      return new ClickhouseConfigSet(this);
    }

    /// <summary>Field number for the "effective_config" field.</summary>
    public const int EffectiveConfigFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig effectiveConfig_;
    /// <summary>
    /// Effective settings for a ClickHouse cluster (a combination of settings defined
    /// in [user_config] and [default_config]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig EffectiveConfig {
      get { return effectiveConfig_; }
      set {
        effectiveConfig_ = value;
      }
    }

    /// <summary>Field number for the "user_config" field.</summary>
    public const int UserConfigFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig userConfig_;
    /// <summary>
    /// User-defined settings for a ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig UserConfig {
      get { return userConfig_; }
      set {
        userConfig_ = value;
      }
    }

    /// <summary>Field number for the "default_config" field.</summary>
    public const int DefaultConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig defaultConfig_;
    /// <summary>
    /// Default configuration for a ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig DefaultConfig {
      get { return defaultConfig_; }
      set {
        defaultConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickhouseConfigSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickhouseConfigSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectiveConfig, other.EffectiveConfig)) return false;
      if (!object.Equals(UserConfig, other.UserConfig)) return false;
      if (!object.Equals(DefaultConfig, other.DefaultConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectiveConfig_ != null) hash ^= EffectiveConfig.GetHashCode();
      if (userConfig_ != null) hash ^= UserConfig.GetHashCode();
      if (defaultConfig_ != null) hash ^= DefaultConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectiveConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectiveConfig);
      }
      if (userConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserConfig);
      }
      if (defaultConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectiveConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveConfig);
      }
      if (userConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConfig);
      }
      if (defaultConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickhouseConfigSet other) {
      if (other == null) {
        return;
      }
      if (other.effectiveConfig_ != null) {
        if (effectiveConfig_ == null) {
          EffectiveConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        EffectiveConfig.MergeFrom(other.EffectiveConfig);
      }
      if (other.userConfig_ != null) {
        if (userConfig_ == null) {
          UserConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        UserConfig.MergeFrom(other.UserConfig);
      }
      if (other.defaultConfig_ != null) {
        if (defaultConfig_ == null) {
          DefaultConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        DefaultConfig.MergeFrom(other.DefaultConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectiveConfig_ == null) {
              EffectiveConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(EffectiveConfig);
            break;
          }
          case 18: {
            if (userConfig_ == null) {
              UserConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(UserConfig);
            break;
          }
          case 26: {
            if (defaultConfig_ == null) {
              DefaultConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(DefaultConfig);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
