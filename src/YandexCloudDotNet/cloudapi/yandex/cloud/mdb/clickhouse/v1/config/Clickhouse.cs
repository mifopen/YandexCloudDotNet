// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Clickhouse.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto</summary>
  internal static partial class ClickhouseReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/clickhouse/v1/config/clickhouse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClickhouseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZ5YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjEvY29uZmlnL2NsaWNr",
            "aG91c2UucHJvdG8SJXlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5j",
            "b25maWcaHmdvb2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxodeWFuZGV4",
            "L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8iiSMKEENsaWNraG91c2VDb25maWcS",
            "UwoJbG9nX2xldmVsGAEgASgOMkAueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hv",
            "dXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkxvZ0xldmVsElUKCm1l",
            "cmdlX3RyZWUYAiABKAsyQS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuY29uZmlnLkNsaWNraG91c2VDb25maWcuTWVyZ2VUcmVlElgKC2NvbXBy",
            "ZXNzaW9uGAMgAygLMkMueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYx",
            "LmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkNvbXByZXNzaW9uEmAKDGRpY3Rp",
            "b25hcmllcxgEIAMoCzJKLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5jb25maWcuQ2xpY2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkS",
            "XwoPZ3JhcGhpdGVfcm9sbHVwGAUgAygLMkYueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkdyYXBoaXRl",
            "Um9sbHVwEj4KD21heF9jb25uZWN0aW9ucxgGIAEoCzIbLmdvb2dsZS5wcm90",
            "b2J1Zi5JbnQ2NFZhbHVlQgj6xzEEPj0xMBJFChZtYXhfY29uY3VycmVudF9x",
            "dWVyaWVzGAcgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCCPrH",
            "MQQ+PTEwEjcKEmtlZXBfYWxpdmVfdGltZW91dBgIIAEoCzIbLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlEjwKF3VuY29tcHJlc3NlZF9jYWNoZV9zaXpl",
            "GAkgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSRQoPbWFya19j",
            "YWNoZV9zaXplGAogASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVC",
            "D/rHMQs+NTM2ODcwOTEyMBI7ChZtYXhfdGFibGVfc2l6ZV90b19kcm9wGAsg",
            "ASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWUSPwoabWF4X3BhcnRp",
            "dGlvbl9zaXplX3RvX2Ryb3AYDSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRJJCiRidWlsdGluX2RpY3Rpb25hcmllc19yZWxvYWRfaW50ZXJ2",
            "YWwYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRIQCgh0aW1l",
            "em9uZRgOIAEoCRqfAQoJTWVyZ2VUcmVlEkQKH3JlcGxpY2F0ZWRfZGVkdXBs",
            "aWNhdGlvbl93aW5kb3cYASABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRW",
            "YWx1ZRJMCidyZXBsaWNhdGVkX2RlZHVwbGljYXRpb25fd2luZG93X3NlY29u",
            "ZHMYAiABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRrbAQoLQ29t",
            "cHJlc3Npb24SWgoGbWV0aG9kGAEgASgOMkoueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkNvbXByZXNz",
            "aW9uLk1ldGhvZBIeCg1taW5fcGFydF9zaXplGAIgASgDQgf6xzEDPj0xEhsK",
            "E21pbl9wYXJ0X3NpemVfcmF0aW8YAyABKAEiMwoGTWV0aG9kEhYKEk1FVEhP",
            "RF9VTlNQRUNJRklFRBAAEgcKA0xaNBABEggKBFpTVEQQAhquFAoSRXh0ZXJu",
            "YWxEaWN0aW9uYXJ5EhIKBG5hbWUYASABKAlCBOjHMQESbQoJc3RydWN0dXJl",
            "GAIgASgLMlQueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZp",
            "Zy5DbGlja2hvdXNlQ29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5TdHJ1Y3R1",
            "cmVCBOjHMQESZwoGbGF5b3V0GAMgASgLMlEueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4dGVybmFs",
            "RGljdGlvbmFyeS5MYXlvdXRCBOjHMQESGAoOZml4ZWRfbGlmZXRpbWUYBCAB",
            "KANIABJqCg5saWZldGltZV9yYW5nZRgFIAEoCzJQLnlhbmRleC5jbG91ZC5t",
            "ZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZpZy5FeHRl",
            "cm5hbERpY3Rpb25hcnkuUmFuZ2VIABJsCgtodHRwX3NvdXJjZRgGIAEoCzJV",
            "LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2to",
            "b3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuSHR0cFNvdXJjZUgBEm4K",
            "DG15c3FsX3NvdXJjZRgHIAEoCzJWLnlhbmRleC5jbG91ZC5tZGIuY2xpY2to",
            "b3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rp",
            "b25hcnkuTXlzcWxTb3VyY2VIARJ4ChFjbGlja2hvdXNlX3NvdXJjZRgIIAEo",
            "CzJbLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xp",
            "Y2tob3VzZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuQ2xpY2tob3VzZVNv",
            "dXJjZUgBEnIKDm1vbmdvZGJfc291cmNlGAkgASgLMlgueWFuZGV4LmNsb3Vk",
            "Lm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4",
            "dGVybmFsRGljdGlvbmFyeS5Nb25nb2RiU291cmNlSAEaNQoKSHR0cFNvdXJj",
            "ZRIRCgN1cmwYASABKAlCBOjHMQESFAoGZm9ybWF0GAIgASgJQgToxzEBGo8D",
            "CgtNeXNxbFNvdXJjZRIQCgJkYhgBIAEoCUIE6McxARITCgV0YWJsZRgCIAEo",
            "CUIE6McxARIZCgRwb3J0GAMgASgDQgv6xzEHMC02NTUzNRIMCgR1c2VyGAQg",
            "ASgJEhAKCHBhc3N3b3JkGAUgASgJEngKCHJlcGxpY2FzGAYgAygLMl4ueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNl",
            "Q29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5NeXNxbFNvdXJjZS5SZXBsaWNh",
            "QgaCyDECPjASDQoFd2hlcmUYByABKAkSGAoQaW52YWxpZGF0ZV9xdWVyeRgI",
            "IAEoCRp7CgdSZXBsaWNhEhsKBGhvc3QYASABKAlCDejHMQGKyDEFPD0yNTMS",
            "GAoIcHJpb3JpdHkYAiABKANCBvrHMQI+MBIZCgRwb3J0GAMgASgDQgv6xzEH",
            "MC02NTUzNRIMCgR1c2VyGAQgASgJEhAKCHBhc3N3b3JkGAUgASgJGqYBChBD",
            "bGlja2hvdXNlU291cmNlEhAKAmRiGAEgASgJQgToxzEBEhMKBXRhYmxlGAIg",
            "ASgJQgToxzEBEhsKBGhvc3QYAyABKAlCDejHMQGKyDEFPD0yNTMSGQoEcG9y",
            "dBgEIAEoA0IL+scxBzAtNjU1MzUSEgoEdXNlchgFIAEoCUIE6McxARIQCghw",
            "YXNzd29yZBgGIAEoCRINCgV3aGVyZRgHIAEoCRqZAQoNTW9uZ29kYlNvdXJj",
            "ZRIQCgJkYhgBIAEoCUIE6McxARIYCgpjb2xsZWN0aW9uGAIgASgJQgToxzEB",
            "EhsKBGhvc3QYAyABKAlCDejHMQGKyDEFPD0yNTMSGQoEcG9ydBgEIAEoA0IL",
            "+scxBzAtNjU1MzUSEgoEdXNlchgFIAEoCUIE6McxARIQCghwYXNzd29yZBgG",
            "IAEoCRr4BAoJU3RydWN0dXJlEmMKAmlkGAEgASgLMlcueWFuZGV4LmNsb3Vk",
            "Lm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkV4",
            "dGVybmFsRGljdGlvbmFyeS5TdHJ1Y3R1cmUuSWQSZQoDa2V5GAMgASgLMlgu",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hv",
            "dXNlQ29uZmlnLkV4dGVybmFsRGljdGlvbmFyeS5TdHJ1Y3R1cmUuS2V5EnoK",
            "CmF0dHJpYnV0ZXMYAiADKAsyXi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcuRXh0ZXJuYWxEaWN0aW9u",
            "YXJ5LlN0cnVjdHVyZS5BdHRyaWJ1dGVCBoLIMQI+MBqEAQoJQXR0cmlidXRl",
            "EhIKBG5hbWUYASABKAlCBOjHMQESEgoEdHlwZRgCIAEoCUIE6McxARISCgpu",
            "dWxsX3ZhbHVlGAMgASgJEhIKCmV4cHJlc3Npb24YBCABKAkSFAoMaGllcmFy",
            "Y2hpY2FsGAUgASgIEhEKCWluamVjdGl2ZRgGIAEoCBoYCgJJZBISCgRuYW1l",
            "GAEgASgJQgToxzEBGoEBCgNLZXkSegoKYXR0cmlidXRlcxgBIAMoCzJeLnlh",
            "bmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3Vz",
            "ZUNvbmZpZy5FeHRlcm5hbERpY3Rpb25hcnkuU3RydWN0dXJlLkF0dHJpYnV0",
            "ZUIGgsgxAj4wGosCCgZMYXlvdXQSagoEdHlwZRgBIAEoDjJWLnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xpY2tob3VzZUNvbmZp",
            "Zy5FeHRlcm5hbERpY3Rpb25hcnkuTGF5b3V0LlR5cGVCBOjHMQESFQoNc2l6",
            "ZV9pbl9jZWxscxgCIAEoAyJ+CgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQ",
            "ABIICgRGTEFUEAESCgoGSEFTSEVEEAISFgoSQ09NUExFWF9LRVlfSEFTSEVE",
            "EAMSEAoMUkFOR0VfSEFTSEVEEAQSCQoFQ0FDSEUQBRIVChFDT01QTEVYX0tF",
            "WV9DQUNIRRAGGiEKBVJhbmdlEgsKA21pbhgBIAEoAxILCgNtYXgYAiABKANC",
            "EAoIbGlmZXRpbWUSBMDBMQFCDgoGc291cmNlEgTAwTEBGvQCCg5HcmFwaGl0",
            "ZVJvbGx1cBISCgRuYW1lGAEgASgJQgToxzEBEmgKCHBhdHRlcm5zGAIgAygL",
            "Mk4ueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLmNvbmZpZy5DbGlj",
            "a2hvdXNlQ29uZmlnLkdyYXBoaXRlUm9sbHVwLlBhdHRlcm5CBoLIMQI+MBrj",
            "AQoHUGF0dGVybhIOCgZyZWdleHAYASABKAkSFgoIZnVuY3Rpb24YAiABKAlC",
            "BOjHMQEScwoJcmV0ZW50aW9uGAMgAygLMlgueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLmNvbmZpZy5DbGlja2hvdXNlQ29uZmlnLkdyYXBoaXRl",
            "Um9sbHVwLlBhdHRlcm4uUmV0ZW50aW9uQgaCyDECPjAaOwoJUmV0ZW50aW9u",
            "EhMKA2FnZRgBIAEoA0IG+scxAj4wEhkKCXByZWNpc2lvbhgCIAEoA0IG+scx",
            "Aj4wImQKCExvZ0xldmVsEhkKFUxPR19MRVZFTF9VTlNQRUNJRklFRBAAEgkK",
            "BVRSQUNFEAESCQoFREVCVUcQAhIPCgtJTkZPUk1BVElPThADEgsKB1dBUk5J",
            "TkcQBBIJCgVFUlJPUhAFIo0CChNDbGlja2hvdXNlQ29uZmlnU2V0ElcKEGVm",
            "ZmVjdGl2ZV9jb25maWcYASABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNr",
            "aG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWdCBOjHMQESTAoLdXNl",
            "cl9jb25maWcYAiABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuY29uZmlnLkNsaWNraG91c2VDb25maWcSTwoOZGVmYXVsdF9jb25maWcY",
            "AyABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuY29uZmln",
            "LkNsaWNraG91c2VDb25maWdCVlpUZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQv",
            "Z28tZ2VucHJvdG8veWFuZGV4L2Nsb3VkL21kYi9jbGlja2hvdXNlL3YxL2Nv",
            "bmZpZztjbGlja2hvdXNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Parser, new[]{ "LogLevel", "MergeTree", "Compression", "Dictionaries", "GraphiteRollup", "MaxConnections", "MaxConcurrentQueries", "KeepAliveTimeout", "UncompressedCacheSize", "MarkCacheSize", "MaxTableSizeToDrop", "MaxPartitionSizeToDrop", "BuiltinDictionariesReloadInterval", "Timezone" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree.Parser, new[]{ "ReplicatedDeduplicationWindow", "ReplicatedDeduplicationWindowSeconds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Parser, new[]{ "Method", "MinPartSize", "MinPartSizeRatio" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Parser, new[]{ "Name", "Structure", "Layout", "FixedLifetime", "LifetimeRange", "HttpSource", "MysqlSource", "ClickhouseSource", "MongodbSource" }, new[]{ "Lifetime", "Source" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource.Parser, new[]{ "Url", "Format" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Parser, new[]{ "Db", "Table", "Port", "User", "Password", "Replicas", "Where", "InvalidateQuery" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica.Parser, new[]{ "Host", "Priority", "Port", "User", "Password" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource.Parser, new[]{ "Db", "Table", "Host", "Port", "User", "Password", "Where" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource.Parser, new[]{ "Db", "Collection", "Host", "Port", "User", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Parser, new[]{ "Id", "Key", "Attributes" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser, new[]{ "Name", "Type", "NullValue", "Expression", "Hierarchical", "Injective" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key.Parser, new[]{ "Attributes" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Parser, new[]{ "Type", "SizeInCells" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range.Parser, new[]{ "Min", "Max" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Parser, new[]{ "Name", "Patterns" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Parser, new[]{ "Regexp", "Function", "Retention" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention.Parser, new[]{ "Age", "Precision" }, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet), global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfigSet.Parser, new[]{ "EffectiveConfig", "UserConfig", "DefaultConfig" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ClickHouse configuration options. Detailed description for each set of options
  /// is available in [ClickHouse documentation](https://clickhouse.yandex/docs/ru/operations/server_settings/settings/).
  ///
  /// Any options not listed here are not supported.
  /// </summary>
  internal sealed partial class ClickhouseConfig : pb::IMessage<ClickhouseConfig> {
    private static readonly pb::MessageParser<ClickhouseConfig> _parser = new pb::MessageParser<ClickhouseConfig>(() => new ClickhouseConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickhouseConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig(ClickhouseConfig other) : this() {
      logLevel_ = other.logLevel_;
      mergeTree_ = other.mergeTree_ != null ? other.mergeTree_.Clone() : null;
      compression_ = other.compression_.Clone();
      dictionaries_ = other.dictionaries_.Clone();
      graphiteRollup_ = other.graphiteRollup_.Clone();
      MaxConnections = other.MaxConnections;
      MaxConcurrentQueries = other.MaxConcurrentQueries;
      KeepAliveTimeout = other.KeepAliveTimeout;
      UncompressedCacheSize = other.UncompressedCacheSize;
      MarkCacheSize = other.MarkCacheSize;
      MaxTableSizeToDrop = other.MaxTableSizeToDrop;
      MaxPartitionSizeToDrop = other.MaxPartitionSizeToDrop;
      BuiltinDictionariesReloadInterval = other.BuiltinDictionariesReloadInterval;
      timezone_ = other.timezone_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfig Clone() {
      return new ClickhouseConfig(this);
    }

    /// <summary>Field number for the "log_level" field.</summary>
    public const int LogLevelFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel logLevel_ = 0;
    /// <summary>
    /// Logging level for the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel LogLevel {
      get { return logLevel_; }
      set {
        logLevel_ = value;
      }
    }

    /// <summary>Field number for the "merge_tree" field.</summary>
    public const int MergeTreeFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree mergeTree_;
    /// <summary>
    /// Settings for the MergeTree engine.
    /// See description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#merge_tree).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree MergeTree {
      get { return mergeTree_; }
      set {
        mergeTree_ = value;
      }
    }

    /// <summary>Field number for the "compression" field.</summary>
    public const int CompressionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> _repeated_compression_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> compression_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression>();
    /// <summary>
    /// Compression settings for the ClickHouse cluster.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#compression).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression> Compression {
      get { return compression_; }
    }

    /// <summary>Field number for the "dictionaries" field.</summary>
    public const int DictionariesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> _repeated_dictionaries_codec
        = pb::FieldCodec.ForMessage(34, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> dictionaries_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary>();
    /// <summary>
    /// Configuration of external dictionaries to be used by the ClickHouse cluster.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary> Dictionaries {
      get { return dictionaries_; }
    }

    /// <summary>Field number for the "graphite_rollup" field.</summary>
    public const int GraphiteRollupFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> _repeated_graphiteRollup_codec
        = pb::FieldCodec.ForMessage(42, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> graphiteRollup_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup>();
    /// <summary>
    /// Settings for thinning Graphite data.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#server_settings-graphite_rollup).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup> GraphiteRollup {
      get { return graphiteRollup_; }
    }

    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 6;
    private static readonly pb::FieldCodec<long?> _single_maxConnections_codec = pb::FieldCodec.ForStructWrapper<long>(50);
    private long? maxConnections_;
    /// <summary>
    /// Maximum number of inbound connections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }


    /// <summary>Field number for the "max_concurrent_queries" field.</summary>
    public const int MaxConcurrentQueriesFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_maxConcurrentQueries_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? maxConcurrentQueries_;
    /// <summary>
    /// Maximum number of simultaneously processed requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConcurrentQueries {
      get { return maxConcurrentQueries_; }
      set {
        maxConcurrentQueries_ = value;
      }
    }


    /// <summary>Field number for the "keep_alive_timeout" field.</summary>
    public const int KeepAliveTimeoutFieldNumber = 8;
    private static readonly pb::FieldCodec<long?> _single_keepAliveTimeout_codec = pb::FieldCodec.ForStructWrapper<long>(66);
    private long? keepAliveTimeout_;
    /// <summary>
    /// Number of milliseconds that ClickHouse waits for incoming requests before closing the connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? KeepAliveTimeout {
      get { return keepAliveTimeout_; }
      set {
        keepAliveTimeout_ = value;
      }
    }


    /// <summary>Field number for the "uncompressed_cache_size" field.</summary>
    public const int UncompressedCacheSizeFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_uncompressedCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? uncompressedCacheSize_;
    /// <summary>
    /// Cache size (in bytes) for uncompressed data used by MergeTree tables.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#uncompressed_cache_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? UncompressedCacheSize {
      get { return uncompressedCacheSize_; }
      set {
        uncompressedCacheSize_ = value;
      }
    }


    /// <summary>Field number for the "mark_cache_size" field.</summary>
    public const int MarkCacheSizeFieldNumber = 10;
    private static readonly pb::FieldCodec<long?> _single_markCacheSize_codec = pb::FieldCodec.ForStructWrapper<long>(82);
    private long? markCacheSize_;
    /// <summary>
    /// Approximate size (in bytes) of the cache of "marks" used by MergeTree tables.
    /// See details in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#mark_cache_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MarkCacheSize {
      get { return markCacheSize_; }
      set {
        markCacheSize_ = value;
      }
    }


    /// <summary>Field number for the "max_table_size_to_drop" field.</summary>
    public const int MaxTableSizeToDropFieldNumber = 11;
    private static readonly pb::FieldCodec<long?> _single_maxTableSizeToDrop_codec = pb::FieldCodec.ForStructWrapper<long>(90);
    private long? maxTableSizeToDrop_;
    /// <summary>
    /// Maximum size of the table that can be deleted using a DROP query.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#max_table_size_to_drop).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxTableSizeToDrop {
      get { return maxTableSizeToDrop_; }
      set {
        maxTableSizeToDrop_ = value;
      }
    }


    /// <summary>Field number for the "max_partition_size_to_drop" field.</summary>
    public const int MaxPartitionSizeToDropFieldNumber = 13;
    private static readonly pb::FieldCodec<long?> _single_maxPartitionSizeToDrop_codec = pb::FieldCodec.ForStructWrapper<long>(106);
    private long? maxPartitionSizeToDrop_;
    /// <summary>
    /// Maximum size of the partition that can be deleted using a DROP query.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#max_partition_size_to_drop).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxPartitionSizeToDrop {
      get { return maxPartitionSizeToDrop_; }
      set {
        maxPartitionSizeToDrop_ = value;
      }
    }


    /// <summary>Field number for the "builtin_dictionaries_reload_interval" field.</summary>
    public const int BuiltinDictionariesReloadIntervalFieldNumber = 12;
    private static readonly pb::FieldCodec<long?> _single_builtinDictionariesReloadInterval_codec = pb::FieldCodec.ForStructWrapper<long>(98);
    private long? builtinDictionariesReloadInterval_;
    /// <summary>
    /// Time interval for reloading built-in dictionaries.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#builtin_dictionaries_reload_interval).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BuiltinDictionariesReloadInterval {
      get { return builtinDictionariesReloadInterval_; }
      set {
        builtinDictionariesReloadInterval_ = value;
      }
    }


    /// <summary>Field number for the "timezone" field.</summary>
    public const int TimezoneFieldNumber = 14;
    private string timezone_ = "";
    /// <summary>
    /// The server's time zone to be used in DateTime fields conversions. Specified as an IANA identifier.
    /// See in-depth description in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/server_settings/settings/#timezone).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timezone {
      get { return timezone_; }
      set {
        timezone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickhouseConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickhouseConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogLevel != other.LogLevel) return false;
      if (!object.Equals(MergeTree, other.MergeTree)) return false;
      if(!compression_.Equals(other.compression_)) return false;
      if(!dictionaries_.Equals(other.dictionaries_)) return false;
      if(!graphiteRollup_.Equals(other.graphiteRollup_)) return false;
      if (MaxConnections != other.MaxConnections) return false;
      if (MaxConcurrentQueries != other.MaxConcurrentQueries) return false;
      if (KeepAliveTimeout != other.KeepAliveTimeout) return false;
      if (UncompressedCacheSize != other.UncompressedCacheSize) return false;
      if (MarkCacheSize != other.MarkCacheSize) return false;
      if (MaxTableSizeToDrop != other.MaxTableSizeToDrop) return false;
      if (MaxPartitionSizeToDrop != other.MaxPartitionSizeToDrop) return false;
      if (BuiltinDictionariesReloadInterval != other.BuiltinDictionariesReloadInterval) return false;
      if (Timezone != other.Timezone) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogLevel != 0) hash ^= LogLevel.GetHashCode();
      if (mergeTree_ != null) hash ^= MergeTree.GetHashCode();
      hash ^= compression_.GetHashCode();
      hash ^= dictionaries_.GetHashCode();
      hash ^= graphiteRollup_.GetHashCode();
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (maxConcurrentQueries_ != null) hash ^= MaxConcurrentQueries.GetHashCode();
      if (keepAliveTimeout_ != null) hash ^= KeepAliveTimeout.GetHashCode();
      if (uncompressedCacheSize_ != null) hash ^= UncompressedCacheSize.GetHashCode();
      if (markCacheSize_ != null) hash ^= MarkCacheSize.GetHashCode();
      if (maxTableSizeToDrop_ != null) hash ^= MaxTableSizeToDrop.GetHashCode();
      if (maxPartitionSizeToDrop_ != null) hash ^= MaxPartitionSizeToDrop.GetHashCode();
      if (builtinDictionariesReloadInterval_ != null) hash ^= BuiltinDictionariesReloadInterval.GetHashCode();
      if (Timezone.Length != 0) hash ^= Timezone.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogLevel != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogLevel);
      }
      if (mergeTree_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MergeTree);
      }
      compression_.WriteTo(output, _repeated_compression_codec);
      dictionaries_.WriteTo(output, _repeated_dictionaries_codec);
      graphiteRollup_.WriteTo(output, _repeated_graphiteRollup_codec);
      if (maxConnections_ != null) {
        _single_maxConnections_codec.WriteTagAndValue(output, MaxConnections);
      }
      if (maxConcurrentQueries_ != null) {
        _single_maxConcurrentQueries_codec.WriteTagAndValue(output, MaxConcurrentQueries);
      }
      if (keepAliveTimeout_ != null) {
        _single_keepAliveTimeout_codec.WriteTagAndValue(output, KeepAliveTimeout);
      }
      if (uncompressedCacheSize_ != null) {
        _single_uncompressedCacheSize_codec.WriteTagAndValue(output, UncompressedCacheSize);
      }
      if (markCacheSize_ != null) {
        _single_markCacheSize_codec.WriteTagAndValue(output, MarkCacheSize);
      }
      if (maxTableSizeToDrop_ != null) {
        _single_maxTableSizeToDrop_codec.WriteTagAndValue(output, MaxTableSizeToDrop);
      }
      if (builtinDictionariesReloadInterval_ != null) {
        _single_builtinDictionariesReloadInterval_codec.WriteTagAndValue(output, BuiltinDictionariesReloadInterval);
      }
      if (maxPartitionSizeToDrop_ != null) {
        _single_maxPartitionSizeToDrop_codec.WriteTagAndValue(output, MaxPartitionSizeToDrop);
      }
      if (Timezone.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Timezone);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogLevel);
      }
      if (mergeTree_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MergeTree);
      }
      size += compression_.CalculateSize(_repeated_compression_codec);
      size += dictionaries_.CalculateSize(_repeated_dictionaries_codec);
      size += graphiteRollup_.CalculateSize(_repeated_graphiteRollup_codec);
      if (maxConnections_ != null) {
        size += _single_maxConnections_codec.CalculateSizeWithTag(MaxConnections);
      }
      if (maxConcurrentQueries_ != null) {
        size += _single_maxConcurrentQueries_codec.CalculateSizeWithTag(MaxConcurrentQueries);
      }
      if (keepAliveTimeout_ != null) {
        size += _single_keepAliveTimeout_codec.CalculateSizeWithTag(KeepAliveTimeout);
      }
      if (uncompressedCacheSize_ != null) {
        size += _single_uncompressedCacheSize_codec.CalculateSizeWithTag(UncompressedCacheSize);
      }
      if (markCacheSize_ != null) {
        size += _single_markCacheSize_codec.CalculateSizeWithTag(MarkCacheSize);
      }
      if (maxTableSizeToDrop_ != null) {
        size += _single_maxTableSizeToDrop_codec.CalculateSizeWithTag(MaxTableSizeToDrop);
      }
      if (maxPartitionSizeToDrop_ != null) {
        size += _single_maxPartitionSizeToDrop_codec.CalculateSizeWithTag(MaxPartitionSizeToDrop);
      }
      if (builtinDictionariesReloadInterval_ != null) {
        size += _single_builtinDictionariesReloadInterval_codec.CalculateSizeWithTag(BuiltinDictionariesReloadInterval);
      }
      if (Timezone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timezone);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickhouseConfig other) {
      if (other == null) {
        return;
      }
      if (other.LogLevel != 0) {
        LogLevel = other.LogLevel;
      }
      if (other.mergeTree_ != null) {
        if (mergeTree_ == null) {
          MergeTree = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree();
        }
        MergeTree.MergeFrom(other.MergeTree);
      }
      compression_.Add(other.compression_);
      dictionaries_.Add(other.dictionaries_);
      graphiteRollup_.Add(other.graphiteRollup_);
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null || other.MaxConnections != 0L) {
          MaxConnections = other.MaxConnections;
        }
      }
      if (other.maxConcurrentQueries_ != null) {
        if (maxConcurrentQueries_ == null || other.MaxConcurrentQueries != 0L) {
          MaxConcurrentQueries = other.MaxConcurrentQueries;
        }
      }
      if (other.keepAliveTimeout_ != null) {
        if (keepAliveTimeout_ == null || other.KeepAliveTimeout != 0L) {
          KeepAliveTimeout = other.KeepAliveTimeout;
        }
      }
      if (other.uncompressedCacheSize_ != null) {
        if (uncompressedCacheSize_ == null || other.UncompressedCacheSize != 0L) {
          UncompressedCacheSize = other.UncompressedCacheSize;
        }
      }
      if (other.markCacheSize_ != null) {
        if (markCacheSize_ == null || other.MarkCacheSize != 0L) {
          MarkCacheSize = other.MarkCacheSize;
        }
      }
      if (other.maxTableSizeToDrop_ != null) {
        if (maxTableSizeToDrop_ == null || other.MaxTableSizeToDrop != 0L) {
          MaxTableSizeToDrop = other.MaxTableSizeToDrop;
        }
      }
      if (other.maxPartitionSizeToDrop_ != null) {
        if (maxPartitionSizeToDrop_ == null || other.MaxPartitionSizeToDrop != 0L) {
          MaxPartitionSizeToDrop = other.MaxPartitionSizeToDrop;
        }
      }
      if (other.builtinDictionariesReloadInterval_ != null) {
        if (builtinDictionariesReloadInterval_ == null || other.BuiltinDictionariesReloadInterval != 0L) {
          BuiltinDictionariesReloadInterval = other.BuiltinDictionariesReloadInterval;
        }
      }
      if (other.Timezone.Length != 0) {
        Timezone = other.Timezone;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LogLevel = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.LogLevel) input.ReadEnum();
            break;
          }
          case 18: {
            if (mergeTree_ == null) {
              MergeTree = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.MergeTree();
            }
            input.ReadMessage(MergeTree);
            break;
          }
          case 26: {
            compression_.AddEntriesFrom(input, _repeated_compression_codec);
            break;
          }
          case 34: {
            dictionaries_.AddEntriesFrom(input, _repeated_dictionaries_codec);
            break;
          }
          case 42: {
            graphiteRollup_.AddEntriesFrom(input, _repeated_graphiteRollup_codec);
            break;
          }
          case 50: {
            long? value = _single_maxConnections_codec.Read(input);
            if (maxConnections_ == null || value != 0L) {
              MaxConnections = value;
            }
            break;
          }
          case 58: {
            long? value = _single_maxConcurrentQueries_codec.Read(input);
            if (maxConcurrentQueries_ == null || value != 0L) {
              MaxConcurrentQueries = value;
            }
            break;
          }
          case 66: {
            long? value = _single_keepAliveTimeout_codec.Read(input);
            if (keepAliveTimeout_ == null || value != 0L) {
              KeepAliveTimeout = value;
            }
            break;
          }
          case 74: {
            long? value = _single_uncompressedCacheSize_codec.Read(input);
            if (uncompressedCacheSize_ == null || value != 0L) {
              UncompressedCacheSize = value;
            }
            break;
          }
          case 82: {
            long? value = _single_markCacheSize_codec.Read(input);
            if (markCacheSize_ == null || value != 0L) {
              MarkCacheSize = value;
            }
            break;
          }
          case 90: {
            long? value = _single_maxTableSizeToDrop_codec.Read(input);
            if (maxTableSizeToDrop_ == null || value != 0L) {
              MaxTableSizeToDrop = value;
            }
            break;
          }
          case 98: {
            long? value = _single_builtinDictionariesReloadInterval_codec.Read(input);
            if (builtinDictionariesReloadInterval_ == null || value != 0L) {
              BuiltinDictionariesReloadInterval = value;
            }
            break;
          }
          case 106: {
            long? value = _single_maxPartitionSizeToDrop_codec.Read(input);
            if (maxPartitionSizeToDrop_ == null || value != 0L) {
              MaxPartitionSizeToDrop = value;
            }
            break;
          }
          case 114: {
            Timezone = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClickhouseConfig message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum LogLevel {
        [pbr::OriginalName("LOG_LEVEL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TRACE")] Trace = 1,
        [pbr::OriginalName("DEBUG")] Debug = 2,
        [pbr::OriginalName("INFORMATION")] Information = 3,
        [pbr::OriginalName("WARNING")] Warning = 4,
        [pbr::OriginalName("ERROR")] Error = 5,
      }

      /// <summary>
      /// Options specific to the MergeTree table engine.
      /// </summary>
      internal sealed partial class MergeTree : pb::IMessage<MergeTree> {
        private static readonly pb::MessageParser<MergeTree> _parser = new pb::MessageParser<MergeTree>(() => new MergeTree());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MergeTree> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree(MergeTree other) : this() {
          ReplicatedDeduplicationWindow = other.ReplicatedDeduplicationWindow;
          ReplicatedDeduplicationWindowSeconds = other.ReplicatedDeduplicationWindowSeconds;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MergeTree Clone() {
          return new MergeTree(this);
        }

        /// <summary>Field number for the "replicated_deduplication_window" field.</summary>
        public const int ReplicatedDeduplicationWindowFieldNumber = 1;
        private static readonly pb::FieldCodec<long?> _single_replicatedDeduplicationWindow_codec = pb::FieldCodec.ForStructWrapper<long>(10);
        private long? replicatedDeduplicationWindow_;
        /// <summary>
        /// Number of blocks of hashes to keep in ZooKeeper.
        /// See detailed description in [ClickHouse sources](https://github.com/yandex/ClickHouse/blob/v18.1.0-stable/dbms/src/Storages/MergeTree/MergeTreeSettings.h#L59).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? ReplicatedDeduplicationWindow {
          get { return replicatedDeduplicationWindow_; }
          set {
            replicatedDeduplicationWindow_ = value;
          }
        }


        /// <summary>Field number for the "replicated_deduplication_window_seconds" field.</summary>
        public const int ReplicatedDeduplicationWindowSecondsFieldNumber = 2;
        private static readonly pb::FieldCodec<long?> _single_replicatedDeduplicationWindowSeconds_codec = pb::FieldCodec.ForStructWrapper<long>(18);
        private long? replicatedDeduplicationWindowSeconds_;
        /// <summary>
        /// Period of time to keep blocks of hashes for.
        /// See detailed description in [ClickHouse sources](https://github.com/yandex/ClickHouse/blob/v18.1.0-stable/dbms/src/Storages/MergeTree/MergeTreeSettings.h#L64).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? ReplicatedDeduplicationWindowSeconds {
          get { return replicatedDeduplicationWindowSeconds_; }
          set {
            replicatedDeduplicationWindowSeconds_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MergeTree);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MergeTree other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ReplicatedDeduplicationWindow != other.ReplicatedDeduplicationWindow) return false;
          if (ReplicatedDeduplicationWindowSeconds != other.ReplicatedDeduplicationWindowSeconds) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (replicatedDeduplicationWindow_ != null) hash ^= ReplicatedDeduplicationWindow.GetHashCode();
          if (replicatedDeduplicationWindowSeconds_ != null) hash ^= ReplicatedDeduplicationWindowSeconds.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (replicatedDeduplicationWindow_ != null) {
            _single_replicatedDeduplicationWindow_codec.WriteTagAndValue(output, ReplicatedDeduplicationWindow);
          }
          if (replicatedDeduplicationWindowSeconds_ != null) {
            _single_replicatedDeduplicationWindowSeconds_codec.WriteTagAndValue(output, ReplicatedDeduplicationWindowSeconds);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (replicatedDeduplicationWindow_ != null) {
            size += _single_replicatedDeduplicationWindow_codec.CalculateSizeWithTag(ReplicatedDeduplicationWindow);
          }
          if (replicatedDeduplicationWindowSeconds_ != null) {
            size += _single_replicatedDeduplicationWindowSeconds_codec.CalculateSizeWithTag(ReplicatedDeduplicationWindowSeconds);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MergeTree other) {
          if (other == null) {
            return;
          }
          if (other.replicatedDeduplicationWindow_ != null) {
            if (replicatedDeduplicationWindow_ == null || other.ReplicatedDeduplicationWindow != 0L) {
              ReplicatedDeduplicationWindow = other.ReplicatedDeduplicationWindow;
            }
          }
          if (other.replicatedDeduplicationWindowSeconds_ != null) {
            if (replicatedDeduplicationWindowSeconds_ == null || other.ReplicatedDeduplicationWindowSeconds != 0L) {
              ReplicatedDeduplicationWindowSeconds = other.ReplicatedDeduplicationWindowSeconds;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                long? value = _single_replicatedDeduplicationWindow_codec.Read(input);
                if (replicatedDeduplicationWindow_ == null || value != 0L) {
                  ReplicatedDeduplicationWindow = value;
                }
                break;
              }
              case 18: {
                long? value = _single_replicatedDeduplicationWindowSeconds_codec.Read(input);
                if (replicatedDeduplicationWindowSeconds_ == null || value != 0L) {
                  ReplicatedDeduplicationWindowSeconds = value;
                }
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Compression : pb::IMessage<Compression> {
        private static readonly pb::MessageParser<Compression> _parser = new pb::MessageParser<Compression>(() => new Compression());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Compression> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression(Compression other) : this() {
          method_ = other.method_;
          minPartSize_ = other.minPartSize_;
          minPartSizeRatio_ = other.minPartSizeRatio_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Compression Clone() {
          return new Compression(this);
        }

        /// <summary>Field number for the "method" field.</summary>
        public const int MethodFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method method_ = 0;
        /// <summary>
        /// Compression method to use for the specified combination of `min_part_size` and `min_part_size_ratio`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method Method {
          get { return method_; }
          set {
            method_ = value;
          }
        }

        /// <summary>Field number for the "min_part_size" field.</summary>
        public const int MinPartSizeFieldNumber = 2;
        private long minPartSize_;
        /// <summary>
        /// Minimum size of a part of a table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MinPartSize {
          get { return minPartSize_; }
          set {
            minPartSize_ = value;
          }
        }

        /// <summary>Field number for the "min_part_size_ratio" field.</summary>
        public const int MinPartSizeRatioFieldNumber = 3;
        private double minPartSizeRatio_;
        /// <summary>
        /// Minimum ratio of a part relative to the size of all the data in the table.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double MinPartSizeRatio {
          get { return minPartSizeRatio_; }
          set {
            minPartSizeRatio_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Compression);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Compression other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Method != other.Method) return false;
          if (MinPartSize != other.MinPartSize) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinPartSizeRatio, other.MinPartSizeRatio)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Method != 0) hash ^= Method.GetHashCode();
          if (MinPartSize != 0L) hash ^= MinPartSize.GetHashCode();
          if (MinPartSizeRatio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinPartSizeRatio);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Method != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Method);
          }
          if (MinPartSize != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(MinPartSize);
          }
          if (MinPartSizeRatio != 0D) {
            output.WriteRawTag(25);
            output.WriteDouble(MinPartSizeRatio);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Method != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
          }
          if (MinPartSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinPartSize);
          }
          if (MinPartSizeRatio != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Compression other) {
          if (other == null) {
            return;
          }
          if (other.Method != 0) {
            Method = other.Method;
          }
          if (other.MinPartSize != 0L) {
            MinPartSize = other.MinPartSize;
          }
          if (other.MinPartSizeRatio != 0D) {
            MinPartSizeRatio = other.MinPartSizeRatio;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Method = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.Compression.Types.Method) input.ReadEnum();
                break;
              }
              case 16: {
                MinPartSize = input.ReadInt64();
                break;
              }
              case 25: {
                MinPartSizeRatio = input.ReadDouble();
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Compression message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum Method {
            [pbr::OriginalName("METHOD_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// [LZ4 compression algorithm](https://lz4.github.io/lz4/).
            /// </summary>
            [pbr::OriginalName("LZ4")] Lz4 = 1,
            /// <summary>
            /// [Zstandard compression algorithm](https://facebook.github.io/zstd/).
            /// </summary>
            [pbr::OriginalName("ZSTD")] Zstd = 2,
          }

        }
        #endregion

      }

      internal sealed partial class ExternalDictionary : pb::IMessage<ExternalDictionary> {
        private static readonly pb::MessageParser<ExternalDictionary> _parser = new pb::MessageParser<ExternalDictionary>(() => new ExternalDictionary());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ExternalDictionary> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary(ExternalDictionary other) : this() {
          name_ = other.name_;
          structure_ = other.structure_ != null ? other.structure_.Clone() : null;
          layout_ = other.layout_ != null ? other.layout_.Clone() : null;
          switch (other.LifetimeCase) {
            case LifetimeOneofCase.FixedLifetime:
              FixedLifetime = other.FixedLifetime;
              break;
            case LifetimeOneofCase.LifetimeRange:
              LifetimeRange = other.LifetimeRange.Clone();
              break;
          }

          switch (other.SourceCase) {
            case SourceOneofCase.HttpSource:
              HttpSource = other.HttpSource.Clone();
              break;
            case SourceOneofCase.MysqlSource:
              MysqlSource = other.MysqlSource.Clone();
              break;
            case SourceOneofCase.ClickhouseSource:
              ClickhouseSource = other.ClickhouseSource.Clone();
              break;
            case SourceOneofCase.MongodbSource:
              MongodbSource = other.MongodbSource.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ExternalDictionary Clone() {
          return new ExternalDictionary(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name of the external dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "structure" field.</summary>
        public const int StructureFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure structure_;
        /// <summary>
        /// Set of attributes for the external dictionary.
        /// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure Structure {
          get { return structure_; }
          set {
            structure_ = value;
          }
        }

        /// <summary>Field number for the "layout" field.</summary>
        public const int LayoutFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout layout_;
        /// <summary>
        /// Layout for storing the dictionary in memory.
        /// For in-depth description, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_layout/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout Layout {
          get { return layout_; }
          set {
            layout_ = value;
          }
        }

        /// <summary>Field number for the "fixed_lifetime" field.</summary>
        public const int FixedLifetimeFieldNumber = 4;
        /// <summary>
        /// Fixed interval between dictionary updates.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FixedLifetime {
          get { return lifetimeCase_ == LifetimeOneofCase.FixedLifetime ? (long) lifetime_ : 0L; }
          set {
            lifetime_ = value;
            lifetimeCase_ = LifetimeOneofCase.FixedLifetime;
          }
        }

        /// <summary>Field number for the "lifetime_range" field.</summary>
        public const int LifetimeRangeFieldNumber = 5;
        /// <summary>
        /// Range of intervals between dictionary updates for ClickHouse to choose from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range LifetimeRange {
          get { return lifetimeCase_ == LifetimeOneofCase.LifetimeRange ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range) lifetime_ : null; }
          set {
            lifetime_ = value;
            lifetimeCase_ = value == null ? LifetimeOneofCase.None : LifetimeOneofCase.LifetimeRange;
          }
        }

        /// <summary>Field number for the "http_source" field.</summary>
        public const int HttpSourceFieldNumber = 6;
        /// <summary>
        /// HTTP source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource HttpSource {
          get { return sourceCase_ == SourceOneofCase.HttpSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.HttpSource;
          }
        }

        /// <summary>Field number for the "mysql_source" field.</summary>
        public const int MysqlSourceFieldNumber = 7;
        /// <summary>
        /// MySQL source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource MysqlSource {
          get { return sourceCase_ == SourceOneofCase.MysqlSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.MysqlSource;
          }
        }

        /// <summary>Field number for the "clickhouse_source" field.</summary>
        public const int ClickhouseSourceFieldNumber = 8;
        /// <summary>
        /// ClickHouse source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource ClickhouseSource {
          get { return sourceCase_ == SourceOneofCase.ClickhouseSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.ClickhouseSource;
          }
        }

        /// <summary>Field number for the "mongodb_source" field.</summary>
        public const int MongodbSourceFieldNumber = 9;
        /// <summary>
        /// MongoDB source for the dictionary.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource MongodbSource {
          get { return sourceCase_ == SourceOneofCase.MongodbSource ? (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource) source_ : null; }
          set {
            source_ = value;
            sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.MongodbSource;
          }
        }

        private object lifetime_;
        /// <summary>Enum of possible cases for the "lifetime" oneof.</summary>
        public enum LifetimeOneofCase {
          None = 0,
          FixedLifetime = 4,
          LifetimeRange = 5,
        }
        private LifetimeOneofCase lifetimeCase_ = LifetimeOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LifetimeOneofCase LifetimeCase {
          get { return lifetimeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLifetime() {
          lifetimeCase_ = LifetimeOneofCase.None;
          lifetime_ = null;
        }

        private object source_;
        /// <summary>Enum of possible cases for the "source" oneof.</summary>
        public enum SourceOneofCase {
          None = 0,
          HttpSource = 6,
          MysqlSource = 7,
          ClickhouseSource = 8,
          MongodbSource = 9,
        }
        private SourceOneofCase sourceCase_ = SourceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceOneofCase SourceCase {
          get { return sourceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSource() {
          sourceCase_ = SourceOneofCase.None;
          source_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ExternalDictionary);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ExternalDictionary other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (!object.Equals(Structure, other.Structure)) return false;
          if (!object.Equals(Layout, other.Layout)) return false;
          if (FixedLifetime != other.FixedLifetime) return false;
          if (!object.Equals(LifetimeRange, other.LifetimeRange)) return false;
          if (!object.Equals(HttpSource, other.HttpSource)) return false;
          if (!object.Equals(MysqlSource, other.MysqlSource)) return false;
          if (!object.Equals(ClickhouseSource, other.ClickhouseSource)) return false;
          if (!object.Equals(MongodbSource, other.MongodbSource)) return false;
          if (LifetimeCase != other.LifetimeCase) return false;
          if (SourceCase != other.SourceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (structure_ != null) hash ^= Structure.GetHashCode();
          if (layout_ != null) hash ^= Layout.GetHashCode();
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) hash ^= FixedLifetime.GetHashCode();
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) hash ^= LifetimeRange.GetHashCode();
          if (sourceCase_ == SourceOneofCase.HttpSource) hash ^= HttpSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.MysqlSource) hash ^= MysqlSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) hash ^= ClickhouseSource.GetHashCode();
          if (sourceCase_ == SourceOneofCase.MongodbSource) hash ^= MongodbSource.GetHashCode();
          hash ^= (int) lifetimeCase_;
          hash ^= (int) sourceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (structure_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Structure);
          }
          if (layout_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Layout);
          }
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) {
            output.WriteRawTag(32);
            output.WriteInt64(FixedLifetime);
          }
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
            output.WriteRawTag(42);
            output.WriteMessage(LifetimeRange);
          }
          if (sourceCase_ == SourceOneofCase.HttpSource) {
            output.WriteRawTag(50);
            output.WriteMessage(HttpSource);
          }
          if (sourceCase_ == SourceOneofCase.MysqlSource) {
            output.WriteRawTag(58);
            output.WriteMessage(MysqlSource);
          }
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
            output.WriteRawTag(66);
            output.WriteMessage(ClickhouseSource);
          }
          if (sourceCase_ == SourceOneofCase.MongodbSource) {
            output.WriteRawTag(74);
            output.WriteMessage(MongodbSource);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (structure_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Structure);
          }
          if (layout_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Layout);
          }
          if (lifetimeCase_ == LifetimeOneofCase.FixedLifetime) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedLifetime);
          }
          if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(LifetimeRange);
          }
          if (sourceCase_ == SourceOneofCase.HttpSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpSource);
          }
          if (sourceCase_ == SourceOneofCase.MysqlSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MysqlSource);
          }
          if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClickhouseSource);
          }
          if (sourceCase_ == SourceOneofCase.MongodbSource) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MongodbSource);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ExternalDictionary other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.structure_ != null) {
            if (structure_ == null) {
              Structure = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure();
            }
            Structure.MergeFrom(other.Structure);
          }
          if (other.layout_ != null) {
            if (layout_ == null) {
              Layout = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout();
            }
            Layout.MergeFrom(other.Layout);
          }
          switch (other.LifetimeCase) {
            case LifetimeOneofCase.FixedLifetime:
              FixedLifetime = other.FixedLifetime;
              break;
            case LifetimeOneofCase.LifetimeRange:
              if (LifetimeRange == null) {
                LifetimeRange = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range();
              }
              LifetimeRange.MergeFrom(other.LifetimeRange);
              break;
          }

          switch (other.SourceCase) {
            case SourceOneofCase.HttpSource:
              if (HttpSource == null) {
                HttpSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource();
              }
              HttpSource.MergeFrom(other.HttpSource);
              break;
            case SourceOneofCase.MysqlSource:
              if (MysqlSource == null) {
                MysqlSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource();
              }
              MysqlSource.MergeFrom(other.MysqlSource);
              break;
            case SourceOneofCase.ClickhouseSource:
              if (ClickhouseSource == null) {
                ClickhouseSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource();
              }
              ClickhouseSource.MergeFrom(other.ClickhouseSource);
              break;
            case SourceOneofCase.MongodbSource:
              if (MongodbSource == null) {
                MongodbSource = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource();
              }
              MongodbSource.MergeFrom(other.MongodbSource);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                if (structure_ == null) {
                  Structure = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure();
                }
                input.ReadMessage(Structure);
                break;
              }
              case 26: {
                if (layout_ == null) {
                  Layout = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout();
                }
                input.ReadMessage(Layout);
                break;
              }
              case 32: {
                FixedLifetime = input.ReadInt64();
                break;
              }
              case 42: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Range();
                if (lifetimeCase_ == LifetimeOneofCase.LifetimeRange) {
                  subBuilder.MergeFrom(LifetimeRange);
                }
                input.ReadMessage(subBuilder);
                LifetimeRange = subBuilder;
                break;
              }
              case 50: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.HttpSource();
                if (sourceCase_ == SourceOneofCase.HttpSource) {
                  subBuilder.MergeFrom(HttpSource);
                }
                input.ReadMessage(subBuilder);
                HttpSource = subBuilder;
                break;
              }
              case 58: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource();
                if (sourceCase_ == SourceOneofCase.MysqlSource) {
                  subBuilder.MergeFrom(MysqlSource);
                }
                input.ReadMessage(subBuilder);
                MysqlSource = subBuilder;
                break;
              }
              case 66: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.ClickhouseSource();
                if (sourceCase_ == SourceOneofCase.ClickhouseSource) {
                  subBuilder.MergeFrom(ClickhouseSource);
                }
                input.ReadMessage(subBuilder);
                ClickhouseSource = subBuilder;
                break;
              }
              case 74: {
                global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource subBuilder = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MongodbSource();
                if (sourceCase_ == SourceOneofCase.MongodbSource) {
                  subBuilder.MergeFrom(MongodbSource);
                }
                input.ReadMessage(subBuilder);
                MongodbSource = subBuilder;
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the ExternalDictionary message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal sealed partial class HttpSource : pb::IMessage<HttpSource> {
            private static readonly pb::MessageParser<HttpSource> _parser = new pb::MessageParser<HttpSource>(() => new HttpSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<HttpSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource(HttpSource other) : this() {
              url_ = other.url_;
              format_ = other.format_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public HttpSource Clone() {
              return new HttpSource(this);
            }

            /// <summary>Field number for the "url" field.</summary>
            public const int UrlFieldNumber = 1;
            private string url_ = "";
            /// <summary>
            /// URL of the source dictionary available over HTTP.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Url {
              get { return url_; }
              set {
                url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "format" field.</summary>
            public const int FormatFieldNumber = 2;
            private string format_ = "";
            /// <summary>
            /// The data format. Valid values are all formats supported by ClickHouse SQL dialect.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Format {
              get { return format_; }
              set {
                format_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as HttpSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(HttpSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Url != other.Url) return false;
              if (Format != other.Format) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Url.Length != 0) hash ^= Url.GetHashCode();
              if (Format.Length != 0) hash ^= Format.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Url.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Url);
              }
              if (Format.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Format);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Url.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
              }
              if (Format.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Format);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(HttpSource other) {
              if (other == null) {
                return;
              }
              if (other.Url.Length != 0) {
                Url = other.Url;
              }
              if (other.Format.Length != 0) {
                Format = other.Format;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Url = input.ReadString();
                    break;
                  }
                  case 18: {
                    Format = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class MysqlSource : pb::IMessage<MysqlSource> {
            private static readonly pb::MessageParser<MysqlSource> _parser = new pb::MessageParser<MysqlSource>(() => new MysqlSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MysqlSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource(MysqlSource other) : this() {
              db_ = other.db_;
              table_ = other.table_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              replicas_ = other.replicas_.Clone();
              where_ = other.where_;
              invalidateQuery_ = other.invalidateQuery_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MysqlSource Clone() {
              return new MysqlSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the MySQL database to connect to.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 2;
            private string table_ = "";
            /// <summary>
            /// Name of the database table to use as a ClickHouse dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Table {
              get { return table_; }
              set {
                table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 3;
            private long port_;
            /// <summary>
            /// Default port to use when connecting to a replica of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 4;
            private string user_ = "";
            /// <summary>
            /// Name of the default user for replicas of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 5;
            private string password_ = "";
            /// <summary>
            /// Password of the default user for replicas of the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "replicas" field.</summary>
            public const int ReplicasFieldNumber = 6;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> _repeated_replicas_codec
                = pb::FieldCodec.ForMessage(50, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> replicas_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica>();
            /// <summary>
            /// List of MySQL replicas of the database used as dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Types.Replica> Replicas {
              get { return replicas_; }
            }

            /// <summary>Field number for the "where" field.</summary>
            public const int WhereFieldNumber = 7;
            private string where_ = "";
            /// <summary>
            /// Selection criteria for the data in the specified MySQL table.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Where {
              get { return where_; }
              set {
                where_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "invalidate_query" field.</summary>
            public const int InvalidateQueryFieldNumber = 8;
            private string invalidateQuery_ = "";
            /// <summary>
            /// Query for checking the dictionary status, to pull only updated data.
            /// For more details, see [ClickHouse documentation on dictionaries](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_lifetime/).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string InvalidateQuery {
              get { return invalidateQuery_; }
              set {
                invalidateQuery_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MysqlSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MysqlSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Table != other.Table) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              if(!replicas_.Equals(other.replicas_)) return false;
              if (Where != other.Where) return false;
              if (InvalidateQuery != other.InvalidateQuery) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Table.Length != 0) hash ^= Table.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              hash ^= replicas_.GetHashCode();
              if (Where.Length != 0) hash ^= Where.GetHashCode();
              if (InvalidateQuery.Length != 0) hash ^= InvalidateQuery.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Table.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Table);
              }
              if (Port != 0L) {
                output.WriteRawTag(24);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(34);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(Password);
              }
              replicas_.WriteTo(output, _repeated_replicas_codec);
              if (Where.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(Where);
              }
              if (InvalidateQuery.Length != 0) {
                output.WriteRawTag(66);
                output.WriteString(InvalidateQuery);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Table.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              size += replicas_.CalculateSize(_repeated_replicas_codec);
              if (Where.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Where);
              }
              if (InvalidateQuery.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(InvalidateQuery);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MysqlSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Table.Length != 0) {
                Table = other.Table;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              replicas_.Add(other.replicas_);
              if (other.Where.Length != 0) {
                Where = other.Where;
              }
              if (other.InvalidateQuery.Length != 0) {
                InvalidateQuery = other.InvalidateQuery;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Table = input.ReadString();
                    break;
                  }
                  case 24: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 34: {
                    User = input.ReadString();
                    break;
                  }
                  case 42: {
                    Password = input.ReadString();
                    break;
                  }
                  case 50: {
                    replicas_.AddEntriesFrom(input, _repeated_replicas_codec);
                    break;
                  }
                  case 58: {
                    Where = input.ReadString();
                    break;
                  }
                  case 66: {
                    InvalidateQuery = input.ReadString();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the MysqlSource message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Replica : pb::IMessage<Replica> {
                private static readonly pb::MessageParser<Replica> _parser = new pb::MessageParser<Replica>(() => new Replica());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Replica> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.MysqlSource.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica(Replica other) : this() {
                  host_ = other.host_;
                  priority_ = other.priority_;
                  port_ = other.port_;
                  user_ = other.user_;
                  password_ = other.password_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Replica Clone() {
                  return new Replica(this);
                }

                /// <summary>Field number for the "host" field.</summary>
                public const int HostFieldNumber = 1;
                private string host_ = "";
                /// <summary>
                /// MySQL host of the replica.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Host {
                  get { return host_; }
                  set {
                    host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "priority" field.</summary>
                public const int PriorityFieldNumber = 2;
                private long priority_;
                /// <summary>
                /// Required. The priority of the replica that ClickHouse takes into account when connecting.
                /// Replica with the highest priority should have this field set to the lowest number.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Priority {
                  get { return priority_; }
                  set {
                    priority_ = value;
                  }
                }

                /// <summary>Field number for the "port" field.</summary>
                public const int PortFieldNumber = 3;
                private long port_;
                /// <summary>
                /// Port to use when connecting to the replica.
                /// If a port is not specified for a replica, ClickHouse uses the port specified for the source.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Port {
                  get { return port_; }
                  set {
                    port_ = value;
                  }
                }

                /// <summary>Field number for the "user" field.</summary>
                public const int UserFieldNumber = 4;
                private string user_ = "";
                /// <summary>
                /// Name of the MySQL database user.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string User {
                  get { return user_; }
                  set {
                    user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "password" field.</summary>
                public const int PasswordFieldNumber = 5;
                private string password_ = "";
                /// <summary>
                /// Password of the MySQL database user.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Password {
                  get { return password_; }
                  set {
                    password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Replica);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Replica other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Host != other.Host) return false;
                  if (Priority != other.Priority) return false;
                  if (Port != other.Port) return false;
                  if (User != other.User) return false;
                  if (Password != other.Password) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Host.Length != 0) hash ^= Host.GetHashCode();
                  if (Priority != 0L) hash ^= Priority.GetHashCode();
                  if (Port != 0L) hash ^= Port.GetHashCode();
                  if (User.Length != 0) hash ^= User.GetHashCode();
                  if (Password.Length != 0) hash ^= Password.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Host.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Host);
                  }
                  if (Priority != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(Priority);
                  }
                  if (Port != 0L) {
                    output.WriteRawTag(24);
                    output.WriteInt64(Port);
                  }
                  if (User.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(User);
                  }
                  if (Password.Length != 0) {
                    output.WriteRawTag(42);
                    output.WriteString(Password);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Host.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
                  }
                  if (Priority != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Priority);
                  }
                  if (Port != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
                  }
                  if (User.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
                  }
                  if (Password.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Replica other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Host.Length != 0) {
                    Host = other.Host;
                  }
                  if (other.Priority != 0L) {
                    Priority = other.Priority;
                  }
                  if (other.Port != 0L) {
                    Port = other.Port;
                  }
                  if (other.User.Length != 0) {
                    User = other.User;
                  }
                  if (other.Password.Length != 0) {
                    Password = other.Password;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Host = input.ReadString();
                        break;
                      }
                      case 16: {
                        Priority = input.ReadInt64();
                        break;
                      }
                      case 24: {
                        Port = input.ReadInt64();
                        break;
                      }
                      case 34: {
                        User = input.ReadString();
                        break;
                      }
                      case 42: {
                        Password = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          internal sealed partial class ClickhouseSource : pb::IMessage<ClickhouseSource> {
            private static readonly pb::MessageParser<ClickhouseSource> _parser = new pb::MessageParser<ClickhouseSource>(() => new ClickhouseSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<ClickhouseSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource(ClickhouseSource other) : this() {
              db_ = other.db_;
              table_ = other.table_;
              host_ = other.host_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              where_ = other.where_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public ClickhouseSource Clone() {
              return new ClickhouseSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the ClickHouse database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "table" field.</summary>
            public const int TableFieldNumber = 2;
            private string table_ = "";
            /// <summary>
            /// Name of the table in the specified database to be used as the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Table {
              get { return table_; }
              set {
                table_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "host" field.</summary>
            public const int HostFieldNumber = 3;
            private string host_ = "";
            /// <summary>
            /// ClickHouse host of the specified database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Host {
              get { return host_; }
              set {
                host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 4;
            private long port_;
            /// <summary>
            /// Port to use when connecting to the host.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 5;
            private string user_ = "";
            /// <summary>
            /// Name of the ClickHouse database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 6;
            private string password_ = "";
            /// <summary>
            /// Password of the ClickHouse database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "where" field.</summary>
            public const int WhereFieldNumber = 7;
            private string where_ = "";
            /// <summary>
            /// Selection criteria for the data in the specified ClickHouse table.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Where {
              get { return where_; }
              set {
                where_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as ClickhouseSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(ClickhouseSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Table != other.Table) return false;
              if (Host != other.Host) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              if (Where != other.Where) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Table.Length != 0) hash ^= Table.GetHashCode();
              if (Host.Length != 0) hash ^= Host.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              if (Where.Length != 0) hash ^= Where.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Table.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Table);
              }
              if (Host.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Host);
              }
              if (Port != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Password);
              }
              if (Where.Length != 0) {
                output.WriteRawTag(58);
                output.WriteString(Where);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Table.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Table);
              }
              if (Host.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              if (Where.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Where);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(ClickhouseSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Table.Length != 0) {
                Table = other.Table;
              }
              if (other.Host.Length != 0) {
                Host = other.Host;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              if (other.Where.Length != 0) {
                Where = other.Where;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Table = input.ReadString();
                    break;
                  }
                  case 26: {
                    Host = input.ReadString();
                    break;
                  }
                  case 32: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 42: {
                    User = input.ReadString();
                    break;
                  }
                  case 50: {
                    Password = input.ReadString();
                    break;
                  }
                  case 58: {
                    Where = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class MongodbSource : pb::IMessage<MongodbSource> {
            private static readonly pb::MessageParser<MongodbSource> _parser = new pb::MessageParser<MongodbSource>(() => new MongodbSource());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MongodbSource> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource(MongodbSource other) : this() {
              db_ = other.db_;
              collection_ = other.collection_;
              host_ = other.host_;
              port_ = other.port_;
              user_ = other.user_;
              password_ = other.password_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MongodbSource Clone() {
              return new MongodbSource(this);
            }

            /// <summary>Field number for the "db" field.</summary>
            public const int DbFieldNumber = 1;
            private string db_ = "";
            /// <summary>
            /// Name of the MongoDB database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Db {
              get { return db_; }
              set {
                db_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "collection" field.</summary>
            public const int CollectionFieldNumber = 2;
            private string collection_ = "";
            /// <summary>
            /// Name of the collection in the specified database to be used as the dictionary source.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Collection {
              get { return collection_; }
              set {
                collection_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "host" field.</summary>
            public const int HostFieldNumber = 3;
            private string host_ = "";
            /// <summary>
            /// MongoDB host of the specified database.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Host {
              get { return host_; }
              set {
                host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "port" field.</summary>
            public const int PortFieldNumber = 4;
            private long port_;
            /// <summary>
            /// Port to use when connecting to the host.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Port {
              get { return port_; }
              set {
                port_ = value;
              }
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 5;
            private string user_ = "";
            /// <summary>
            /// Name of the MongoDB database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string User {
              get { return user_; }
              set {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 6;
            private string password_ = "";
            /// <summary>
            /// Password of the MongoDB database user.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MongodbSource);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MongodbSource other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Db != other.Db) return false;
              if (Collection != other.Collection) return false;
              if (Host != other.Host) return false;
              if (Port != other.Port) return false;
              if (User != other.User) return false;
              if (Password != other.Password) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Db.Length != 0) hash ^= Db.GetHashCode();
              if (Collection.Length != 0) hash ^= Collection.GetHashCode();
              if (Host.Length != 0) hash ^= Host.GetHashCode();
              if (Port != 0L) hash ^= Port.GetHashCode();
              if (User.Length != 0) hash ^= User.GetHashCode();
              if (Password.Length != 0) hash ^= Password.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Db.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Db);
              }
              if (Collection.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Collection);
              }
              if (Host.Length != 0) {
                output.WriteRawTag(26);
                output.WriteString(Host);
              }
              if (Port != 0L) {
                output.WriteRawTag(32);
                output.WriteInt64(Port);
              }
              if (User.Length != 0) {
                output.WriteRawTag(42);
                output.WriteString(User);
              }
              if (Password.Length != 0) {
                output.WriteRawTag(50);
                output.WriteString(Password);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Db.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Db);
              }
              if (Collection.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Collection);
              }
              if (Host.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
              }
              if (Port != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
              }
              if (User.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
              }
              if (Password.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MongodbSource other) {
              if (other == null) {
                return;
              }
              if (other.Db.Length != 0) {
                Db = other.Db;
              }
              if (other.Collection.Length != 0) {
                Collection = other.Collection;
              }
              if (other.Host.Length != 0) {
                Host = other.Host;
              }
              if (other.Port != 0L) {
                Port = other.Port;
              }
              if (other.User.Length != 0) {
                User = other.User;
              }
              if (other.Password.Length != 0) {
                Password = other.Password;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Db = input.ReadString();
                    break;
                  }
                  case 18: {
                    Collection = input.ReadString();
                    break;
                  }
                  case 26: {
                    Host = input.ReadString();
                    break;
                  }
                  case 32: {
                    Port = input.ReadInt64();
                    break;
                  }
                  case 42: {
                    User = input.ReadString();
                    break;
                  }
                  case 50: {
                    Password = input.ReadString();
                    break;
                  }
                }
              }
            }

          }

          internal sealed partial class Structure : pb::IMessage<Structure> {
            private static readonly pb::MessageParser<Structure> _parser = new pb::MessageParser<Structure>(() => new Structure());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Structure> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure(Structure other) : this() {
              id_ = other.id_ != null ? other.id_.Clone() : null;
              key_ = other.key_ != null ? other.key_.Clone() : null;
              attributes_ = other.attributes_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Structure Clone() {
              return new Structure(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id id_;
            /// <summary>
            /// Single numeric key column for the dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id Id {
              get { return id_; }
              set {
                id_ = value;
              }
            }

            /// <summary>Field number for the "key" field.</summary>
            public const int KeyFieldNumber = 3;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key key_;
            /// <summary>
            /// Composite key for the dictionary, containing of one or more key columns.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#composite-key).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key Key {
              get { return key_; }
              set {
                key_ = value;
              }
            }

            /// <summary>Field number for the "attributes" field.</summary>
            public const int AttributesFieldNumber = 2;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> _repeated_attributes_codec
                = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute>();
            /// <summary>
            /// Description of the fields available for database queries.
            /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/query_language/dicts/external_dicts_dict_structure/#attributes).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> Attributes {
              get { return attributes_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Structure);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Structure other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Id, other.Id)) return false;
              if (!object.Equals(Key, other.Key)) return false;
              if(!attributes_.Equals(other.attributes_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (id_ != null) hash ^= Id.GetHashCode();
              if (key_ != null) hash ^= Key.GetHashCode();
              hash ^= attributes_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (id_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Id);
              }
              attributes_.WriteTo(output, _repeated_attributes_codec);
              if (key_ != null) {
                output.WriteRawTag(26);
                output.WriteMessage(Key);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (id_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
              }
              if (key_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Key);
              }
              size += attributes_.CalculateSize(_repeated_attributes_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Structure other) {
              if (other == null) {
                return;
              }
              if (other.id_ != null) {
                if (id_ == null) {
                  Id = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id();
                }
                Id.MergeFrom(other.Id);
              }
              if (other.key_ != null) {
                if (key_ == null) {
                  Key = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key();
                }
                Key.MergeFrom(other.Key);
              }
              attributes_.Add(other.attributes_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (id_ == null) {
                      Id = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Id();
                    }
                    input.ReadMessage(Id);
                    break;
                  }
                  case 18: {
                    attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                    break;
                  }
                  case 26: {
                    if (key_ == null) {
                      Key = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Key();
                    }
                    input.ReadMessage(Key);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Structure message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Attribute : pb::IMessage<Attribute> {
                private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute(Attribute other) : this() {
                  name_ = other.name_;
                  type_ = other.type_;
                  nullValue_ = other.nullValue_;
                  expression_ = other.expression_;
                  hierarchical_ = other.hierarchical_;
                  injective_ = other.injective_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Attribute Clone() {
                  return new Attribute(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                /// <summary>
                /// Name of the column.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "type" field.</summary>
                public const int TypeFieldNumber = 2;
                private string type_ = "";
                /// <summary>
                /// Type of the column.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Type {
                  get { return type_; }
                  set {
                    type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "null_value" field.</summary>
                public const int NullValueFieldNumber = 3;
                private string nullValue_ = "";
                /// <summary>
                /// Default value for an element without data (for example, an empty string).
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string NullValue {
                  get { return nullValue_; }
                  set {
                    nullValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "expression" field.</summary>
                public const int ExpressionFieldNumber = 4;
                private string expression_ = "";
                /// <summary>
                /// Expression, describing the attribute, if applicable.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Expression {
                  get { return expression_; }
                  set {
                    expression_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "hierarchical" field.</summary>
                public const int HierarchicalFieldNumber = 5;
                private bool hierarchical_;
                /// <summary>
                /// Indication of hierarchy support.
                /// Default value: "false".
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Hierarchical {
                  get { return hierarchical_; }
                  set {
                    hierarchical_ = value;
                  }
                }

                /// <summary>Field number for the "injective" field.</summary>
                public const int InjectiveFieldNumber = 6;
                private bool injective_;
                /// <summary>
                /// Indication of injective mapping "id -> attribute".
                /// Default value: "false".
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Injective {
                  get { return injective_; }
                  set {
                    injective_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Attribute);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Attribute other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Name != other.Name) return false;
                  if (Type != other.Type) return false;
                  if (NullValue != other.NullValue) return false;
                  if (Expression != other.Expression) return false;
                  if (Hierarchical != other.Hierarchical) return false;
                  if (Injective != other.Injective) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (Type.Length != 0) hash ^= Type.GetHashCode();
                  if (NullValue.Length != 0) hash ^= NullValue.GetHashCode();
                  if (Expression.Length != 0) hash ^= Expression.GetHashCode();
                  if (Hierarchical != false) hash ^= Hierarchical.GetHashCode();
                  if (Injective != false) hash ^= Injective.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Name.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Name);
                  }
                  if (Type.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Type);
                  }
                  if (NullValue.Length != 0) {
                    output.WriteRawTag(26);
                    output.WriteString(NullValue);
                  }
                  if (Expression.Length != 0) {
                    output.WriteRawTag(34);
                    output.WriteString(Expression);
                  }
                  if (Hierarchical != false) {
                    output.WriteRawTag(40);
                    output.WriteBool(Hierarchical);
                  }
                  if (Injective != false) {
                    output.WriteRawTag(48);
                    output.WriteBool(Injective);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (Type.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
                  }
                  if (NullValue.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(NullValue);
                  }
                  if (Expression.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Expression);
                  }
                  if (Hierarchical != false) {
                    size += 1 + 1;
                  }
                  if (Injective != false) {
                    size += 1 + 1;
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Attribute other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  if (other.Type.Length != 0) {
                    Type = other.Type;
                  }
                  if (other.NullValue.Length != 0) {
                    NullValue = other.NullValue;
                  }
                  if (other.Expression.Length != 0) {
                    Expression = other.Expression;
                  }
                  if (other.Hierarchical != false) {
                    Hierarchical = other.Hierarchical;
                  }
                  if (other.Injective != false) {
                    Injective = other.Injective;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Name = input.ReadString();
                        break;
                      }
                      case 18: {
                        Type = input.ReadString();
                        break;
                      }
                      case 26: {
                        NullValue = input.ReadString();
                        break;
                      }
                      case 34: {
                        Expression = input.ReadString();
                        break;
                      }
                      case 40: {
                        Hierarchical = input.ReadBool();
                        break;
                      }
                      case 48: {
                        Injective = input.ReadBool();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              /// Numeric key.
              /// </summary>
              internal sealed partial class Id : pb::IMessage<Id> {
                private static readonly pb::MessageParser<Id> _parser = new pb::MessageParser<Id>(() => new Id());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Id> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id(Id other) : this() {
                  name_ = other.name_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Id Clone() {
                  return new Id(this);
                }

                /// <summary>Field number for the "name" field.</summary>
                public const int NameFieldNumber = 1;
                private string name_ = "";
                /// <summary>
                /// Name of the numeric key.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Name {
                  get { return name_; }
                  set {
                    name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Id);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Id other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Name != other.Name) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Name.Length != 0) hash ^= Name.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Name.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Name);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Name.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Id other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Name.Length != 0) {
                    Name = other.Name;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Name = input.ReadString();
                        break;
                      }
                    }
                  }
                }

              }

              /// <summary>
              /// Complex key.
              /// </summary>
              internal sealed partial class Key : pb::IMessage<Key> {
                private static readonly pb::MessageParser<Key> _parser = new pb::MessageParser<Key>(() => new Key());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Key> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key(Key other) : this() {
                  attributes_ = other.attributes_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Key Clone() {
                  return new Key(this);
                }

                /// <summary>Field number for the "attributes" field.</summary>
                public const int AttributesFieldNumber = 1;
                private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> _repeated_attributes_codec
                    = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute.Parser);
                private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> attributes_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute>();
                /// <summary>
                /// Attributes of a complex key.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Structure.Types.Attribute> Attributes {
                  get { return attributes_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Key);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Key other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if(!attributes_.Equals(other.attributes_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  hash ^= attributes_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  attributes_.WriteTo(output, _repeated_attributes_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  size += attributes_.CalculateSize(_repeated_attributes_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Key other) {
                  if (other == null) {
                    return;
                  }
                  attributes_.Add(other.attributes_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        attributes_.AddEntriesFrom(input, _repeated_attributes_codec);
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

          /// <summary>
          /// Layout determining how to store the dictionary in memory.
          /// </summary>
          internal sealed partial class Layout : pb::IMessage<Layout> {
            private static readonly pb::MessageParser<Layout> _parser = new pb::MessageParser<Layout>(() => new Layout());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Layout> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout(Layout other) : this() {
              type_ = other.type_;
              sizeInCells_ = other.sizeInCells_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Layout Clone() {
              return new Layout(this);
            }

            /// <summary>Field number for the "type" field.</summary>
            public const int TypeFieldNumber = 1;
            private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type type_ = 0;
            /// <summary>
            /// Layout type for an external dictionary.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type Type {
              get { return type_; }
              set {
                type_ = value;
              }
            }

            /// <summary>Field number for the "size_in_cells" field.</summary>
            public const int SizeInCellsFieldNumber = 2;
            private long sizeInCells_;
            /// <summary>
            /// Number of cells in the cache. Rounded up to a power of two.
            /// Applicable only for CACHE and COMPLEX_KEY_CACHE layout types.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long SizeInCells {
              get { return sizeInCells_; }
              set {
                sizeInCells_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Layout);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Layout other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Type != other.Type) return false;
              if (SizeInCells != other.SizeInCells) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Type != 0) hash ^= Type.GetHashCode();
              if (SizeInCells != 0L) hash ^= SizeInCells.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Type != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Type);
              }
              if (SizeInCells != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(SizeInCells);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Type != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
              }
              if (SizeInCells != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeInCells);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Layout other) {
              if (other == null) {
                return;
              }
              if (other.Type != 0) {
                Type = other.Type;
              }
              if (other.SizeInCells != 0L) {
                SizeInCells = other.SizeInCells;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Type = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Types.Layout.Types.Type) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    SizeInCells = input.ReadInt64();
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Layout message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal enum Type {
                [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of flat arrays.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("FLAT")] Flat = 1,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of a hash table.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("HASHED")] Hashed = 2,
                /// <summary>
                /// Similar to HASHED, to be used with composite keys.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("COMPLEX_KEY_HASHED")] ComplexKeyHashed = 3,
                /// <summary>
                /// The entire dictionary is stored in memory in the form of a hash table,
                /// with an ordered array of ranges and their corresponding values.
                /// Available for all dictionary sources.
                /// </summary>
                [pbr::OriginalName("RANGE_HASHED")] RangeHashed = 4,
                /// <summary>
                /// The dictionary is stored in a cache with a set number of cells.
                /// Available for MySQL, ClickHouse and HTTP dictionary sources.
                /// </summary>
                [pbr::OriginalName("CACHE")] Cache = 5,
                /// <summary>
                /// Similar to CACHE, to be used with composite keys.
                /// Available for MySQL, ClickHouse and HTTP dictionary sources.
                /// </summary>
                [pbr::OriginalName("COMPLEX_KEY_CACHE")] ComplexKeyCache = 6,
              }

            }
            #endregion

          }

          internal sealed partial class Range : pb::IMessage<Range> {
            private static readonly pb::MessageParser<Range> _parser = new pb::MessageParser<Range>(() => new Range());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Range> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range(Range other) : this() {
              min_ = other.min_;
              max_ = other.max_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Range Clone() {
              return new Range(this);
            }

            /// <summary>Field number for the "min" field.</summary>
            public const int MinFieldNumber = 1;
            private long min_;
            /// <summary>
            /// Minimum dictionary lifetime.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Min {
              get { return min_; }
              set {
                min_ = value;
              }
            }

            /// <summary>Field number for the "max" field.</summary>
            public const int MaxFieldNumber = 2;
            private long max_;
            /// <summary>
            /// Maximum dictionary lifetime.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public long Max {
              get { return max_; }
              set {
                max_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Range);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Range other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Min != other.Min) return false;
              if (Max != other.Max) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Min != 0L) hash ^= Min.GetHashCode();
              if (Max != 0L) hash ^= Max.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Min != 0L) {
                output.WriteRawTag(8);
                output.WriteInt64(Min);
              }
              if (Max != 0L) {
                output.WriteRawTag(16);
                output.WriteInt64(Max);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Min != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Min);
              }
              if (Max != 0L) {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Range other) {
              if (other == null) {
                return;
              }
              if (other.Min != 0L) {
                Min = other.Min;
              }
              if (other.Max != 0L) {
                Max = other.Max;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Min = input.ReadInt64();
                    break;
                  }
                  case 16: {
                    Max = input.ReadInt64();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      /// <summary>
      /// Rollup settings for the GraphiteMergeTree table engine.
      /// </summary>
      internal sealed partial class GraphiteRollup : pb::IMessage<GraphiteRollup> {
        private static readonly pb::MessageParser<GraphiteRollup> _parser = new pb::MessageParser<GraphiteRollup>(() => new GraphiteRollup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GraphiteRollup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup(GraphiteRollup other) : this() {
          name_ = other.name_;
          patterns_ = other.patterns_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GraphiteRollup Clone() {
          return new GraphiteRollup(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name for the specified combination of settings for Graphite rollup.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "patterns" field.</summary>
        public const int PatternsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> _repeated_patterns_codec
            = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> patterns_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern>();
        /// <summary>
        /// Pattern to use for the rollup.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern> Patterns {
          get { return patterns_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GraphiteRollup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GraphiteRollup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!patterns_.Equals(other.patterns_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= patterns_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          patterns_.WriteTo(output, _repeated_patterns_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += patterns_.CalculateSize(_repeated_patterns_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GraphiteRollup other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          patterns_.Add(other.patterns_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                patterns_.AddEntriesFrom(input, _repeated_patterns_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the GraphiteRollup message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal sealed partial class Pattern : pb::IMessage<Pattern> {
            private static readonly pb::MessageParser<Pattern> _parser = new pb::MessageParser<Pattern>(() => new Pattern());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Pattern> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern(Pattern other) : this() {
              regexp_ = other.regexp_;
              function_ = other.function_;
              retention_ = other.retention_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Pattern Clone() {
              return new Pattern(this);
            }

            /// <summary>Field number for the "regexp" field.</summary>
            public const int RegexpFieldNumber = 1;
            private string regexp_ = "";
            /// <summary>
            /// Pattern for metric names.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Regexp {
              get { return regexp_; }
              set {
                regexp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "function" field.</summary>
            public const int FunctionFieldNumber = 2;
            private string function_ = "";
            /// <summary>
            /// Name of the aggregating function to apply to data of the age specified in [retention].
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Function {
              get { return function_; }
              set {
                function_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "retention" field.</summary>
            public const int RetentionFieldNumber = 3;
            private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> _repeated_retention_codec
                = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention.Parser);
            private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> retention_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention>();
            /// <summary>
            /// Age of data to use for thinning.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Types.Retention> Retention {
              get { return retention_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Pattern);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Pattern other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Regexp != other.Regexp) return false;
              if (Function != other.Function) return false;
              if(!retention_.Equals(other.retention_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Regexp.Length != 0) hash ^= Regexp.GetHashCode();
              if (Function.Length != 0) hash ^= Function.GetHashCode();
              hash ^= retention_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Regexp.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Regexp);
              }
              if (Function.Length != 0) {
                output.WriteRawTag(18);
                output.WriteString(Function);
              }
              retention_.WriteTo(output, _repeated_retention_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Regexp.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Regexp);
              }
              if (Function.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Function);
              }
              size += retention_.CalculateSize(_repeated_retention_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Pattern other) {
              if (other == null) {
                return;
              }
              if (other.Regexp.Length != 0) {
                Regexp = other.Regexp;
              }
              if (other.Function.Length != 0) {
                Function = other.Function;
              }
              retention_.Add(other.retention_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Regexp = input.ReadString();
                    break;
                  }
                  case 18: {
                    Function = input.ReadString();
                    break;
                  }
                  case 26: {
                    retention_.AddEntriesFrom(input, _repeated_retention_codec);
                    break;
                  }
                }
              }
            }

            #region Nested types
            /// <summary>Container for nested types declared in the Pattern message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              internal sealed partial class Retention : pb::IMessage<Retention> {
                private static readonly pb::MessageParser<Retention> _parser = new pb::MessageParser<Retention>(() => new Retention());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Retention> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.GraphiteRollup.Types.Pattern.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention(Retention other) : this() {
                  age_ = other.age_;
                  precision_ = other.precision_;
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Retention Clone() {
                  return new Retention(this);
                }

                /// <summary>Field number for the "age" field.</summary>
                public const int AgeFieldNumber = 1;
                private long age_;
                /// <summary>
                /// Minimum age of the data in seconds.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Age {
                  get { return age_; }
                  set {
                    age_ = value;
                  }
                }

                /// <summary>Field number for the "precision" field.</summary>
                public const int PrecisionFieldNumber = 2;
                private long precision_;
                /// <summary>
                /// Precision of determining the age of the data, in seconds.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long Precision {
                  get { return precision_; }
                  set {
                    precision_ = value;
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as Retention);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Retention other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Age != other.Age) return false;
                  if (Precision != other.Precision) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Age != 0L) hash ^= Age.GetHashCode();
                  if (Precision != 0L) hash ^= Precision.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                  if (Age != 0L) {
                    output.WriteRawTag(8);
                    output.WriteInt64(Age);
                  }
                  if (Precision != 0L) {
                    output.WriteRawTag(16);
                    output.WriteInt64(Precision);
                  }
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Age != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Age);
                  }
                  if (Precision != 0L) {
                    size += 1 + pb::CodedOutputStream.ComputeInt64Size(Precision);
                  }
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Retention other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Age != 0L) {
                    Age = other.Age;
                  }
                  if (other.Precision != 0L) {
                    Precision = other.Precision;
                  }
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 8: {
                        Age = input.ReadInt64();
                        break;
                      }
                      case 16: {
                        Precision = input.ReadInt64();
                        break;
                      }
                    }
                  }
                }

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  internal sealed partial class ClickhouseConfigSet : pb::IMessage<ClickhouseConfigSet> {
    private static readonly pb::MessageParser<ClickhouseConfigSet> _parser = new pb::MessageParser<ClickhouseConfigSet>(() => new ClickhouseConfigSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClickhouseConfigSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet(ClickhouseConfigSet other) : this() {
      effectiveConfig_ = other.effectiveConfig_ != null ? other.effectiveConfig_.Clone() : null;
      userConfig_ = other.userConfig_ != null ? other.userConfig_.Clone() : null;
      defaultConfig_ = other.defaultConfig_ != null ? other.defaultConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClickhouseConfigSet Clone() {
      return new ClickhouseConfigSet(this);
    }

    /// <summary>Field number for the "effective_config" field.</summary>
    public const int EffectiveConfigFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig effectiveConfig_;
    /// <summary>
    /// Effective settings for a ClickHouse cluster (a combination of settings defined
    /// in [user_config] and [default_config]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig EffectiveConfig {
      get { return effectiveConfig_; }
      set {
        effectiveConfig_ = value;
      }
    }

    /// <summary>Field number for the "user_config" field.</summary>
    public const int UserConfigFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig userConfig_;
    /// <summary>
    /// User-defined settings for a ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig UserConfig {
      get { return userConfig_; }
      set {
        userConfig_ = value;
      }
    }

    /// <summary>Field number for the "default_config" field.</summary>
    public const int DefaultConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig defaultConfig_;
    /// <summary>
    /// Default configuration for a ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig DefaultConfig {
      get { return defaultConfig_; }
      set {
        defaultConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClickhouseConfigSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClickhouseConfigSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectiveConfig, other.EffectiveConfig)) return false;
      if (!object.Equals(UserConfig, other.UserConfig)) return false;
      if (!object.Equals(DefaultConfig, other.DefaultConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectiveConfig_ != null) hash ^= EffectiveConfig.GetHashCode();
      if (userConfig_ != null) hash ^= UserConfig.GetHashCode();
      if (defaultConfig_ != null) hash ^= DefaultConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectiveConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectiveConfig);
      }
      if (userConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserConfig);
      }
      if (defaultConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectiveConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveConfig);
      }
      if (userConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConfig);
      }
      if (defaultConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClickhouseConfigSet other) {
      if (other == null) {
        return;
      }
      if (other.effectiveConfig_ != null) {
        if (effectiveConfig_ == null) {
          EffectiveConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        EffectiveConfig.MergeFrom(other.EffectiveConfig);
      }
      if (other.userConfig_ != null) {
        if (userConfig_ == null) {
          UserConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        UserConfig.MergeFrom(other.UserConfig);
      }
      if (other.defaultConfig_ != null) {
        if (defaultConfig_ == null) {
          DefaultConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
        }
        DefaultConfig.MergeFrom(other.DefaultConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectiveConfig_ == null) {
              EffectiveConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(EffectiveConfig);
            break;
          }
          case 18: {
            if (userConfig_ == null) {
              UserConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(UserConfig);
            break;
          }
          case 26: {
            if (defaultConfig_ == null) {
              DefaultConfig = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            input.ReadMessage(DefaultConfig);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
