// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/clickhouse/v1/cluster_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Clickhouse.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/clickhouse/v1/cluster_service.proto</summary>
  internal static partial class ClusterServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/clickhouse/v1/cluster_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjR5YW5kZXgvY2xvdWQvbWRiL2NsaWNraG91c2UvdjEvY2x1c3Rlcl9zZXJ2",
            "aWNlLnByb3RvEh55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEaHGdv",
            "b2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9m",
            "aWVsZF9tYXNrLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8aG2dvb2dsZS90",
            "eXBlL3RpbWVvZmRheS5wcm90bxogeWFuZGV4L2Nsb3VkL2FwaS9vcGVyYXRp",
            "b24ucHJvdG8aJnlhbmRleC9jbG91ZC9vcGVyYXRpb24vb3BlcmF0aW9uLnBy",
            "b3RvGh15YW5kZXgvY2xvdWQvdmFsaWRhdGlvbi5wcm90bxoreWFuZGV4L2Ns",
            "b3VkL21kYi9jbGlja2hvdXNlL3YxL2JhY2t1cC5wcm90bxoseWFuZGV4L2Ns",
            "b3VkL21kYi9jbGlja2hvdXNlL3YxL2NsdXN0ZXIucHJvdG8aLXlhbmRleC9j",
            "bG91ZC9tZGIvY2xpY2tob3VzZS92MS9kYXRhYmFzZS5wcm90bxopeWFuZGV4",
            "L2Nsb3VkL21kYi9jbGlja2hvdXNlL3YxL3VzZXIucHJvdG8aNnlhbmRleC9j",
            "bG91ZC9tZGIvY2xpY2tob3VzZS92MS9jb25maWcvY2xpY2tob3VzZS5wcm90",
            "bxoweWFuZGV4L2Nsb3VkL21kYi9jbGlja2hvdXNlL3YxL21haW50ZW5hbmNl",
            "LnByb3RvIjUKEUdldENsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASAB",
            "KAlCDOjHMQGKyDEEPD01MCKQAQoTTGlzdENsdXN0ZXJzUmVxdWVzdBIfCglm",
            "b2xkZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBIdCglwYWdlX3NpemUYAiAB",
            "KANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgDIAEoCUIJisgxBTw9MTAw",
            "EhoKBmZpbHRlchgEIAEoCUIKisgxBjw9MTAwMCJqChRMaXN0Q2x1c3RlcnNS",
            "ZXNwb25zZRI5CghjbHVzdGVycxgBIAMoCzInLnlhbmRleC5jbG91ZC5tZGIu",
            "Y2xpY2tob3VzZS52MS5DbHVzdGVyEhcKD25leHRfcGFnZV90b2tlbhgCIAEo",
            "CSKnBgoUQ3JlYXRlQ2x1c3RlclJlcXVlc3QSHwoJZm9sZGVyX2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTASLAoEbmFtZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scx",
            "DlthLXpBLVowLTlfLV0qEh4KC2Rlc2NyaXB0aW9uGAMgASgJQgmKyDEFPD0y",
            "NTYSkQEKBmxhYmVscxgEIAMoCzJALnlhbmRleC5jbG91ZC5tZGIuY2xpY2to",
            "b3VzZS52MS5DcmVhdGVDbHVzdGVyUmVxdWVzdC5MYWJlbHNFbnRyeUI/gsgx",
            "BDw9NjSKyDEEPD02M/LHMQtbLV8wLTlhLXpdKrLIMQYaBDw9NjOyyDESEhBb",
            "YS16XVstXzAtOWEtel0qEk4KC2Vudmlyb25tZW50GAUgASgOMjMueWFuZGV4",
            "LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkNsdXN0ZXIuRW52aXJvbm1lbnRC",
            "BOjHMQESRQoLY29uZmlnX3NwZWMYBiABKAsyKi55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuQ29uZmlnU3BlY0IE6McxARJMCg5kYXRhYmFzZV9z",
            "cGVjcxgHIAMoCzIsLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5E",
            "YXRhYmFzZVNwZWNCBoLIMQI+MBJECgp1c2VyX3NwZWNzGAggAygLMigueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlVzZXJTcGVjQgaCyDECPjAS",
            "RAoKaG9zdF9zcGVjcxgJIAMoCzIoLnlhbmRleC5jbG91ZC5tZGIuY2xpY2to",
            "b3VzZS52MS5Ib3N0U3BlY0IGgsgxAj4wEiAKCm5ldHdvcmtfaWQYCiABKAlC",
            "DOjHMQGKyDEEPD01MBIuCgpzaGFyZF9uYW1lGAsgASgJQhqKyDEEPD02M/LH",
            "MQ5bYS16QS1aMC05Xy1dKhIaChJzZXJ2aWNlX2FjY291bnRfaWQYDCABKAka",
            "LQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ASIrChVDcmVhdGVDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEo",
            "CSKiBAoUVXBkYXRlQ2x1c3RlclJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEo",
            "CUIM6McxAYrIMQQ8PTUwEi8KC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLkZpZWxkTWFzaxIeCgtkZXNjcmlwdGlvbhgDIAEoCUIJisgx",
            "BTw9MjU2EpEBCgZsYWJlbHMYBCADKAsyQC55YW5kZXguY2xvdWQubWRiLmNs",
            "aWNraG91c2UudjEuVXBkYXRlQ2x1c3RlclJlcXVlc3QuTGFiZWxzRW50cnlC",
            "P4LIMQQ8PTY0isgxBDw9NjPyxzELWy1fMC05YS16XSqyyDEGGgQ8PTYzssgx",
            "EhIQW2Etel1bLV8wLTlhLXpdKhI/Cgtjb25maWdfc3BlYxgFIAEoCzIqLnlh",
            "bmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Db25maWdTcGVjEigKBG5h",
            "bWUYBiABKAlCGorIMQQ8PTYz8scxDlthLXpBLVowLTlfLV0qEhoKEnNlcnZp",
            "Y2VfYWNjb3VudF9pZBgHIAEoCRJNChJtYWludGVuYW5jZV93aW5kb3cYCCAB",
            "KAsyMS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuTWFpbnRlbmFu",
            "Y2VXaW5kb3caLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgJOgI4ASIrChVVcGRhdGVDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rl",
            "cl9pZBgBIAEoCSI4ChREZWxldGVDbHVzdGVyUmVxdWVzdBIgCgpjbHVzdGVy",
            "X2lkGAEgASgJQgzoxzEBisgxBDw9NTAiKwoVRGVsZXRlQ2x1c3Rlck1ldGFk",
            "YXRhEhIKCmNsdXN0ZXJfaWQYASABKAkiNwoTU3RhcnRDbHVzdGVyUmVxdWVz",
            "dBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTAiKgoUU3RhcnRD",
            "bHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCSI2ChJTdG9wQ2x1",
            "c3RlclJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUw",
            "IikKE1N0b3BDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCSJj",
            "ChJNb3ZlQ2x1c3RlclJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6Mcx",
            "AYrIMQQ8PTUwEisKFWRlc3RpbmF0aW9uX2ZvbGRlcl9pZBgCIAEoCUIM6Mcx",
            "AYrIMQQ8PTUwImIKE01vdmVDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9p",
            "ZBgBIAEoCRIYChBzb3VyY2VfZm9sZGVyX2lkGAIgASgJEh0KFWRlc3RpbmF0",
            "aW9uX2ZvbGRlcl9pZBgDIAEoCSK6AQoaQWRkQ2x1c3Rlclpvb2tlZXBlclJl",
            "cXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEjwKCXJl",
            "c291cmNlcxgCIAEoCzIpLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5SZXNvdXJjZXMSPAoKaG9zdF9zcGVjcxgDIAMoCzIoLnlhbmRleC5jbG91",
            "ZC5tZGIuY2xpY2tob3VzZS52MS5Ib3N0U3BlYyIxChtBZGRDbHVzdGVyWm9v",
            "a2VlcGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCSI4ChRCYWNrdXBD",
            "bHVzdGVyUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9",
            "NTAiKwoVQmFja3VwQ2x1c3Rlck1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASAB",
            "KAki+gQKFVJlc3RvcmVDbHVzdGVyUmVxdWVzdBIXCgliYWNrdXBfaWQYASAB",
            "KAlCBOjHMQESLAoEbmFtZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scxDlthLXpB",
            "LVowLTlfLV0qEh4KC2Rlc2NyaXB0aW9uGAMgASgJQgmKyDEFPD0yNTYSkgEK",
            "BmxhYmVscxgEIAMoCzJBLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5SZXN0b3JlQ2x1c3RlclJlcXVlc3QuTGFiZWxzRW50cnlCP4LIMQQ8PTY0",
            "isgxBDw9NjPyxzELWy1fMC05YS16XSqyyDEGGgQ8PTYzssgxEhIQW2Etel1b",
            "LV8wLTlhLXpdKhJOCgtlbnZpcm9ubWVudBgFIAEoDjIzLnlhbmRleC5jbG91",
            "ZC5tZGIuY2xpY2tob3VzZS52MS5DbHVzdGVyLkVudmlyb25tZW50QgToxzEB",
            "EkUKC2NvbmZpZ19zcGVjGAYgASgLMioueWFuZGV4LmNsb3VkLm1kYi5jbGlj",
            "a2hvdXNlLnYxLkNvbmZpZ1NwZWNCBOjHMQESRAoKaG9zdF9zcGVjcxgHIAMo",
            "CzIoLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Ib3N0U3BlY0IG",
            "gsgxAj4wEiAKCm5ldHdvcmtfaWQYCCABKAlCDOjHMQGKyDEEPD01MBIbCglm",
            "b2xkZXJfaWQYCSABKAlCCIrIMQQ8PTUwEhoKEnNlcnZpY2VfYWNjb3VudF9p",
            "ZBgKIAEoCRotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIj8KFlJlc3RvcmVDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rl",
            "cl9pZBgBIAEoCRIRCgliYWNrdXBfaWQYAiABKAkizwIKHFJlc2NoZWR1bGVN",
            "YWludGVuYW5jZVJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrI",
            "MQQ8PTUwEmoKD3Jlc2NoZWR1bGVfdHlwZRgCIAEoDjJLLnlhbmRleC5jbG91",
            "ZC5tZGIuY2xpY2tob3VzZS52MS5SZXNjaGVkdWxlTWFpbnRlbmFuY2VSZXF1",
            "ZXN0LlJlc2NoZWR1bGVUeXBlQgToxzEBEjEKDWRlbGF5ZWRfdW50aWwYAyAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIm4KDlJlc2NoZWR1bGVU",
            "eXBlEh8KG1JFU0NIRURVTEVfVFlQRV9VTlNQRUNJRklFRBAAEg0KCUlNTUVE",
            "SUFURRABEhkKFU5FWFRfQVZBSUxBQkxFX1dJTkRPVxACEhEKDVNQRUNJRklD",
            "X1RJTUUQAyJmCh1SZXNjaGVkdWxlTWFpbnRlbmFuY2VNZXRhZGF0YRISCgpj",
            "bHVzdGVyX2lkGAEgASgJEjEKDWRlbGF5ZWRfdW50aWwYBCABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wIrMBCglMb2dSZWNvcmQSLQoJdGltZXN0",
            "YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBJHCgdtZXNz",
            "YWdlGAIgAygLMjYueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxv",
            "Z1JlY29yZC5NZXNzYWdlRW50cnkaLgoMTWVzc2FnZUVudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiggMKFkxpc3RDbHVzdGVyTG9nc1Jl",
            "cXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEhUKDWNv",
            "bHVtbl9maWx0ZXIYAiADKAkSWAoMc2VydmljZV90eXBlGAMgASgOMkIueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxpc3RDbHVzdGVyTG9nc1Jl",
            "cXVlc3QuU2VydmljZVR5cGUSLQoJZnJvbV90aW1lGAQgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIrCgd0b190aW1lGAUgASgLMhouZ29vZ2xl",
            "LnByb3RvYnVmLlRpbWVzdGFtcBIdCglwYWdlX3NpemUYBiABKANCCvrHMQY8",
            "PTEwMDASHQoKcGFnZV90b2tlbhgHIAEoCUIJisgxBTw9MTAwIjsKC1NlcnZp",
            "Y2VUeXBlEhwKGFNFUlZJQ0VfVFlQRV9VTlNQRUNJRklFRBAAEg4KCkNMSUNL",
            "SE9VU0UQASJrChdMaXN0Q2x1c3RlckxvZ3NSZXNwb25zZRI3CgRsb2dzGAEg",
            "AygLMikueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxvZ1JlY29y",
            "ZBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiZwoPU3RyZWFtTG9nUmVjb3Jk",
            "EjkKBnJlY29yZBgBIAEoCzIpLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3Vz",
            "ZS52MS5Mb2dSZWNvcmQSGQoRbmV4dF9yZWNvcmRfdG9rZW4YAiABKAkihQMK",
            "GFN0cmVhbUNsdXN0ZXJMb2dzUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTASFQoNY29sdW1uX2ZpbHRlchgCIAMoCRJaCgxzZXJ2",
            "aWNlX3R5cGUYAyABKA4yRC55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuU3RyZWFtQ2x1c3RlckxvZ3NSZXF1ZXN0LlNlcnZpY2VUeXBlEi0KCWZy",
            "b21fdGltZRgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASKwoH",
            "dG9fdGltZRgFIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASHwoM",
            "cmVjb3JkX3Rva2VuGAYgASgJQgmKyDEFPD0xMDASGgoGZmlsdGVyGAcgASgJ",
            "QgqKyDEGPD0xMDAwIjsKC1NlcnZpY2VUeXBlEhwKGFNFUlZJQ0VfVFlQRV9V",
            "TlNQRUNJRklFRBAAEg4KCkNMSUNLSE9VU0UQASJ+ChxMaXN0Q2x1c3Rlck9w",
            "ZXJhdGlvbnNSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEE",
            "PD01MBIdCglwYWdlX3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90",
            "b2tlbhgDIAEoCUIJisgxBTw9MTAwIm8KHUxpc3RDbHVzdGVyT3BlcmF0aW9u",
            "c1Jlc3BvbnNlEjUKCm9wZXJhdGlvbnMYASADKAsyIS55YW5kZXguY2xvdWQu",
            "b3BlcmF0aW9uLk9wZXJhdGlvbhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAki",
            "ewoZTGlzdENsdXN0ZXJCYWNrdXBzUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEg",
            "ASgJQgzoxzEBisgxBDw9NTASHQoJcGFnZV9zaXplGAIgASgDQgr6xzEGPD0x",
            "MDAwEh0KCnBhZ2VfdG9rZW4YAyABKAlCCYrIMQU8PTEwMCJuChpMaXN0Q2x1",
            "c3RlckJhY2t1cHNSZXNwb25zZRI3CgdiYWNrdXBzGAEgAygLMiYueWFuZGV4",
            "LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkJhY2t1cBIXCg9uZXh0X3BhZ2Vf",
            "dG9rZW4YAiABKAkieQoXTGlzdENsdXN0ZXJIb3N0c1JlcXVlc3QSIAoKY2x1",
            "c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBhZ2Vfc2l6ZRgCIAEo",
            "A0IK+scxBjw9MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDAi",
            "aAoYTGlzdENsdXN0ZXJIb3N0c1Jlc3BvbnNlEjMKBWhvc3RzGAEgAygLMiQu",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkhvc3QSFwoPbmV4dF9w",
            "YWdlX3Rva2VuGAIgASgJIoABChZBZGRDbHVzdGVySG9zdHNSZXF1ZXN0EiAK",
            "CmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBJECgpob3N0X3NwZWNz",
            "GAIgAygLMigueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkhvc3RT",
            "cGVjQgaCyDECPjAiQQoXQWRkQ2x1c3Rlckhvc3RzTWV0YWRhdGESEgoKY2x1",
            "c3Rlcl9pZBgBIAEoCRISCgpob3N0X25hbWVzGAIgAygJImIKGURlbGV0ZUNs",
            "dXN0ZXJIb3N0c1JlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrI",
            "MQQ8PTUwEiMKCmhvc3RfbmFtZXMYAiADKAlCD4LIMQI+MIrIMQU8PTI1MyJE",
            "ChpEZWxldGVDbHVzdGVySG9zdHNNZXRhZGF0YRISCgpjbHVzdGVyX2lkGAEg",
            "ASgJEhIKCmhvc3RfbmFtZXMYAiADKAkibgoWR2V0Q2x1c3RlclNoYXJkUmVx",
            "dWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASMgoKc2hh",
            "cmRfbmFtZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scxDlthLXpBLVowLTlfLV0q",
            "InoKGExpc3RDbHVzdGVyU2hhcmRzUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEg",
            "ASgJQgzoxzEBisgxBDw9NTASHQoJcGFnZV9zaXplGAIgASgDQgr6xzEGMC0x",
            "MDAwEh0KCnBhZ2VfdG9rZW4YAyABKAlCCYrIMQU8PTEwMCJrChlMaXN0Q2x1",
            "c3RlclNoYXJkc1Jlc3BvbnNlEjUKBnNoYXJkcxgBIAMoCzIlLnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5TaGFyZBIXCg9uZXh0X3BhZ2VfdG9r",
            "ZW4YAiABKAki+gEKFkFkZENsdXN0ZXJTaGFyZFJlcXVlc3QSIAoKY2x1c3Rl",
            "cl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEjIKCnNoYXJkX25hbWUYAiABKAlC",
            "HujHMQGKyDEEPD02M/LHMQ5bYS16QS1aMC05Xy1dKhJECgtjb25maWdfc3Bl",
            "YxgDIAEoCzIvLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5TaGFy",
            "ZENvbmZpZ1NwZWMSRAoKaG9zdF9zcGVjcxgEIAMoCzIoLnlhbmRleC5jbG91",
            "ZC5tZGIuY2xpY2tob3VzZS52MS5Ib3N0U3BlY0IGgsgxAj4wIkEKF0FkZENs",
            "dXN0ZXJTaGFyZE1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkSEgoKc2hh",
            "cmRfbmFtZRgCIAEoCSLoAQoZVXBkYXRlQ2x1c3RlclNoYXJkUmVxdWVzdBIg",
            "CgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASMgoKc2hhcmRfbmFt",
            "ZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scxDlthLXpBLVowLTlfLV0qEi8KC3Vw",
            "ZGF0ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFzaxJE",
            "Cgtjb25maWdfc3BlYxgEIAEoCzIvLnlhbmRleC5jbG91ZC5tZGIuY2xpY2to",
            "b3VzZS52MS5TaGFyZENvbmZpZ1NwZWMiRAoaVXBkYXRlQ2x1c3RlclNoYXJk",
            "TWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCRISCgpzaGFyZF9uYW1lGAIg",
            "ASgJInEKGURlbGV0ZUNsdXN0ZXJTaGFyZFJlcXVlc3QSIAoKY2x1c3Rlcl9p",
            "ZBgBIAEoCUIM6McxAYrIMQQ8PTUwEjIKCnNoYXJkX25hbWUYAiABKAlCHujH",
            "MQGKyDEEPD02M/LHMQ5bYS16QS1aMC05Xy1dKiJEChpEZWxldGVDbHVzdGVy",
            "U2hhcmRNZXRhZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJEhIKCnNoYXJkX25h",
            "bWUYAiABKAkieQobR2V0Q2x1c3RlclNoYXJkR3JvdXBSZXF1ZXN0EiAKCmNs",
            "dXN0ZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBI4ChBzaGFyZF9ncm91cF9u",
            "YW1lGAIgASgJQh7oxzEBisgxBDw9NjPyxzEOW2EtekEtWjAtOV8tXSoifwod",
            "TGlzdENsdXN0ZXJTaGFyZEdyb3Vwc1JlcXVlc3QSIAoKY2x1c3Rlcl9pZBgB",
            "IAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBhZ2Vfc2l6ZRgCIAEoA0IK+scxBjAt",
            "MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDAiewoeTGlzdENs",
            "dXN0ZXJTaGFyZEdyb3Vwc1Jlc3BvbnNlEkAKDHNoYXJkX2dyb3VwcxgBIAMo",
            "CzIqLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5TaGFyZEdyb3Vw",
            "EhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSKmAQoeQ3JlYXRlQ2x1c3RlclNo",
            "YXJkR3JvdXBSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEE",
            "PD01MBI4ChBzaGFyZF9ncm91cF9uYW1lGAIgASgJQh7oxzEBisgxBDw9NjPy",
            "xzEOW2EtekEtWjAtOV8tXSoSEwoLZGVzY3JpcHRpb24YAyABKAkSEwoLc2hh",
            "cmRfbmFtZXMYBCADKAkiTwofQ3JlYXRlQ2x1c3RlclNoYXJkR3JvdXBNZXRh",
            "ZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJEhgKEHNoYXJkX2dyb3VwX25hbWUY",
            "AiABKAki1wEKHlVwZGF0ZUNsdXN0ZXJTaGFyZEdyb3VwUmVxdWVzdBIgCgpj",
            "bHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASOAoQc2hhcmRfZ3JvdXBf",
            "bmFtZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scxDlthLXpBLVowLTlfLV0qEi8K",
            "C3VwZGF0ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFz",
            "axITCgtkZXNjcmlwdGlvbhgEIAEoCRITCgtzaGFyZF9uYW1lcxgFIAMoCSJP",
            "Ch9VcGRhdGVDbHVzdGVyU2hhcmRHcm91cE1ldGFkYXRhEhIKCmNsdXN0ZXJf",
            "aWQYASABKAkSGAoQc2hhcmRfZ3JvdXBfbmFtZRgCIAEoCSJ8Ch5EZWxldGVD",
            "bHVzdGVyU2hhcmRHcm91cFJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM",
            "6McxAYrIMQQ8PTUwEjgKEHNoYXJkX2dyb3VwX25hbWUYAiABKAlCHujHMQGK",
            "yDEEPD02M/LHMQ5bYS16QS1aMC05Xy1dKiJPCh9EZWxldGVDbHVzdGVyU2hh",
            "cmRHcm91cE1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkSGAoQc2hhcmRf",
            "Z3JvdXBfbmFtZRgCIAEoCSKzAQomQ3JlYXRlQ2x1c3RlckV4dGVybmFsRGlj",
            "dGlvbmFyeVJlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8",
            "PTUwEmcKE2V4dGVybmFsX2RpY3Rpb25hcnkYAiABKAsySi55YW5kZXguY2xv",
            "dWQubWRiLmNsaWNraG91c2UudjEuY29uZmlnLkNsaWNraG91c2VDb25maWcu",
            "RXh0ZXJuYWxEaWN0aW9uYXJ5Ij0KJ0NyZWF0ZUNsdXN0ZXJFeHRlcm5hbERp",
            "Y3Rpb25hcnlNZXRhZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJImwKJkRlbGV0",
            "ZUNsdXN0ZXJFeHRlcm5hbERpY3Rpb25hcnlSZXF1ZXN0EiAKCmNsdXN0ZXJf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MBIgChhleHRlcm5hbF9kaWN0aW9uYXJ5",
            "X25hbWUYAiABKAkiPQonRGVsZXRlQ2x1c3RlckV4dGVybmFsRGljdGlvbmFy",
            "eU1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkiywEKCEhvc3RTcGVjEhkK",
            "B3pvbmVfaWQYASABKAlCCIrIMQQ8PTUwEj0KBHR5cGUYAiABKA4yKS55YW5k",
            "ZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuSG9zdC5UeXBlQgToxzEBEhsK",
            "CXN1Ym5ldF9pZBgDIAEoCUIIisgxBDw9NTASGAoQYXNzaWduX3B1YmxpY19p",
            "cBgEIAEoCBIuCgpzaGFyZF9uYW1lGAUgASgJQhqKyDEEPD02M/LHMQ5bYS16",
            "QS1aMC05Xy1dKiLSBQoKQ29uZmlnU3BlYxIPCgd2ZXJzaW9uGAMgASgJEkkK",
            "CmNsaWNraG91c2UYASABKAsyNS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuQ29uZmlnU3BlYy5DbGlja2hvdXNlEkcKCXpvb2tlZXBlchgCIAEo",
            "CzI0LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5Db25maWdTcGVj",
            "Llpvb2tlZXBlchIzChNiYWNrdXBfd2luZG93X3N0YXJ0GAQgASgLMhYuZ29v",
            "Z2xlLnR5cGUuVGltZU9mRGF5EjYKBmFjY2VzcxgFIAEoCzImLnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5BY2Nlc3MSQwoNY2xvdWRfc3RvcmFn",
            "ZRgGIAEoCzIsLnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5DbG91",
            "ZFN0b3JhZ2USOwoXc3FsX2RhdGFiYXNlX21hbmFnZW1lbnQYByABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuQm9vbFZhbHVlEjcKE3NxbF91c2VyX21hbmFnZW1l",
            "bnQYCCABKAsyGi5nb29nbGUucHJvdG9idWYuQm9vbFZhbHVlEhYKDmFkbWlu",
            "X3Bhc3N3b3JkGAkgASgJGpMBCgpDbGlja2hvdXNlEkcKBmNvbmZpZxgBIAEo",
            "CzI3LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5jb25maWcuQ2xp",
            "Y2tob3VzZUNvbmZpZxI8CglyZXNvdXJjZXMYAiABKAsyKS55YW5kZXguY2xv",
            "dWQubWRiLmNsaWNraG91c2UudjEuUmVzb3VyY2VzGkkKCVpvb2tlZXBlchI8",
            "CglyZXNvdXJjZXMYASABKAsyKS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91",
            "c2UudjEuUmVzb3VyY2VzIqQCCg9TaGFyZENvbmZpZ1NwZWMSTgoKY2xpY2to",
            "b3VzZRgBIAEoCzI6LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5T",
            "aGFyZENvbmZpZ1NwZWMuQ2xpY2tob3VzZRrAAQoKQ2xpY2tob3VzZRJHCgZj",
            "b25maWcYASABKAsyNy55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEu",
            "Y29uZmlnLkNsaWNraG91c2VDb25maWcSPAoJcmVzb3VyY2VzGAIgASgLMiku",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlJlc291cmNlcxIrCgZ3",
            "ZWlnaHQYAyABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZTKXMwoO",
            "Q2x1c3RlclNlcnZpY2USlwEKA0dldBIxLnlhbmRleC5jbG91ZC5tZGIuY2xp",
            "Y2tob3VzZS52MS5HZXRDbHVzdGVyUmVxdWVzdBonLnlhbmRleC5jbG91ZC5t",
            "ZGIuY2xpY2tob3VzZS52MS5DbHVzdGVyIjSC0+STAi4SLC9tYW5hZ2VkLWNs",
            "aWNraG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9EpoBCgRMaXN0EjMu",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxpc3RDbHVzdGVyc1Jl",
            "cXVlc3QaNC55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuTGlzdENs",
            "dXN0ZXJzUmVzcG9uc2UiJ4LT5JMCIRIfL21hbmFnZWQtY2xpY2tob3VzZS92",
            "MS9jbHVzdGVycxKxAQoGQ3JlYXRlEjQueWFuZGV4LmNsb3VkLm1kYi5jbGlj",
            "a2hvdXNlLnYxLkNyZWF0ZUNsdXN0ZXJSZXF1ZXN0GiEueWFuZGV4LmNsb3Vk",
            "Lm9wZXJhdGlvbi5PcGVyYXRpb24iToLT5JMCJCIfL21hbmFnZWQtY2xpY2to",
            "b3VzZS92MS9jbHVzdGVyczoBKrLSKiAKFUNyZWF0ZUNsdXN0ZXJNZXRhZGF0",
            "YRIHQ2x1c3RlchK+AQoGVXBkYXRlEjQueWFuZGV4LmNsb3VkLm1kYi5jbGlj",
            "a2hvdXNlLnYxLlVwZGF0ZUNsdXN0ZXJSZXF1ZXN0GiEueWFuZGV4LmNsb3Vk",
            "Lm9wZXJhdGlvbi5PcGVyYXRpb24iW4LT5JMCMTIsL21hbmFnZWQtY2xpY2to",
            "b3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH06ASqy0iogChVVcGRhdGVD",
            "bHVzdGVyTWV0YWRhdGESB0NsdXN0ZXISyQEKBkRlbGV0ZRI0LnlhbmRleC5j",
            "bG91ZC5tZGIuY2xpY2tob3VzZS52MS5EZWxldGVDbHVzdGVyUmVxdWVzdBoh",
            "LnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uImaC0+STAi4qLC9t",
            "YW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9stIq",
            "LgoVRGVsZXRlQ2x1c3Rlck1ldGFkYXRhEhVnb29nbGUucHJvdG9idWYuRW1w",
            "dHkSvgEKBVN0YXJ0EjMueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYx",
            "LlN0YXJ0Q2x1c3RlclJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9u",
            "Lk9wZXJhdGlvbiJdgtPkkwI0IjIvbWFuYWdlZC1jbGlja2hvdXNlL3YxL2Ns",
            "dXN0ZXJzL3tjbHVzdGVyX2lkfTpzdGFydLLSKh8KFFN0YXJ0Q2x1c3Rlck1l",
            "dGFkYXRhEgdDbHVzdGVyEroBCgRTdG9wEjIueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLlN0b3BDbHVzdGVyUmVxdWVzdBohLnlhbmRleC5jbG91",
            "ZC5vcGVyYXRpb24uT3BlcmF0aW9uIluC0+STAjMiMS9tYW5hZ2VkLWNsaWNr",
            "aG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9OnN0b3Cy0ioeChNTdG9w",
            "Q2x1c3Rlck1ldGFkYXRhEgdDbHVzdGVyEr0BCgRNb3ZlEjIueWFuZGV4LmNs",
            "b3VkLm1kYi5jbGlja2hvdXNlLnYxLk1vdmVDbHVzdGVyUmVxdWVzdBohLnlh",
            "bmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIl6C0+STAjYiMS9tYW5h",
            "Z2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9Om1vdmU6",
            "ASqy0ioeChNNb3ZlQ2x1c3Rlck1ldGFkYXRhEgdDbHVzdGVyEt0BCgxBZGRa",
            "b29rZWVwZXISOi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuQWRk",
            "Q2x1c3Rlclpvb2tlZXBlclJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0",
            "aW9uLk9wZXJhdGlvbiJugtPkkwI+IjkvbWFuYWdlZC1jbGlja2hvdXNlL3Yx",
            "L2NsdXN0ZXJzL3tjbHVzdGVyX2lkfTphZGRab29rZWVwZXI6ASqy0iomChtB",
            "ZGRDbHVzdGVyWm9va2VlcGVyTWV0YWRhdGESB0NsdXN0ZXISwgEKBkJhY2t1",
            "cBI0LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5CYWNrdXBDbHVz",
            "dGVyUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9u",
            "Il+C0+STAjUiMy9tYW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2Ns",
            "dXN0ZXJfaWR9OmJhY2t1cLLSKiAKFUJhY2t1cENsdXN0ZXJNZXRhZGF0YRIH",
            "Q2x1c3RlchK8AQoHUmVzdG9yZRI1LnlhbmRleC5jbG91ZC5tZGIuY2xpY2to",
            "b3VzZS52MS5SZXN0b3JlQ2x1c3RlclJlcXVlc3QaIS55YW5kZXguY2xvdWQu",
            "b3BlcmF0aW9uLk9wZXJhdGlvbiJXgtPkkwIsIicvbWFuYWdlZC1jbGlja2hv",
            "dXNlL3YxL2NsdXN0ZXJzOnJlc3RvcmU6ASqy0iohChZSZXN0b3JlQ2x1c3Rl",
            "ck1ldGFkYXRhEgdDbHVzdGVyEvMBChVSZXNjaGVkdWxlTWFpbnRlbmFuY2US",
            "PC55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuUmVzY2hlZHVsZU1h",
            "aW50ZW5hbmNlUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uInmC0+STAkciQi9tYW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3Rl",
            "cnMve2NsdXN0ZXJfaWR9OnJlc2NoZWR1bGVNYWludGVuYW5jZToBKrLSKigK",
            "HVJlc2NoZWR1bGVNYWludGVuYW5jZU1ldGFkYXRhEgdDbHVzdGVyErYBCghM",
            "aXN0TG9ncxI2LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5MaXN0",
            "Q2x1c3RlckxvZ3NSZXF1ZXN0GjcueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hv",
            "dXNlLnYxLkxpc3RDbHVzdGVyTG9nc1Jlc3BvbnNlIjmC0+STAjMSMS9tYW5h",
            "Z2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9OmxvZ3MS",
            "uwEKClN0cmVhbUxvZ3MSOC55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2Uu",
            "djEuU3RyZWFtQ2x1c3RlckxvZ3NSZXF1ZXN0Gi8ueWFuZGV4LmNsb3VkLm1k",
            "Yi5jbGlja2hvdXNlLnYxLlN0cmVhbUxvZ1JlY29yZCJAgtPkkwI6EjgvbWFu",
            "YWdlZC1jbGlja2hvdXNlL3YxL2NsdXN0ZXJzL3tjbHVzdGVyX2lkfTpzdHJl",
            "YW1fbG9nczABEs4BCg5MaXN0T3BlcmF0aW9ucxI8LnlhbmRleC5jbG91ZC5t",
            "ZGIuY2xpY2tob3VzZS52MS5MaXN0Q2x1c3Rlck9wZXJhdGlvbnNSZXF1ZXN0",
            "Gj0ueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxpc3RDbHVzdGVy",
            "T3BlcmF0aW9uc1Jlc3BvbnNlIj+C0+STAjkSNy9tYW5hZ2VkLWNsaWNraG91",
            "c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L29wZXJhdGlvbnMSwgEKC0xp",
            "c3RCYWNrdXBzEjkueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxp",
            "c3RDbHVzdGVyQmFja3Vwc1JlcXVlc3QaOi55YW5kZXguY2xvdWQubWRiLmNs",
            "aWNraG91c2UudjEuTGlzdENsdXN0ZXJCYWNrdXBzUmVzcG9uc2UiPILT5JMC",
            "NhI0L21hbmFnZWQtY2xpY2tob3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9p",
            "ZH0vYmFja3VwcxK6AQoJTGlzdEhvc3RzEjcueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLkxpc3RDbHVzdGVySG9zdHNSZXF1ZXN0GjgueWFuZGV4",
            "LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkxpc3RDbHVzdGVySG9zdHNSZXNw",
            "b25zZSI6gtPkkwI0EjIvbWFuYWdlZC1jbGlja2hvdXNlL3YxL2NsdXN0ZXJz",
            "L3tjbHVzdGVyX2lkfS9ob3N0cxLkAQoIQWRkSG9zdHMSNi55YW5kZXguY2xv",
            "dWQubWRiLmNsaWNraG91c2UudjEuQWRkQ2x1c3Rlckhvc3RzUmVxdWVzdBoh",
            "LnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIn2C0+STAkMiPi9t",
            "YW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L2hv",
            "c3RzOmJhdGNoQ3JlYXRlOgEqstIqMAoXQWRkQ2x1c3Rlckhvc3RzTWV0YWRh",
            "dGESFWdvb2dsZS5wcm90b2J1Zi5FbXB0eRLuAQoLRGVsZXRlSG9zdHMSOS55",
            "YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuRGVsZXRlQ2x1c3Rlckhv",
            "c3RzUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9u",
            "IoABgtPkkwJDIj4vbWFuYWdlZC1jbGlja2hvdXNlL3YxL2NsdXN0ZXJzL3tj",
            "bHVzdGVyX2lkfS9ob3N0czpiYXRjaERlbGV0ZToBKrLSKjMKGkRlbGV0ZUNs",
            "dXN0ZXJIb3N0c01ldGFkYXRhEhVnb29nbGUucHJvdG9idWYuRW1wdHkSswEK",
            "CEdldFNoYXJkEjYueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkdl",
            "dENsdXN0ZXJTaGFyZFJlcXVlc3QaJS55YW5kZXguY2xvdWQubWRiLmNsaWNr",
            "aG91c2UudjEuU2hhcmQiSILT5JMCQhJAL21hbmFnZWQtY2xpY2tob3VzZS92",
            "MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH0vc2hhcmRzL3tzaGFyZF9uYW1lfRK+",
            "AQoKTGlzdFNoYXJkcxI4LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52",
            "MS5MaXN0Q2x1c3RlclNoYXJkc1JlcXVlc3QaOS55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuTGlzdENsdXN0ZXJTaGFyZHNSZXNwb25zZSI7gtPk",
            "kwI1EjMvbWFuYWdlZC1jbGlja2hvdXNlL3YxL2NsdXN0ZXJzL3tjbHVzdGVy",
            "X2lkfS9zaGFyZHMSyQEKCEFkZFNoYXJkEjYueWFuZGV4LmNsb3VkLm1kYi5j",
            "bGlja2hvdXNlLnYxLkFkZENsdXN0ZXJTaGFyZFJlcXVlc3QaIS55YW5kZXgu",
            "Y2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJigtPkkwI4IjMvbWFuYWdlZC1j",
            "bGlja2hvdXNlL3YxL2NsdXN0ZXJzL3tjbHVzdGVyX2lkfS9zaGFyZHM6ASqy",
            "0iogChdBZGRDbHVzdGVyU2hhcmRNZXRhZGF0YRIFU2hhcmQS3wEKC1VwZGF0",
            "ZVNoYXJkEjkueWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlVwZGF0",
            "ZUNsdXN0ZXJTaGFyZFJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9u",
            "Lk9wZXJhdGlvbiJygtPkkwJFMkAvbWFuYWdlZC1jbGlja2hvdXNlL3YxL2Ns",
            "dXN0ZXJzL3tjbHVzdGVyX2lkfS9zaGFyZHMve3NoYXJkX25hbWV9OgEqstIq",
            "IwoaVXBkYXRlQ2x1c3RlclNoYXJkTWV0YWRhdGESBVNoYXJkEuwBCgtEZWxl",
            "dGVTaGFyZBI5LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5EZWxl",
            "dGVDbHVzdGVyU2hhcmRSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlv",
            "bi5PcGVyYXRpb24if4LT5JMCQipAL21hbmFnZWQtY2xpY2tob3VzZS92MS9j",
            "bHVzdGVycy97Y2x1c3Rlcl9pZH0vc2hhcmRzL3tzaGFyZF9uYW1lfbLSKjMK",
            "GkRlbGV0ZUNsdXN0ZXJTaGFyZE1ldGFkYXRhEhVnb29nbGUucHJvdG9idWYu",
            "RW1wdHkSzQEKDUdldFNoYXJkR3JvdXASOy55YW5kZXguY2xvdWQubWRiLmNs",
            "aWNraG91c2UudjEuR2V0Q2x1c3RlclNoYXJkR3JvdXBSZXF1ZXN0GioueWFu",
            "ZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLlNoYXJkR3JvdXAiU4LT5JMC",
            "TRJLL21hbmFnZWQtY2xpY2tob3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9p",
            "ZH0vc2hhcmRHcm91cHMve3NoYXJkX2dyb3VwX25hbWV9EtIBCg9MaXN0U2hh",
            "cmRHcm91cHMSPS55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuTGlz",
            "dENsdXN0ZXJTaGFyZEdyb3Vwc1JlcXVlc3QaPi55YW5kZXguY2xvdWQubWRi",
            "LmNsaWNraG91c2UudjEuTGlzdENsdXN0ZXJTaGFyZEdyb3Vwc1Jlc3BvbnNl",
            "IkCC0+STAjoSOC9tYW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3RlcnMve2Ns",
            "dXN0ZXJfaWR9L3NoYXJkR3JvdXBzEusBChBDcmVhdGVTaGFyZEdyb3VwEj4u",
            "eWFuZGV4LmNsb3VkLm1kYi5jbGlja2hvdXNlLnYxLkNyZWF0ZUNsdXN0ZXJT",
            "aGFyZEdyb3VwUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uInSC0+STAj0iOC9tYW5hZ2VkLWNsaWNraG91c2UvdjEvY2x1c3Rl",
            "cnMve2NsdXN0ZXJfaWR9L3NoYXJkR3JvdXBzOgEqstIqLQofQ3JlYXRlQ2x1",
            "c3RlclNoYXJkR3JvdXBNZXRhZGF0YRIKU2hhcmRHcm91cBL/AQoQVXBkYXRl",
            "U2hhcmRHcm91cBI+LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5V",
            "cGRhdGVDbHVzdGVyU2hhcmRHcm91cFJlcXVlc3QaIS55YW5kZXguY2xvdWQu",
            "b3BlcmF0aW9uLk9wZXJhdGlvbiKHAYLT5JMCUDJLL21hbmFnZWQtY2xpY2to",
            "b3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH0vc2hhcmRHcm91cHMve3No",
            "YXJkX2dyb3VwX25hbWV9OgEqstIqLQofVXBkYXRlQ2x1c3RlclNoYXJkR3Jv",
            "dXBNZXRhZGF0YRIKU2hhcmRHcm91cBKHAgoQRGVsZXRlU2hhcmRHcm91cBI+",
            "LnlhbmRleC5jbG91ZC5tZGIuY2xpY2tob3VzZS52MS5EZWxldGVDbHVzdGVy",
            "U2hhcmRHcm91cFJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9w",
            "ZXJhdGlvbiKPAYLT5JMCTSpLL21hbmFnZWQtY2xpY2tob3VzZS92MS9jbHVz",
            "dGVycy97Y2x1c3Rlcl9pZH0vc2hhcmRHcm91cHMve3NoYXJkX2dyb3VwX25h",
            "bWV9stIqOAofRGVsZXRlQ2x1c3RlclNoYXJkR3JvdXBNZXRhZGF0YRIVZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5Eo4CChhDcmVhdGVFeHRlcm5hbERpY3Rpb25h",
            "cnkSRi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuQ3JlYXRlQ2x1",
            "c3RlckV4dGVybmFsRGljdGlvbmFyeVJlcXVlc3QaIS55YW5kZXguY2xvdWQu",
            "b3BlcmF0aW9uLk9wZXJhdGlvbiKGAYLT5JMCSiJFL21hbmFnZWQtY2xpY2to",
            "b3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH06Y3JlYXRlRXh0ZXJuYWxE",
            "aWN0aW9uYXJ5OgEqstIqMgonQ3JlYXRlQ2x1c3RlckV4dGVybmFsRGljdGlv",
            "bmFyeU1ldGFkYXRhEgdDbHVzdGVyEo4CChhEZWxldGVFeHRlcm5hbERpY3Rp",
            "b25hcnkSRi55YW5kZXguY2xvdWQubWRiLmNsaWNraG91c2UudjEuRGVsZXRl",
            "Q2x1c3RlckV4dGVybmFsRGljdGlvbmFyeVJlcXVlc3QaIS55YW5kZXguY2xv",
            "dWQub3BlcmF0aW9uLk9wZXJhdGlvbiKGAYLT5JMCSiJFL21hbmFnZWQtY2xp",
            "Y2tob3VzZS92MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH06ZGVsZXRlRXh0ZXJu",
            "YWxEaWN0aW9uYXJ5OgEqstIqMgonRGVsZXRlQ2x1c3RlckV4dGVybmFsRGlj",
            "dGlvbmFyeU1ldGFkYXRhEgdDbHVzdGVyQnMKInlhbmRleC5jbG91ZC5hcGku",
            "bWRiLmNsaWNraG91c2UudjFaTWdpdGh1Yi5jb20veWFuZGV4LWNsb3VkL2dv",
            "LWdlbnByb3RvL3lhbmRleC9jbG91ZC9tZGIvY2xpY2tob3VzZS92MTtjbGlj",
            "a2hvdXNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.BackupReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.UserReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseReflection.Descriptor, global::Yandex.Cloud.Mdb.Clickhouse.V1.MaintenanceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClustersRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClustersRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClustersResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClustersResponse.Parser, new[]{ "Clusters", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "Environment", "ConfigSpec", "DatabaseSpecs", "UserSpecs", "HostSpecs", "NetworkId", "ShardName", "ServiceAccountId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterRequest.Parser, new[]{ "ClusterId", "UpdateMask", "Description", "Labels", "ConfigSpec", "Name", "ServiceAccountId", "MaintenanceWindow" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StartClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.StartClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StartClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.StartClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StopClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.StopClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StopClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.StopClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.MoveClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.MoveClusterRequest.Parser, new[]{ "ClusterId", "DestinationFolderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.MoveClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.MoveClusterMetadata.Parser, new[]{ "ClusterId", "SourceFolderId", "DestinationFolderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterZookeeperRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterZookeeperRequest.Parser, new[]{ "ClusterId", "Resources", "HostSpecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterZookeeperMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterZookeeperMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.BackupClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.BackupClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.BackupClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.BackupClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.RestoreClusterRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.RestoreClusterRequest.Parser, new[]{ "BackupId", "Name", "Description", "Labels", "Environment", "ConfigSpec", "HostSpecs", "NetworkId", "FolderId", "ServiceAccountId" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.RestoreClusterMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.RestoreClusterMetadata.Parser, new[]{ "ClusterId", "BackupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Parser, new[]{ "ClusterId", "RescheduleType", "DelayedUntil" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceMetadata.Parser, new[]{ "ClusterId", "DelayedUntil" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord), global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord.Parser, new[]{ "Timestamp", "Message" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Parser, new[]{ "ClusterId", "ColumnFilter", "ServiceType", "FromTime", "ToTime", "PageSize", "PageToken" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsResponse.Parser, new[]{ "Logs", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamLogRecord), global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamLogRecord.Parser, new[]{ "Record", "NextRecordToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Parser, new[]{ "ClusterId", "ColumnFilter", "ServiceType", "FromTime", "ToTime", "RecordToken", "Filter" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterOperationsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterOperationsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterOperationsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterBackupsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterBackupsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterBackupsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterBackupsResponse.Parser, new[]{ "Backups", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterHostsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterHostsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterHostsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterHostsResponse.Parser, new[]{ "Hosts", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterHostsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterHostsRequest.Parser, new[]{ "ClusterId", "HostSpecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterHostsMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterHostsMetadata.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterHostsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterHostsRequest.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterHostsMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterHostsMetadata.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterShardRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardsResponse.Parser, new[]{ "Shards", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterShardRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName", "ConfigSpec", "HostSpecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterShardMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.AddClusterShardMetadata.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName", "UpdateMask", "ConfigSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardMetadata.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardMetadata.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterShardGroupRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.GetClusterShardGroupRequest.Parser, new[]{ "ClusterId", "ShardGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardGroupsRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardGroupsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardGroupsResponse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterShardGroupsResponse.Parser, new[]{ "ShardGroups", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterShardGroupRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterShardGroupRequest.Parser, new[]{ "ClusterId", "ShardGroupName", "Description", "ShardNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterShardGroupMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterShardGroupMetadata.Parser, new[]{ "ClusterId", "ShardGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardGroupRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardGroupRequest.Parser, new[]{ "ClusterId", "ShardGroupName", "UpdateMask", "Description", "ShardNames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardGroupMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.UpdateClusterShardGroupMetadata.Parser, new[]{ "ClusterId", "ShardGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardGroupRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardGroupRequest.Parser, new[]{ "ClusterId", "ShardGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardGroupMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterShardGroupMetadata.Parser, new[]{ "ClusterId", "ShardGroupName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterExternalDictionaryRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterExternalDictionaryRequest.Parser, new[]{ "ClusterId", "ExternalDictionary" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterExternalDictionaryMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.CreateClusterExternalDictionaryMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterExternalDictionaryRequest), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterExternalDictionaryRequest.Parser, new[]{ "ClusterId", "ExternalDictionaryName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterExternalDictionaryMetadata), global::Yandex.Cloud.Mdb.Clickhouse.V1.DeleteClusterExternalDictionaryMetadata.Parser, new[]{ "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec), global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser, new[]{ "ZoneId", "Type", "SubnetId", "AssignPublicIp", "ShardName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec), global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Parser, new[]{ "Version", "Clickhouse", "Zookeeper", "BackupWindowStart", "Access", "CloudStorage", "SqlDatabaseManagement", "SqlUserManagement", "AdminPassword" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper), global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper.Parser, new[]{ "Resources" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec), global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Parser, new[]{ "Clickhouse" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse), global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse.Parser, new[]{ "Config", "Resources", "Weight" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetClusterRequest : pb::IMessage<GetClusterRequest> {
    private static readonly pb::MessageParser<GetClusterRequest> _parser = new pb::MessageParser<GetClusterRequest>(() => new GetClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest(GetClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest Clone() {
      return new GetClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse Cluster resource to return.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClustersRequest : pb::IMessage<ListClustersRequest> {
    private static readonly pb::MessageParser<ListClustersRequest> _parser = new pb::MessageParser<ListClustersRequest>(() => new ListClustersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest(ListClustersRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest Clone() {
      return new ListClustersRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list ClickHouse clusters in.
    /// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClustersResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the [ListClustersResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Мust be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClustersResponse : pb::IMessage<ListClustersResponse> {
    private static readonly pb::MessageParser<ListClustersResponse> _parser = new pb::MessageParser<ListClustersResponse>(() => new ListClustersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse(ListClustersResponse other) : this() {
      clusters_ = other.clusters_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse Clone() {
      return new ListClustersResponse(this);
    }

    /// <summary>Field number for the "clusters" field.</summary>
    public const int ClustersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster> _repeated_clusters_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster> clusters_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster>();
    /// <summary>
    /// List of ClickHouse Cluster resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster> Clusters {
      get { return clusters_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
    /// list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clusters_.Equals(other.clusters_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clusters_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clusters_.WriteTo(output, _repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clusters_.CalculateSize(_repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersResponse other) {
      if (other == null) {
        return;
      }
      clusters_.Add(other.clusters_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterRequest : pb::IMessage<CreateClusterRequest> {
    private static readonly pb::MessageParser<CreateClusterRequest> _parser = new pb::MessageParser<CreateClusterRequest>(() => new CreateClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest(CreateClusterRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      databaseSpecs_ = other.databaseSpecs_.Clone();
      userSpecs_ = other.userSpecs_.Clone();
      hostSpecs_ = other.hostSpecs_.Clone();
      networkId_ = other.networkId_;
      shardName_ = other.shardName_;
      serviceAccountId_ = other.serviceAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest Clone() {
      return new CreateClusterRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create the ClickHouse cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the ClickHouse cluster. The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment environment_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified;
    /// <summary>
    /// Deployment environment of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec configSpec_;
    /// <summary>
    /// Configuration and resources for hosts that should be created for the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "database_specs" field.</summary>
    public const int DatabaseSpecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseSpec> _repeated_databaseSpecs_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseSpec> databaseSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseSpec>();
    /// <summary>
    /// Descriptions of databases to be created in the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.DatabaseSpec> DatabaseSpecs {
      get { return databaseSpecs_; }
    }

    /// <summary>Field number for the "user_specs" field.</summary>
    public const int UserSpecsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec> _repeated_userSpecs_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec> userSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec>();
    /// <summary>
    /// Descriptions of database users to be created in the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.UserSpec> UserSpecs {
      get { return userSpecs_; }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(74, global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec>();
    /// <summary>
    /// Individual configurations for hosts that should be created for the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 10;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network to create the cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 11;
    private string shardName_ = "";
    /// <summary>
    /// Name of the first shard in cluster. If not set, defaults to the value 'shard1'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 12;
    private string serviceAccountId_ = "";
    /// <summary>
    /// ID of the service account used for access to Yandex Object Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if(!databaseSpecs_.Equals(other.databaseSpecs_)) return false;
      if(!userSpecs_.Equals(other.userSpecs_)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (ShardName != other.ShardName) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) hash ^= Environment.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      hash ^= databaseSpecs_.GetHashCode();
      hash ^= userSpecs_.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Environment);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConfigSpec);
      }
      databaseSpecs_.WriteTo(output, _repeated_databaseSpecs_codec);
      userSpecs_.WriteTo(output, _repeated_userSpecs_codec);
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ShardName);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ServiceAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      size += databaseSpecs_.CalculateSize(_repeated_databaseSpecs_codec);
      size += userSpecs_.CalculateSize(_repeated_userSpecs_codec);
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        Environment = other.Environment;
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      databaseSpecs_.Add(other.databaseSpecs_);
      userSpecs_.Add(other.userSpecs_);
      hostSpecs_.Add(other.hostSpecs_);
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 40: {
            Environment = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 50: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 58: {
            databaseSpecs_.AddEntriesFrom(input, _repeated_databaseSpecs_codec);
            break;
          }
          case 66: {
            userSpecs_.AddEntriesFrom(input, _repeated_userSpecs_codec);
            break;
          }
          case 74: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
          case 82: {
            NetworkId = input.ReadString();
            break;
          }
          case 90: {
            ShardName = input.ReadString();
            break;
          }
          case 98: {
            ServiceAccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterMetadata : pb::IMessage<CreateClusterMetadata> {
    private static readonly pb::MessageParser<CreateClusterMetadata> _parser = new pb::MessageParser<CreateClusterMetadata>(() => new CreateClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata(CreateClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata Clone() {
      return new CreateClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterRequest : pb::IMessage<UpdateClusterRequest> {
    private static readonly pb::MessageParser<UpdateClusterRequest> _parser = new pb::MessageParser<UpdateClusterRequest>(() => new UpdateClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest(UpdateClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      name_ = other.name_;
      serviceAccountId_ = other.serviceAccountId_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest Clone() {
      return new UpdateClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse Cluster resource to update.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the ClickHouse Cluster resource should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// New description of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    ///
    /// The new set of labels will completely replace the old ones. To add a label, request the current
    /// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec configSpec_;
    /// <summary>
    /// New configuration and resources for hosts in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    /// <summary>
    /// New name for the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 7;
    private string serviceAccountId_ = "";
    /// <summary>
    /// ID of the service account used for access to Yandex Object Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 8;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.MaintenanceWindow maintenanceWindow_;
    /// <summary>
    /// Window of maintenance operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if (Name != other.Name) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (configSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ConfigSpec);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServiceAccountId);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.Mdb.Clickhouse.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 58: {
            ServiceAccountId = input.ReadString();
            break;
          }
          case 66: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.Mdb.Clickhouse.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterMetadata : pb::IMessage<UpdateClusterMetadata> {
    private static readonly pb::MessageParser<UpdateClusterMetadata> _parser = new pb::MessageParser<UpdateClusterMetadata>(() => new UpdateClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata(UpdateClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata Clone() {
      return new UpdateClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse Cluster resource that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterRequest : pb::IMessage<DeleteClusterRequest> {
    private static readonly pb::MessageParser<DeleteClusterRequest> _parser = new pb::MessageParser<DeleteClusterRequest>(() => new DeleteClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest(DeleteClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest Clone() {
      return new DeleteClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to delete.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterMetadata : pb::IMessage<DeleteClusterMetadata> {
    private static readonly pb::MessageParser<DeleteClusterMetadata> _parser = new pb::MessageParser<DeleteClusterMetadata>(() => new DeleteClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata(DeleteClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata Clone() {
      return new DeleteClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartClusterRequest : pb::IMessage<StartClusterRequest> {
    private static readonly pb::MessageParser<StartClusterRequest> _parser = new pb::MessageParser<StartClusterRequest>(() => new StartClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest(StartClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest Clone() {
      return new StartClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartClusterMetadata : pb::IMessage<StartClusterMetadata> {
    private static readonly pb::MessageParser<StartClusterMetadata> _parser = new pb::MessageParser<StartClusterMetadata>(() => new StartClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata(StartClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata Clone() {
      return new StartClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster being started.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopClusterRequest : pb::IMessage<StopClusterRequest> {
    private static readonly pb::MessageParser<StopClusterRequest> _parser = new pb::MessageParser<StopClusterRequest>(() => new StopClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest(StopClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest Clone() {
      return new StopClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopClusterMetadata : pb::IMessage<StopClusterMetadata> {
    private static readonly pb::MessageParser<StopClusterMetadata> _parser = new pb::MessageParser<StopClusterMetadata>(() => new StopClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata(StopClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata Clone() {
      return new StopClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster being stopped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveClusterRequest : pb::IMessage<MoveClusterRequest> {
    private static readonly pb::MessageParser<MoveClusterRequest> _parser = new pb::MessageParser<MoveClusterRequest>(() => new MoveClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest(MoveClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      destinationFolderId_ = other.destinationFolderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest Clone() {
      return new MoveClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to move.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_folder_id" field.</summary>
    public const int DestinationFolderIdFieldNumber = 2;
    private string destinationFolderId_ = "";
    /// <summary>
    /// ID of the destination folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFolderId {
      get { return destinationFolderId_; }
      set {
        destinationFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (DestinationFolderId != other.DestinationFolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (DestinationFolderId.Length != 0) hash ^= DestinationFolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (DestinationFolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationFolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (DestinationFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.DestinationFolderId.Length != 0) {
        DestinationFolderId = other.DestinationFolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            DestinationFolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveClusterMetadata : pb::IMessage<MoveClusterMetadata> {
    private static readonly pb::MessageParser<MoveClusterMetadata> _parser = new pb::MessageParser<MoveClusterMetadata>(() => new MoveClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata(MoveClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      sourceFolderId_ = other.sourceFolderId_;
      destinationFolderId_ = other.destinationFolderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata Clone() {
      return new MoveClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster being moved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_folder_id" field.</summary>
    public const int SourceFolderIdFieldNumber = 2;
    private string sourceFolderId_ = "";
    /// <summary>
    /// ID of the source folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceFolderId {
      get { return sourceFolderId_; }
      set {
        sourceFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_folder_id" field.</summary>
    public const int DestinationFolderIdFieldNumber = 3;
    private string destinationFolderId_ = "";
    /// <summary>
    /// ID of the destination folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFolderId {
      get { return destinationFolderId_; }
      set {
        destinationFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SourceFolderId != other.SourceFolderId) return false;
      if (DestinationFolderId != other.DestinationFolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SourceFolderId.Length != 0) hash ^= SourceFolderId.GetHashCode();
      if (DestinationFolderId.Length != 0) hash ^= DestinationFolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SourceFolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SourceFolderId);
      }
      if (DestinationFolderId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DestinationFolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SourceFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceFolderId);
      }
      if (DestinationFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SourceFolderId.Length != 0) {
        SourceFolderId = other.SourceFolderId;
      }
      if (other.DestinationFolderId.Length != 0) {
        DestinationFolderId = other.DestinationFolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SourceFolderId = input.ReadString();
            break;
          }
          case 26: {
            DestinationFolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterZookeeperRequest : pb::IMessage<AddClusterZookeeperRequest> {
    private static readonly pb::MessageParser<AddClusterZookeeperRequest> _parser = new pb::MessageParser<AddClusterZookeeperRequest>(() => new AddClusterZookeeperRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterZookeeperRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperRequest(AddClusterZookeeperRequest other) : this() {
      clusterId_ = other.clusterId_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperRequest Clone() {
      return new AddClusterZookeeperRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to modify.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to Zookeeper hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec>();
    /// <summary>
    /// Configuration of ZooKeeper hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterZookeeperRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterZookeeperRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (resources_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Resources);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterZookeeperRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 26: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterZookeeperMetadata : pb::IMessage<AddClusterZookeeperMetadata> {
    private static readonly pb::MessageParser<AddClusterZookeeperMetadata> _parser = new pb::MessageParser<AddClusterZookeeperMetadata>(() => new AddClusterZookeeperMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterZookeeperMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperMetadata(AddClusterZookeeperMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterZookeeperMetadata Clone() {
      return new AddClusterZookeeperMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterZookeeperMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterZookeeperMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterZookeeperMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BackupClusterRequest : pb::IMessage<BackupClusterRequest> {
    private static readonly pb::MessageParser<BackupClusterRequest> _parser = new pb::MessageParser<BackupClusterRequest>(() => new BackupClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest(BackupClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest Clone() {
      return new BackupClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to back up.
    /// To get the ClickHouse cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BackupClusterMetadata : pb::IMessage<BackupClusterMetadata> {
    private static readonly pb::MessageParser<BackupClusterMetadata> _parser = new pb::MessageParser<BackupClusterMetadata>(() => new BackupClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata(BackupClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata Clone() {
      return new BackupClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster that is being backed up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestoreClusterRequest : pb::IMessage<RestoreClusterRequest> {
    private static readonly pb::MessageParser<RestoreClusterRequest> _parser = new pb::MessageParser<RestoreClusterRequest>(() => new RestoreClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest(RestoreClusterRequest other) : this() {
      backupId_ = other.backupId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      hostSpecs_ = other.hostSpecs_.Clone();
      networkId_ = other.networkId_;
      folderId_ = other.folderId_;
      serviceAccountId_ = other.serviceAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest Clone() {
      return new RestoreClusterRequest(this);
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 1;
    private string backupId_ = "";
    /// <summary>
    /// ID of the backup to create a cluster from.
    /// To get the backup ID, use a [ClusterService.ListBackups] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the new ClickHouse cluster. The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the new ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the ClickHouse cluster as `key:value` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment environment_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified;
    /// <summary>
    /// Deployment environment of the new ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec configSpec_;
    /// <summary>
    /// Configuration for the ClickHouse cluster to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec>();
    /// <summary>
    /// Configurations for ClickHouse hosts that should be created for
    /// the cluster that is being created from the backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 8;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network to create the ClickHouse cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 9;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create the ClickHouse cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 10;
    private string serviceAccountId_ = "";
    /// <summary>
    /// ID of the service account used for access to Yandex Object Storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackupId != other.BackupId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (FolderId != other.FolderId) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) hash ^= Environment.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Environment);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConfigSpec);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetworkId);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FolderId);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ServiceAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment.Unspecified) {
        Environment = other.Environment;
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      hostSpecs_.Add(other.hostSpecs_);
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 40: {
            Environment = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 50: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 58: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
          case 66: {
            NetworkId = input.ReadString();
            break;
          }
          case 74: {
            FolderId = input.ReadString();
            break;
          }
          case 82: {
            ServiceAccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestoreClusterMetadata : pb::IMessage<RestoreClusterMetadata> {
    private static readonly pb::MessageParser<RestoreClusterMetadata> _parser = new pb::MessageParser<RestoreClusterMetadata>(() => new RestoreClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata(RestoreClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      backupId_ = other.backupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata Clone() {
      return new RestoreClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the new ClickHouse cluster that is being created from a backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 2;
    private string backupId_ = "";
    /// <summary>
    /// ID of the backup that is being used for creating a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (BackupId != other.BackupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (BackupId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BackupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            BackupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RescheduleMaintenanceRequest : pb::IMessage<RescheduleMaintenanceRequest> {
    private static readonly pb::MessageParser<RescheduleMaintenanceRequest> _parser = new pb::MessageParser<RescheduleMaintenanceRequest>(() => new RescheduleMaintenanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RescheduleMaintenanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceRequest(RescheduleMaintenanceRequest other) : this() {
      clusterId_ = other.clusterId_;
      rescheduleType_ = other.rescheduleType_;
      delayedUntil_ = other.delayedUntil_ != null ? other.delayedUntil_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceRequest Clone() {
      return new RescheduleMaintenanceRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// Required. ID of the ClickHouse cluster to maintenance reschedule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reschedule_type" field.</summary>
    public const int RescheduleTypeFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType rescheduleType_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType.Unspecified;
    /// <summary>
    /// Required. The type of reschedule request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType RescheduleType {
      get { return rescheduleType_; }
      set {
        rescheduleType_ = value;
      }
    }

    /// <summary>Field number for the "delayed_until" field.</summary>
    public const int DelayedUntilFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp delayedUntil_;
    /// <summary>
    /// The time for SPECIFIC_TIME reschedule. Limited by two weeks since first time scheduled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DelayedUntil {
      get { return delayedUntil_; }
      set {
        delayedUntil_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RescheduleMaintenanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RescheduleMaintenanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (RescheduleType != other.RescheduleType) return false;
      if (!object.Equals(DelayedUntil, other.DelayedUntil)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (RescheduleType != global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType.Unspecified) hash ^= RescheduleType.GetHashCode();
      if (delayedUntil_ != null) hash ^= DelayedUntil.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (RescheduleType != global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) RescheduleType);
      }
      if (delayedUntil_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DelayedUntil);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (RescheduleType != global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RescheduleType);
      }
      if (delayedUntil_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelayedUntil);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RescheduleMaintenanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.RescheduleType != global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType.Unspecified) {
        RescheduleType = other.RescheduleType;
      }
      if (other.delayedUntil_ != null) {
        if (delayedUntil_ == null) {
          DelayedUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DelayedUntil.MergeFrom(other.DelayedUntil);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            RescheduleType = (global::Yandex.Cloud.Mdb.Clickhouse.V1.RescheduleMaintenanceRequest.Types.RescheduleType) input.ReadEnum();
            break;
          }
          case 26: {
            if (delayedUntil_ == null) {
              DelayedUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DelayedUntil);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RescheduleMaintenanceRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum RescheduleType {
        [pbr::OriginalName("RESCHEDULE_TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("IMMEDIATE")] Immediate = 1,
        [pbr::OriginalName("NEXT_AVAILABLE_WINDOW")] NextAvailableWindow = 2,
        [pbr::OriginalName("SPECIFIC_TIME")] SpecificTime = 3,
      }

    }
    #endregion

  }

  internal sealed partial class RescheduleMaintenanceMetadata : pb::IMessage<RescheduleMaintenanceMetadata> {
    private static readonly pb::MessageParser<RescheduleMaintenanceMetadata> _parser = new pb::MessageParser<RescheduleMaintenanceMetadata>(() => new RescheduleMaintenanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RescheduleMaintenanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceMetadata(RescheduleMaintenanceMetadata other) : this() {
      clusterId_ = other.clusterId_;
      delayedUntil_ = other.delayedUntil_ != null ? other.delayedUntil_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RescheduleMaintenanceMetadata Clone() {
      return new RescheduleMaintenanceMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// Required. ID of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delayed_until" field.</summary>
    public const int DelayedUntilFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp delayedUntil_;
    /// <summary>
    /// Required. New time of the planned maintenance. Can be in the past for rescheduled to "IMMEDIATE".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp DelayedUntil {
      get { return delayedUntil_; }
      set {
        delayedUntil_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RescheduleMaintenanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RescheduleMaintenanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(DelayedUntil, other.DelayedUntil)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (delayedUntil_ != null) hash ^= DelayedUntil.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (delayedUntil_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DelayedUntil);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (delayedUntil_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DelayedUntil);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RescheduleMaintenanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.delayedUntil_ != null) {
        if (delayedUntil_ == null) {
          DelayedUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        DelayedUntil.MergeFrom(other.DelayedUntil);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 34: {
            if (delayedUntil_ == null) {
              DelayedUntil = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(DelayedUntil);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LogRecord : pb::IMessage<LogRecord> {
    private static readonly pb::MessageParser<LogRecord> _parser = new pb::MessageParser<LogRecord>(() => new LogRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord(LogRecord other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      message_ = other.message_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord Clone() {
      return new LogRecord(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_message_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> message_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Contents of the log record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Message {
      get { return message_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!Message.Equals(other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      message_.WriteTo(output, _map_message_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += message_.CalculateSize(_map_message_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogRecord other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      message_.Add(other.message_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            message_.AddEntriesFrom(input, _map_message_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterLogsRequest : pb::IMessage<ListClusterLogsRequest> {
    private static readonly pb::MessageParser<ListClusterLogsRequest> _parser = new pb::MessageParser<ListClusterLogsRequest>(() => new ListClusterLogsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterLogsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest(ListClusterLogsRequest other) : this() {
      clusterId_ = other.clusterId_;
      columnFilter_ = other.columnFilter_.Clone();
      serviceType_ = other.serviceType_;
      fromTime_ = other.fromTime_ != null ? other.fromTime_.Clone() : null;
      toTime_ = other.toTime_ != null ? other.toTime_.Clone() : null;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest Clone() {
      return new ListClusterLogsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to request logs for.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_filter" field.</summary>
    public const int ColumnFilterFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnFilter_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnFilter_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Columns from logs table to request.
    /// If no columns are specified, entire log records are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColumnFilter {
      get { return columnFilter_; }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType serviceType_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType.Unspecified;
    /// <summary>
    /// Type of the service to request logs about.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    /// <summary>Field number for the "from_time" field.</summary>
    public const int FromTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fromTime_;
    /// <summary>
    /// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FromTime {
      get { return fromTime_; }
      set {
        fromTime_ = value;
      }
    }

    /// <summary>Field number for the "to_time" field.</summary>
    public const int ToTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp toTime_;
    /// <summary>
    /// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ToTime {
      get { return toTime_; }
      set {
        toTime_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterLogsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 7;
    private string pageToken_ = "";
    /// <summary>
    /// Page token.  To get the next page of results, set [page_token] to the [ListClusterLogsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterLogsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterLogsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!columnFilter_.Equals(other.columnFilter_)) return false;
      if (ServiceType != other.ServiceType) return false;
      if (!object.Equals(FromTime, other.FromTime)) return false;
      if (!object.Equals(ToTime, other.ToTime)) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= columnFilter_.GetHashCode();
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType.Unspecified) hash ^= ServiceType.GetHashCode();
      if (fromTime_ != null) hash ^= FromTime.GetHashCode();
      if (toTime_ != null) hash ^= ToTime.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      columnFilter_.WriteTo(output, _repeated_columnFilter_codec);
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
      if (fromTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FromTime);
      }
      if (toTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ToTime);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += columnFilter_.CalculateSize(_repeated_columnFilter_codec);
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      if (fromTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromTime);
      }
      if (toTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToTime);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterLogsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      columnFilter_.Add(other.columnFilter_);
      if (other.ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType.Unspecified) {
        ServiceType = other.ServiceType;
      }
      if (other.fromTime_ != null) {
        if (fromTime_ == null) {
          FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FromTime.MergeFrom(other.FromTime);
      }
      if (other.toTime_ != null) {
        if (toTime_ == null) {
          ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ToTime.MergeFrom(other.ToTime);
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            columnFilter_.AddEntriesFrom(input, _repeated_columnFilter_codec);
            break;
          }
          case 24: {
            ServiceType = (global::Yandex.Cloud.Mdb.Clickhouse.V1.ListClusterLogsRequest.Types.ServiceType) input.ReadEnum();
            break;
          }
          case 34: {
            if (fromTime_ == null) {
              FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FromTime);
            break;
          }
          case 42: {
            if (toTime_ == null) {
              ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ToTime);
            break;
          }
          case 48: {
            PageSize = input.ReadInt64();
            break;
          }
          case 58: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListClusterLogsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum ServiceType {
        [pbr::OriginalName("SERVICE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Logs of ClickHouse activity.
        /// </summary>
        [pbr::OriginalName("CLICKHOUSE")] Clickhouse = 1,
      }

    }
    #endregion

  }

  internal sealed partial class ListClusterLogsResponse : pb::IMessage<ListClusterLogsResponse> {
    private static readonly pb::MessageParser<ListClusterLogsResponse> _parser = new pb::MessageParser<ListClusterLogsResponse>(() => new ListClusterLogsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterLogsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse(ListClusterLogsResponse other) : this() {
      logs_ = other.logs_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse Clone() {
      return new ListClusterLogsResponse(this);
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord> logs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord>();
    /// <summary>
    /// Requested log records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// This value is interchangeable with the [StreamLogRecord.next_record_token] from StreamLogs method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterLogsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterLogsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logs_.Equals(other.logs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterLogsResponse other) {
      if (other == null) {
        return;
      }
      logs_.Add(other.logs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StreamLogRecord : pb::IMessage<StreamLogRecord> {
    private static readonly pb::MessageParser<StreamLogRecord> _parser = new pb::MessageParser<StreamLogRecord>(() => new StreamLogRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamLogRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamLogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamLogRecord(StreamLogRecord other) : this() {
      record_ = other.record_ != null ? other.record_.Clone() : null;
      nextRecordToken_ = other.nextRecordToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamLogRecord Clone() {
      return new StreamLogRecord(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord record_;
    /// <summary>
    /// One of the requested log records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    /// <summary>Field number for the "next_record_token" field.</summary>
    public const int NextRecordTokenFieldNumber = 2;
    private string nextRecordToken_ = "";
    /// <summary>
    /// This token allows you to continue streaming logs starting from the exact
    /// same record. To continue streaming, specify value of [next_record_token[
    /// as value for the [StreamClusterLogsRequest.record_token] parameter in the next StreamLogs request.
    /// This value is interchangeable with the [ListClusterLogsResponse.next_page_token] from ListLogs method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextRecordToken {
      get { return nextRecordToken_; }
      set {
        nextRecordToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamLogRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamLogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Record, other.Record)) return false;
      if (NextRecordToken != other.NextRecordToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (record_ != null) hash ^= Record.GetHashCode();
      if (NextRecordToken.Length != 0) hash ^= NextRecordToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
      if (NextRecordToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextRecordToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (NextRecordToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextRecordToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamLogRecord other) {
      if (other == null) {
        return;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          Record = new global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord();
        }
        Record.MergeFrom(other.Record);
      }
      if (other.NextRecordToken.Length != 0) {
        NextRecordToken = other.NextRecordToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (record_ == null) {
              Record = new global::Yandex.Cloud.Mdb.Clickhouse.V1.LogRecord();
            }
            input.ReadMessage(Record);
            break;
          }
          case 18: {
            NextRecordToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StreamClusterLogsRequest : pb::IMessage<StreamClusterLogsRequest> {
    private static readonly pb::MessageParser<StreamClusterLogsRequest> _parser = new pb::MessageParser<StreamClusterLogsRequest>(() => new StreamClusterLogsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamClusterLogsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamClusterLogsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamClusterLogsRequest(StreamClusterLogsRequest other) : this() {
      clusterId_ = other.clusterId_;
      columnFilter_ = other.columnFilter_.Clone();
      serviceType_ = other.serviceType_;
      fromTime_ = other.fromTime_ != null ? other.fromTime_.Clone() : null;
      toTime_ = other.toTime_ != null ? other.toTime_.Clone() : null;
      recordToken_ = other.recordToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamClusterLogsRequest Clone() {
      return new StreamClusterLogsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// Required. ID of the ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_filter" field.</summary>
    public const int ColumnFilterFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnFilter_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnFilter_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Columns from logs table to get in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColumnFilter {
      get { return columnFilter_; }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType serviceType_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    /// <summary>Field number for the "from_time" field.</summary>
    public const int FromTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fromTime_;
    /// <summary>
    /// Start timestamp for the logs request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FromTime {
      get { return fromTime_; }
      set {
        fromTime_ = value;
      }
    }

    /// <summary>Field number for the "to_time" field.</summary>
    public const int ToTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp toTime_;
    /// <summary>
    /// End timestamp for the logs request.
    /// If this field is not set, all existing logs will be sent and then the new ones as
    /// they appear. In essence it has `tail -f` semantics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ToTime {
      get { return toTime_; }
      set {
        toTime_ = value;
      }
    }

    /// <summary>Field number for the "record_token" field.</summary>
    public const int RecordTokenFieldNumber = 6;
    private string recordToken_ = "";
    /// <summary>
    /// Record token. Set [record_token] to the [StreamLogRecord.next_record_token] returned by a previous StreamLogs
    /// request to start streaming from next log record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RecordToken {
      get { return recordToken_; }
      set {
        recordToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 7;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently filtering can be applied to the [LogRecord.logs.message.hostname], [LogRecord.logs.message.severity] fields.
    /// 2. A conditional operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Must be 1-63 characters long and match the regular expression `^[a-z0-9.-]{1,61}$`.
    /// Examples of a filter:
    /// - `message.hostname='node1.db.cloud.yandex.net'`
    /// - `message.severity IN ('Error', 'Fatal') AND message.hostname != 'node2.db.cloud.yandex.net'`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamClusterLogsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamClusterLogsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!columnFilter_.Equals(other.columnFilter_)) return false;
      if (ServiceType != other.ServiceType) return false;
      if (!object.Equals(FromTime, other.FromTime)) return false;
      if (!object.Equals(ToTime, other.ToTime)) return false;
      if (RecordToken != other.RecordToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= columnFilter_.GetHashCode();
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType.Unspecified) hash ^= ServiceType.GetHashCode();
      if (fromTime_ != null) hash ^= FromTime.GetHashCode();
      if (toTime_ != null) hash ^= ToTime.GetHashCode();
      if (RecordToken.Length != 0) hash ^= RecordToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      columnFilter_.WriteTo(output, _repeated_columnFilter_codec);
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
      if (fromTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FromTime);
      }
      if (toTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ToTime);
      }
      if (RecordToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RecordToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += columnFilter_.CalculateSize(_repeated_columnFilter_codec);
      if (ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      if (fromTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromTime);
      }
      if (toTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToTime);
      }
      if (RecordToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RecordToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamClusterLogsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      columnFilter_.Add(other.columnFilter_);
      if (other.ServiceType != global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType.Unspecified) {
        ServiceType = other.ServiceType;
      }
      if (other.fromTime_ != null) {
        if (fromTime_ == null) {
          FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FromTime.MergeFrom(other.FromTime);
      }
      if (other.toTime_ != null) {
        if (toTime_ == null) {
          ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ToTime.MergeFrom(other.ToTime);
      }
      if (other.RecordToken.Length != 0) {
        RecordToken = other.RecordToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            columnFilter_.AddEntriesFrom(input, _repeated_columnFilter_codec);
            break;
          }
          case 24: {
            ServiceType = (global::Yandex.Cloud.Mdb.Clickhouse.V1.StreamClusterLogsRequest.Types.ServiceType) input.ReadEnum();
            break;
          }
          case 34: {
            if (fromTime_ == null) {
              FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FromTime);
            break;
          }
          case 42: {
            if (toTime_ == null) {
              ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ToTime);
            break;
          }
          case 50: {
            RecordToken = input.ReadString();
            break;
          }
          case 58: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the StreamClusterLogsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum ServiceType {
        [pbr::OriginalName("SERVICE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Logs of ClickHouse activity.
        /// </summary>
        [pbr::OriginalName("CLICKHOUSE")] Clickhouse = 1,
      }

    }
    #endregion

  }

  internal sealed partial class ListClusterOperationsRequest : pb::IMessage<ListClusterOperationsRequest> {
    private static readonly pb::MessageParser<ListClusterOperationsRequest> _parser = new pb::MessageParser<ListClusterOperationsRequest>(() => new ListClusterOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest(ListClusterOperationsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest Clone() {
      return new ListClusterOperationsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse Cluster resource to list operations for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token.  To get the next page of results, set [page_token] to the [ListClusterOperationsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterOperationsResponse : pb::IMessage<ListClusterOperationsResponse> {
    private static readonly pb::MessageParser<ListClusterOperationsResponse> _parser = new pb::MessageParser<ListClusterOperationsResponse>(() => new ListClusterOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse(ListClusterOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse Clone() {
      return new ListClusterOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of Operation resources for the specified ClickHouse cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterBackupsRequest : pb::IMessage<ListClusterBackupsRequest> {
    private static readonly pb::MessageParser<ListClusterBackupsRequest> _parser = new pb::MessageParser<ListClusterBackupsRequest>(() => new ListClusterBackupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterBackupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest(ListClusterBackupsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest Clone() {
      return new ListClusterBackupsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterBackupsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListClusterBackupsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterBackupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterBackupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterBackupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterBackupsResponse : pb::IMessage<ListClusterBackupsResponse> {
    private static readonly pb::MessageParser<ListClusterBackupsResponse> _parser = new pb::MessageParser<ListClusterBackupsResponse>(() => new ListClusterBackupsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterBackupsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse(ListClusterBackupsResponse other) : this() {
      backups_ = other.backups_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse Clone() {
      return new ListClusterBackupsResponse(this);
    }

    /// <summary>Field number for the "backups" field.</summary>
    public const int BackupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Backup> _repeated_backups_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Backup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Backup> backups_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Backup>();
    /// <summary>
    /// List of ClickHouse Backup resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Backup> Backups {
      get { return backups_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterBackupsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterBackupsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!backups_.Equals(other.backups_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= backups_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      backups_.WriteTo(output, _repeated_backups_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += backups_.CalculateSize(_repeated_backups_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterBackupsResponse other) {
      if (other == null) {
        return;
      }
      backups_.Add(other.backups_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            backups_.AddEntriesFrom(input, _repeated_backups_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterHostsRequest : pb::IMessage<ListClusterHostsRequest> {
    private static readonly pb::MessageParser<ListClusterHostsRequest> _parser = new pb::MessageParser<ListClusterHostsRequest>(() => new ListClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest(ListClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest Clone() {
      return new ListClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster.
    /// To get the ClickHouse cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterHostsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token.  To get the next page of results, set [page_token] to the [ListClusterHostsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterHostsResponse : pb::IMessage<ListClusterHostsResponse> {
    private static readonly pb::MessageParser<ListClusterHostsResponse> _parser = new pb::MessageParser<ListClusterHostsResponse>(() => new ListClusterHostsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterHostsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse(ListClusterHostsResponse other) : this() {
      hosts_ = other.hosts_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse Clone() {
      return new ListClusterHostsResponse(this);
    }

    /// <summary>Field number for the "hosts" field.</summary>
    public const int HostsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Host> _repeated_hosts_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Host> hosts_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Host>();
    /// <summary>
    /// Requested list of hosts for the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Host> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterHostsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterHostsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hosts_.Equals(other.hosts_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hosts_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hosts_.WriteTo(output, _repeated_hosts_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hosts_.CalculateSize(_repeated_hosts_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterHostsResponse other) {
      if (other == null) {
        return;
      }
      hosts_.Add(other.hosts_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterHostsRequest : pb::IMessage<AddClusterHostsRequest> {
    private static readonly pb::MessageParser<AddClusterHostsRequest> _parser = new pb::MessageParser<AddClusterHostsRequest>(() => new AddClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest(AddClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest Clone() {
      return new AddClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to add hosts to.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec>();
    /// <summary>
    /// Configurations for ClickHouse hosts that should be added to the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterHostsMetadata : pb::IMessage<AddClusterHostsMetadata> {
    private static readonly pb::MessageParser<AddClusterHostsMetadata> _parser = new pb::MessageParser<AddClusterHostsMetadata>(() => new AddClusterHostsMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterHostsMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata(AddClusterHostsMetadata other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata Clone() {
      return new AddClusterHostsMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to which the hosts are being added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts that are being added to the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterHostsMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterHostsMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterHostsMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterHostsRequest : pb::IMessage<DeleteClusterHostsRequest> {
    private static readonly pb::MessageParser<DeleteClusterHostsRequest> _parser = new pb::MessageParser<DeleteClusterHostsRequest>(() => new DeleteClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest(DeleteClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest Clone() {
      return new DeleteClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to remove hosts from.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterHostsMetadata : pb::IMessage<DeleteClusterHostsMetadata> {
    private static readonly pb::MessageParser<DeleteClusterHostsMetadata> _parser = new pb::MessageParser<DeleteClusterHostsMetadata>(() => new DeleteClusterHostsMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterHostsMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata(DeleteClusterHostsMetadata other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata Clone() {
      return new DeleteClusterHostsMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to remove hosts from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts that are being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterHostsMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterHostsMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterHostsMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetClusterShardRequest : pb::IMessage<GetClusterShardRequest> {
    private static readonly pb::MessageParser<GetClusterShardRequest> _parser = new pb::MessageParser<GetClusterShardRequest>(() => new GetClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest(GetClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest Clone() {
      return new GetClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the shard belongs to.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// To get the name of the database, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard to request information about.
    /// To get the name of a shard, use a [ClusterService.ListShards] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardsRequest : pb::IMessage<ListClusterShardsRequest> {
    private static readonly pb::MessageParser<ListClusterShardsRequest> _parser = new pb::MessageParser<ListClusterShardsRequest>(() => new ListClusterShardsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest(ListClusterShardsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest Clone() {
      return new ListClusterShardsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to list shards in.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token.  to get the next page of results, set [page_token] to the [ListClusterShardsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardsResponse : pb::IMessage<ListClusterShardsResponse> {
    private static readonly pb::MessageParser<ListClusterShardsResponse> _parser = new pb::MessageParser<ListClusterShardsResponse>(() => new ListClusterShardsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse(ListClusterShardsResponse other) : this() {
      shards_ = other.shards_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse Clone() {
      return new ListClusterShardsResponse(this);
    }

    /// <summary>Field number for the "shards" field.</summary>
    public const int ShardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard> _repeated_shards_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard> shards_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard>();
    /// <summary>
    /// List of ClickHouse shards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.Shard> Shards {
      get { return shards_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
    /// list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shards_.Equals(other.shards_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shards_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shards_.WriteTo(output, _repeated_shards_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shards_.CalculateSize(_repeated_shards_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardsResponse other) {
      if (other == null) {
        return;
      }
      shards_.Add(other.shards_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shards_.AddEntriesFrom(input, _repeated_shards_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterShardRequest : pb::IMessage<AddClusterShardRequest> {
    private static readonly pb::MessageParser<AddClusterShardRequest> _parser = new pb::MessageParser<AddClusterShardRequest>(() => new AddClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest(AddClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest Clone() {
      return new AddClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to add a shard to.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name for the new shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec configSpec_;
    /// <summary>
    /// Configuration of the new shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(34, global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec>();
    /// <summary>
    /// Configurations for ClickHouse hosts that should be created with the shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ConfigSpec);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
          case 26: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 34: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterShardMetadata : pb::IMessage<AddClusterShardMetadata> {
    private static readonly pb::MessageParser<AddClusterShardMetadata> _parser = new pb::MessageParser<AddClusterShardMetadata>(() => new AddClusterShardMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterShardMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata(AddClusterShardMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata Clone() {
      return new AddClusterShardMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that a shard is being added to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterShardMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterShardMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterShardMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterShardRequest : pb::IMessage<UpdateClusterShardRequest> {
    private static readonly pb::MessageParser<UpdateClusterShardRequest> _parser = new pb::MessageParser<UpdateClusterShardRequest>(() => new UpdateClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardRequest(UpdateClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardRequest Clone() {
      return new UpdateClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster the shard belongs to.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard to be updated.
    /// To get the name of a shard, use a [ClusterService.ListShards] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which attributes of the ClickHouse shard should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec configSpec_;
    /// <summary>
    /// New configuration for the specified shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ConfigSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 34: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterShardMetadata : pb::IMessage<UpdateClusterShardMetadata> {
    private static readonly pb::MessageParser<UpdateClusterShardMetadata> _parser = new pb::MessageParser<UpdateClusterShardMetadata>(() => new UpdateClusterShardMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterShardMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardMetadata(UpdateClusterShardMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardMetadata Clone() {
      return new UpdateClusterShardMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that contains the shard being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterShardMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterShardMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterShardMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardRequest : pb::IMessage<DeleteClusterShardRequest> {
    private static readonly pb::MessageParser<DeleteClusterShardRequest> _parser = new pb::MessageParser<DeleteClusterShardRequest>(() => new DeleteClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest(DeleteClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest Clone() {
      return new DeleteClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster the shard belongs to.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard to be deleted.
    /// To get the name of a shard, use a [ClusterService.ListShards] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardMetadata : pb::IMessage<DeleteClusterShardMetadata> {
    private static readonly pb::MessageParser<DeleteClusterShardMetadata> _parser = new pb::MessageParser<DeleteClusterShardMetadata>(() => new DeleteClusterShardMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata(DeleteClusterShardMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata Clone() {
      return new DeleteClusterShardMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that contains the shard being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetClusterShardGroupRequest : pb::IMessage<GetClusterShardGroupRequest> {
    private static readonly pb::MessageParser<GetClusterShardGroupRequest> _parser = new pb::MessageParser<GetClusterShardGroupRequest>(() => new GetClusterShardGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterShardGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardGroupRequest(GetClusterShardGroupRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardGroupRequest Clone() {
      return new GetClusterShardGroupRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the shard group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name of the shard group to request information about.
    /// To get the name of a shard group , use a [ClusterService.ListShardGroups] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterShardGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterShardGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterShardGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardGroupsRequest : pb::IMessage<ListClusterShardGroupsRequest> {
    private static readonly pb::MessageParser<ListClusterShardGroupsRequest> _parser = new pb::MessageParser<ListClusterShardGroupsRequest>(() => new ListClusterShardGroupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardGroupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsRequest(ListClusterShardGroupsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsRequest Clone() {
      return new ListClusterShardGroupsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the shard group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterShardGroupsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the [ListClusterShardGroupsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardGroupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardGroupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardGroupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardGroupsResponse : pb::IMessage<ListClusterShardGroupsResponse> {
    private static readonly pb::MessageParser<ListClusterShardGroupsResponse> _parser = new pb::MessageParser<ListClusterShardGroupsResponse>(() => new ListClusterShardGroupsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardGroupsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsResponse(ListClusterShardGroupsResponse other) : this() {
      shardGroups_ = other.shardGroups_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardGroupsResponse Clone() {
      return new ListClusterShardGroupsResponse(this);
    }

    /// <summary>Field number for the "shard_groups" field.</summary>
    public const int ShardGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardGroup> _repeated_shardGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardGroup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardGroup> shardGroups_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardGroup>();
    /// <summary>
    /// List of ClickHouse Cluster shard groups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardGroup> ShardGroups {
      get { return shardGroups_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterShardGroupsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterShardGroupsRequest.page_token] parameter in the next list request. Each subsequent
    /// list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardGroupsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardGroupsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shardGroups_.Equals(other.shardGroups_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shardGroups_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shardGroups_.WriteTo(output, _repeated_shardGroups_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shardGroups_.CalculateSize(_repeated_shardGroups_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardGroupsResponse other) {
      if (other == null) {
        return;
      }
      shardGroups_.Add(other.shardGroups_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shardGroups_.AddEntriesFrom(input, _repeated_shardGroups_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterShardGroupRequest : pb::IMessage<CreateClusterShardGroupRequest> {
    private static readonly pb::MessageParser<CreateClusterShardGroupRequest> _parser = new pb::MessageParser<CreateClusterShardGroupRequest>(() => new CreateClusterShardGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterShardGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupRequest(CreateClusterShardGroupRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      description_ = other.description_;
      shardNames_ = other.shardNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupRequest Clone() {
      return new CreateClusterShardGroupRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to add a shard group to.
    /// To get the ClickHouse cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name for the new shard group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the ClickHouse cluster shard group. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_names" field.</summary>
    public const int ShardNamesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_shardNames_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> shardNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of shard names that belongs to the new group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ShardNames {
      get { return shardNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterShardGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterShardGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      if (Description != other.Description) return false;
      if(!shardNames_.Equals(other.shardNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= shardNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      shardNames_.WriteTo(output, _repeated_shardNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += shardNames_.CalculateSize(_repeated_shardNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterShardGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      shardNames_.Add(other.shardNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            shardNames_.AddEntriesFrom(input, _repeated_shardNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterShardGroupMetadata : pb::IMessage<CreateClusterShardGroupMetadata> {
    private static readonly pb::MessageParser<CreateClusterShardGroupMetadata> _parser = new pb::MessageParser<CreateClusterShardGroupMetadata>(() => new CreateClusterShardGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterShardGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupMetadata(CreateClusterShardGroupMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterShardGroupMetadata Clone() {
      return new CreateClusterShardGroupMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to add a shard group to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name for the new shard group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterShardGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterShardGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterShardGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterShardGroupRequest : pb::IMessage<UpdateClusterShardGroupRequest> {
    private static readonly pb::MessageParser<UpdateClusterShardGroupRequest> _parser = new pb::MessageParser<UpdateClusterShardGroupRequest>(() => new UpdateClusterShardGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterShardGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupRequest(UpdateClusterShardGroupRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      description_ = other.description_;
      shardNames_ = other.shardNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupRequest Clone() {
      return new UpdateClusterShardGroupRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that contains the shard group being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name of the shard group that should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which attributes of the ClickHouse shard group should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description of the ClickHouse cluster shard group. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_names" field.</summary>
    public const int ShardNamesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_shardNames_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> shardNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Updated list of shard names that belongs to the new group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ShardNames {
      get { return shardNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterShardGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterShardGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Description != other.Description) return false;
      if(!shardNames_.Equals(other.shardNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= shardNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      shardNames_.WriteTo(output, _repeated_shardNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += shardNames_.CalculateSize(_repeated_shardNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterShardGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      shardNames_.Add(other.shardNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            shardNames_.AddEntriesFrom(input, _repeated_shardNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterShardGroupMetadata : pb::IMessage<UpdateClusterShardGroupMetadata> {
    private static readonly pb::MessageParser<UpdateClusterShardGroupMetadata> _parser = new pb::MessageParser<UpdateClusterShardGroupMetadata>(() => new UpdateClusterShardGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterShardGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupMetadata(UpdateClusterShardGroupMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterShardGroupMetadata Clone() {
      return new UpdateClusterShardGroupMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that contains the shard group being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name of the shard group that should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterShardGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterShardGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterShardGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardGroupRequest : pb::IMessage<DeleteClusterShardGroupRequest> {
    private static readonly pb::MessageParser<DeleteClusterShardGroupRequest> _parser = new pb::MessageParser<DeleteClusterShardGroupRequest>(() => new DeleteClusterShardGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupRequest(DeleteClusterShardGroupRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupRequest Clone() {
      return new DeleteClusterShardGroupRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster the shard group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name of the shard group that should be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardGroupMetadata : pb::IMessage<DeleteClusterShardGroupMetadata> {
    private static readonly pb::MessageParser<DeleteClusterShardGroupMetadata> _parser = new pb::MessageParser<DeleteClusterShardGroupMetadata>(() => new DeleteClusterShardGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupMetadata(DeleteClusterShardGroupMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardGroupName_ = other.shardGroupName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardGroupMetadata Clone() {
      return new DeleteClusterShardGroupMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster the shard group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_group_name" field.</summary>
    public const int ShardGroupNameFieldNumber = 2;
    private string shardGroupName_ = "";
    /// <summary>
    /// Name of the shard group that should be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardGroupName {
      get { return shardGroupName_; }
      set {
        shardGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardGroupName != other.ShardGroupName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardGroupName.Length != 0) hash ^= ShardGroupName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardGroupName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardGroupName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardGroupName.Length != 0) {
        ShardGroupName = other.ShardGroupName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardGroupName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterExternalDictionaryRequest : pb::IMessage<CreateClusterExternalDictionaryRequest> {
    private static readonly pb::MessageParser<CreateClusterExternalDictionaryRequest> _parser = new pb::MessageParser<CreateClusterExternalDictionaryRequest>(() => new CreateClusterExternalDictionaryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterExternalDictionaryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryRequest(CreateClusterExternalDictionaryRequest other) : this() {
      clusterId_ = other.clusterId_;
      externalDictionary_ = other.externalDictionary_ != null ? other.externalDictionary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryRequest Clone() {
      return new CreateClusterExternalDictionaryRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to create the external dictionary for.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_dictionary" field.</summary>
    public const int ExternalDictionaryFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary externalDictionary_;
    /// <summary>
    /// Configuration of the external dictionary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary ExternalDictionary {
      get { return externalDictionary_; }
      set {
        externalDictionary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterExternalDictionaryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterExternalDictionaryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(ExternalDictionary, other.ExternalDictionary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (externalDictionary_ != null) hash ^= ExternalDictionary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (externalDictionary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ExternalDictionary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (externalDictionary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExternalDictionary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterExternalDictionaryRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.externalDictionary_ != null) {
        if (externalDictionary_ == null) {
          ExternalDictionary = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary();
        }
        ExternalDictionary.MergeFrom(other.ExternalDictionary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            if (externalDictionary_ == null) {
              ExternalDictionary = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig.Types.ExternalDictionary();
            }
            input.ReadMessage(ExternalDictionary);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterExternalDictionaryMetadata : pb::IMessage<CreateClusterExternalDictionaryMetadata> {
    private static readonly pb::MessageParser<CreateClusterExternalDictionaryMetadata> _parser = new pb::MessageParser<CreateClusterExternalDictionaryMetadata>(() => new CreateClusterExternalDictionaryMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterExternalDictionaryMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryMetadata(CreateClusterExternalDictionaryMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterExternalDictionaryMetadata Clone() {
      return new CreateClusterExternalDictionaryMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster for which an external dictionary is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterExternalDictionaryMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterExternalDictionaryMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterExternalDictionaryMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterExternalDictionaryRequest : pb::IMessage<DeleteClusterExternalDictionaryRequest> {
    private static readonly pb::MessageParser<DeleteClusterExternalDictionaryRequest> _parser = new pb::MessageParser<DeleteClusterExternalDictionaryRequest>(() => new DeleteClusterExternalDictionaryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterExternalDictionaryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryRequest(DeleteClusterExternalDictionaryRequest other) : this() {
      clusterId_ = other.clusterId_;
      externalDictionaryName_ = other.externalDictionaryName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryRequest Clone() {
      return new DeleteClusterExternalDictionaryRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the ClickHouse cluster to delete the external dictionary from.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_dictionary_name" field.</summary>
    public const int ExternalDictionaryNameFieldNumber = 2;
    private string externalDictionaryName_ = "";
    /// <summary>
    /// Name of the external dictionary to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalDictionaryName {
      get { return externalDictionaryName_; }
      set {
        externalDictionaryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterExternalDictionaryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterExternalDictionaryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ExternalDictionaryName != other.ExternalDictionaryName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ExternalDictionaryName.Length != 0) hash ^= ExternalDictionaryName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ExternalDictionaryName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalDictionaryName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ExternalDictionaryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalDictionaryName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterExternalDictionaryRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ExternalDictionaryName.Length != 0) {
        ExternalDictionaryName = other.ExternalDictionaryName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ExternalDictionaryName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterExternalDictionaryMetadata : pb::IMessage<DeleteClusterExternalDictionaryMetadata> {
    private static readonly pb::MessageParser<DeleteClusterExternalDictionaryMetadata> _parser = new pb::MessageParser<DeleteClusterExternalDictionaryMetadata>(() => new DeleteClusterExternalDictionaryMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterExternalDictionaryMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryMetadata(DeleteClusterExternalDictionaryMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterExternalDictionaryMetadata Clone() {
      return new DeleteClusterExternalDictionaryMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster where an external dictionary is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterExternalDictionaryMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterExternalDictionaryMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterExternalDictionaryMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HostSpec : pb::IMessage<HostSpec> {
    private static readonly pb::MessageParser<HostSpec> _parser = new pb::MessageParser<HostSpec>(() => new HostSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec(HostSpec other) : this() {
      zoneId_ = other.zoneId_;
      type_ = other.type_;
      subnetId_ = other.subnetId_;
      assignPublicIp_ = other.assignPublicIp_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec Clone() {
      return new HostSpec(this);
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the host resides.
    /// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type type_ = global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type.Unspecified;
    /// <summary>
    /// Type of the host to be deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 3;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the host should belong to. This subnet should be a part
    /// of the network that the cluster belongs to.
    /// The ID of the network is set in the [Cluster.network_id] field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assign_public_ip" field.</summary>
    public const int AssignPublicIpFieldNumber = 4;
    private bool assignPublicIp_;
    /// <summary>
    /// Whether the host should get a public IP address on creation.
    ///
    /// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
    /// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
    ///
    /// Possible values:
    /// * false — don't assign a public IP to the host.
    /// * true — the host should have a public IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIp {
      get { return assignPublicIp_; }
      set {
        assignPublicIp_ = value;
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 5;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard that the host is assigned to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      if (Type != other.Type) return false;
      if (SubnetId != other.SubnetId) return false;
      if (AssignPublicIp != other.AssignPublicIp) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (AssignPublicIp != false) hash ^= AssignPublicIp.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneId);
      }
      if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubnetId);
      }
      if (AssignPublicIp != false) {
        output.WriteRawTag(32);
        output.WriteBool(AssignPublicIp);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (AssignPublicIp != false) {
        size += 1 + 1;
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostSpec other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.Type != global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type.Unspecified) {
        Type = other.Type;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.AssignPublicIp != false) {
        AssignPublicIp = other.AssignPublicIp;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZoneId = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Yandex.Cloud.Mdb.Clickhouse.V1.Host.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            SubnetId = input.ReadString();
            break;
          }
          case 32: {
            AssignPublicIp = input.ReadBool();
            break;
          }
          case 42: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ConfigSpec : pb::IMessage<ConfigSpec> {
    private static readonly pb::MessageParser<ConfigSpec> _parser = new pb::MessageParser<ConfigSpec>(() => new ConfigSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec(ConfigSpec other) : this() {
      version_ = other.version_;
      clickhouse_ = other.clickhouse_ != null ? other.clickhouse_.Clone() : null;
      zookeeper_ = other.zookeeper_ != null ? other.zookeeper_.Clone() : null;
      backupWindowStart_ = other.backupWindowStart_ != null ? other.backupWindowStart_.Clone() : null;
      access_ = other.access_ != null ? other.access_.Clone() : null;
      cloudStorage_ = other.cloudStorage_ != null ? other.cloudStorage_.Clone() : null;
      SqlDatabaseManagement = other.SqlDatabaseManagement;
      SqlUserManagement = other.SqlUserManagement;
      adminPassword_ = other.adminPassword_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec Clone() {
      return new ConfigSpec(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// Version of the ClickHouse server software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clickhouse" field.</summary>
    public const int ClickhouseFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse clickhouse_;
    /// <summary>
    /// Configuration and resources for a ClickHouse server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse Clickhouse {
      get { return clickhouse_; }
      set {
        clickhouse_ = value;
      }
    }

    /// <summary>Field number for the "zookeeper" field.</summary>
    public const int ZookeeperFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper zookeeper_;
    /// <summary>
    /// Configuration and resources for a ZooKeeper server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper Zookeeper {
      get { return zookeeper_; }
      set {
        zookeeper_ = value;
      }
    }

    /// <summary>Field number for the "backup_window_start" field.</summary>
    public const int BackupWindowStartFieldNumber = 4;
    private global::Google.Type.TimeOfDay backupWindowStart_;
    /// <summary>
    /// Time to start the daily backup, in the UTC timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay BackupWindowStart {
      get { return backupWindowStart_; }
      set {
        backupWindowStart_ = value;
      }
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.Access access_;
    /// <summary>
    /// Access policy for external services.
    ///
    /// If you want a specific service to access the ClickHouse cluster, then set the necessary values in this policy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.Access Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    /// <summary>Field number for the "cloud_storage" field.</summary>
    public const int CloudStorageFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.CloudStorage cloudStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.CloudStorage CloudStorage {
      get { return cloudStorage_; }
      set {
        cloudStorage_ = value;
      }
    }

    /// <summary>Field number for the "sql_database_management" field.</summary>
    public const int SqlDatabaseManagementFieldNumber = 7;
    private static readonly pb::FieldCodec<bool?> _single_sqlDatabaseManagement_codec = pb::FieldCodec.ForStructWrapper<bool>(58);
    private bool? sqlDatabaseManagement_;
    /// <summary>
    /// Whether database management through SQL commands is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SqlDatabaseManagement {
      get { return sqlDatabaseManagement_; }
      set {
        sqlDatabaseManagement_ = value;
      }
    }


    /// <summary>Field number for the "sql_user_management" field.</summary>
    public const int SqlUserManagementFieldNumber = 8;
    private static readonly pb::FieldCodec<bool?> _single_sqlUserManagement_codec = pb::FieldCodec.ForStructWrapper<bool>(66);
    private bool? sqlUserManagement_;
    /// <summary>
    /// Whether user management through SQL commands is enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? SqlUserManagement {
      get { return sqlUserManagement_; }
      set {
        sqlUserManagement_ = value;
      }
    }


    /// <summary>Field number for the "admin_password" field.</summary>
    public const int AdminPasswordFieldNumber = 9;
    private string adminPassword_ = "";
    /// <summary>
    /// Password for user 'admin' that has SQL user management access.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdminPassword {
      get { return adminPassword_; }
      set {
        adminPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(Clickhouse, other.Clickhouse)) return false;
      if (!object.Equals(Zookeeper, other.Zookeeper)) return false;
      if (!object.Equals(BackupWindowStart, other.BackupWindowStart)) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (!object.Equals(CloudStorage, other.CloudStorage)) return false;
      if (SqlDatabaseManagement != other.SqlDatabaseManagement) return false;
      if (SqlUserManagement != other.SqlUserManagement) return false;
      if (AdminPassword != other.AdminPassword) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (clickhouse_ != null) hash ^= Clickhouse.GetHashCode();
      if (zookeeper_ != null) hash ^= Zookeeper.GetHashCode();
      if (backupWindowStart_ != null) hash ^= BackupWindowStart.GetHashCode();
      if (access_ != null) hash ^= Access.GetHashCode();
      if (cloudStorage_ != null) hash ^= CloudStorage.GetHashCode();
      if (sqlDatabaseManagement_ != null) hash ^= SqlDatabaseManagement.GetHashCode();
      if (sqlUserManagement_ != null) hash ^= SqlUserManagement.GetHashCode();
      if (AdminPassword.Length != 0) hash ^= AdminPassword.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clickhouse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Clickhouse);
      }
      if (zookeeper_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Zookeeper);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (backupWindowStart_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackupWindowStart);
      }
      if (access_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Access);
      }
      if (cloudStorage_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(CloudStorage);
      }
      if (sqlDatabaseManagement_ != null) {
        _single_sqlDatabaseManagement_codec.WriteTagAndValue(output, SqlDatabaseManagement);
      }
      if (sqlUserManagement_ != null) {
        _single_sqlUserManagement_codec.WriteTagAndValue(output, SqlUserManagement);
      }
      if (AdminPassword.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(AdminPassword);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (clickhouse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clickhouse);
      }
      if (zookeeper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zookeeper);
      }
      if (backupWindowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupWindowStart);
      }
      if (access_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (cloudStorage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudStorage);
      }
      if (sqlDatabaseManagement_ != null) {
        size += _single_sqlDatabaseManagement_codec.CalculateSizeWithTag(SqlDatabaseManagement);
      }
      if (sqlUserManagement_ != null) {
        size += _single_sqlUserManagement_codec.CalculateSizeWithTag(SqlUserManagement);
      }
      if (AdminPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdminPassword);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSpec other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.clickhouse_ != null) {
        if (clickhouse_ == null) {
          Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse();
        }
        Clickhouse.MergeFrom(other.Clickhouse);
      }
      if (other.zookeeper_ != null) {
        if (zookeeper_ == null) {
          Zookeeper = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper();
        }
        Zookeeper.MergeFrom(other.Zookeeper);
      }
      if (other.backupWindowStart_ != null) {
        if (backupWindowStart_ == null) {
          BackupWindowStart = new global::Google.Type.TimeOfDay();
        }
        BackupWindowStart.MergeFrom(other.BackupWindowStart);
      }
      if (other.access_ != null) {
        if (access_ == null) {
          Access = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Access();
        }
        Access.MergeFrom(other.Access);
      }
      if (other.cloudStorage_ != null) {
        if (cloudStorage_ == null) {
          CloudStorage = new global::Yandex.Cloud.Mdb.Clickhouse.V1.CloudStorage();
        }
        CloudStorage.MergeFrom(other.CloudStorage);
      }
      if (other.sqlDatabaseManagement_ != null) {
        if (sqlDatabaseManagement_ == null || other.SqlDatabaseManagement != false) {
          SqlDatabaseManagement = other.SqlDatabaseManagement;
        }
      }
      if (other.sqlUserManagement_ != null) {
        if (sqlUserManagement_ == null || other.SqlUserManagement != false) {
          SqlUserManagement = other.SqlUserManagement;
        }
      }
      if (other.AdminPassword.Length != 0) {
        AdminPassword = other.AdminPassword;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clickhouse_ == null) {
              Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Clickhouse();
            }
            input.ReadMessage(Clickhouse);
            break;
          }
          case 18: {
            if (zookeeper_ == null) {
              Zookeeper = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Types.Zookeeper();
            }
            input.ReadMessage(Zookeeper);
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            if (backupWindowStart_ == null) {
              BackupWindowStart = new global::Google.Type.TimeOfDay();
            }
            input.ReadMessage(BackupWindowStart);
            break;
          }
          case 42: {
            if (access_ == null) {
              Access = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Access();
            }
            input.ReadMessage(Access);
            break;
          }
          case 50: {
            if (cloudStorage_ == null) {
              CloudStorage = new global::Yandex.Cloud.Mdb.Clickhouse.V1.CloudStorage();
            }
            input.ReadMessage(CloudStorage);
            break;
          }
          case 58: {
            bool? value = _single_sqlDatabaseManagement_codec.Read(input);
            if (sqlDatabaseManagement_ == null || value != false) {
              SqlDatabaseManagement = value;
            }
            break;
          }
          case 66: {
            bool? value = _single_sqlUserManagement_codec.Read(input);
            if (sqlUserManagement_ == null || value != false) {
              SqlUserManagement = value;
            }
            break;
          }
          case 74: {
            AdminPassword = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConfigSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Clickhouse : pb::IMessage<Clickhouse> {
        private static readonly pb::MessageParser<Clickhouse> _parser = new pb::MessageParser<Clickhouse>(() => new Clickhouse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Clickhouse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse(Clickhouse other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse Clone() {
          return new Clickhouse(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig config_;
        /// <summary>
        /// Configuration for a ClickHouse server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to ClickHouse hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Clickhouse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Clickhouse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Clickhouse other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Zookeeper : pb::IMessage<Zookeeper> {
        private static readonly pb::MessageParser<Zookeeper> _parser = new pb::MessageParser<Zookeeper>(() => new Zookeeper());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Zookeeper> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ConfigSpec.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper(Zookeeper other) : this() {
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zookeeper Clone() {
          return new Zookeeper(this);
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to ZooKeeper hosts. If not set, minimal available resources will be used.
        /// All available resource presets can be retrieved with a [ResourcePresetService.List] request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Zookeeper);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Zookeeper other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resources_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Zookeeper other) {
          if (other == null) {
            return;
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ShardConfigSpec : pb::IMessage<ShardConfigSpec> {
    private static readonly pb::MessageParser<ShardConfigSpec> _parser = new pb::MessageParser<ShardConfigSpec>(() => new ShardConfigSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShardConfigSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ClusterServiceReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfigSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfigSpec(ShardConfigSpec other) : this() {
      clickhouse_ = other.clickhouse_ != null ? other.clickhouse_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardConfigSpec Clone() {
      return new ShardConfigSpec(this);
    }

    /// <summary>Field number for the "clickhouse" field.</summary>
    public const int ClickhouseFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse clickhouse_;
    /// <summary>
    /// ClickHouse configuration for a shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse Clickhouse {
      get { return clickhouse_; }
      set {
        clickhouse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShardConfigSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShardConfigSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Clickhouse, other.Clickhouse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (clickhouse_ != null) hash ^= Clickhouse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (clickhouse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Clickhouse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (clickhouse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clickhouse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShardConfigSpec other) {
      if (other == null) {
        return;
      }
      if (other.clickhouse_ != null) {
        if (clickhouse_ == null) {
          Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse();
        }
        Clickhouse.MergeFrom(other.Clickhouse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (clickhouse_ == null) {
              Clickhouse = new global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Types.Clickhouse();
            }
            input.ReadMessage(Clickhouse);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ShardConfigSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Clickhouse : pb::IMessage<Clickhouse> {
        private static readonly pb::MessageParser<Clickhouse> _parser = new pb::MessageParser<Clickhouse>(() => new Clickhouse());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Clickhouse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Clickhouse.V1.ShardConfigSpec.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse(Clickhouse other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          Weight = other.Weight;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Clickhouse Clone() {
          return new Clickhouse(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig config_;
        /// <summary>
        /// ClickHouse settings for the shard.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources resources_;
        /// <summary>
        /// Computational resources for the shard.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        /// <summary>Field number for the "weight" field.</summary>
        public const int WeightFieldNumber = 3;
        private static readonly pb::FieldCodec<long?> _single_weight_codec = pb::FieldCodec.ForStructWrapper<long>(26);
        private long? weight_;
        /// <summary>
        /// Relative weight of the shard considered when writing data to the cluster.
        /// For details, see [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/table_engines/distributed/).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long? Weight {
          get { return weight_; }
          set {
            weight_ = value;
          }
        }


        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Clickhouse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Clickhouse other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          if (Weight != other.Weight) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (weight_ != null) hash ^= Weight.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (weight_ != null) {
            _single_weight_codec.WriteTagAndValue(output, Weight);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (weight_ != null) {
            size += _single_weight_codec.CalculateSizeWithTag(Weight);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Clickhouse other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          if (other.weight_ != null) {
            if (weight_ == null || other.Weight != 0L) {
              Weight = other.Weight;
            }
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Config.ClickhouseConfig();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Clickhouse.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
              case 26: {
                long? value = _single_weight_codec.Read(input);
                if (weight_ == null || value != 0L) {
                  Weight = value;
                }
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
