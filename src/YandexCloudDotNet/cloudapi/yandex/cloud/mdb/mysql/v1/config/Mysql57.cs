// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Mysql.V1.Config {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto</summary>
  internal static partial class Mysql57Reflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/mysql/v1/config/mysql5_7.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Mysql57Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci95YW5kZXgvY2xvdWQvbWRiL215c3FsL3YxL2NvbmZpZy9teXNxbDVfNy5w",
            "cm90bxIgeWFuZGV4LmNsb3VkLm1kYi5teXNxbC52MS5jb25maWcaHmdvb2ds",
            "ZS9wcm90b2J1Zi93cmFwcGVycy5wcm90bxodeWFuZGV4L2Nsb3VkL3ZhbGlk",
            "YXRpb24ucHJvdG8inAoKDk15c3FsQ29uZmlnNV83EksKF2lubm9kYl9idWZm",
            "ZXJfcG9vbF9zaXplGAEgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDY0VmFs",
            "dWVCDfrHMQk+PTUyNDI4ODASQgoPbWF4X2Nvbm5lY3Rpb25zGAIgASgLMhsu",
            "Z29vZ2xlLnByb3RvYnVmLkludDY0VmFsdWVCDPrHMQgxMC0xMDAwMBI1Cg9s",
            "b25nX3F1ZXJ5X3RpbWUYAyABKAsyHC5nb29nbGUucHJvdG9idWYuRG91Ymxl",
            "VmFsdWUSLwoLZ2VuZXJhbF9sb2cYBCABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "Qm9vbFZhbHVlEi0KCWF1ZGl0X2xvZxgFIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5Cb29sVmFsdWUSSgoIc3FsX21vZGUYBiADKA4yOC55YW5kZXguY2xvdWQu",
            "bWRiLm15c3FsLnYxLmNvbmZpZy5NeXNxbENvbmZpZzVfNy5TUUxNb2RlEksK",
            "Em1heF9hbGxvd2VkX3BhY2tldBgHIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5J",
            "bnQ2NFZhbHVlQhL6xzEOMTAyNC0xMzQyMTc3MjgSYgodZGVmYXVsdF9hdXRo",
            "ZW50aWNhdGlvbl9wbHVnaW4YCCABKA4yOy55YW5kZXguY2xvdWQubWRiLm15",
            "c3FsLnYxLmNvbmZpZy5NeXNxbENvbmZpZzVfNy5BdXRoUGx1Z2luIuoECgdT",
            "UUxNb2RlEhcKE1NRTE1PREVfVU5TUEVDSUZJRUQQABIXChNBTExPV19JTlZB",
            "TElEX0RBVEVTEAESDwoLQU5TSV9RVU9URVMQAhIeChpFUlJPUl9GT1JfRElW",
            "SVNJT05fQllfWkVSTxADEhcKE0hJR0hfTk9UX1BSRUNFREVOQ0UQBBIQCgxJ",
            "R05PUkVfU1BBQ0UQBRIZChVOT19BVVRPX1ZBTFVFX09OX1pFUk8QBhIYChRO",
            "T19CQUNLU0xBU0hfRVNDQVBFUxAHEhoKFk5PX0VOR0lORV9TVUJTVElUVVRJ",
            "T04QCBIbChdOT19VTlNJR05FRF9TVUJUUkFDVElPThAJEhAKDE5PX1pFUk9f",
            "REFURRAKEhMKD05PX1pFUk9fSU5fREFURRALEhQKEE5PX0ZJRUxEX09QVElP",
            "TlMQDBISCg5OT19LRVlfT1BUSU9OUxANEhQKEE5PX1RBQkxFX09QVElPTlMQ",
            "DhIWChJPTkxZX0ZVTExfR1JPVVBfQlkQDxIbChdQQURfQ0hBUl9UT19GVUxM",
            "X0xFTkdUSBAQEhMKD1BJUEVTX0FTX0NPTkNBVBAREhEKDVJFQUxfQVNfRkxP",
            "QVQQEhIVChFTVFJJQ1RfQUxMX1RBQkxFUxATEhcKE1NUUklDVF9UUkFOU19U",
            "QUJMRVMQFBIICgRBTlNJEBUSDwoLVFJBRElUSU9OQUwQFhIHCgNEQjIQFxIJ",
            "CgVNQVhEQhAYEgkKBU1TU1FMEBkSDAoITVlTUUwzMjMQGhILCgdNWVNRTDQw",
            "EBsSCgoGT1JBQ0xFEBwSDgoKUE9TVEdSRVNRTBAdIngKCkF1dGhQbHVnaW4S",
            "GwoXQVVUSF9QTFVHSU5fVU5TUEVDSUZJRUQQABIZChVNWVNRTF9OQVRJVkVf",
            "UEFTU1dPUkQQARIdChVDQUNISU5HX1NIQTJfUEFTU1dPUkQQAhoCCAESEwoP",
            "U0hBMjU2X1BBU1NXT1JEEAMi8AEKEU15c3FsQ29uZmlnU2V0NV83EkoKEGVm",
            "ZmVjdGl2ZV9jb25maWcYASABKAsyMC55YW5kZXguY2xvdWQubWRiLm15c3Fs",
            "LnYxLmNvbmZpZy5NeXNxbENvbmZpZzVfNxJFCgt1c2VyX2NvbmZpZxgCIAEo",
            "CzIwLnlhbmRleC5jbG91ZC5tZGIubXlzcWwudjEuY29uZmlnLk15c3FsQ29u",
            "ZmlnNV83EkgKDmRlZmF1bHRfY29uZmlnGAMgASgLMjAueWFuZGV4LmNsb3Vk",
            "Lm1kYi5teXNxbC52MS5jb25maWcuTXlzcWxDb25maWc1XzdCcgokeWFuZGV4",
            "LmNsb3VkLmFwaS5tZGIubXlzcWwudjEuY29uZmlnWkpnaXRodWIuY29tL3lh",
            "bmRleC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL215c3Fs",
            "L3YxL2NvbmZpZztteXNxbGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7), global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Parser, new[]{ "InnodbBufferPoolSize", "MaxConnections", "LongQueryTime", "GeneralLog", "AuditLog", "SqlMode", "MaxAllowedPacket", "DefaultAuthenticationPlugin" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode), typeof(global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.AuthPlugin) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfigSet5_7), global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfigSet5_7.Parser, new[]{ "EffectiveConfig", "UserConfig", "DefaultConfig" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Options and structure of `MysqlConfig5_7` reflects MySQL 5.7 configuration file
  /// </summary>
  internal sealed partial class MysqlConfig5_7 : pb::IMessage<MysqlConfig5_7> {
    private static readonly pb::MessageParser<MysqlConfig5_7> _parser = new pb::MessageParser<MysqlConfig5_7>(() => new MysqlConfig5_7());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MysqlConfig5_7> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mysql.V1.Config.Mysql57Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfig5_7() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfig5_7(MysqlConfig5_7 other) : this() {
      InnodbBufferPoolSize = other.InnodbBufferPoolSize;
      MaxConnections = other.MaxConnections;
      LongQueryTime = other.LongQueryTime;
      GeneralLog = other.GeneralLog;
      AuditLog = other.AuditLog;
      sqlMode_ = other.sqlMode_.Clone();
      MaxAllowedPacket = other.MaxAllowedPacket;
      defaultAuthenticationPlugin_ = other.defaultAuthenticationPlugin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfig5_7 Clone() {
      return new MysqlConfig5_7(this);
    }

    /// <summary>Field number for the "innodb_buffer_pool_size" field.</summary>
    public const int InnodbBufferPoolSizeFieldNumber = 1;
    private static readonly pb::FieldCodec<long?> _single_innodbBufferPoolSize_codec = pb::FieldCodec.ForStructWrapper<long>(10);
    private long? innodbBufferPoolSize_;
    /// <summary>
    /// Size of the InnoDB buffer pool used for caching table and index data.
    ///
    /// For details, see [MySQL documentation for the parameter](https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_buffer_pool_size).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? InnodbBufferPoolSize {
      get { return innodbBufferPoolSize_; }
      set {
        innodbBufferPoolSize_ = value;
      }
    }


    /// <summary>Field number for the "max_connections" field.</summary>
    public const int MaxConnectionsFieldNumber = 2;
    private static readonly pb::FieldCodec<long?> _single_maxConnections_codec = pb::FieldCodec.ForStructWrapper<long>(18);
    private long? maxConnections_;
    /// <summary>
    /// The maximum permitted number of simultaneous client connections.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_connections).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxConnections {
      get { return maxConnections_; }
      set {
        maxConnections_ = value;
      }
    }


    /// <summary>Field number for the "long_query_time" field.</summary>
    public const int LongQueryTimeFieldNumber = 3;
    private static readonly pb::FieldCodec<double?> _single_longQueryTime_codec = pb::FieldCodec.ForStructWrapper<double>(26);
    private double? longQueryTime_;
    /// <summary>
    /// Time that it takes to process a query before it is considered slow.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_long_query_time).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double? LongQueryTime {
      get { return longQueryTime_; }
      set {
        longQueryTime_ = value;
      }
    }


    /// <summary>Field number for the "general_log" field.</summary>
    public const int GeneralLogFieldNumber = 4;
    private static readonly pb::FieldCodec<bool?> _single_generalLog_codec = pb::FieldCodec.ForStructWrapper<bool>(34);
    private bool? generalLog_;
    /// <summary>
    /// Enable writing of general query log of MySQL.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_general_log).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? GeneralLog {
      get { return generalLog_; }
      set {
        generalLog_ = value;
      }
    }


    /// <summary>Field number for the "audit_log" field.</summary>
    public const int AuditLogFieldNumber = 5;
    private static readonly pb::FieldCodec<bool?> _single_auditLog_codec = pb::FieldCodec.ForStructWrapper<bool>(42);
    private bool? auditLog_;
    /// <summary>
    /// Enable writing of audit log of MySQL.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/mysql-security-excerpt/5.6/en/audit-log-options-variables.html#option_mysqld_audit-log).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool? AuditLog {
      get { return auditLog_; }
      set {
        auditLog_ = value;
      }
    }


    /// <summary>Field number for the "sql_mode" field.</summary>
    public const int SqlModeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode> _repeated_sqlMode_codec
        = pb::FieldCodec.ForEnum(50, x => (int) x, x => (global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode) x);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode> sqlMode_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode>();
    /// <summary>
    /// Server SQL mode of MySQL.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sql-mode-setting).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.SQLMode> SqlMode {
      get { return sqlMode_; }
    }

    /// <summary>Field number for the "max_allowed_packet" field.</summary>
    public const int MaxAllowedPacketFieldNumber = 7;
    private static readonly pb::FieldCodec<long?> _single_maxAllowedPacket_codec = pb::FieldCodec.ForStructWrapper<long>(58);
    private long? maxAllowedPacket_;
    /// <summary>
    /// The maximum size in bytes of one packet.
    ///
    /// For details, see [MySQL documentation for the variable](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_max_allowed_packet).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? MaxAllowedPacket {
      get { return maxAllowedPacket_; }
      set {
        maxAllowedPacket_ = value;
      }
    }


    /// <summary>Field number for the "default_authentication_plugin" field.</summary>
    public const int DefaultAuthenticationPluginFieldNumber = 8;
    private global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.AuthPlugin defaultAuthenticationPlugin_ = 0;
    /// <summary>
    /// Authentication plugin used in the managed MySQL cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.AuthPlugin DefaultAuthenticationPlugin {
      get { return defaultAuthenticationPlugin_; }
      set {
        defaultAuthenticationPlugin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MysqlConfig5_7);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MysqlConfig5_7 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InnodbBufferPoolSize != other.InnodbBufferPoolSize) return false;
      if (MaxConnections != other.MaxConnections) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.Equals(LongQueryTime, other.LongQueryTime)) return false;
      if (GeneralLog != other.GeneralLog) return false;
      if (AuditLog != other.AuditLog) return false;
      if(!sqlMode_.Equals(other.sqlMode_)) return false;
      if (MaxAllowedPacket != other.MaxAllowedPacket) return false;
      if (DefaultAuthenticationPlugin != other.DefaultAuthenticationPlugin) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (innodbBufferPoolSize_ != null) hash ^= InnodbBufferPoolSize.GetHashCode();
      if (maxConnections_ != null) hash ^= MaxConnections.GetHashCode();
      if (longQueryTime_ != null) hash ^= pbc::ProtobufEqualityComparers.BitwiseNullableDoubleEqualityComparer.GetHashCode(LongQueryTime);
      if (generalLog_ != null) hash ^= GeneralLog.GetHashCode();
      if (auditLog_ != null) hash ^= AuditLog.GetHashCode();
      hash ^= sqlMode_.GetHashCode();
      if (maxAllowedPacket_ != null) hash ^= MaxAllowedPacket.GetHashCode();
      if (DefaultAuthenticationPlugin != 0) hash ^= DefaultAuthenticationPlugin.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (innodbBufferPoolSize_ != null) {
        _single_innodbBufferPoolSize_codec.WriteTagAndValue(output, InnodbBufferPoolSize);
      }
      if (maxConnections_ != null) {
        _single_maxConnections_codec.WriteTagAndValue(output, MaxConnections);
      }
      if (longQueryTime_ != null) {
        _single_longQueryTime_codec.WriteTagAndValue(output, LongQueryTime);
      }
      if (generalLog_ != null) {
        _single_generalLog_codec.WriteTagAndValue(output, GeneralLog);
      }
      if (auditLog_ != null) {
        _single_auditLog_codec.WriteTagAndValue(output, AuditLog);
      }
      sqlMode_.WriteTo(output, _repeated_sqlMode_codec);
      if (maxAllowedPacket_ != null) {
        _single_maxAllowedPacket_codec.WriteTagAndValue(output, MaxAllowedPacket);
      }
      if (DefaultAuthenticationPlugin != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) DefaultAuthenticationPlugin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (innodbBufferPoolSize_ != null) {
        size += _single_innodbBufferPoolSize_codec.CalculateSizeWithTag(InnodbBufferPoolSize);
      }
      if (maxConnections_ != null) {
        size += _single_maxConnections_codec.CalculateSizeWithTag(MaxConnections);
      }
      if (longQueryTime_ != null) {
        size += _single_longQueryTime_codec.CalculateSizeWithTag(LongQueryTime);
      }
      if (generalLog_ != null) {
        size += _single_generalLog_codec.CalculateSizeWithTag(GeneralLog);
      }
      if (auditLog_ != null) {
        size += _single_auditLog_codec.CalculateSizeWithTag(AuditLog);
      }
      size += sqlMode_.CalculateSize(_repeated_sqlMode_codec);
      if (maxAllowedPacket_ != null) {
        size += _single_maxAllowedPacket_codec.CalculateSizeWithTag(MaxAllowedPacket);
      }
      if (DefaultAuthenticationPlugin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DefaultAuthenticationPlugin);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MysqlConfig5_7 other) {
      if (other == null) {
        return;
      }
      if (other.innodbBufferPoolSize_ != null) {
        if (innodbBufferPoolSize_ == null || other.InnodbBufferPoolSize != 0L) {
          InnodbBufferPoolSize = other.InnodbBufferPoolSize;
        }
      }
      if (other.maxConnections_ != null) {
        if (maxConnections_ == null || other.MaxConnections != 0L) {
          MaxConnections = other.MaxConnections;
        }
      }
      if (other.longQueryTime_ != null) {
        if (longQueryTime_ == null || other.LongQueryTime != 0D) {
          LongQueryTime = other.LongQueryTime;
        }
      }
      if (other.generalLog_ != null) {
        if (generalLog_ == null || other.GeneralLog != false) {
          GeneralLog = other.GeneralLog;
        }
      }
      if (other.auditLog_ != null) {
        if (auditLog_ == null || other.AuditLog != false) {
          AuditLog = other.AuditLog;
        }
      }
      sqlMode_.Add(other.sqlMode_);
      if (other.maxAllowedPacket_ != null) {
        if (maxAllowedPacket_ == null || other.MaxAllowedPacket != 0L) {
          MaxAllowedPacket = other.MaxAllowedPacket;
        }
      }
      if (other.DefaultAuthenticationPlugin != 0) {
        DefaultAuthenticationPlugin = other.DefaultAuthenticationPlugin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            long? value = _single_innodbBufferPoolSize_codec.Read(input);
            if (innodbBufferPoolSize_ == null || value != 0L) {
              InnodbBufferPoolSize = value;
            }
            break;
          }
          case 18: {
            long? value = _single_maxConnections_codec.Read(input);
            if (maxConnections_ == null || value != 0L) {
              MaxConnections = value;
            }
            break;
          }
          case 26: {
            double? value = _single_longQueryTime_codec.Read(input);
            if (longQueryTime_ == null || value != 0D) {
              LongQueryTime = value;
            }
            break;
          }
          case 34: {
            bool? value = _single_generalLog_codec.Read(input);
            if (generalLog_ == null || value != false) {
              GeneralLog = value;
            }
            break;
          }
          case 42: {
            bool? value = _single_auditLog_codec.Read(input);
            if (auditLog_ == null || value != false) {
              AuditLog = value;
            }
            break;
          }
          case 50:
          case 48: {
            sqlMode_.AddEntriesFrom(input, _repeated_sqlMode_codec);
            break;
          }
          case 58: {
            long? value = _single_maxAllowedPacket_codec.Read(input);
            if (maxAllowedPacket_ == null || value != 0L) {
              MaxAllowedPacket = value;
            }
            break;
          }
          case 64: {
            DefaultAuthenticationPlugin = (global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7.Types.AuthPlugin) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MysqlConfig5_7 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum SQLMode {
        [pbr::OriginalName("SQLMODE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("ALLOW_INVALID_DATES")] AllowInvalidDates = 1,
        [pbr::OriginalName("ANSI_QUOTES")] AnsiQuotes = 2,
        [pbr::OriginalName("ERROR_FOR_DIVISION_BY_ZERO")] ErrorForDivisionByZero = 3,
        [pbr::OriginalName("HIGH_NOT_PRECEDENCE")] HighNotPrecedence = 4,
        [pbr::OriginalName("IGNORE_SPACE")] IgnoreSpace = 5,
        [pbr::OriginalName("NO_AUTO_VALUE_ON_ZERO")] NoAutoValueOnZero = 6,
        [pbr::OriginalName("NO_BACKSLASH_ESCAPES")] NoBackslashEscapes = 7,
        [pbr::OriginalName("NO_ENGINE_SUBSTITUTION")] NoEngineSubstitution = 8,
        [pbr::OriginalName("NO_UNSIGNED_SUBTRACTION")] NoUnsignedSubtraction = 9,
        [pbr::OriginalName("NO_ZERO_DATE")] NoZeroDate = 10,
        [pbr::OriginalName("NO_ZERO_IN_DATE")] NoZeroInDate = 11,
        [pbr::OriginalName("NO_FIELD_OPTIONS")] NoFieldOptions = 12,
        [pbr::OriginalName("NO_KEY_OPTIONS")] NoKeyOptions = 13,
        [pbr::OriginalName("NO_TABLE_OPTIONS")] NoTableOptions = 14,
        [pbr::OriginalName("ONLY_FULL_GROUP_BY")] OnlyFullGroupBy = 15,
        [pbr::OriginalName("PAD_CHAR_TO_FULL_LENGTH")] PadCharToFullLength = 16,
        [pbr::OriginalName("PIPES_AS_CONCAT")] PipesAsConcat = 17,
        [pbr::OriginalName("REAL_AS_FLOAT")] RealAsFloat = 18,
        [pbr::OriginalName("STRICT_ALL_TABLES")] StrictAllTables = 19,
        [pbr::OriginalName("STRICT_TRANS_TABLES")] StrictTransTables = 20,
        [pbr::OriginalName("ANSI")] Ansi = 21,
        [pbr::OriginalName("TRADITIONAL")] Traditional = 22,
        [pbr::OriginalName("DB2")] Db2 = 23,
        [pbr::OriginalName("MAXDB")] Maxdb = 24,
        [pbr::OriginalName("MSSQL")] Mssql = 25,
        [pbr::OriginalName("MYSQL323")] Mysql323 = 26,
        [pbr::OriginalName("MYSQL40")] Mysql40 = 27,
        [pbr::OriginalName("ORACLE")] Oracle = 28,
        [pbr::OriginalName("POSTGRESQL")] Postgresql = 29,
      }

      internal enum AuthPlugin {
        [pbr::OriginalName("AUTH_PLUGIN_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Using [Native Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/native-pluggable-authentication.html).
        /// </summary>
        [pbr::OriginalName("MYSQL_NATIVE_PASSWORD")] MysqlNativePassword = 1,
        [pbr::OriginalName("CACHING_SHA2_PASSWORD")] CachingSha2Password = 2,
        /// <summary>
        /// Using [SHA-256 Pluggable Authentication](https://dev.mysql.com/doc/refman/5.7/en/sha256-pluggable-authentication.html).
        /// </summary>
        [pbr::OriginalName("SHA256_PASSWORD")] Sha256Password = 3,
      }

    }
    #endregion

  }

  internal sealed partial class MysqlConfigSet5_7 : pb::IMessage<MysqlConfigSet5_7> {
    private static readonly pb::MessageParser<MysqlConfigSet5_7> _parser = new pb::MessageParser<MysqlConfigSet5_7>(() => new MysqlConfigSet5_7());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MysqlConfigSet5_7> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mysql.V1.Config.Mysql57Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfigSet5_7() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfigSet5_7(MysqlConfigSet5_7 other) : this() {
      effectiveConfig_ = other.effectiveConfig_ != null ? other.effectiveConfig_.Clone() : null;
      userConfig_ = other.userConfig_ != null ? other.userConfig_.Clone() : null;
      defaultConfig_ = other.defaultConfig_ != null ? other.defaultConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MysqlConfigSet5_7 Clone() {
      return new MysqlConfigSet5_7(this);
    }

    /// <summary>Field number for the "effective_config" field.</summary>
    public const int EffectiveConfigFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 effectiveConfig_;
    /// <summary>
    /// Effective settings for a MySQL 5.7 cluster (a combination of settings defined
    /// in [user_config] and [default_config]).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 EffectiveConfig {
      get { return effectiveConfig_; }
      set {
        effectiveConfig_ = value;
      }
    }

    /// <summary>Field number for the "user_config" field.</summary>
    public const int UserConfigFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 userConfig_;
    /// <summary>
    /// User-defined settings for a MySQL 5.7 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 UserConfig {
      get { return userConfig_; }
      set {
        userConfig_ = value;
      }
    }

    /// <summary>Field number for the "default_config" field.</summary>
    public const int DefaultConfigFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 defaultConfig_;
    /// <summary>
    /// Default configuration for a MySQL 5.7 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7 DefaultConfig {
      get { return defaultConfig_; }
      set {
        defaultConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MysqlConfigSet5_7);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MysqlConfigSet5_7 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EffectiveConfig, other.EffectiveConfig)) return false;
      if (!object.Equals(UserConfig, other.UserConfig)) return false;
      if (!object.Equals(DefaultConfig, other.DefaultConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (effectiveConfig_ != null) hash ^= EffectiveConfig.GetHashCode();
      if (userConfig_ != null) hash ^= UserConfig.GetHashCode();
      if (defaultConfig_ != null) hash ^= DefaultConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (effectiveConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EffectiveConfig);
      }
      if (userConfig_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UserConfig);
      }
      if (defaultConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (effectiveConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectiveConfig);
      }
      if (userConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserConfig);
      }
      if (defaultConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MysqlConfigSet5_7 other) {
      if (other == null) {
        return;
      }
      if (other.effectiveConfig_ != null) {
        if (effectiveConfig_ == null) {
          EffectiveConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
        }
        EffectiveConfig.MergeFrom(other.EffectiveConfig);
      }
      if (other.userConfig_ != null) {
        if (userConfig_ == null) {
          UserConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
        }
        UserConfig.MergeFrom(other.UserConfig);
      }
      if (other.defaultConfig_ != null) {
        if (defaultConfig_ == null) {
          DefaultConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
        }
        DefaultConfig.MergeFrom(other.DefaultConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (effectiveConfig_ == null) {
              EffectiveConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
            }
            input.ReadMessage(EffectiveConfig);
            break;
          }
          case 18: {
            if (userConfig_ == null) {
              UserConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
            }
            input.ReadMessage(UserConfig);
            break;
          }
          case 26: {
            if (defaultConfig_ == null) {
              DefaultConfig = new global::Yandex.Cloud.Mdb.Mysql.V1.Config.MysqlConfig5_7();
            }
            input.ReadMessage(DefaultConfig);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
