// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/redis/v1/cluster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Redis.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/redis/v1/cluster.proto</summary>
  internal static partial class ClusterReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/redis/v1/cluster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cid5YW5kZXgvY2xvdWQvbWRiL3JlZGlzL3YxL2NsdXN0ZXIucHJvdG8SGXlh",
            "bmRleC5jbG91ZC5tZGIucmVkaXMudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1l",
            "c3RhbXAucHJvdG8aG2dvb2dsZS90eXBlL3RpbWVvZmRheS5wcm90bxoveWFu",
            "ZGV4L2Nsb3VkL21kYi9yZWRpcy92MS9jb25maWcvcmVkaXM1XzAucHJvdG8a",
            "L3lhbmRleC9jbG91ZC9tZGIvcmVkaXMvdjEvY29uZmlnL3JlZGlzNl8wLnBy",
            "b3RvGit5YW5kZXgvY2xvdWQvbWRiL3JlZGlzL3YxL21haW50ZW5hbmNlLnBy",
            "b3RvItwHCgdDbHVzdGVyEgoKAmlkGAEgASgJEhEKCWZvbGRlcl9pZBgCIAEo",
            "CRIuCgpjcmVhdGVkX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBIMCgRuYW1lGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJEj4KBmxh",
            "YmVscxgGIAMoCzIuLnlhbmRleC5jbG91ZC5tZGIucmVkaXMudjEuQ2x1c3Rl",
            "ci5MYWJlbHNFbnRyeRJDCgtlbnZpcm9ubWVudBgHIAEoDjIuLnlhbmRleC5j",
            "bG91ZC5tZGIucmVkaXMudjEuQ2x1c3Rlci5FbnZpcm9ubWVudBI5Cgptb25p",
            "dG9yaW5nGAggAygLMiUueWFuZGV4LmNsb3VkLm1kYi5yZWRpcy52MS5Nb25p",
            "dG9yaW5nEjgKBmNvbmZpZxgJIAEoCzIoLnlhbmRleC5jbG91ZC5tZGIucmVk",
            "aXMudjEuQ2x1c3RlckNvbmZpZxISCgpuZXR3b3JrX2lkGAogASgJEjkKBmhl",
            "YWx0aBgLIAEoDjIpLnlhbmRleC5jbG91ZC5tZGIucmVkaXMudjEuQ2x1c3Rl",
            "ci5IZWFsdGgSOQoGc3RhdHVzGAwgASgOMikueWFuZGV4LmNsb3VkLm1kYi5y",
            "ZWRpcy52MS5DbHVzdGVyLlN0YXR1cxIPCgdzaGFyZGVkGA0gASgIEkgKEm1h",
            "aW50ZW5hbmNlX3dpbmRvdxgOIAEoCzIsLnlhbmRleC5jbG91ZC5tZGIucmVk",
            "aXMudjEuTWFpbnRlbmFuY2VXaW5kb3cSSgoRcGxhbm5lZF9vcGVyYXRpb24Y",
            "DyABKAsyLy55YW5kZXguY2xvdWQubWRiLnJlZGlzLnYxLk1haW50ZW5hbmNl",
            "T3BlcmF0aW9uGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEiSQoLRW52aXJvbm1lbnQSGwoXRU5WSVJPTk1FTlRfVU5T",
            "UEVDSUZJRUQQABIOCgpQUk9EVUNUSU9OEAESDQoJUFJFU1RBQkxFEAIiPwoG",
            "SGVhbHRoEhIKDkhFQUxUSF9VTktOT1dOEAASCQoFQUxJVkUQARIICgRERUFE",
            "EAISDAoIREVHUkFERUQQAyJ5CgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04Q",
            "ABIMCghDUkVBVElORxABEgsKB1JVTk5JTkcQAhIJCgVFUlJPUhADEgwKCFVQ",
            "REFUSU5HEAQSDAoIU1RPUFBJTkcQBRILCgdTVE9QUEVEEAYSDAoIU1RBUlRJ",
            "TkcQByI9CgpNb25pdG9yaW5nEgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRp",
            "b24YAiABKAkSDAoEbGluaxgDIAEoCSLzAgoNQ2x1c3RlckNvbmZpZxIPCgd2",
            "ZXJzaW9uGAEgASgJEk8KEHJlZGlzX2NvbmZpZ181XzAYAiABKAsyMy55YW5k",
            "ZXguY2xvdWQubWRiLnJlZGlzLnYxLmNvbmZpZy5SZWRpc0NvbmZpZ1NldDVf",
            "MEgAEk8KEHJlZGlzX2NvbmZpZ182XzAYBiABKAsyMy55YW5kZXguY2xvdWQu",
            "bWRiLnJlZGlzLnYxLmNvbmZpZy5SZWRpc0NvbmZpZ1NldDZfMEgAEjcKCXJl",
            "c291cmNlcxgDIAEoCzIkLnlhbmRleC5jbG91ZC5tZGIucmVkaXMudjEuUmVz",
            "b3VyY2VzEjMKE2JhY2t1cF93aW5kb3dfc3RhcnQYBCABKAsyFi5nb29nbGUu",
            "dHlwZS5UaW1lT2ZEYXkSMQoGYWNjZXNzGAUgASgLMiEueWFuZGV4LmNsb3Vk",
            "Lm1kYi5yZWRpcy52MS5BY2Nlc3NCDgoMcmVkaXNfY29uZmlnIikKBVNoYXJk",
            "EgwKBG5hbWUYASABKAkSEgoKY2x1c3Rlcl9pZBgCIAEoCSKvAwoESG9zdBIM",
            "CgRuYW1lGAEgASgJEhIKCmNsdXN0ZXJfaWQYAiABKAkSDwoHem9uZV9pZBgD",
            "IAEoCRIRCglzdWJuZXRfaWQYBCABKAkSNwoJcmVzb3VyY2VzGAUgASgLMiQu",
            "eWFuZGV4LmNsb3VkLm1kYi5yZWRpcy52MS5SZXNvdXJjZXMSMgoEcm9sZRgG",
            "IAEoDjIkLnlhbmRleC5jbG91ZC5tZGIucmVkaXMudjEuSG9zdC5Sb2xlEjYK",
            "BmhlYWx0aBgHIAEoDjImLnlhbmRleC5jbG91ZC5tZGIucmVkaXMudjEuSG9z",
            "dC5IZWFsdGgSNAoIc2VydmljZXMYCCADKAsyIi55YW5kZXguY2xvdWQubWRi",
            "LnJlZGlzLnYxLlNlcnZpY2USEgoKc2hhcmRfbmFtZRgJIAEoCSIxCgRSb2xl",
            "EhAKDFJPTEVfVU5LTk9XThAAEgoKBk1BU1RFUhABEgsKB1JFUExJQ0EQAiI/",
            "CgZIZWFsdGgSEgoOSEVBTFRIX1VOS05PV04QABIJCgVBTElWRRABEggKBERF",
            "QUQQAhIMCghERUdSQURFRBADIvcBCgdTZXJ2aWNlEjUKBHR5cGUYASABKA4y",
            "Jy55YW5kZXguY2xvdWQubWRiLnJlZGlzLnYxLlNlcnZpY2UuVHlwZRI5CgZo",
            "ZWFsdGgYAiABKA4yKS55YW5kZXguY2xvdWQubWRiLnJlZGlzLnYxLlNlcnZp",
            "Y2UuSGVhbHRoIkcKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgkKBVJF",
            "RElTEAESCwoHQVJCSVRFUhACEhEKDVJFRElTX0NMVVNURVIQAyIxCgZIZWFs",
            "dGgSEgoOSEVBTFRIX1VOS05PV04QABIJCgVBTElWRRABEggKBERFQUQQAiI6",
            "CglSZXNvdXJjZXMSGgoScmVzb3VyY2VfcHJlc2V0X2lkGAEgASgJEhEKCWRp",
            "c2tfc2l6ZRgCIAEoAyIbCgZBY2Nlc3MSEQoJZGF0YV9sZW5zGAEgASgIQmQK",
            "HXlhbmRleC5jbG91ZC5hcGkubWRiLnJlZGlzLnYxWkNnaXRodWIuY29tL3lh",
            "bmRleC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvbWRiL3JlZGlz",
            "L3YxO3JlZGlzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, global::Yandex.Cloud.Mdb.Redis.V1.Config.Redis50Reflection.Descriptor, global::Yandex.Cloud.Mdb.Redis.V1.Config.Redis60Reflection.Descriptor, global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Cluster), global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "Environment", "Monitoring", "Config", "NetworkId", "Health", "Status", "Sharded", "MaintenanceWindow", "PlannedOperation" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment), typeof(global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health), typeof(global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Monitoring), global::Yandex.Cloud.Mdb.Redis.V1.Monitoring.Parser, new[]{ "Name", "Description", "Link" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig), global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig.Parser, new[]{ "Version", "RedisConfig50", "RedisConfig60", "Resources", "BackupWindowStart", "Access" }, new[]{ "RedisConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Shard), global::Yandex.Cloud.Mdb.Redis.V1.Shard.Parser, new[]{ "Name", "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Host), global::Yandex.Cloud.Mdb.Redis.V1.Host.Parser, new[]{ "Name", "ClusterId", "ZoneId", "SubnetId", "Resources", "Role", "Health", "Services", "ShardName" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role), typeof(global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Service), global::Yandex.Cloud.Mdb.Redis.V1.Service.Parser, new[]{ "Type", "Health" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type), typeof(global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Resources), global::Yandex.Cloud.Mdb.Redis.V1.Resources.Parser, new[]{ "ResourcePresetId", "DiskSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Redis.V1.Access), global::Yandex.Cloud.Mdb.Redis.V1.Access.Parser, new[]{ "DataLens" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Description of a Redis cluster. For more information, see
  /// the Managed Service for Redis [documentation](/docs/managed-redis/concepts/).
  /// </summary>
  internal sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      monitoring_ = other.monitoring_.Clone();
      config_ = other.config_ != null ? other.config_.Clone() : null;
      networkId_ = other.networkId_;
      health_ = other.health_;
      status_ = other.status_;
      sharded_ = other.sharded_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      plannedOperation_ = other.plannedOperation_ != null ? other.plannedOperation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the Redis cluster.
    /// This ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the Redis cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the Redis cluster.
    /// The name is unique within the folder. 3-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the Redis cluster. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the Redis cluster as `key:value` pairs.
    /// Maximum 64 per cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 7;
    private global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment environment_ = global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment.Unspecified;
    /// <summary>
    /// Deployment environment of the Redis cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "monitoring" field.</summary>
    public const int MonitoringFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Redis.V1.Monitoring> _repeated_monitoring_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Redis.V1.Monitoring.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Monitoring> monitoring_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Monitoring>();
    /// <summary>
    /// Description of monitoring systems relevant to the Redis cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Monitoring> Monitoring {
      get { return monitoring_; }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 9;
    private global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig config_;
    /// <summary>
    /// Configuration of the Redis cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 10;
    private string networkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 11;
    private global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health health_ = global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health.Unknown;
    /// <summary>
    /// Aggregated cluster health.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status status_ = global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status.Unknown;
    /// <summary>
    /// Cluster status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sharded" field.</summary>
    public const int ShardedFieldNumber = 13;
    private bool sharded_;
    /// <summary>
    /// Redis cluster mode on/off.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sharded {
      get { return sharded_; }
      set {
        sharded_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 14;
    private global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceWindow maintenanceWindow_;
    /// <summary>
    /// Window of maintenance operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    /// <summary>Field number for the "planned_operation" field.</summary>
    public const int PlannedOperationFieldNumber = 15;
    private global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceOperation plannedOperation_;
    /// <summary>
    /// Maintenance operation planned at nearest maintenance_window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceOperation PlannedOperation {
      get { return plannedOperation_; }
      set {
        plannedOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if(!monitoring_.Equals(other.monitoring_)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (Health != other.Health) return false;
      if (Status != other.Status) return false;
      if (Sharded != other.Sharded) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      if (!object.Equals(PlannedOperation, other.PlannedOperation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment.Unspecified) hash ^= Environment.GetHashCode();
      hash ^= monitoring_.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health.Unknown) hash ^= Health.GetHashCode();
      if (Status != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status.Unknown) hash ^= Status.GetHashCode();
      if (Sharded != false) hash ^= Sharded.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (plannedOperation_ != null) hash ^= PlannedOperation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Environment);
      }
      monitoring_.WriteTo(output, _repeated_monitoring_codec);
      if (config_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Config);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkId);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health.Unknown) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Health);
      }
      if (Status != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Status);
      }
      if (Sharded != false) {
        output.WriteRawTag(104);
        output.WriteBool(Sharded);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MaintenanceWindow);
      }
      if (plannedOperation_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PlannedOperation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      size += monitoring_.CalculateSize(_repeated_monitoring_codec);
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (Status != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Sharded != false) {
        size += 1 + 1;
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (plannedOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannedOperation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment.Unspecified) {
        Environment = other.Environment;
      }
      monitoring_.Add(other.monitoring_);
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health.Unknown) {
        Health = other.Health;
      }
      if (other.Status != global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status.Unknown) {
        Status = other.Status;
      }
      if (other.Sharded != false) {
        Sharded = other.Sharded;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      if (other.plannedOperation_ != null) {
        if (plannedOperation_ == null) {
          PlannedOperation = new global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceOperation();
        }
        PlannedOperation.MergeFrom(other.PlannedOperation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Environment = (global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 66: {
            monitoring_.AddEntriesFrom(input, _repeated_monitoring_codec);
            break;
          }
          case 74: {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Redis.V1.ClusterConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 82: {
            NetworkId = input.ReadString();
            break;
          }
          case 88: {
            Health = (global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Health) input.ReadEnum();
            break;
          }
          case 96: {
            Status = (global::Yandex.Cloud.Mdb.Redis.V1.Cluster.Types.Status) input.ReadEnum();
            break;
          }
          case 104: {
            Sharded = input.ReadBool();
            break;
          }
          case 114: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
          case 122: {
            if (plannedOperation_ == null) {
              PlannedOperation = new global::Yandex.Cloud.Mdb.Redis.V1.MaintenanceOperation();
            }
            input.ReadMessage(PlannedOperation);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cluster message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Environment {
        [pbr::OriginalName("ENVIRONMENT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Stable environment with a conservative update policy:
        /// only hotfixes are applied during regular maintenance.
        /// </summary>
        [pbr::OriginalName("PRODUCTION")] Production = 1,
        /// <summary>
        /// Environment with more aggressive update policy: new versions
        /// are rolled out irrespective of backward compatibility.
        /// </summary>
        [pbr::OriginalName("PRESTABLE")] Prestable = 2,
      }

      internal enum Health {
        /// <summary>
        /// Cluster is in unknown state (we have no data)
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is alive and well (all hosts are alive)
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// Cluster is inoperable (it cannot perform any of its essential functions)
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// Cluster is partially alive (it can perform some of its essential functions)
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

      internal enum Status {
        /// <summary>
        /// Cluster status is unknown
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is being created
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Cluster is running
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Cluster failed
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
        /// <summary>
        /// Cluster is being updated.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 4,
        /// <summary>
        /// Cluster is stopping.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 5,
        /// <summary>
        /// Cluster stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 6,
        /// <summary>
        /// Cluster is starting.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

    }
    #endregion

  }

  internal sealed partial class Monitoring : pb::IMessage<Monitoring> {
    private static readonly pb::MessageParser<Monitoring> _parser = new pb::MessageParser<Monitoring>(() => new Monitoring());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monitoring> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring(Monitoring other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      link_ = other.link_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring Clone() {
      return new Monitoring(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Description of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    /// <summary>
    /// Link to the monitoring system charts for the Redis cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monitoring);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monitoring other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Link != other.Link) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monitoring other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClusterConfig : pb::IMessage<ClusterConfig> {
    private static readonly pb::MessageParser<ClusterConfig> _parser = new pb::MessageParser<ClusterConfig>(() => new ClusterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig(ClusterConfig other) : this() {
      version_ = other.version_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      backupWindowStart_ = other.backupWindowStart_ != null ? other.backupWindowStart_.Clone() : null;
      access_ = other.access_ != null ? other.access_.Clone() : null;
      switch (other.RedisConfigCase) {
        case RedisConfigOneofCase.RedisConfig50:
          RedisConfig50 = other.RedisConfig50.Clone();
          break;
        case RedisConfigOneofCase.RedisConfig60:
          RedisConfig60 = other.RedisConfig60.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig Clone() {
      return new ClusterConfig(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// Version of Redis server software.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "redis_config_5_0" field.</summary>
    public const int RedisConfig50FieldNumber = 2;
    /// <summary>
    /// Configuration of a Redis 5.0 server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet5_0 RedisConfig50 {
      get { return redisConfigCase_ == RedisConfigOneofCase.RedisConfig50 ? (global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet5_0) redisConfig_ : null; }
      set {
        redisConfig_ = value;
        redisConfigCase_ = value == null ? RedisConfigOneofCase.None : RedisConfigOneofCase.RedisConfig50;
      }
    }

    /// <summary>Field number for the "redis_config_6_0" field.</summary>
    public const int RedisConfig60FieldNumber = 6;
    /// <summary>
    /// Configuration of a Redis 6.0 server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet6_0 RedisConfig60 {
      get { return redisConfigCase_ == RedisConfigOneofCase.RedisConfig60 ? (global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet6_0) redisConfig_ : null; }
      set {
        redisConfig_ = value;
        redisConfigCase_ = value == null ? RedisConfigOneofCase.None : RedisConfigOneofCase.RedisConfig60;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Redis.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to Redis hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "backup_window_start" field.</summary>
    public const int BackupWindowStartFieldNumber = 4;
    private global::Google.Type.TimeOfDay backupWindowStart_;
    /// <summary>
    /// Time to start the daily backup, in the UTC timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay BackupWindowStart {
      get { return backupWindowStart_; }
      set {
        backupWindowStart_ = value;
      }
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Redis.V1.Access access_;
    /// <summary>
    /// Access policy to DB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Access Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    private object redisConfig_;
    /// <summary>Enum of possible cases for the "redis_config" oneof.</summary>
    public enum RedisConfigOneofCase {
      None = 0,
      RedisConfig50 = 2,
      RedisConfig60 = 6,
    }
    private RedisConfigOneofCase redisConfigCase_ = RedisConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedisConfigOneofCase RedisConfigCase {
      get { return redisConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRedisConfig() {
      redisConfigCase_ = RedisConfigOneofCase.None;
      redisConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (!object.Equals(RedisConfig50, other.RedisConfig50)) return false;
      if (!object.Equals(RedisConfig60, other.RedisConfig60)) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (!object.Equals(BackupWindowStart, other.BackupWindowStart)) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (RedisConfigCase != other.RedisConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig50) hash ^= RedisConfig50.GetHashCode();
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig60) hash ^= RedisConfig60.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (backupWindowStart_ != null) hash ^= BackupWindowStart.GetHashCode();
      if (access_ != null) hash ^= Access.GetHashCode();
      hash ^= (int) redisConfigCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig50) {
        output.WriteRawTag(18);
        output.WriteMessage(RedisConfig50);
      }
      if (resources_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Resources);
      }
      if (backupWindowStart_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackupWindowStart);
      }
      if (access_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Access);
      }
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig60) {
        output.WriteRawTag(50);
        output.WriteMessage(RedisConfig60);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig50) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedisConfig50);
      }
      if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig60) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RedisConfig60);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (backupWindowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupWindowStart);
      }
      if (access_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterConfig other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Mdb.Redis.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.backupWindowStart_ != null) {
        if (backupWindowStart_ == null) {
          BackupWindowStart = new global::Google.Type.TimeOfDay();
        }
        BackupWindowStart.MergeFrom(other.BackupWindowStart);
      }
      if (other.access_ != null) {
        if (access_ == null) {
          Access = new global::Yandex.Cloud.Mdb.Redis.V1.Access();
        }
        Access.MergeFrom(other.Access);
      }
      switch (other.RedisConfigCase) {
        case RedisConfigOneofCase.RedisConfig50:
          if (RedisConfig50 == null) {
            RedisConfig50 = new global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet5_0();
          }
          RedisConfig50.MergeFrom(other.RedisConfig50);
          break;
        case RedisConfigOneofCase.RedisConfig60:
          if (RedisConfig60 == null) {
            RedisConfig60 = new global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet6_0();
          }
          RedisConfig60.MergeFrom(other.RedisConfig60);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet5_0 subBuilder = new global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet5_0();
            if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig50) {
              subBuilder.MergeFrom(RedisConfig50);
            }
            input.ReadMessage(subBuilder);
            RedisConfig50 = subBuilder;
            break;
          }
          case 26: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Redis.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 34: {
            if (backupWindowStart_ == null) {
              BackupWindowStart = new global::Google.Type.TimeOfDay();
            }
            input.ReadMessage(BackupWindowStart);
            break;
          }
          case 42: {
            if (access_ == null) {
              Access = new global::Yandex.Cloud.Mdb.Redis.V1.Access();
            }
            input.ReadMessage(Access);
            break;
          }
          case 50: {
            global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet6_0 subBuilder = new global::Yandex.Cloud.Mdb.Redis.V1.Config.RedisConfigSet6_0();
            if (redisConfigCase_ == RedisConfigOneofCase.RedisConfig60) {
              subBuilder.MergeFrom(RedisConfig60);
            }
            input.ReadMessage(subBuilder);
            RedisConfig60 = subBuilder;
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Shard : pb::IMessage<Shard> {
    private static readonly pb::MessageParser<Shard> _parser = new pb::MessageParser<Shard>(() => new Shard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard(Shard other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard Clone() {
      return new Shard(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the Redis shard. The shard name is assigned by user at creation time, and cannot be changed.
    /// 1-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Redis cluster the shard belongs to. The ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shard other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Host : pb::IMessage<Host> {
    private static readonly pb::MessageParser<Host> _parser = new pb::MessageParser<Host>(() => new Host());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Host> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host(Host other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      zoneId_ = other.zoneId_;
      subnetId_ = other.subnetId_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      role_ = other.role_;
      health_ = other.health_;
      services_ = other.services_.Clone();
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host Clone() {
      return new Host(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the Redis host. The host name is assigned by MDB at creation time, and cannot be changed.
    /// 1-63 characters long.
    ///
    /// The name is unique across all existing MDB hosts in Yandex.Cloud, as it defines the FQDN of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Redis cluster. The ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 3;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the Redis host resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 4;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the host belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Redis.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to the Redis host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role role_ = global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role.Unknown;
    /// <summary>
    /// Role of the host in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 7;
    private global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health health_ = global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health.Unknown;
    /// <summary>
    /// Status code of the aggregated health of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Redis.V1.Service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Redis.V1.Service.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Service> services_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Service>();
    /// <summary>
    /// Services provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Redis.V1.Service> Services {
      get { return services_; }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 9;
    private string shardName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Host);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Host other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (SubnetId != other.SubnetId) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (Role != other.Role) return false;
      if (Health != other.Health) return false;
      if(!services_.Equals(other.services_)) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (Role != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role.Unknown) hash ^= Role.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health.Unknown) hash ^= Health.GetHashCode();
      hash ^= services_.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ZoneId);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SubnetId);
      }
      if (resources_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Resources);
      }
      if (Role != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role.Unknown) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Role);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health.Unknown) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Health);
      }
      services_.WriteTo(output, _repeated_services_codec);
      if (ShardName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (Role != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      size += services_.CalculateSize(_repeated_services_codec);
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Host other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Mdb.Redis.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.Role != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role.Unknown) {
        Role = other.Role;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health.Unknown) {
        Health = other.Health;
      }
      services_.Add(other.services_);
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            ZoneId = input.ReadString();
            break;
          }
          case 34: {
            SubnetId = input.ReadString();
            break;
          }
          case 42: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Redis.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 48: {
            Role = (global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Role) input.ReadEnum();
            break;
          }
          case 56: {
            Health = (global::Yandex.Cloud.Mdb.Redis.V1.Host.Types.Health) input.ReadEnum();
            break;
          }
          case 66: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
          case 74: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Host message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Role {
        /// <summary>
        /// Role of the host in the cluster is unknown.
        /// </summary>
        [pbr::OriginalName("ROLE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Host is the master Redis server in the cluster.
        /// </summary>
        [pbr::OriginalName("MASTER")] Master = 1,
        /// <summary>
        /// Host is a replica (standby) Redis server in the cluster.
        /// </summary>
        [pbr::OriginalName("REPLICA")] Replica = 2,
      }

      internal enum Health {
        /// <summary>
        /// Health of the host is unknown.
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The host is performing all its functions normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The host is inoperable, and cannot perform any of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// The host is degraded, and can perform only some of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

    }
    #endregion

  }

  internal sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      type_ = other.type_;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type type_ = global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type.Unspecified;
    /// <summary>
    /// Type of the service provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health health_ = global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health.Unknown;
    /// <summary>
    /// Status code of server availability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health.Unknown) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Health != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type.Unspecified) {
        Type = other.Type;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health.Unknown) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            Health = (global::Yandex.Cloud.Mdb.Redis.V1.Service.Types.Health) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The host is a Redis server.
        /// </summary>
        [pbr::OriginalName("REDIS")] Redis = 1,
        /// <summary>
        /// The host provides a Sentinel-only service (a quorum node).
        /// </summary>
        [pbr::OriginalName("ARBITER")] Arbiter = 2,
        /// <summary>
        /// The host is a Redis Cluster node.
        /// </summary>
        [pbr::OriginalName("REDIS_CLUSTER")] RedisCluster = 3,
      }

      internal enum Health {
        /// <summary>
        /// Health of the server is unknown.
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The server is working normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The server is dead or unresponsive.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
      }

    }
    #endregion

  }

  internal sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      resourcePresetId_ = other.resourcePresetId_;
      diskSize_ = other.diskSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 1;
    private string resourcePresetId_ = "";
    /// <summary>
    /// ID of the preset for computational resources available to a host (CPU, memory etc.).
    /// All available presets are listed in the [documentation](/docs/managed-redis/concepts/instance-types).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 2;
    private long diskSize_;
    /// <summary>
    /// Volume of the storage available to a host, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (DiskSize != other.DiskSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 16: {
            DiskSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Access : pb::IMessage<Access> {
    private static readonly pb::MessageParser<Access> _parser = new pb::MessageParser<Access>(() => new Access());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Access> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Redis.V1.ClusterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access(Access other) : this() {
      dataLens_ = other.dataLens_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access Clone() {
      return new Access(this);
    }

    /// <summary>Field number for the "data_lens" field.</summary>
    public const int DataLensFieldNumber = 1;
    private bool dataLens_;
    /// <summary>
    /// Allow access for DataLens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DataLens {
      get { return dataLens_; }
      set {
        dataLens_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Access);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Access other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataLens != other.DataLens) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataLens != false) hash ^= DataLens.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataLens != false) {
        output.WriteRawTag(8);
        output.WriteBool(DataLens);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataLens != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Access other) {
      if (other == null) {
        return;
      }
      if (other.DataLens != false) {
        DataLens = other.DataLens;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataLens = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
