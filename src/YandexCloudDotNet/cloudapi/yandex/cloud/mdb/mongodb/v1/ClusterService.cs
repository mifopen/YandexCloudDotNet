// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/mongodb/v1/cluster_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Mongodb.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/mongodb/v1/cluster_service.proto</summary>
  internal static partial class ClusterServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/mongodb/v1/cluster_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjF5YW5kZXgvY2xvdWQvbWRiL21vbmdvZGIvdjEvY2x1c3Rlcl9zZXJ2aWNl",
            "LnByb3RvEht5YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEaHGdvb2dsZS9h",
            "cGkvYW5ub3RhdGlvbnMucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9maWVsZF9t",
            "YXNrLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGhtn",
            "b29nbGUvdHlwZS90aW1lb2ZkYXkucHJvdG8aIHlhbmRleC9jbG91ZC9hcGkv",
            "b3BlcmF0aW9uLnByb3RvGiZ5YW5kZXgvY2xvdWQvb3BlcmF0aW9uL29wZXJh",
            "dGlvbi5wcm90bxodeWFuZGV4L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8aKHlh",
            "bmRleC9jbG91ZC9tZGIvbW9uZ29kYi92MS9iYWNrdXAucHJvdG8aKXlhbmRl",
            "eC9jbG91ZC9tZGIvbW9uZ29kYi92MS9jbHVzdGVyLnByb3RvGip5YW5kZXgv",
            "Y2xvdWQvbWRiL21vbmdvZGIvdjEvZGF0YWJhc2UucHJvdG8aJnlhbmRleC9j",
            "bG91ZC9tZGIvbW9uZ29kYi92MS91c2VyLnByb3RvGjN5YW5kZXgvY2xvdWQv",
            "bWRiL21vbmdvZGIvdjEvY29uZmlnL21vbmdvZGIzXzYucHJvdG8aM3lhbmRl",
            "eC9jbG91ZC9tZGIvbW9uZ29kYi92MS9jb25maWcvbW9uZ29kYjRfMC5wcm90",
            "bxozeWFuZGV4L2Nsb3VkL21kYi9tb25nb2RiL3YxL2NvbmZpZy9tb25nb2Ri",
            "NF8yLnByb3RvIjUKEUdldENsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQY",
            "ASABKAlCDOjHMQGKyDEEPD01MCKQAQoTTGlzdENsdXN0ZXJzUmVxdWVzdBIf",
            "Cglmb2xkZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBIdCglwYWdlX3NpemUY",
            "AiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgDIAEoCUIJisgxBTw9",
            "MTAwEhoKBmZpbHRlchgEIAEoCUIKisgxBjw9MTAwMCJnChRMaXN0Q2x1c3Rl",
            "cnNSZXNwb25zZRI2CghjbHVzdGVycxgBIAMoCzIkLnlhbmRleC5jbG91ZC5t",
            "ZGIubW9uZ29kYi52MS5DbHVzdGVyEhcKD25leHRfcGFnZV90b2tlbhgCIAEo",
            "CSLIBQoUQ3JlYXRlQ2x1c3RlclJlcXVlc3QSHwoJZm9sZGVyX2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTASKwoEbmFtZRgCIAEoCUId6McxAYrIMQQ8PTYz8scx",
            "DVthLXpBLVowLTlfXSoSHgoLZGVzY3JpcHRpb24YAyABKAlCCYrIMQU8PTI1",
            "NhKOAQoGbGFiZWxzGAQgAygLMj0ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2Ri",
            "LnYxLkNyZWF0ZUNsdXN0ZXJSZXF1ZXN0LkxhYmVsc0VudHJ5Qj+CyDEEPD02",
            "NIrIMQQ8PTYz8scxC1stXzAtOWEtel0qssgxBhoEPD02M7LIMRISEFthLXpd",
            "Wy1fMC05YS16XSoSSwoLZW52aXJvbm1lbnQYBSABKA4yMC55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuQ2x1c3Rlci5FbnZpcm9ubWVudEIE6McxARJC",
            "Cgtjb25maWdfc3BlYxgGIAEoCzInLnlhbmRleC5jbG91ZC5tZGIubW9uZ29k",
            "Yi52MS5Db25maWdTcGVjQgToxzEBEkkKDmRhdGFiYXNlX3NwZWNzGAcgAygL",
            "MikueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkRhdGFiYXNlU3BlY0IG",
            "gsgxAj4wEkEKCnVzZXJfc3BlY3MYCCADKAsyJS55YW5kZXguY2xvdWQubWRi",
            "Lm1vbmdvZGIudjEuVXNlclNwZWNCBoLIMQI+MBJBCgpob3N0X3NwZWNzGAkg",
            "AygLMiUueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkhvc3RTcGVjQgaC",
            "yDECPjASIAoKbmV0d29ya19pZBgKIAEoCUIM6McxAYrIMQQ8PTUwGi0KC0xh",
            "YmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiKwoV",
            "Q3JlYXRlQ2x1c3Rlck1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkihwMK",
            "FFVwZGF0ZUNsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjH",
            "MQGKyDEEPD01MBIvCgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90",
            "b2J1Zi5GaWVsZE1hc2sSHgoLZGVzY3JpcHRpb24YAyABKAlCCYrIMQU8PTI1",
            "NhKOAQoGbGFiZWxzGAQgAygLMj0ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2Ri",
            "LnYxLlVwZGF0ZUNsdXN0ZXJSZXF1ZXN0LkxhYmVsc0VudHJ5Qj+CyDEEPD02",
            "NIrIMQQ8PTYz8scxC1stXzAtOWEtel0qssgxBhoEPD02M7LIMRISEFthLXpd",
            "Wy1fMC05YS16XSoSPAoLY29uZmlnX3NwZWMYBSABKAsyJy55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuQ29uZmlnU3BlYxotCgtMYWJlbHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIisKFVVwZGF0ZUNsdXN0",
            "ZXJNZXRhZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJIjgKFERlbGV0ZUNsdXN0",
            "ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MCIr",
            "ChVEZWxldGVDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCSI3",
            "ChNTdGFydENsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjH",
            "MQGKyDEEPD01MCIqChRTdGFydENsdXN0ZXJNZXRhZGF0YRISCgpjbHVzdGVy",
            "X2lkGAEgASgJIjYKElN0b3BDbHVzdGVyUmVxdWVzdBIgCgpjbHVzdGVyX2lk",
            "GAEgASgJQgzoxzEBisgxBDw9NTAiKQoTU3RvcENsdXN0ZXJNZXRhZGF0YRIS",
            "CgpjbHVzdGVyX2lkGAEgASgJImMKEk1vdmVDbHVzdGVyUmVxdWVzdBIgCgpj",
            "bHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASKwoVZGVzdGluYXRpb25f",
            "Zm9sZGVyX2lkGAIgASgJQgzoxzEBisgxBDw9NTAiYgoTTW92ZUNsdXN0ZXJN",
            "ZXRhZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJEhgKEHNvdXJjZV9mb2xkZXJf",
            "aWQYAiABKAkSHQoVZGVzdGluYXRpb25fZm9sZGVyX2lkGAMgASgJIjgKFEJh",
            "Y2t1cENsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGK",
            "yDEEPD01MCIrChVCYWNrdXBDbHVzdGVyTWV0YWRhdGESEgoKY2x1c3Rlcl9p",
            "ZBgBIAEoCSLSBAoVUmVzdG9yZUNsdXN0ZXJSZXF1ZXN0EhcKCWJhY2t1cF9p",
            "ZBgBIAEoCUIE6McxARIsCgRuYW1lGAIgASgJQh7oxzEBisgxBDw9NjPyxzEO",
            "W2EtekEtWjAtOV8tXSoSHgoLZGVzY3JpcHRpb24YAyABKAlCCYrIMQU8PTI1",
            "NhKPAQoGbGFiZWxzGAQgAygLMj4ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2Ri",
            "LnYxLlJlc3RvcmVDbHVzdGVyUmVxdWVzdC5MYWJlbHNFbnRyeUI/gsgxBDw9",
            "NjSKyDEEPD02M/LHMQtbLV8wLTlhLXpdKrLIMQYaBDw9NjOyyDESEhBbYS16",
            "XVstXzAtOWEtel0qEksKC2Vudmlyb25tZW50GAUgASgOMjAueWFuZGV4LmNs",
            "b3VkLm1kYi5tb25nb2RiLnYxLkNsdXN0ZXIuRW52aXJvbm1lbnRCBOjHMQES",
            "QgoLY29uZmlnX3NwZWMYBiABKAsyJy55YW5kZXguY2xvdWQubWRiLm1vbmdv",
            "ZGIudjEuQ29uZmlnU3BlY0IE6McxARJBCgpob3N0X3NwZWNzGAcgAygLMiUu",
            "eWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkhvc3RTcGVjQgaCyDECPjAS",
            "IAoKbmV0d29ya19pZBgIIAEoCUIM6McxAYrIMQQ8PTUwEhsKCWZvbGRlcl9p",
            "ZBgJIAEoCUIIisgxBDw9NTAaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ASI/ChZSZXN0b3JlQ2x1c3Rlck1ldGFkYXRh",
            "EhIKCmNsdXN0ZXJfaWQYASABKAkSEQoJYmFja3VwX2lkGAIgASgJIrABCglM",
            "b2dSZWNvcmQSLQoJdGltZXN0YW1wGAEgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBJECgdtZXNzYWdlGAIgAygLMjMueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLkxvZ1JlY29yZC5NZXNzYWdlRW50cnkaLgoMTWVzc2Fn",
            "ZUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi+wIKFkxp",
            "c3RDbHVzdGVyTG9nc1JlcXVlc3QSIAoKY2x1c3Rlcl9pZBgBIAEoCUIM6Mcx",
            "AYrIMQQ8PTUwEhUKDWNvbHVtbl9maWx0ZXIYAiADKAkSVQoMc2VydmljZV90",
            "eXBlGAMgASgOMj8ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkxpc3RD",
            "bHVzdGVyTG9nc1JlcXVlc3QuU2VydmljZVR5cGUSLQoJZnJvbV90aW1lGAQg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIrCgd0b190aW1lGAUg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIdCglwYWdlX3NpemUY",
            "BiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgHIAEoCUIJisgxBTw9",
            "MTAwIjcKC1NlcnZpY2VUeXBlEhwKGFNFUlZJQ0VfVFlQRV9VTlNQRUNJRklF",
            "RBAAEgoKBk1PTkdPRBABImgKF0xpc3RDbHVzdGVyTG9nc1Jlc3BvbnNlEjQK",
            "BGxvZ3MYASADKAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTG9n",
            "UmVjb3JkEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJ+ChxMaXN0Q2x1c3Rl",
            "ck9wZXJhdGlvbnNSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGK",
            "yDEEPD01MBIdCglwYWdlX3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFn",
            "ZV90b2tlbhgDIAEoCUIJisgxBTw9MTAwIm8KHUxpc3RDbHVzdGVyT3BlcmF0",
            "aW9uc1Jlc3BvbnNlEjUKCm9wZXJhdGlvbnMYASADKAsyIS55YW5kZXguY2xv",
            "dWQub3BlcmF0aW9uLk9wZXJhdGlvbhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiAB",
            "KAkiewoZTGlzdENsdXN0ZXJCYWNrdXBzUmVxdWVzdBIgCgpjbHVzdGVyX2lk",
            "GAEgASgJQgzoxzEBisgxBDw9NTASHQoJcGFnZV9zaXplGAIgASgDQgr6xzEG",
            "PD0xMDAwEh0KCnBhZ2VfdG9rZW4YAyABKAlCCYrIMQU8PTEwMCJrChpMaXN0",
            "Q2x1c3RlckJhY2t1cHNSZXNwb25zZRI0CgdiYWNrdXBzGAEgAygLMiMueWFu",
            "ZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkJhY2t1cBIXCg9uZXh0X3BhZ2Vf",
            "dG9rZW4YAiABKAkieQoXTGlzdENsdXN0ZXJIb3N0c1JlcXVlc3QSIAoKY2x1",
            "c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBhZ2Vfc2l6ZRgCIAEo",
            "A0IK+scxBjw9MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDAi",
            "ZQoYTGlzdENsdXN0ZXJIb3N0c1Jlc3BvbnNlEjAKBWhvc3RzGAEgAygLMiEu",
            "eWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkhvc3QSFwoPbmV4dF9wYWdl",
            "X3Rva2VuGAIgASgJIn0KFkFkZENsdXN0ZXJIb3N0c1JlcXVlc3QSIAoKY2x1",
            "c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEkEKCmhvc3Rfc3BlY3MYAiAD",
            "KAsyJS55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuSG9zdFNwZWNCBoLI",
            "MQI+MCJBChdBZGRDbHVzdGVySG9zdHNNZXRhZGF0YRISCgpjbHVzdGVyX2lk",
            "GAEgASgJEhIKCmhvc3RfbmFtZXMYAiADKAkiYgoZRGVsZXRlQ2x1c3Rlckhv",
            "c3RzUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTAS",
            "IwoKaG9zdF9uYW1lcxgCIAMoCUIPgsgxAj4wisgxBTw9MjUzIkQKGkRlbGV0",
            "ZUNsdXN0ZXJIb3N0c01ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkSEgoK",
            "aG9zdF9uYW1lcxgCIAMoCSLPAwocRW5hYmxlQ2x1c3RlclNoYXJkaW5nUmVx",
            "dWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASWgoIbW9u",
            "Z29jZmcYAiABKAsyQi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuRW5h",
            "YmxlQ2x1c3RlclNoYXJkaW5nUmVxdWVzdC5Nb25nb0NmZ0IE6McxARJWCgZt",
            "b25nb3MYAyABKAsyQC55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuRW5h",
            "YmxlQ2x1c3RlclNoYXJkaW5nUmVxdWVzdC5Nb25nb3NCBOjHMQESQQoKaG9z",
            "dF9zcGVjcxgEIAMoCzIlLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5I",
            "b3N0U3BlY0IGgsgxAj4wGksKCE1vbmdvQ2ZnEj8KCXJlc291cmNlcxgBIAEo",
            "CzImLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5SZXNvdXJjZXNCBOjH",
            "MQEaSQoGTW9uZ29zEj8KCXJlc291cmNlcxgBIAEoCzImLnlhbmRleC5jbG91",
            "ZC5tZGIubW9uZ29kYi52MS5SZXNvdXJjZXNCBOjHMQEiMwodRW5hYmxlQ2x1",
            "c3RlclNoYXJkaW5nTWV0YWRhdGESEgoKY2x1c3Rlcl9pZBgBIAEoCSJuChZH",
            "ZXRDbHVzdGVyU2hhcmRSZXF1ZXN0EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjH",
            "MQGKyDEEPD01MBIyCgpzaGFyZF9uYW1lGAIgASgJQh7oxzEBisgxBDw9NjPy",
            "xzEOW2EtekEtWjAtOV8tXSoiegoYTGlzdENsdXN0ZXJTaGFyZHNSZXF1ZXN0",
            "EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBIdCglwYWdlX3Np",
            "emUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgDIAEoCUIJisgx",
            "BTw9MTAwImgKGUxpc3RDbHVzdGVyU2hhcmRzUmVzcG9uc2USMgoGc2hhcmRz",
            "GAEgAygLMiIueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLlNoYXJkEhcK",
            "D25leHRfcGFnZV90b2tlbhgCIAEoCSKxAQoWQWRkQ2x1c3RlclNoYXJkUmVx",
            "dWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASMgoKc2hh",
            "cmRfbmFtZRgCIAEoCUIe6McxAYrIMQQ8PTYz8scxDlthLXpBLVowLTlfLV0q",
            "EkEKCmhvc3Rfc3BlY3MYAyADKAsyJS55YW5kZXguY2xvdWQubWRiLm1vbmdv",
            "ZGIudjEuSG9zdFNwZWNCBoLIMQI+MCJBChdBZGRDbHVzdGVyU2hhcmRNZXRh",
            "ZGF0YRISCgpjbHVzdGVyX2lkGAEgASgJEhIKCnNoYXJkX25hbWUYAiABKAki",
            "cQoZRGVsZXRlQ2x1c3RlclNoYXJkUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEg",
            "ASgJQgzoxzEBisgxBDw9NTASMgoKc2hhcmRfbmFtZRgCIAEoCUIe6McxAYrI",
            "MQQ8PTYz8scxDlthLXpBLVowLTlfLV0qIkQKGkRlbGV0ZUNsdXN0ZXJTaGFy",
            "ZE1ldGFkYXRhEhIKCmNsdXN0ZXJfaWQYASABKAkSEgoKc2hhcmRfbmFtZRgC",
            "IAEoCSLCAQoISG9zdFNwZWMSGQoHem9uZV9pZBgBIAEoCUIIisgxBDw9NTAS",
            "GwoJc3VibmV0X2lkGAIgASgJQgiKyDEEPD01MBIYChBhc3NpZ25fcHVibGlj",
            "X2lwGAMgASgIEjQKBHR5cGUYBCABKA4yJi55YW5kZXguY2xvdWQubWRiLm1v",
            "bmdvZGIudjEuSG9zdC5UeXBlEi4KCnNoYXJkX25hbWUYBSABKAlCGorIMQQ8",
            "PTYz8scxDlthLXpBLVowLTlfLV0qIoUFCg5Nb25nb2RiU3BlYzNfNhJCCgZt",
            "b25nb2QYASABKAsyMi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTW9u",
            "Z29kYlNwZWMzXzYuTW9uZ29kEkYKCG1vbmdvY2ZnGAIgASgLMjQueWFuZGV4",
            "LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdvZGJTcGVjM182Lk1vbmdvQ2Zn",
            "EkIKBm1vbmdvcxgDIAEoCzIyLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52",
            "MS5Nb25nb2RiU3BlYzNfNi5Nb25nb3MaiAEKBk1vbmdvZBJDCgZjb25maWcY",
            "ASABKAsyMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1v",
            "bmdvZENvbmZpZzNfNhI5CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzGowBCghNb25nb0NmZxJFCgZj",
            "b25maWcYASABKAsyNS55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29u",
            "ZmlnLk1vbmdvQ2ZnQ29uZmlnM182EjkKCXJlc291cmNlcxgCIAEoCzImLnlh",
            "bmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5SZXNvdXJjZXMaiAEKBk1vbmdv",
            "cxJDCgZjb25maWcYASABKAsyMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIu",
            "djEuY29uZmlnLk1vbmdvc0NvbmZpZzNfNhI5CglyZXNvdXJjZXMYAiABKAsy",
            "Ji55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzIoUFCg5N",
            "b25nb2RiU3BlYzRfMBJCCgZtb25nb2QYASABKAsyMi55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuTW9uZ29kYlNwZWM0XzAuTW9uZ29kEkYKCG1vbmdv",
            "Y2ZnGAIgASgLMjQueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdv",
            "ZGJTcGVjNF8wLk1vbmdvQ2ZnEkIKBm1vbmdvcxgDIAEoCzIyLnlhbmRleC5j",
            "bG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2RiU3BlYzRfMC5Nb25nb3MaiAEK",
            "Bk1vbmdvZBJDCgZjb25maWcYASABKAsyMy55YW5kZXguY2xvdWQubWRiLm1v",
            "bmdvZGIudjEuY29uZmlnLk1vbmdvZENvbmZpZzRfMBI5CglyZXNvdXJjZXMY",
            "AiABKAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2Vz",
            "GowBCghNb25nb0NmZxJFCgZjb25maWcYASABKAsyNS55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdvQ2ZnQ29uZmlnNF8wEjkKCXJl",
            "c291cmNlcxgCIAEoCzImLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5S",
            "ZXNvdXJjZXMaiAEKBk1vbmdvcxJDCgZjb25maWcYASABKAsyMy55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdvc0NvbmZpZzRfMBI5",
            "CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIu",
            "djEuUmVzb3VyY2VzIoUFCg5Nb25nb2RiU3BlYzRfMhJCCgZtb25nb2QYASAB",
            "KAsyMi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTW9uZ29kYlNwZWM0",
            "XzIuTW9uZ29kEkYKCG1vbmdvY2ZnGAIgASgLMjQueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLk1vbmdvZGJTcGVjNF8yLk1vbmdvQ2ZnEkIKBm1vbmdv",
            "cxgDIAEoCzIyLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2Ri",
            "U3BlYzRfMi5Nb25nb3MaiAEKBk1vbmdvZBJDCgZjb25maWcYASABKAsyMy55",
            "YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdvZENvbmZp",
            "ZzRfMhI5CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xvdWQubWRiLm1v",
            "bmdvZGIudjEuUmVzb3VyY2VzGowBCghNb25nb0NmZxJFCgZjb25maWcYASAB",
            "KAsyNS55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdv",
            "Q2ZnQ29uZmlnNF8yEjkKCXJlc291cmNlcxgCIAEoCzImLnlhbmRleC5jbG91",
            "ZC5tZGIubW9uZ29kYi52MS5SZXNvdXJjZXMaiAEKBk1vbmdvcxJDCgZjb25m",
            "aWcYASABKAsyMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmln",
            "Lk1vbmdvc0NvbmZpZzRfMhI5CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzIpkDCgpDb25maWdTcGVj",
            "Eg8KB3ZlcnNpb24YASABKAkSJQodZmVhdHVyZV9jb21wYXRpYmlsaXR5X3Zl",
            "cnNpb24YBSABKAkSRwoQbW9uZ29kYl9zcGVjXzNfNhgCIAEoCzIrLnlhbmRl",
            "eC5jbG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2RiU3BlYzNfNkgAEkcKEG1v",
            "bmdvZGJfc3BlY180XzAYBCABKAsyKy55YW5kZXguY2xvdWQubWRiLm1vbmdv",
            "ZGIudjEuTW9uZ29kYlNwZWM0XzBIABJHChBtb25nb2RiX3NwZWNfNF8yGAcg",
            "ASgLMisueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdvZGJTcGVj",
            "NF8ySAASMwoTYmFja3VwX3dpbmRvd19zdGFydBgDIAEoCzIWLmdvb2dsZS50",
            "eXBlLlRpbWVPZkRheRIzCgZhY2Nlc3MYBiABKAsyIy55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuQWNjZXNzQg4KDG1vbmdvZGJfc3BlYzK/HwoOQ2x1",
            "c3RlclNlcnZpY2USjgEKA0dldBIuLnlhbmRleC5jbG91ZC5tZGIubW9uZ29k",
            "Yi52MS5HZXRDbHVzdGVyUmVxdWVzdBokLnlhbmRleC5jbG91ZC5tZGIubW9u",
            "Z29kYi52MS5DbHVzdGVyIjGC0+STAisSKS9tYW5hZ2VkLW1vbmdvZGIvdjEv",
            "Y2x1c3RlcnMve2NsdXN0ZXJfaWR9EpEBCgRMaXN0EjAueWFuZGV4LmNsb3Vk",
            "Lm1kYi5tb25nb2RiLnYxLkxpc3RDbHVzdGVyc1JlcXVlc3QaMS55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuTGlzdENsdXN0ZXJzUmVzcG9uc2UiJILT",
            "5JMCHhIcL21hbmFnZWQtbW9uZ29kYi92MS9jbHVzdGVycxKrAQoGQ3JlYXRl",
            "EjEueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkNyZWF0ZUNsdXN0ZXJS",
            "ZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24iS4LT",
            "5JMCISIcL21hbmFnZWQtbW9uZ29kYi92MS9jbHVzdGVyczoBKrLSKiAKFUNy",
            "ZWF0ZUNsdXN0ZXJNZXRhZGF0YRIHQ2x1c3RlchK4AQoGVXBkYXRlEjEueWFu",
            "ZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLlVwZGF0ZUNsdXN0ZXJSZXF1ZXN0",
            "GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24iWILT5JMCLjIp",
            "L21hbmFnZWQtbW9uZ29kYi92MS9jbHVzdGVycy97Y2x1c3Rlcl9pZH06ASqy",
            "0iogChVVcGRhdGVDbHVzdGVyTWV0YWRhdGESB0NsdXN0ZXISwwEKBkRlbGV0",
            "ZRIxLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5EZWxldGVDbHVzdGVy",
            "UmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uImOC",
            "0+STAisqKS9tYW5hZ2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJf",
            "aWR9stIqLgoVRGVsZXRlQ2x1c3Rlck1ldGFkYXRhEhVnb29nbGUucHJvdG9i",
            "dWYuRW1wdHkSuAEKBVN0YXJ0EjAueWFuZGV4LmNsb3VkLm1kYi5tb25nb2Ri",
            "LnYxLlN0YXJ0Q2x1c3RlclJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0",
            "aW9uLk9wZXJhdGlvbiJagtPkkwIxIi8vbWFuYWdlZC1tb25nb2RiL3YxL2Ns",
            "dXN0ZXJzL3tjbHVzdGVyX2lkfTpzdGFydLLSKh8KFFN0YXJ0Q2x1c3Rlck1l",
            "dGFkYXRhEgdDbHVzdGVyErQBCgRTdG9wEi8ueWFuZGV4LmNsb3VkLm1kYi5t",
            "b25nb2RiLnYxLlN0b3BDbHVzdGVyUmVxdWVzdBohLnlhbmRleC5jbG91ZC5v",
            "cGVyYXRpb24uT3BlcmF0aW9uIliC0+STAjAiLi9tYW5hZ2VkLW1vbmdvZGIv",
            "djEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9OnN0b3Cy0ioeChNTdG9wQ2x1c3Rl",
            "ck1ldGFkYXRhEgdDbHVzdGVyErcBCgRNb3ZlEi8ueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLk1vdmVDbHVzdGVyUmVxdWVzdBohLnlhbmRleC5jbG91",
            "ZC5vcGVyYXRpb24uT3BlcmF0aW9uIluC0+STAjMiLi9tYW5hZ2VkLW1vbmdv",
            "ZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9Om1vdmU6ASqy0ioeChNNb3Zl",
            "Q2x1c3Rlck1ldGFkYXRhEgdDbHVzdGVyErwBCgZCYWNrdXASMS55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuQmFja3VwQ2x1c3RlclJlcXVlc3QaIS55",
            "YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJcgtPkkwIyIjAvbWFu",
            "YWdlZC1tb25nb2RiL3YxL2NsdXN0ZXJzL3tjbHVzdGVyX2lkfTpiYWNrdXCy",
            "0iogChVCYWNrdXBDbHVzdGVyTWV0YWRhdGESB0NsdXN0ZXIStgEKB1Jlc3Rv",
            "cmUSMi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuUmVzdG9yZUNsdXN0",
            "ZXJSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24i",
            "VILT5JMCKSIkL21hbmFnZWQtbW9uZ29kYi92MS9jbHVzdGVyczpyZXN0b3Jl",
            "OgEqstIqIQoWUmVzdG9yZUNsdXN0ZXJNZXRhZGF0YRIHQ2x1c3RlchKtAQoI",
            "TGlzdExvZ3MSMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTGlzdENs",
            "dXN0ZXJMb2dzUmVxdWVzdBo0LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52",
            "MS5MaXN0Q2x1c3RlckxvZ3NSZXNwb25zZSI2gtPkkwIwEi4vbWFuYWdlZC1t",
            "b25nb2RiL3YxL2NsdXN0ZXJzL3tjbHVzdGVyX2lkfTpsb2dzEsUBCg5MaXN0",
            "T3BlcmF0aW9ucxI5LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5MaXN0",
            "Q2x1c3Rlck9wZXJhdGlvbnNSZXF1ZXN0GjoueWFuZGV4LmNsb3VkLm1kYi5t",
            "b25nb2RiLnYxLkxpc3RDbHVzdGVyT3BlcmF0aW9uc1Jlc3BvbnNlIjyC0+ST",
            "AjYSNC9tYW5hZ2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9",
            "L29wZXJhdGlvbnMSuQEKC0xpc3RCYWNrdXBzEjYueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLkxpc3RDbHVzdGVyQmFja3Vwc1JlcXVlc3QaNy55YW5k",
            "ZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTGlzdENsdXN0ZXJCYWNrdXBzUmVz",
            "cG9uc2UiOYLT5JMCMxIxL21hbmFnZWQtbW9uZ29kYi92MS9jbHVzdGVycy97",
            "Y2x1c3Rlcl9pZH0vYmFja3VwcxKxAQoJTGlzdEhvc3RzEjQueWFuZGV4LmNs",
            "b3VkLm1kYi5tb25nb2RiLnYxLkxpc3RDbHVzdGVySG9zdHNSZXF1ZXN0GjUu",
            "eWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkxpc3RDbHVzdGVySG9zdHNS",
            "ZXNwb25zZSI3gtPkkwIxEi8vbWFuYWdlZC1tb25nb2RiL3YxL2NsdXN0ZXJz",
            "L3tjbHVzdGVyX2lkfS9ob3N0cxLeAQoIQWRkSG9zdHMSMy55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuQWRkQ2x1c3Rlckhvc3RzUmVxdWVzdBohLnlh",
            "bmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uInqC0+STAkAiOy9tYW5h",
            "Z2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L2hvc3RzOmJh",
            "dGNoQ3JlYXRlOgEqstIqMAoXQWRkQ2x1c3Rlckhvc3RzTWV0YWRhdGESFWdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eRLnAQoLRGVsZXRlSG9zdHMSNi55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuRGVsZXRlQ2x1c3Rlckhvc3RzUmVxdWVz",
            "dBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIn2C0+STAkAi",
            "Oy9tYW5hZ2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L2hv",
            "c3RzOmJhdGNoRGVsZXRlOgEqstIqMwoaRGVsZXRlQ2x1c3Rlckhvc3RzTWV0",
            "YWRhdGESFWdvb2dsZS5wcm90b2J1Zi5FbXB0eRLtAQoORW5hYmxlU2hhcmRp",
            "bmcSOS55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuRW5hYmxlQ2x1c3Rl",
            "clNoYXJkaW5nUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uIn2C0+STAj0iOC9tYW5hZ2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMv",
            "e2NsdXN0ZXJfaWR9OmVuYWJsZVNoYXJkaW5nOgEqstIqNgodRW5hYmxlQ2x1",
            "c3RlclNoYXJkaW5nTWV0YWRhdGESFWdvb2dsZS5wcm90b2J1Zi5FbXB0eRKq",
            "AQoIR2V0U2hhcmQSMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuR2V0",
            "Q2x1c3RlclNoYXJkUmVxdWVzdBoiLnlhbmRleC5jbG91ZC5tZGIubW9uZ29k",
            "Yi52MS5TaGFyZCJFgtPkkwI/Ej0vbWFuYWdlZC1tb25nb2RiL3YxL2NsdXN0",
            "ZXJzL3tjbHVzdGVyX2lkfS9zaGFyZHMve3NoYXJkX25hbWV9ErUBCgpMaXN0",
            "U2hhcmRzEjUueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkxpc3RDbHVz",
            "dGVyU2hhcmRzUmVxdWVzdBo2LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52",
            "MS5MaXN0Q2x1c3RlclNoYXJkc1Jlc3BvbnNlIjiC0+STAjISMC9tYW5hZ2Vk",
            "LW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L3NoYXJkcxLDAQoI",
            "QWRkU2hhcmQSMy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuQWRkQ2x1",
            "c3RlclNoYXJkUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uIl+C0+STAjUiMC9tYW5hZ2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMv",
            "e2NsdXN0ZXJfaWR9L3NoYXJkczoBKrLSKiAKF0FkZENsdXN0ZXJTaGFyZE1l",
            "dGFkYXRhEgVTaGFyZBLmAQoLRGVsZXRlU2hhcmQSNi55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuRGVsZXRlQ2x1c3RlclNoYXJkUmVxdWVzdBohLnlh",
            "bmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uInyC0+STAj8qPS9tYW5h",
            "Z2VkLW1vbmdvZGIvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L3NoYXJkcy97",
            "c2hhcmRfbmFtZX2y0iozChpEZWxldGVDbHVzdGVyU2hhcmRNZXRhZGF0YRIV",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5QmoKH3lhbmRleC5jbG91ZC5hcGkubWRi",
            "Lm1vbmdvZGIudjFaR2dpdGh1Yi5jb20veWFuZGV4LWNsb3VkL2dvLWdlbnBy",
            "b3RvL3lhbmRleC9jbG91ZC9tZGIvbW9uZ29kYi92MTttb25nb2RiYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.BackupReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.UserReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb36Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb40Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb42Reflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.GetClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.GetClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClustersRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClustersRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClustersResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClustersResponse.Parser, new[]{ "Clusters", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.CreateClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.CreateClusterRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "Environment", "ConfigSpec", "DatabaseSpecs", "UserSpecs", "HostSpecs", "NetworkId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.CreateClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.CreateClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.UpdateClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.UpdateClusterRequest.Parser, new[]{ "ClusterId", "UpdateMask", "Description", "Labels", "ConfigSpec" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.UpdateClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.UpdateClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.StartClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.StartClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.StartClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.StartClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.StopClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.StopClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.StopClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.StopClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MoveClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.MoveClusterRequest.Parser, new[]{ "ClusterId", "DestinationFolderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MoveClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.MoveClusterMetadata.Parser, new[]{ "ClusterId", "SourceFolderId", "DestinationFolderId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.BackupClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.BackupClusterRequest.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.BackupClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.BackupClusterMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.RestoreClusterRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.RestoreClusterRequest.Parser, new[]{ "BackupId", "Name", "Description", "Labels", "Environment", "ConfigSpec", "HostSpecs", "NetworkId", "FolderId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.RestoreClusterMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.RestoreClusterMetadata.Parser, new[]{ "ClusterId", "BackupId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord), global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord.Parser, new[]{ "Timestamp", "Message" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest.Parser, new[]{ "ClusterId", "ColumnFilter", "ServiceType", "FromTime", "ToTime", "PageSize", "PageToken" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest.Types.ServiceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsResponse.Parser, new[]{ "Logs", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterOperationsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterOperationsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterOperationsResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterBackupsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterBackupsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterBackupsResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterBackupsResponse.Parser, new[]{ "Backups", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterHostsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterHostsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterHostsResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterHostsResponse.Parser, new[]{ "Hosts", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterHostsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterHostsRequest.Parser, new[]{ "ClusterId", "HostSpecs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterHostsMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterHostsMetadata.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterHostsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterHostsRequest.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterHostsMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterHostsMetadata.Parser, new[]{ "ClusterId", "HostNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Parser, new[]{ "ClusterId", "Mongocfg", "Mongos", "HostSpecs" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg.Parser, new[]{ "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos.Parser, new[]{ "Resources" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingMetadata.Parser, new[]{ "ClusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.GetClusterShardRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.GetClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterShardsRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterShardsRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterShardsResponse), global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterShardsResponse.Parser, new[]{ "Shards", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterShardRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName", "HostSpecs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterShardMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.AddClusterShardMetadata.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterShardRequest), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterShardRequest.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterShardMetadata), global::Yandex.Cloud.Mdb.Mongodb.V1.DeleteClusterShardMetadata.Parser, new[]{ "ClusterId", "ShardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec), global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser, new[]{ "ZoneId", "SubnetId", "AssignPublicIp", "Type", "ShardName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Parser, new[]{ "Mongod", "Mongocfg", "Mongos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Parser, new[]{ "Mongod", "Mongocfg", "Mongos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Parser, new[]{ "Mongod", "Mongocfg", "Mongos" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec), global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec.Parser, new[]{ "Version", "FeatureCompatibilityVersion", "MongodbSpec36", "MongodbSpec40", "MongodbSpec42", "BackupWindowStart", "Access" }, new[]{ "MongodbSpec" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetClusterRequest : pb::IMessage<GetClusterRequest> {
    private static readonly pb::MessageParser<GetClusterRequest> _parser = new pb::MessageParser<GetClusterRequest>(() => new GetClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest(GetClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterRequest Clone() {
      return new GetClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB Cluster resource to return.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClustersRequest : pb::IMessage<ListClustersRequest> {
    private static readonly pb::MessageParser<ListClustersRequest> _parser = new pb::MessageParser<ListClustersRequest>(() => new ListClustersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest(ListClustersRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersRequest Clone() {
      return new ListClustersRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list MongoDB clusters in.
    /// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token]
    /// to the [ListClustersResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Мust be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClustersResponse : pb::IMessage<ListClustersResponse> {
    private static readonly pb::MessageParser<ListClustersResponse> _parser = new pb::MessageParser<ListClustersResponse>(() => new ListClustersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClustersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse(ListClustersResponse other) : this() {
      clusters_ = other.clusters_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClustersResponse Clone() {
      return new ListClustersResponse(this);
    }

    /// <summary>Field number for the "clusters" field.</summary>
    public const int ClustersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster> _repeated_clusters_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster> clusters_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster>();
    /// <summary>
    /// List of MongoDB Cluster resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster> Clusters {
      get { return clusters_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClustersRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClustersRequest.page_token] parameter in the next list request. Each subsequent
    /// list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClustersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClustersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!clusters_.Equals(other.clusters_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= clusters_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      clusters_.WriteTo(output, _repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += clusters_.CalculateSize(_repeated_clusters_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClustersResponse other) {
      if (other == null) {
        return;
      }
      clusters_.Add(other.clusters_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            clusters_.AddEntriesFrom(input, _repeated_clusters_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterRequest : pb::IMessage<CreateClusterRequest> {
    private static readonly pb::MessageParser<CreateClusterRequest> _parser = new pb::MessageParser<CreateClusterRequest>(() => new CreateClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest(CreateClusterRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      databaseSpecs_ = other.databaseSpecs_.Clone();
      userSpecs_ = other.userSpecs_.Clone();
      hostSpecs_ = other.hostSpecs_.Clone();
      networkId_ = other.networkId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterRequest Clone() {
      return new CreateClusterRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create MongoDB cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the MongoDB cluster. The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the MongoDB cluster as `` key:value `` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment environment_ = 0;
    /// <summary>
    /// Deployment environment of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec configSpec_;
    /// <summary>
    /// Configuration and resources for hosts that should be created for the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "database_specs" field.</summary>
    public const int DatabaseSpecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseSpec> _repeated_databaseSpecs_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseSpec> databaseSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseSpec>();
    /// <summary>
    /// Descriptions of databases to be created in the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.DatabaseSpec> DatabaseSpecs {
      get { return databaseSpecs_; }
    }

    /// <summary>Field number for the "user_specs" field.</summary>
    public const int UserSpecsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.UserSpec> _repeated_userSpecs_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Mongodb.V1.UserSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.UserSpec> userSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.UserSpec>();
    /// <summary>
    /// Descriptions of database users to be created in the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.UserSpec> UserSpecs {
      get { return userSpecs_; }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(74, global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec>();
    /// <summary>
    /// Individual configurations for hosts that should be created for the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 10;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network to create the cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if(!databaseSpecs_.Equals(other.databaseSpecs_)) return false;
      if(!userSpecs_.Equals(other.userSpecs_)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      if (NetworkId != other.NetworkId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != 0) hash ^= Environment.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      hash ^= databaseSpecs_.GetHashCode();
      hash ^= userSpecs_.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Environment);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConfigSpec);
      }
      databaseSpecs_.WriteTo(output, _repeated_databaseSpecs_codec);
      userSpecs_.WriteTo(output, _repeated_userSpecs_codec);
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      size += databaseSpecs_.CalculateSize(_repeated_databaseSpecs_codec);
      size += userSpecs_.CalculateSize(_repeated_userSpecs_codec);
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != 0) {
        Environment = other.Environment;
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      databaseSpecs_.Add(other.databaseSpecs_);
      userSpecs_.Add(other.userSpecs_);
      hostSpecs_.Add(other.hostSpecs_);
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 40: {
            Environment = (global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 50: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 58: {
            databaseSpecs_.AddEntriesFrom(input, _repeated_databaseSpecs_codec);
            break;
          }
          case 66: {
            userSpecs_.AddEntriesFrom(input, _repeated_userSpecs_codec);
            break;
          }
          case 74: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
          case 82: {
            NetworkId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateClusterMetadata : pb::IMessage<CreateClusterMetadata> {
    private static readonly pb::MessageParser<CreateClusterMetadata> _parser = new pb::MessageParser<CreateClusterMetadata>(() => new CreateClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata(CreateClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateClusterMetadata Clone() {
      return new CreateClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterRequest : pb::IMessage<UpdateClusterRequest> {
    private static readonly pb::MessageParser<UpdateClusterRequest> _parser = new pb::MessageParser<UpdateClusterRequest>(() => new UpdateClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest(UpdateClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterRequest Clone() {
      return new UpdateClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB Cluster resource to update.
    /// To get the MongoDB cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the MongoDB Cluster resource should be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// New description of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the MongoDB cluster as `` key:value `` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    ///
    /// The new set of labels will completely replace the old ones. To add a label, request the current
    /// set with the [ClusterService.Get] method, then send an [ClusterService.Update] request with the new label added to the set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec configSpec_;
    /// <summary>
    /// New configuration and resources for hosts in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (configSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ConfigSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateClusterMetadata : pb::IMessage<UpdateClusterMetadata> {
    private static readonly pb::MessageParser<UpdateClusterMetadata> _parser = new pb::MessageParser<UpdateClusterMetadata>(() => new UpdateClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata(UpdateClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateClusterMetadata Clone() {
      return new UpdateClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB Cluster resource that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterRequest : pb::IMessage<DeleteClusterRequest> {
    private static readonly pb::MessageParser<DeleteClusterRequest> _parser = new pb::MessageParser<DeleteClusterRequest>(() => new DeleteClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest(DeleteClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterRequest Clone() {
      return new DeleteClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to delete.
    /// To get the MongoDB cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterMetadata : pb::IMessage<DeleteClusterMetadata> {
    private static readonly pb::MessageParser<DeleteClusterMetadata> _parser = new pb::MessageParser<DeleteClusterMetadata>(() => new DeleteClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata(DeleteClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterMetadata Clone() {
      return new DeleteClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartClusterRequest : pb::IMessage<StartClusterRequest> {
    private static readonly pb::MessageParser<StartClusterRequest> _parser = new pb::MessageParser<StartClusterRequest>(() => new StartClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest(StartClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterRequest Clone() {
      return new StartClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to start.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartClusterMetadata : pb::IMessage<StartClusterMetadata> {
    private static readonly pb::MessageParser<StartClusterMetadata> _parser = new pb::MessageParser<StartClusterMetadata>(() => new StartClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata(StartClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartClusterMetadata Clone() {
      return new StartClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopClusterRequest : pb::IMessage<StopClusterRequest> {
    private static readonly pb::MessageParser<StopClusterRequest> _parser = new pb::MessageParser<StopClusterRequest>(() => new StopClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest(StopClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterRequest Clone() {
      return new StopClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to stop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopClusterMetadata : pb::IMessage<StopClusterMetadata> {
    private static readonly pb::MessageParser<StopClusterMetadata> _parser = new pb::MessageParser<StopClusterMetadata>(() => new StopClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata(StopClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopClusterMetadata Clone() {
      return new StopClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveClusterRequest : pb::IMessage<MoveClusterRequest> {
    private static readonly pb::MessageParser<MoveClusterRequest> _parser = new pb::MessageParser<MoveClusterRequest>(() => new MoveClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest(MoveClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      destinationFolderId_ = other.destinationFolderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterRequest Clone() {
      return new MoveClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to move.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_folder_id" field.</summary>
    public const int DestinationFolderIdFieldNumber = 2;
    private string destinationFolderId_ = "";
    /// <summary>
    /// ID of the destination folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFolderId {
      get { return destinationFolderId_; }
      set {
        destinationFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (DestinationFolderId != other.DestinationFolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (DestinationFolderId.Length != 0) hash ^= DestinationFolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (DestinationFolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationFolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (DestinationFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.DestinationFolderId.Length != 0) {
        DestinationFolderId = other.DestinationFolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            DestinationFolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveClusterMetadata : pb::IMessage<MoveClusterMetadata> {
    private static readonly pb::MessageParser<MoveClusterMetadata> _parser = new pb::MessageParser<MoveClusterMetadata>(() => new MoveClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata(MoveClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      sourceFolderId_ = other.sourceFolderId_;
      destinationFolderId_ = other.destinationFolderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveClusterMetadata Clone() {
      return new MoveClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster being moved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_folder_id" field.</summary>
    public const int SourceFolderIdFieldNumber = 2;
    private string sourceFolderId_ = "";
    /// <summary>
    /// ID of the source folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceFolderId {
      get { return sourceFolderId_; }
      set {
        sourceFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_folder_id" field.</summary>
    public const int DestinationFolderIdFieldNumber = 3;
    private string destinationFolderId_ = "";
    /// <summary>
    /// ID of the destnation folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFolderId {
      get { return destinationFolderId_; }
      set {
        destinationFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SourceFolderId != other.SourceFolderId) return false;
      if (DestinationFolderId != other.DestinationFolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SourceFolderId.Length != 0) hash ^= SourceFolderId.GetHashCode();
      if (DestinationFolderId.Length != 0) hash ^= DestinationFolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SourceFolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SourceFolderId);
      }
      if (DestinationFolderId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DestinationFolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SourceFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceFolderId);
      }
      if (DestinationFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SourceFolderId.Length != 0) {
        SourceFolderId = other.SourceFolderId;
      }
      if (other.DestinationFolderId.Length != 0) {
        DestinationFolderId = other.DestinationFolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SourceFolderId = input.ReadString();
            break;
          }
          case 26: {
            DestinationFolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BackupClusterRequest : pb::IMessage<BackupClusterRequest> {
    private static readonly pb::MessageParser<BackupClusterRequest> _parser = new pb::MessageParser<BackupClusterRequest>(() => new BackupClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest(BackupClusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterRequest Clone() {
      return new BackupClusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to back up.
    /// To get the MongoDB cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class BackupClusterMetadata : pb::IMessage<BackupClusterMetadata> {
    private static readonly pb::MessageParser<BackupClusterMetadata> _parser = new pb::MessageParser<BackupClusterMetadata>(() => new BackupClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata(BackupClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupClusterMetadata Clone() {
      return new BackupClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that is being backed up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestoreClusterRequest : pb::IMessage<RestoreClusterRequest> {
    private static readonly pb::MessageParser<RestoreClusterRequest> _parser = new pb::MessageParser<RestoreClusterRequest>(() => new RestoreClusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreClusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest(RestoreClusterRequest other) : this() {
      backupId_ = other.backupId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      configSpec_ = other.configSpec_ != null ? other.configSpec_.Clone() : null;
      hostSpecs_ = other.hostSpecs_.Clone();
      networkId_ = other.networkId_;
      folderId_ = other.folderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterRequest Clone() {
      return new RestoreClusterRequest(this);
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 1;
    private string backupId_ = "";
    /// <summary>
    /// ID of the backup to create a cluster from.
    /// To get the backup ID, use a [ClusterService.ListBackups] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the new MongoDB cluster. The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the new MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the MongoDB cluster as `` key:value `` pairs. Maximum 64 per resource.
    /// For example, "project": "mvp" or "source": "dictionary".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment environment_ = 0;
    /// <summary>
    /// Deployment environment of the new MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "config_spec" field.</summary>
    public const int ConfigSpecFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec configSpec_;
    /// <summary>
    /// Configuration for the MongoDB cluster to be created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec ConfigSpec {
      get { return configSpec_; }
      set {
        configSpec_ = value;
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec>();
    /// <summary>
    /// Configurations for MongoDB hosts that should be created for
    /// the cluster that is being created from the backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 8;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network to create the MongoDB cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 9;
    private string folderId_ = "";
    /// <summary>
    /// Required. ID of the folder to create the MongoDB cluster in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreClusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreClusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BackupId != other.BackupId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if (!object.Equals(ConfigSpec, other.ConfigSpec)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (FolderId != other.FolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != 0) hash ^= Environment.GetHashCode();
      if (configSpec_ != null) hash ^= ConfigSpec.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BackupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BackupId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Environment);
      }
      if (configSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ConfigSpec);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetworkId);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(FolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      if (configSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigSpec);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreClusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != 0) {
        Environment = other.Environment;
      }
      if (other.configSpec_ != null) {
        if (configSpec_ == null) {
          ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
        }
        ConfigSpec.MergeFrom(other.ConfigSpec);
      }
      hostSpecs_.Add(other.hostSpecs_);
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BackupId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 40: {
            Environment = (global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 50: {
            if (configSpec_ == null) {
              ConfigSpec = new global::Yandex.Cloud.Mdb.Mongodb.V1.ConfigSpec();
            }
            input.ReadMessage(ConfigSpec);
            break;
          }
          case 58: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
          case 66: {
            NetworkId = input.ReadString();
            break;
          }
          case 74: {
            FolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestoreClusterMetadata : pb::IMessage<RestoreClusterMetadata> {
    private static readonly pb::MessageParser<RestoreClusterMetadata> _parser = new pb::MessageParser<RestoreClusterMetadata>(() => new RestoreClusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreClusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata(RestoreClusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      backupId_ = other.backupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreClusterMetadata Clone() {
      return new RestoreClusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the new MongoDB cluster that is being created from a backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "backup_id" field.</summary>
    public const int BackupIdFieldNumber = 2;
    private string backupId_ = "";
    /// <summary>
    /// ID of the backup that is being used for creating a cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BackupId {
      get { return backupId_; }
      set {
        backupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreClusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreClusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (BackupId != other.BackupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (BackupId.Length != 0) hash ^= BackupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (BackupId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BackupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (BackupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BackupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreClusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.BackupId.Length != 0) {
        BackupId = other.BackupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            BackupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LogRecord : pb::IMessage<LogRecord> {
    private static readonly pb::MessageParser<LogRecord> _parser = new pb::MessageParser<LogRecord>(() => new LogRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord(LogRecord other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      message_ = other.message_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord Clone() {
      return new LogRecord(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Log record timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_message_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> message_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Contents of the log record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Message {
      get { return message_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!Message.Equals(other.Message)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      message_.WriteTo(output, _map_message_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      size += message_.CalculateSize(_map_message_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogRecord other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      message_.Add(other.message_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            message_.AddEntriesFrom(input, _map_message_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterLogsRequest : pb::IMessage<ListClusterLogsRequest> {
    private static readonly pb::MessageParser<ListClusterLogsRequest> _parser = new pb::MessageParser<ListClusterLogsRequest>(() => new ListClusterLogsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterLogsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest(ListClusterLogsRequest other) : this() {
      clusterId_ = other.clusterId_;
      columnFilter_ = other.columnFilter_.Clone();
      serviceType_ = other.serviceType_;
      fromTime_ = other.fromTime_ != null ? other.fromTime_.Clone() : null;
      toTime_ = other.toTime_ != null ? other.toTime_.Clone() : null;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsRequest Clone() {
      return new ListClusterLogsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to request logs for.
    /// To get the MongoDB cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "column_filter" field.</summary>
    public const int ColumnFilterFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_columnFilter_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> columnFilter_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Columns from the logs table to request.
    /// If no columns are specified, entire log records are returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ColumnFilter {
      get { return columnFilter_; }
    }

    /// <summary>Field number for the "service_type" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest.Types.ServiceType serviceType_ = 0;
    /// <summary>
    /// Type of the service to request logs about.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest.Types.ServiceType ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = value;
      }
    }

    /// <summary>Field number for the "from_time" field.</summary>
    public const int FromTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp fromTime_;
    /// <summary>
    /// Start timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp FromTime {
      get { return fromTime_; }
      set {
        fromTime_ = value;
      }
    }

    /// <summary>Field number for the "to_time" field.</summary>
    public const int ToTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp toTime_;
    /// <summary>
    /// End timestamp for the logs request, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ToTime {
      get { return toTime_; }
      set {
        toTime_ = value;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 6;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 7;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListClusterLogsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterLogsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterLogsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!columnFilter_.Equals(other.columnFilter_)) return false;
      if (ServiceType != other.ServiceType) return false;
      if (!object.Equals(FromTime, other.FromTime)) return false;
      if (!object.Equals(ToTime, other.ToTime)) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= columnFilter_.GetHashCode();
      if (ServiceType != 0) hash ^= ServiceType.GetHashCode();
      if (fromTime_ != null) hash ^= FromTime.GetHashCode();
      if (toTime_ != null) hash ^= ToTime.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      columnFilter_.WriteTo(output, _repeated_columnFilter_codec);
      if (ServiceType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ServiceType);
      }
      if (fromTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FromTime);
      }
      if (toTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ToTime);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += columnFilter_.CalculateSize(_repeated_columnFilter_codec);
      if (ServiceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
      }
      if (fromTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FromTime);
      }
      if (toTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToTime);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterLogsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      columnFilter_.Add(other.columnFilter_);
      if (other.ServiceType != 0) {
        ServiceType = other.ServiceType;
      }
      if (other.fromTime_ != null) {
        if (fromTime_ == null) {
          FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        FromTime.MergeFrom(other.FromTime);
      }
      if (other.toTime_ != null) {
        if (toTime_ == null) {
          ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ToTime.MergeFrom(other.ToTime);
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            columnFilter_.AddEntriesFrom(input, _repeated_columnFilter_codec);
            break;
          }
          case 24: {
            ServiceType = (global::Yandex.Cloud.Mdb.Mongodb.V1.ListClusterLogsRequest.Types.ServiceType) input.ReadEnum();
            break;
          }
          case 34: {
            if (fromTime_ == null) {
              FromTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(FromTime);
            break;
          }
          case 42: {
            if (toTime_ == null) {
              ToTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ToTime);
            break;
          }
          case 48: {
            PageSize = input.ReadInt64();
            break;
          }
          case 58: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ListClusterLogsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum ServiceType {
        [pbr::OriginalName("SERVICE_TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Logs of MongoDB activity.
        /// </summary>
        [pbr::OriginalName("MONGOD")] Mongod = 1,
      }

    }
    #endregion

  }

  internal sealed partial class ListClusterLogsResponse : pb::IMessage<ListClusterLogsResponse> {
    private static readonly pb::MessageParser<ListClusterLogsResponse> _parser = new pb::MessageParser<ListClusterLogsResponse>(() => new ListClusterLogsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterLogsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse(ListClusterLogsResponse other) : this() {
      logs_ = other.logs_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterLogsResponse Clone() {
      return new ListClusterLogsResponse(this);
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord> logs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord>();
    /// <summary>
    /// Requested log records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.LogRecord> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterLogsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterLogsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterLogsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterLogsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logs_.Equals(other.logs_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logs_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterLogsResponse other) {
      if (other == null) {
        return;
      }
      logs_.Add(other.logs_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterOperationsRequest : pb::IMessage<ListClusterOperationsRequest> {
    private static readonly pb::MessageParser<ListClusterOperationsRequest> _parser = new pb::MessageParser<ListClusterOperationsRequest>(() => new ListClusterOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest(ListClusterOperationsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsRequest Clone() {
      return new ListClusterOperationsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB Cluster resource to list operations for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListClusterOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterOperationsResponse : pb::IMessage<ListClusterOperationsResponse> {
    private static readonly pb::MessageParser<ListClusterOperationsResponse> _parser = new pb::MessageParser<ListClusterOperationsResponse>(() => new ListClusterOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse(ListClusterOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterOperationsResponse Clone() {
      return new ListClusterOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of Operation resources for the specified MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterOperationsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterBackupsRequest : pb::IMessage<ListClusterBackupsRequest> {
    private static readonly pb::MessageParser<ListClusterBackupsRequest> _parser = new pb::MessageParser<ListClusterBackupsRequest>(() => new ListClusterBackupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterBackupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest(ListClusterBackupsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsRequest Clone() {
      return new ListClusterBackupsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster.
    /// To get the MongoDB cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token.  To get the next page of results, set [page_token] to the
    /// [ListClusterBackupsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterBackupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterBackupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterBackupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterBackupsResponse : pb::IMessage<ListClusterBackupsResponse> {
    private static readonly pb::MessageParser<ListClusterBackupsResponse> _parser = new pb::MessageParser<ListClusterBackupsResponse>(() => new ListClusterBackupsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterBackupsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse(ListClusterBackupsResponse other) : this() {
      backups_ = other.backups_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterBackupsResponse Clone() {
      return new ListClusterBackupsResponse(this);
    }

    /// <summary>Field number for the "backups" field.</summary>
    public const int BackupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Backup> _repeated_backups_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Mongodb.V1.Backup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Backup> backups_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Backup>();
    /// <summary>
    /// List of MongoDB Backup resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Backup> Backups {
      get { return backups_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterBackupsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterBackupsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterBackupsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterBackupsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!backups_.Equals(other.backups_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= backups_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      backups_.WriteTo(output, _repeated_backups_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += backups_.CalculateSize(_repeated_backups_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterBackupsResponse other) {
      if (other == null) {
        return;
      }
      backups_.Add(other.backups_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            backups_.AddEntriesFrom(input, _repeated_backups_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterHostsRequest : pb::IMessage<ListClusterHostsRequest> {
    private static readonly pb::MessageParser<ListClusterHostsRequest> _parser = new pb::MessageParser<ListClusterHostsRequest>(() => new ListClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest(ListClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsRequest Clone() {
      return new ListClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster.
    /// To get the MongoDB cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListClusterHostsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterHostsResponse : pb::IMessage<ListClusterHostsResponse> {
    private static readonly pb::MessageParser<ListClusterHostsResponse> _parser = new pb::MessageParser<ListClusterHostsResponse>(() => new ListClusterHostsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterHostsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse(ListClusterHostsResponse other) : this() {
      hosts_ = other.hosts_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterHostsResponse Clone() {
      return new ListClusterHostsResponse(this);
    }

    /// <summary>Field number for the "hosts" field.</summary>
    public const int HostsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Host> _repeated_hosts_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Host> hosts_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Host>();
    /// <summary>
    /// List of Host resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Host> Hosts {
      get { return hosts_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterHostsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterHostsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterHostsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterHostsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hosts_.Equals(other.hosts_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hosts_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hosts_.WriteTo(output, _repeated_hosts_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hosts_.CalculateSize(_repeated_hosts_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterHostsResponse other) {
      if (other == null) {
        return;
      }
      hosts_.Add(other.hosts_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hosts_.AddEntriesFrom(input, _repeated_hosts_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterHostsRequest : pb::IMessage<AddClusterHostsRequest> {
    private static readonly pb::MessageParser<AddClusterHostsRequest> _parser = new pb::MessageParser<AddClusterHostsRequest>(() => new AddClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest(AddClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsRequest Clone() {
      return new AddClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to add hosts to.
    /// To get the MongoDB cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec>();
    /// <summary>
    /// Configurations for MongoDB hosts that should be added to the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterHostsMetadata : pb::IMessage<AddClusterHostsMetadata> {
    private static readonly pb::MessageParser<AddClusterHostsMetadata> _parser = new pb::MessageParser<AddClusterHostsMetadata>(() => new AddClusterHostsMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterHostsMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata(AddClusterHostsMetadata other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterHostsMetadata Clone() {
      return new AddClusterHostsMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to which the hosts are being added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts that are being added to the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterHostsMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterHostsMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterHostsMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterHostsRequest : pb::IMessage<DeleteClusterHostsRequest> {
    private static readonly pb::MessageParser<DeleteClusterHostsRequest> _parser = new pb::MessageParser<DeleteClusterHostsRequest>(() => new DeleteClusterHostsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterHostsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest(DeleteClusterHostsRequest other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsRequest Clone() {
      return new DeleteClusterHostsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to remove hosts from.
    /// To get the MongoDB cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterHostsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterHostsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterHostsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterHostsMetadata : pb::IMessage<DeleteClusterHostsMetadata> {
    private static readonly pb::MessageParser<DeleteClusterHostsMetadata> _parser = new pb::MessageParser<DeleteClusterHostsMetadata>(() => new DeleteClusterHostsMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterHostsMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata(DeleteClusterHostsMetadata other) : this() {
      clusterId_ = other.clusterId_;
      hostNames_ = other.hostNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterHostsMetadata Clone() {
      return new DeleteClusterHostsMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to remove hosts from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_names" field.</summary>
    public const int HostNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_hostNames_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> hostNames_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Names of hosts that are being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HostNames {
      get { return hostNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterHostsMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterHostsMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if(!hostNames_.Equals(other.hostNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      hash ^= hostNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      hostNames_.WriteTo(output, _repeated_hostNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      size += hostNames_.CalculateSize(_repeated_hostNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterHostsMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      hostNames_.Add(other.hostNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            hostNames_.AddEntriesFrom(input, _repeated_hostNames_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class EnableClusterShardingRequest : pb::IMessage<EnableClusterShardingRequest> {
    private static readonly pb::MessageParser<EnableClusterShardingRequest> _parser = new pb::MessageParser<EnableClusterShardingRequest>(() => new EnableClusterShardingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableClusterShardingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingRequest(EnableClusterShardingRequest other) : this() {
      clusterId_ = other.clusterId_;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingRequest Clone() {
      return new EnableClusterShardingRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to enable sharding for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg mongocfg_;
    /// <summary>
    /// mongocfg specification for sharding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos mongos_;
    /// <summary>
    /// mongos specification for sharding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(34, global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec>();
    /// <summary>
    /// Configurations for mongos and mongocfg hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableClusterShardingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableClusterShardingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableClusterShardingRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
          case 34: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EnableClusterShardingRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources for mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resources_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.EnableClusterShardingRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources for mongos hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resources_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class EnableClusterShardingMetadata : pb::IMessage<EnableClusterShardingMetadata> {
    private static readonly pb::MessageParser<EnableClusterShardingMetadata> _parser = new pb::MessageParser<EnableClusterShardingMetadata>(() => new EnableClusterShardingMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableClusterShardingMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingMetadata(EnableClusterShardingMetadata other) : this() {
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableClusterShardingMetadata Clone() {
      return new EnableClusterShardingMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that sharding is being enabled for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableClusterShardingMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableClusterShardingMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableClusterShardingMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetClusterShardRequest : pb::IMessage<GetClusterShardRequest> {
    private static readonly pb::MessageParser<GetClusterShardRequest> _parser = new pb::MessageParser<GetClusterShardRequest>(() => new GetClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest(GetClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetClusterShardRequest Clone() {
      return new GetClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that the shard belongs to.
    /// To get the cluster ID use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the MongoDB shard to return.
    /// To get the name of the shard use a [ClusterService.ListShards] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardsRequest : pb::IMessage<ListClusterShardsRequest> {
    private static readonly pb::MessageParser<ListClusterShardsRequest> _parser = new pb::MessageParser<ListClusterShardsRequest>(() => new ListClusterShardsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest(ListClusterShardsRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsRequest Clone() {
      return new ListClusterShardsRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to list databases in.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListClusterShardsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListClusterShardsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListClusterShardsResponse : pb::IMessage<ListClusterShardsResponse> {
    private static readonly pb::MessageParser<ListClusterShardsResponse> _parser = new pb::MessageParser<ListClusterShardsResponse>(() => new ListClusterShardsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListClusterShardsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse(ListClusterShardsResponse other) : this() {
      shards_ = other.shards_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListClusterShardsResponse Clone() {
      return new ListClusterShardsResponse(this);
    }

    /// <summary>Field number for the "shards" field.</summary>
    public const int ShardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Shard> _repeated_shards_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Mdb.Mongodb.V1.Shard.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Shard> shards_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Shard>();
    /// <summary>
    /// List of MongoDB shards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Shard> Shards {
      get { return shards_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListClusterShardsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListClusterShardsRequest.page_token] parameter in the next list request. Each subsequent
    /// list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListClusterShardsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListClusterShardsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shards_.Equals(other.shards_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shards_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shards_.WriteTo(output, _repeated_shards_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shards_.CalculateSize(_repeated_shards_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListClusterShardsResponse other) {
      if (other == null) {
        return;
      }
      shards_.Add(other.shards_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shards_.AddEntriesFrom(input, _repeated_shards_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterShardRequest : pb::IMessage<AddClusterShardRequest> {
    private static readonly pb::MessageParser<AddClusterShardRequest> _parser = new pb::MessageParser<AddClusterShardRequest>(() => new AddClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest(AddClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      hostSpecs_ = other.hostSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardRequest Clone() {
      return new AddClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to add a shard to.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the MongoDB shard to create.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_specs" field.</summary>
    public const int HostSpecsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> _repeated_hostSpecs_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> hostSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec>();
    /// <summary>
    /// Configurations for mongod hosts to be created with the shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.HostSpec> HostSpecs {
      get { return hostSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      if(!hostSpecs_.Equals(other.hostSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      hash ^= hostSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      hostSpecs_.WriteTo(output, _repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      size += hostSpecs_.CalculateSize(_repeated_hostSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      hostSpecs_.Add(other.hostSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
          case 26: {
            hostSpecs_.AddEntriesFrom(input, _repeated_hostSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AddClusterShardMetadata : pb::IMessage<AddClusterShardMetadata> {
    private static readonly pb::MessageParser<AddClusterShardMetadata> _parser = new pb::MessageParser<AddClusterShardMetadata>(() => new AddClusterShardMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddClusterShardMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata(AddClusterShardMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddClusterShardMetadata Clone() {
      return new AddClusterShardMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that a shard is being added to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard being added.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddClusterShardMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddClusterShardMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddClusterShardMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardRequest : pb::IMessage<DeleteClusterShardRequest> {
    private static readonly pb::MessageParser<DeleteClusterShardRequest> _parser = new pb::MessageParser<DeleteClusterShardRequest>(() => new DeleteClusterShardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest(DeleteClusterShardRequest other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardRequest Clone() {
      return new DeleteClusterShardRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster to delete a shard in.
    /// To get the cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the MongoDB shard to delete.
    /// To get the name of the shard use a [ClusterService.ListShards] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteClusterShardMetadata : pb::IMessage<DeleteClusterShardMetadata> {
    private static readonly pb::MessageParser<DeleteClusterShardMetadata> _parser = new pb::MessageParser<DeleteClusterShardMetadata>(() => new DeleteClusterShardMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteClusterShardMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata(DeleteClusterShardMetadata other) : this() {
      clusterId_ = other.clusterId_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteClusterShardMetadata Clone() {
      return new DeleteClusterShardMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB cluster that a shard is being deleted in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 2;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteClusterShardMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteClusterShardMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteClusterShardMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HostSpec : pb::IMessage<HostSpec> {
    private static readonly pb::MessageParser<HostSpec> _parser = new pb::MessageParser<HostSpec>(() => new HostSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HostSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec(HostSpec other) : this() {
      zoneId_ = other.zoneId_;
      subnetId_ = other.subnetId_;
      assignPublicIp_ = other.assignPublicIp_;
      type_ = other.type_;
      shardName_ = other.shardName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HostSpec Clone() {
      return new HostSpec(this);
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the host resides.
    /// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 2;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the host should belong to. This subnet should be a part
    /// of the network that the cluster belongs to.
    /// The network ID is set in the [Cluster.network_id] field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assign_public_ip" field.</summary>
    public const int AssignPublicIpFieldNumber = 3;
    private bool assignPublicIp_;
    /// <summary>
    /// Whether the host should get a public IP address on creation.
    ///
    /// After a host has been created, this setting cannot be changed. To remove an assigned public IP, or to assign
    /// a public IP to a host without one, recreate the host with [assign_public_ip] set as needed.
    ///
    /// Possible values:
    /// * false — don't assign a public IP to the host.
    /// * true — the host should have a public IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIp {
      get { return assignPublicIp_; }
      set {
        assignPublicIp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type type_ = 0;
    /// <summary>
    /// Type of the host to be deployed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 5;
    private string shardName_ = "";
    /// <summary>
    /// Name of the shard that the host belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HostSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HostSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      if (SubnetId != other.SubnetId) return false;
      if (AssignPublicIp != other.AssignPublicIp) return false;
      if (Type != other.Type) return false;
      if (ShardName != other.ShardName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (AssignPublicIp != false) hash ^= AssignPublicIp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneId);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubnetId);
      }
      if (AssignPublicIp != false) {
        output.WriteRawTag(24);
        output.WriteBool(AssignPublicIp);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShardName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (AssignPublicIp != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HostSpec other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.AssignPublicIp != false) {
        AssignPublicIp = other.AssignPublicIp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZoneId = input.ReadString();
            break;
          }
          case 18: {
            SubnetId = input.ReadString();
            break;
          }
          case 24: {
            AssignPublicIp = input.ReadBool();
            break;
          }
          case 32: {
            Type = (global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type) input.ReadEnum();
            break;
          }
          case 42: {
            ShardName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MongodbSpec3_6 : pb::IMessage<MongodbSpec3_6> {
    private static readonly pb::MessageParser<MongodbSpec3_6> _parser = new pb::MessageParser<MongodbSpec3_6>(() => new MongodbSpec3_6());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MongodbSpec3_6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec3_6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec3_6(MongodbSpec3_6 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec3_6 Clone() {
      return new MongodbSpec3_6(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod 3.6 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg 3.6 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos 3.6 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MongodbSpec3_6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MongodbSpec3_6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MongodbSpec3_6 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MongodbSpec3_6 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig3_6 config_;
        /// <summary>
        /// Configuration for mongod 3.6 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongod host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig3_6 config_;
        /// <summary>
        /// Configuration for mongocfg 3.6 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongocfg host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig3_6 config_;
        /// <summary>
        /// Configuration for mongos 3.6 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongos host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class MongodbSpec4_0 : pb::IMessage<MongodbSpec4_0> {
    private static readonly pb::MessageParser<MongodbSpec4_0> _parser = new pb::MessageParser<MongodbSpec4_0>(() => new MongodbSpec4_0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MongodbSpec4_0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_0(MongodbSpec4_0 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_0 Clone() {
      return new MongodbSpec4_0(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod 4.0 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg 4.0 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos 4.0 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MongodbSpec4_0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MongodbSpec4_0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MongodbSpec4_0 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MongodbSpec4_0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_0 config_;
        /// <summary>
        /// Configuration for mongod 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongod host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_0 config_;
        /// <summary>
        /// Configuration for mongocfg 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongocfg host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_0 config_;
        /// <summary>
        /// Configuration for mongos 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongos host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class MongodbSpec4_2 : pb::IMessage<MongodbSpec4_2> {
    private static readonly pb::MessageParser<MongodbSpec4_2> _parser = new pb::MessageParser<MongodbSpec4_2>(() => new MongodbSpec4_2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MongodbSpec4_2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_2(MongodbSpec4_2 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpec4_2 Clone() {
      return new MongodbSpec4_2(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod 4.2 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg 4.2 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos 4.2 hosts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MongodbSpec4_2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MongodbSpec4_2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MongodbSpec4_2 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the MongodbSpec4_2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_2 config_;
        /// <summary>
        /// Configuration for mongod 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongod host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfig4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_2 config_;
        /// <summary>
        /// Configuration for mongocfg 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongocfg host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfig4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_2 config_;
        /// <summary>
        /// Configuration for mongos 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to each mongos host.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfig4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ConfigSpec : pb::IMessage<ConfigSpec> {
    private static readonly pb::MessageParser<ConfigSpec> _parser = new pb::MessageParser<ConfigSpec>(() => new ConfigSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterServiceReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec(ConfigSpec other) : this() {
      version_ = other.version_;
      featureCompatibilityVersion_ = other.featureCompatibilityVersion_;
      backupWindowStart_ = other.backupWindowStart_ != null ? other.backupWindowStart_.Clone() : null;
      access_ = other.access_ != null ? other.access_.Clone() : null;
      switch (other.MongodbSpecCase) {
        case MongodbSpecOneofCase.MongodbSpec36:
          MongodbSpec36 = other.MongodbSpec36.Clone();
          break;
        case MongodbSpecOneofCase.MongodbSpec40:
          MongodbSpec40 = other.MongodbSpec40.Clone();
          break;
        case MongodbSpecOneofCase.MongodbSpec42:
          MongodbSpec42 = other.MongodbSpec42.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigSpec Clone() {
      return new ConfigSpec(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// Version of MongoDB used in the cluster. Possible values: `3.6`, `4.0`, `4.2`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_compatibility_version" field.</summary>
    public const int FeatureCompatibilityVersionFieldNumber = 5;
    private string featureCompatibilityVersion_ = "";
    /// <summary>
    /// MongoDB feature compatibility version. See usage details in [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/setFeatureCompatibilityVersion/).
    ///
    /// Possible values:
    /// * `3.6` — persist data compatibility for version 3.6. After setting this option the data will not be compatible with 3.4 or older.
    /// * `4.0` — persist data compatibility for version 4.0. After setting this option the data will not be compatible with 3.6 or older.
    /// * `4.2` — persist data compatibility for version 4.2. After setting this option the data will not be compatible with 4.0 or older.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureCompatibilityVersion {
      get { return featureCompatibilityVersion_; }
      set {
        featureCompatibilityVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mongodb_spec_3_6" field.</summary>
    public const int MongodbSpec36FieldNumber = 2;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6 MongodbSpec36 {
      get { return mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec36 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6) mongodbSpec_ : null; }
      set {
        mongodbSpec_ = value;
        mongodbSpecCase_ = value == null ? MongodbSpecOneofCase.None : MongodbSpecOneofCase.MongodbSpec36;
      }
    }

    /// <summary>Field number for the "mongodb_spec_4_0" field.</summary>
    public const int MongodbSpec40FieldNumber = 4;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0 MongodbSpec40 {
      get { return mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec40 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0) mongodbSpec_ : null; }
      set {
        mongodbSpec_ = value;
        mongodbSpecCase_ = value == null ? MongodbSpecOneofCase.None : MongodbSpecOneofCase.MongodbSpec40;
      }
    }

    /// <summary>Field number for the "mongodb_spec_4_2" field.</summary>
    public const int MongodbSpec42FieldNumber = 7;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2 MongodbSpec42 {
      get { return mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec42 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2) mongodbSpec_ : null; }
      set {
        mongodbSpec_ = value;
        mongodbSpecCase_ = value == null ? MongodbSpecOneofCase.None : MongodbSpecOneofCase.MongodbSpec42;
      }
    }

    /// <summary>Field number for the "backup_window_start" field.</summary>
    public const int BackupWindowStartFieldNumber = 3;
    private global::Google.Type.TimeOfDay backupWindowStart_;
    /// <summary>
    /// Time to start the daily backup, in the UTC timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay BackupWindowStart {
      get { return backupWindowStart_; }
      set {
        backupWindowStart_ = value;
      }
    }

    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Access access_;
    /// <summary>
    /// Access policy to DB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Access Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    private object mongodbSpec_;
    /// <summary>Enum of possible cases for the "mongodb_spec" oneof.</summary>
    public enum MongodbSpecOneofCase {
      None = 0,
      MongodbSpec36 = 2,
      MongodbSpec40 = 4,
      MongodbSpec42 = 7,
    }
    private MongodbSpecOneofCase mongodbSpecCase_ = MongodbSpecOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbSpecOneofCase MongodbSpecCase {
      get { return mongodbSpecCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMongodbSpec() {
      mongodbSpecCase_ = MongodbSpecOneofCase.None;
      mongodbSpec_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (FeatureCompatibilityVersion != other.FeatureCompatibilityVersion) return false;
      if (!object.Equals(MongodbSpec36, other.MongodbSpec36)) return false;
      if (!object.Equals(MongodbSpec40, other.MongodbSpec40)) return false;
      if (!object.Equals(MongodbSpec42, other.MongodbSpec42)) return false;
      if (!object.Equals(BackupWindowStart, other.BackupWindowStart)) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (MongodbSpecCase != other.MongodbSpecCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (FeatureCompatibilityVersion.Length != 0) hash ^= FeatureCompatibilityVersion.GetHashCode();
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec36) hash ^= MongodbSpec36.GetHashCode();
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec40) hash ^= MongodbSpec40.GetHashCode();
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec42) hash ^= MongodbSpec42.GetHashCode();
      if (backupWindowStart_ != null) hash ^= BackupWindowStart.GetHashCode();
      if (access_ != null) hash ^= Access.GetHashCode();
      hash ^= (int) mongodbSpecCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec36) {
        output.WriteRawTag(18);
        output.WriteMessage(MongodbSpec36);
      }
      if (backupWindowStart_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BackupWindowStart);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec40) {
        output.WriteRawTag(34);
        output.WriteMessage(MongodbSpec40);
      }
      if (FeatureCompatibilityVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FeatureCompatibilityVersion);
      }
      if (access_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Access);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec42) {
        output.WriteRawTag(58);
        output.WriteMessage(MongodbSpec42);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (FeatureCompatibilityVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureCompatibilityVersion);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec36) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MongodbSpec36);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec40) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MongodbSpec40);
      }
      if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec42) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MongodbSpec42);
      }
      if (backupWindowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupWindowStart);
      }
      if (access_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigSpec other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.FeatureCompatibilityVersion.Length != 0) {
        FeatureCompatibilityVersion = other.FeatureCompatibilityVersion;
      }
      if (other.backupWindowStart_ != null) {
        if (backupWindowStart_ == null) {
          BackupWindowStart = new global::Google.Type.TimeOfDay();
        }
        BackupWindowStart.MergeFrom(other.BackupWindowStart);
      }
      if (other.access_ != null) {
        if (access_ == null) {
          Access = new global::Yandex.Cloud.Mdb.Mongodb.V1.Access();
        }
        Access.MergeFrom(other.Access);
      }
      switch (other.MongodbSpecCase) {
        case MongodbSpecOneofCase.MongodbSpec36:
          if (MongodbSpec36 == null) {
            MongodbSpec36 = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6();
          }
          MongodbSpec36.MergeFrom(other.MongodbSpec36);
          break;
        case MongodbSpecOneofCase.MongodbSpec40:
          if (MongodbSpec40 == null) {
            MongodbSpec40 = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0();
          }
          MongodbSpec40.MergeFrom(other.MongodbSpec40);
          break;
        case MongodbSpecOneofCase.MongodbSpec42:
          if (MongodbSpec42 == null) {
            MongodbSpec42 = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2();
          }
          MongodbSpec42.MergeFrom(other.MongodbSpec42);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec3_6();
            if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec36) {
              subBuilder.MergeFrom(MongodbSpec36);
            }
            input.ReadMessage(subBuilder);
            MongodbSpec36 = subBuilder;
            break;
          }
          case 26: {
            if (backupWindowStart_ == null) {
              BackupWindowStart = new global::Google.Type.TimeOfDay();
            }
            input.ReadMessage(BackupWindowStart);
            break;
          }
          case 34: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_0();
            if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec40) {
              subBuilder.MergeFrom(MongodbSpec40);
            }
            input.ReadMessage(subBuilder);
            MongodbSpec40 = subBuilder;
            break;
          }
          case 42: {
            FeatureCompatibilityVersion = input.ReadString();
            break;
          }
          case 50: {
            if (access_ == null) {
              Access = new global::Yandex.Cloud.Mdb.Mongodb.V1.Access();
            }
            input.ReadMessage(Access);
            break;
          }
          case 58: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.MongodbSpec4_2();
            if (mongodbSpecCase_ == MongodbSpecOneofCase.MongodbSpec42) {
              subBuilder.MergeFrom(MongodbSpec42);
            }
            input.ReadMessage(subBuilder);
            MongodbSpec42 = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
