// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/mdb/mongodb/v1/cluster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Mdb.Mongodb.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/mdb/mongodb/v1/cluster.proto</summary>
  internal static partial class ClusterReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/mdb/mongodb/v1/cluster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cil5YW5kZXgvY2xvdWQvbWRiL21vbmdvZGIvdjEvY2x1c3Rlci5wcm90bxIb",
            "eWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxGh9nb29nbGUvcHJvdG9idWYv",
            "dGltZXN0YW1wLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJv",
            "dG8aG2dvb2dsZS90eXBlL3RpbWVvZmRheS5wcm90bxozeWFuZGV4L2Nsb3Vk",
            "L21kYi9tb25nb2RiL3YxL2NvbmZpZy9tb25nb2RiM182LnByb3RvGjN5YW5k",
            "ZXgvY2xvdWQvbWRiL21vbmdvZGIvdjEvY29uZmlnL21vbmdvZGI0XzAucHJv",
            "dG8aM3lhbmRleC9jbG91ZC9tZGIvbW9uZ29kYi92MS9jb25maWcvbW9uZ29k",
            "YjRfMi5wcm90bxozeWFuZGV4L2Nsb3VkL21kYi9tb25nb2RiL3YxL2NvbmZp",
            "Zy9tb25nb2RiNF80LnByb3RvGi15YW5kZXgvY2xvdWQvbWRiL21vbmdvZGIv",
            "djEvbWFpbnRlbmFuY2UucHJvdG8i7AcKB0NsdXN0ZXISCgoCaWQYASABKAkS",
            "EQoJZm9sZGVyX2lkGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEgwKBG5hbWUYBCABKAkSEwoLZGVzY3Jp",
            "cHRpb24YBSABKAkSQAoGbGFiZWxzGAYgAygLMjAueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLkNsdXN0ZXIuTGFiZWxzRW50cnkSRQoLZW52aXJvbm1l",
            "bnQYByABKA4yMC55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuQ2x1c3Rl",
            "ci5FbnZpcm9ubWVudBI7Cgptb25pdG9yaW5nGAggAygLMicueWFuZGV4LmNs",
            "b3VkLm1kYi5tb25nb2RiLnYxLk1vbml0b3JpbmcSOgoGY29uZmlnGAkgASgL",
            "MioueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkNsdXN0ZXJDb25maWcS",
            "EgoKbmV0d29ya19pZBgKIAEoCRI7CgZoZWFsdGgYCyABKA4yKy55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuQ2x1c3Rlci5IZWFsdGgSOwoGc3RhdHVz",
            "GAwgASgOMisueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLkNsdXN0ZXIu",
            "U3RhdHVzEg8KB3NoYXJkZWQYDSABKAgSSgoSbWFpbnRlbmFuY2Vfd2luZG93",
            "GA4gASgLMi4ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1haW50ZW5h",
            "bmNlV2luZG93EkwKEXBsYW5uZWRfb3BlcmF0aW9uGA8gASgLMjEueWFuZGV4",
            "LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1haW50ZW5hbmNlT3BlcmF0aW9uGi0K",
            "C0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi",
            "SQoLRW52aXJvbm1lbnQSGwoXRU5WSVJPTk1FTlRfVU5TUEVDSUZJRUQQABIO",
            "CgpQUk9EVUNUSU9OEAESDQoJUFJFU1RBQkxFEAIiPwoGSGVhbHRoEhIKDkhF",
            "QUxUSF9VTktOT1dOEAASCQoFQUxJVkUQARIICgRERUFEEAISDAoIREVHUkFE",
            "RUQQAyJ5CgZTdGF0dXMSEgoOU1RBVFVTX1VOS05PV04QABIMCghDUkVBVElO",
            "RxABEgsKB1JVTk5JTkcQAhIJCgVFUlJPUhADEgwKCFVQREFUSU5HEAQSDAoI",
            "U1RPUFBJTkcQBRILCgdTVE9QUEVEEAYSDAoIU1RBUlRJTkcQByI9CgpNb25p",
            "dG9yaW5nEgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSDAoE",
            "bGluaxgDIAEoCSL8AwoNQ2x1c3RlckNvbmZpZxIPCgd2ZXJzaW9uGAEgASgJ",
            "EiUKHWZlYXR1cmVfY29tcGF0aWJpbGl0eV92ZXJzaW9uGAUgASgJEj4KC21v",
            "bmdvZGJfM182GAIgASgLMicueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYx",
            "Lk1vbmdvZGIzXzZIABI+Cgttb25nb2RiXzRfMBgEIAEoCzInLnlhbmRleC5j",
            "bG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2RiNF8wSAASPgoLbW9uZ29kYl80",
            "XzIYByABKAsyJy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTW9uZ29k",
            "YjRfMkgAEj4KC21vbmdvZGJfNF80GAggASgLMicueWFuZGV4LmNsb3VkLm1k",
            "Yi5tb25nb2RiLnYxLk1vbmdvZGI0XzRIABIzChNiYWNrdXBfd2luZG93X3N0",
            "YXJ0GAMgASgLMhYuZ29vZ2xlLnR5cGUuVGltZU9mRGF5Ej4KGWJhY2t1cF9y",
            "ZXRhaW5fcGVyaW9kX2RheXMYCSABKAsyGy5nb29nbGUucHJvdG9idWYuSW50",
            "NjRWYWx1ZRIzCgZhY2Nlc3MYBiABKAsyIy55YW5kZXguY2xvdWQubWRiLm1v",
            "bmdvZGIudjEuQWNjZXNzQgkKB21vbmdvZGIisgcKCk1vbmdvZGIzXzYSPgoG",
            "bW9uZ29kGAEgASgLMi4ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1v",
            "bmdvZGIzXzYuTW9uZ29kEkIKCG1vbmdvY2ZnGAIgASgLMjAueWFuZGV4LmNs",
            "b3VkLm1kYi5tb25nb2RiLnYxLk1vbmdvZGIzXzYuTW9uZ29DZmcSPgoGbW9u",
            "Z29zGAMgASgLMi4ueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdv",
            "ZGIzXzYuTW9uZ29zEkYKCm1vbmdvaW5mcmEYBCABKAsyMi55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuTW9uZ29kYjNfNi5Nb25nb0luZnJhGosBCgZN",
            "b25nb2QSRgoGY29uZmlnGAEgASgLMjYueWFuZGV4LmNsb3VkLm1kYi5tb25n",
            "b2RiLnYxLmNvbmZpZy5Nb25nb2RDb25maWdTZXQzXzYSOQoJcmVzb3VyY2Vz",
            "GAIgASgLMiYueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLlJlc291cmNl",
            "cxqPAQoITW9uZ29DZmcSSAoGY29uZmlnGAEgASgLMjgueWFuZGV4LmNsb3Vk",
            "Lm1kYi5tb25nb2RiLnYxLmNvbmZpZy5Nb25nb0NmZ0NvbmZpZ1NldDNfNhI5",
            "CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIu",
            "djEuUmVzb3VyY2VzGosBCgZNb25nb3MSRgoGY29uZmlnGAEgASgLMjYueWFu",
            "ZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLmNvbmZpZy5Nb25nb3NDb25maWdT",
            "ZXQzXzYSOQoJcmVzb3VyY2VzGAIgASgLMiYueWFuZGV4LmNsb3VkLm1kYi5t",
            "b25nb2RiLnYxLlJlc291cmNlcxrpAQoKTW9uZ29JbmZyYRJNCg1jb25maWdf",
            "bW9uZ29zGAEgASgLMjYueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLmNv",
            "bmZpZy5Nb25nb3NDb25maWdTZXQzXzYSUQoPY29uZmlnX21vbmdvY2ZnGAIg",
            "ASgLMjgueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLmNvbmZpZy5Nb25n",
            "b0NmZ0NvbmZpZ1NldDNfNhI5CglyZXNvdXJjZXMYAyABKAsyJi55YW5kZXgu",
            "Y2xvdWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzIrIHCgpNb25nb2RiNF8w",
            "Ej4KBm1vbmdvZBgBIAEoCzIuLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52",
            "MS5Nb25nb2RiNF8wLk1vbmdvZBJCCghtb25nb2NmZxgCIAEoCzIwLnlhbmRl",
            "eC5jbG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2RiNF8wLk1vbmdvQ2ZnEj4K",
            "Bm1vbmdvcxgDIAEoCzIuLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5N",
            "b25nb2RiNF8wLk1vbmdvcxJGCgptb25nb2luZnJhGAQgASgLMjIueWFuZGV4",
            "LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdvZGI0XzAuTW9uZ29JbmZyYRqL",
            "AQoGTW9uZ29kEkYKBmNvbmZpZxgBIAEoCzI2LnlhbmRleC5jbG91ZC5tZGIu",
            "bW9uZ29kYi52MS5jb25maWcuTW9uZ29kQ29uZmlnU2V0NF8wEjkKCXJlc291",
            "cmNlcxgCIAEoCzImLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5SZXNv",
            "dXJjZXMajwEKCE1vbmdvQ2ZnEkgKBmNvbmZpZxgBIAEoCzI4LnlhbmRleC5j",
            "bG91ZC5tZGIubW9uZ29kYi52MS5jb25maWcuTW9uZ29DZmdDb25maWdTZXQ0",
            "XzASOQoJcmVzb3VyY2VzGAIgASgLMiYueWFuZGV4LmNsb3VkLm1kYi5tb25n",
            "b2RiLnYxLlJlc291cmNlcxqLAQoGTW9uZ29zEkYKBmNvbmZpZxgBIAEoCzI2",
            "LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5jb25maWcuTW9uZ29zQ29u",
            "ZmlnU2V0NF8wEjkKCXJlc291cmNlcxgCIAEoCzImLnlhbmRleC5jbG91ZC5t",
            "ZGIubW9uZ29kYi52MS5SZXNvdXJjZXMa6QEKCk1vbmdvSW5mcmESTQoNY29u",
            "ZmlnX21vbmdvcxgBIAEoCzI2LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52",
            "MS5jb25maWcuTW9uZ29zQ29uZmlnU2V0NF8wElEKD2NvbmZpZ19tb25nb2Nm",
            "ZxgCIAEoCzI4LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5jb25maWcu",
            "TW9uZ29DZmdDb25maWdTZXQ0XzASOQoJcmVzb3VyY2VzGAMgASgLMiYueWFu",
            "ZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLlJlc291cmNlcyKyBwoKTW9uZ29k",
            "YjRfMhI+CgZtb25nb2QYASABKAsyLi55YW5kZXguY2xvdWQubWRiLm1vbmdv",
            "ZGIudjEuTW9uZ29kYjRfMi5Nb25nb2QSQgoIbW9uZ29jZmcYAiABKAsyMC55",
            "YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTW9uZ29kYjRfMi5Nb25nb0Nm",
            "ZxI+CgZtb25nb3MYAyABKAsyLi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIu",
            "djEuTW9uZ29kYjRfMi5Nb25nb3MSRgoKbW9uZ29pbmZyYRgEIAEoCzIyLnlh",
            "bmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5Nb25nb2RiNF8yLk1vbmdvSW5m",
            "cmEaiwEKBk1vbmdvZBJGCgZjb25maWcYASABKAsyNi55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdvZENvbmZpZ1NldDRfMhI5Cgly",
            "ZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEu",
            "UmVzb3VyY2VzGo8BCghNb25nb0NmZxJICgZjb25maWcYASABKAsyOC55YW5k",
            "ZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdvQ2ZnQ29uZmln",
            "U2V0NF8yEjkKCXJlc291cmNlcxgCIAEoCzImLnlhbmRleC5jbG91ZC5tZGIu",
            "bW9uZ29kYi52MS5SZXNvdXJjZXMaiwEKBk1vbmdvcxJGCgZjb25maWcYASAB",
            "KAsyNi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29uZmlnLk1vbmdv",
            "c0NvbmZpZ1NldDRfMhI5CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xv",
            "dWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzGukBCgpNb25nb0luZnJhEk0K",
            "DWNvbmZpZ19tb25nb3MYASABKAsyNi55YW5kZXguY2xvdWQubWRiLm1vbmdv",
            "ZGIudjEuY29uZmlnLk1vbmdvc0NvbmZpZ1NldDRfMhJRCg9jb25maWdfbW9u",
            "Z29jZmcYAiABKAsyOC55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuY29u",
            "ZmlnLk1vbmdvQ2ZnQ29uZmlnU2V0NF8yEjkKCXJlc291cmNlcxgDIAEoCzIm",
            "LnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5SZXNvdXJjZXMisgcKCk1v",
            "bmdvZGI0XzQSPgoGbW9uZ29kGAEgASgLMi4ueWFuZGV4LmNsb3VkLm1kYi5t",
            "b25nb2RiLnYxLk1vbmdvZGI0XzQuTW9uZ29kEkIKCG1vbmdvY2ZnGAIgASgL",
            "MjAueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLk1vbmdvZGI0XzQuTW9u",
            "Z29DZmcSPgoGbW9uZ29zGAMgASgLMi4ueWFuZGV4LmNsb3VkLm1kYi5tb25n",
            "b2RiLnYxLk1vbmdvZGI0XzQuTW9uZ29zEkYKCm1vbmdvaW5mcmEYBCABKAsy",
            "Mi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuTW9uZ29kYjRfNC5Nb25n",
            "b0luZnJhGosBCgZNb25nb2QSRgoGY29uZmlnGAEgASgLMjYueWFuZGV4LmNs",
            "b3VkLm1kYi5tb25nb2RiLnYxLmNvbmZpZy5Nb25nb2RDb25maWdTZXQ0XzQS",
            "OQoJcmVzb3VyY2VzGAIgASgLMiYueWFuZGV4LmNsb3VkLm1kYi5tb25nb2Ri",
            "LnYxLlJlc291cmNlcxqPAQoITW9uZ29DZmcSSAoGY29uZmlnGAEgASgLMjgu",
            "eWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLmNvbmZpZy5Nb25nb0NmZ0Nv",
            "bmZpZ1NldDRfNBI5CglyZXNvdXJjZXMYAiABKAsyJi55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzGosBCgZNb25nb3MSRgoGY29uZmln",
            "GAEgASgLMjYueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLmNvbmZpZy5N",
            "b25nb3NDb25maWdTZXQ0XzQSOQoJcmVzb3VyY2VzGAIgASgLMiYueWFuZGV4",
            "LmNsb3VkLm1kYi5tb25nb2RiLnYxLlJlc291cmNlcxrpAQoKTW9uZ29JbmZy",
            "YRJNCg1jb25maWdfbW9uZ29zGAEgASgLMjYueWFuZGV4LmNsb3VkLm1kYi5t",
            "b25nb2RiLnYxLmNvbmZpZy5Nb25nb3NDb25maWdTZXQ0XzQSUQoPY29uZmln",
            "X21vbmdvY2ZnGAIgASgLMjgueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYx",
            "LmNvbmZpZy5Nb25nb0NmZ0NvbmZpZ1NldDRfNBI5CglyZXNvdXJjZXMYAyAB",
            "KAsyJi55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzIikK",
            "BVNoYXJkEgwKBG5hbWUYASABKAkSEgoKY2x1c3Rlcl9pZBgCIAEoCSLeBAoE",
            "SG9zdBIMCgRuYW1lGAEgASgJEhIKCmNsdXN0ZXJfaWQYAiABKAkSDwoHem9u",
            "ZV9pZBgDIAEoCRI5CglyZXNvdXJjZXMYBCABKAsyJi55YW5kZXguY2xvdWQu",
            "bWRiLm1vbmdvZGIudjEuUmVzb3VyY2VzEjQKBHJvbGUYBSABKA4yJi55YW5k",
            "ZXguY2xvdWQubWRiLm1vbmdvZGIudjEuSG9zdC5Sb2xlEjgKBmhlYWx0aBgG",
            "IAEoDjIoLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5Ib3N0LkhlYWx0",
            "aBI2CghzZXJ2aWNlcxgHIAMoCzIkLnlhbmRleC5jbG91ZC5tZGIubW9uZ29k",
            "Yi52MS5TZXJ2aWNlEhEKCXN1Ym5ldF9pZBgIIAEoCRIYChBhc3NpZ25fcHVi",
            "bGljX2lwGAkgASgIEhIKCnNoYXJkX25hbWUYCiABKAkSNAoEdHlwZRgLIAEo",
            "DjImLnlhbmRleC5jbG91ZC5tZGIubW9uZ29kYi52MS5Ib3N0LlR5cGUiUgoE",
            "VHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASCgoGTU9OR09EEAESCgoGTU9O",
            "R09TEAISDAoITU9OR09DRkcQAxIOCgpNT05HT0lORlJBEAQiNAoEUm9sZRIQ",
            "CgxST0xFX1VOS05PV04QABILCgdQUklNQVJZEAESDQoJU0VDT05EQVJZEAIi",
            "PwoGSGVhbHRoEhIKDkhFQUxUSF9VTktOT1dOEAASCQoFQUxJVkUQARIICgRE",
            "RUFEEAISDAoIREVHUkFERUQQAyL2AQoHU2VydmljZRI3CgR0eXBlGAEgASgO",
            "MikueWFuZGV4LmNsb3VkLm1kYi5tb25nb2RiLnYxLlNlcnZpY2UuVHlwZRI7",
            "CgZoZWFsdGgYAiABKA4yKy55YW5kZXguY2xvdWQubWRiLm1vbmdvZGIudjEu",
            "U2VydmljZS5IZWFsdGgiQgoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAAS",
            "CgoGTU9OR09EEAESCgoGTU9OR09TEAISDAoITU9OR09DRkcQAyIxCgZIZWFs",
            "dGgSEgoOSEVBTFRIX1VOS05PV04QABIJCgVBTElWRRABEggKBERFQUQQAiJQ",
            "CglSZXNvdXJjZXMSGgoScmVzb3VyY2VfcHJlc2V0X2lkGAEgASgJEhEKCWRp",
            "c2tfc2l6ZRgCIAEoAxIUCgxkaXNrX3R5cGVfaWQYAyABKAkiGwoGQWNjZXNz",
            "EhEKCWRhdGFfbGVucxgBIAEoCEJqCh95YW5kZXguY2xvdWQuYXBpLm1kYi5t",
            "b25nb2RiLnYxWkdnaXRodWIuY29tL3lhbmRleC1jbG91ZC9nby1nZW5wcm90",
            "by95YW5kZXgvY2xvdWQvbWRiL21vbmdvZGIvdjE7bW9uZ29kYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Type.TimeofdayReflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb36Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb40Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb42Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.Config.Mongodb44Reflection.Descriptor, global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster), global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "Environment", "Monitoring", "Config", "NetworkId", "Health", "Status", "Sharded", "MaintenanceWindow", "PlannedOperation" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment), typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health), typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring), global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring.Parser, new[]{ "Name", "Description", "Link" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig), global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig.Parser, new[]{ "Version", "FeatureCompatibilityVersion", "Mongodb36", "Mongodb40", "Mongodb42", "Mongodb44", "BackupWindowStart", "BackupRetainPeriodDays", "Access" }, new[]{ "Mongodb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Parser, new[]{ "Mongod", "Mongocfg", "Mongos", "Mongoinfra" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra.Parser, new[]{ "ConfigMongos", "ConfigMongocfg", "Resources" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Parser, new[]{ "Mongod", "Mongocfg", "Mongos", "Mongoinfra" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra.Parser, new[]{ "ConfigMongos", "ConfigMongocfg", "Resources" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Parser, new[]{ "Mongod", "Mongocfg", "Mongos", "Mongoinfra" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra.Parser, new[]{ "ConfigMongos", "ConfigMongocfg", "Resources" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Parser, new[]{ "Mongod", "Mongocfg", "Mongos", "Mongoinfra" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos.Parser, new[]{ "Config", "Resources" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra), global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra.Parser, new[]{ "ConfigMongos", "ConfigMongocfg", "Resources" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Shard), global::Yandex.Cloud.Mdb.Mongodb.V1.Shard.Parser, new[]{ "Name", "ClusterId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Host), global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Parser, new[]{ "Name", "ClusterId", "ZoneId", "Resources", "Role", "Health", "Services", "SubnetId", "AssignPublicIp", "ShardName", "Type" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type), typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role), typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Service), global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Parser, new[]{ "Type", "Health" }, null, new[]{ typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type), typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Resources), global::Yandex.Cloud.Mdb.Mongodb.V1.Resources.Parser, new[]{ "ResourcePresetId", "DiskSize", "DiskTypeId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Mdb.Mongodb.V1.Access), global::Yandex.Cloud.Mdb.Mongodb.V1.Access.Parser, new[]{ "DataLens" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A managed MongoDB cluster. For more information, see the [documentation](/docs/managed-mongodb/concepts).
  /// </summary>
  internal sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      environment_ = other.environment_;
      monitoring_ = other.monitoring_.Clone();
      config_ = other.config_ != null ? other.config_.Clone() : null;
      networkId_ = other.networkId_;
      health_ = other.health_;
      status_ = other.status_;
      sharded_ = other.sharded_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      plannedOperation_ = other.plannedOperation_ != null ? other.plannedOperation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the MongoDB cluster.
    /// This ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the MongoDB cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the MongoDB cluster.
    /// The name is unique within the folder. 1-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the MongoDB cluster. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Custom labels for the MongoDB cluster as `` key:value `` pairs. Maximum 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 7;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment environment_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment.Unspecified;
    /// <summary>
    /// Deployment environment of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment Environment {
      get { return environment_; }
      set {
        environment_ = value;
      }
    }

    /// <summary>Field number for the "monitoring" field.</summary>
    public const int MonitoringFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring> _repeated_monitoring_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring> monitoring_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring>();
    /// <summary>
    /// Description of monitoring systems relevant to the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Monitoring> Monitoring {
      get { return monitoring_; }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 9;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig config_;
    /// <summary>
    /// Configuration of the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 10;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network that the cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 11;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health health_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health.Unknown;
    /// <summary>
    /// Aggregated cluster health.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 12;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status status_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status.Unknown;
    /// <summary>
    /// Current state of the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "sharded" field.</summary>
    public const int ShardedFieldNumber = 13;
    private bool sharded_;
    /// <summary>
    /// Indicates current sharding status of the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sharded {
      get { return sharded_; }
      set {
        sharded_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 14;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceWindow maintenanceWindow_;
    /// <summary>
    /// Window of maintenance operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    /// <summary>Field number for the "planned_operation" field.</summary>
    public const int PlannedOperationFieldNumber = 15;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceOperation plannedOperation_;
    /// <summary>
    /// Maintenance operation planned at nearest maintenance_window.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceOperation PlannedOperation {
      get { return plannedOperation_; }
      set {
        plannedOperation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Environment != other.Environment) return false;
      if(!monitoring_.Equals(other.monitoring_)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (Health != other.Health) return false;
      if (Status != other.Status) return false;
      if (Sharded != other.Sharded) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      if (!object.Equals(PlannedOperation, other.PlannedOperation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Environment != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment.Unspecified) hash ^= Environment.GetHashCode();
      hash ^= monitoring_.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health.Unknown) hash ^= Health.GetHashCode();
      if (Status != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status.Unknown) hash ^= Status.GetHashCode();
      if (Sharded != false) hash ^= Sharded.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (plannedOperation_ != null) hash ^= PlannedOperation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Environment);
      }
      monitoring_.WriteTo(output, _repeated_monitoring_codec);
      if (config_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Config);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkId);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health.Unknown) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Health);
      }
      if (Status != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) Status);
      }
      if (Sharded != false) {
        output.WriteRawTag(104);
        output.WriteBool(Sharded);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MaintenanceWindow);
      }
      if (plannedOperation_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PlannedOperation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Environment != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Environment);
      }
      size += monitoring_.CalculateSize(_repeated_monitoring_codec);
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (Status != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Sharded != false) {
        size += 1 + 1;
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (plannedOperation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlannedOperation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Environment != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment.Unspecified) {
        Environment = other.Environment;
      }
      monitoring_.Add(other.monitoring_);
      if (other.config_ != null) {
        if (config_ == null) {
          Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health.Unknown) {
        Health = other.Health;
      }
      if (other.Status != global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status.Unknown) {
        Status = other.Status;
      }
      if (other.Sharded != false) {
        Sharded = other.Sharded;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      if (other.plannedOperation_ != null) {
        if (plannedOperation_ == null) {
          PlannedOperation = new global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceOperation();
        }
        PlannedOperation.MergeFrom(other.PlannedOperation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Environment = (global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Environment) input.ReadEnum();
            break;
          }
          case 66: {
            monitoring_.AddEntriesFrom(input, _repeated_monitoring_codec);
            break;
          }
          case 74: {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterConfig();
            }
            input.ReadMessage(Config);
            break;
          }
          case 82: {
            NetworkId = input.ReadString();
            break;
          }
          case 88: {
            Health = (global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Health) input.ReadEnum();
            break;
          }
          case 96: {
            Status = (global::Yandex.Cloud.Mdb.Mongodb.V1.Cluster.Types.Status) input.ReadEnum();
            break;
          }
          case 104: {
            Sharded = input.ReadBool();
            break;
          }
          case 114: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
          case 122: {
            if (plannedOperation_ == null) {
              PlannedOperation = new global::Yandex.Cloud.Mdb.Mongodb.V1.MaintenanceOperation();
            }
            input.ReadMessage(PlannedOperation);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cluster message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Deployment environment.
      /// </summary>
      internal enum Environment {
        [pbr::OriginalName("ENVIRONMENT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Stable environment with a conservative update policy: only hotfixes
        /// are applied during regular maintenance.
        /// </summary>
        [pbr::OriginalName("PRODUCTION")] Production = 1,
        /// <summary>
        /// Environment with more aggressive update policy: new versions
        /// are rolled out irrespective of backward compatibility.
        /// </summary>
        [pbr::OriginalName("PRESTABLE")] Prestable = 2,
      }

      internal enum Health {
        /// <summary>
        /// State of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is alive and well ([Host.health] for every host in the cluster is ALIVE).
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

      internal enum Status {
        /// <summary>
        /// Cluster state is unknown.
        /// </summary>
        [pbr::OriginalName("STATUS_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Cluster is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Cluster is running normally.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Cluster encountered a problem and cannot operate.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
        /// <summary>
        /// Cluster is being updated.
        /// </summary>
        [pbr::OriginalName("UPDATING")] Updating = 4,
        /// <summary>
        /// Cluster is stopping.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 5,
        /// <summary>
        /// Cluster stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 6,
        /// <summary>
        /// Cluster is starting.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

    }
    #endregion

  }

  /// <summary>
  /// Monitoring system.
  /// </summary>
  internal sealed partial class Monitoring : pb::IMessage<Monitoring> {
    private static readonly pb::MessageParser<Monitoring> _parser = new pb::MessageParser<Monitoring>(() => new Monitoring());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Monitoring> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring(Monitoring other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      link_ = other.link_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Monitoring Clone() {
      return new Monitoring(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Description of the monitoring system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    /// <summary>
    /// Link to the monitoring system charts for the MongoDB cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Monitoring);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Monitoring other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (Link != other.Link) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Monitoring other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ClusterConfig : pb::IMessage<ClusterConfig> {
    private static readonly pb::MessageParser<ClusterConfig> _parser = new pb::MessageParser<ClusterConfig>(() => new ClusterConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClusterConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig(ClusterConfig other) : this() {
      version_ = other.version_;
      featureCompatibilityVersion_ = other.featureCompatibilityVersion_;
      backupWindowStart_ = other.backupWindowStart_ != null ? other.backupWindowStart_.Clone() : null;
      BackupRetainPeriodDays = other.BackupRetainPeriodDays;
      access_ = other.access_ != null ? other.access_.Clone() : null;
      switch (other.MongodbCase) {
        case MongodbOneofCase.Mongodb36:
          Mongodb36 = other.Mongodb36.Clone();
          break;
        case MongodbOneofCase.Mongodb40:
          Mongodb40 = other.Mongodb40.Clone();
          break;
        case MongodbOneofCase.Mongodb42:
          Mongodb42 = other.Mongodb42.Clone();
          break;
        case MongodbOneofCase.Mongodb44:
          Mongodb44 = other.Mongodb44.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClusterConfig Clone() {
      return new ClusterConfig(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    /// <summary>
    /// Version of MongoDB server software. Possible values: `3.6`, `4.0`, `4.2`, `4.4`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "feature_compatibility_version" field.</summary>
    public const int FeatureCompatibilityVersionFieldNumber = 5;
    private string featureCompatibilityVersion_ = "";
    /// <summary>
    /// MongoDB feature compatibility version. See usage details in [MongoDB documentation](https://docs.mongodb.com/manual/reference/command/setFeatureCompatibilityVersion/).
    ///
    /// Possible values:
    /// * `3.6` — persist data compatibility for version 3.6. After setting this option the data will not be compatible with 3.4 or lower.
    /// * `4.0` — persist data compatibility for version 4.0. After setting this option the data will not be compatible with 3.6 or lower.
    /// * `4.2` — persist data compatibility for version 4.2. After setting this option the data will not be compatible with 4.0 or lower.
    /// * `4.4` — persist data compatibility for version 4.4. After setting this option the data will not be compatible with 4.2 or lower.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeatureCompatibilityVersion {
      get { return featureCompatibilityVersion_; }
      set {
        featureCompatibilityVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mongodb_3_6" field.</summary>
    public const int Mongodb36FieldNumber = 2;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6 Mongodb36 {
      get { return mongodbCase_ == MongodbOneofCase.Mongodb36 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6) mongodb_ : null; }
      set {
        mongodb_ = value;
        mongodbCase_ = value == null ? MongodbOneofCase.None : MongodbOneofCase.Mongodb36;
      }
    }

    /// <summary>Field number for the "mongodb_4_0" field.</summary>
    public const int Mongodb40FieldNumber = 4;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0 Mongodb40 {
      get { return mongodbCase_ == MongodbOneofCase.Mongodb40 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0) mongodb_ : null; }
      set {
        mongodb_ = value;
        mongodbCase_ = value == null ? MongodbOneofCase.None : MongodbOneofCase.Mongodb40;
      }
    }

    /// <summary>Field number for the "mongodb_4_2" field.</summary>
    public const int Mongodb42FieldNumber = 7;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2 Mongodb42 {
      get { return mongodbCase_ == MongodbOneofCase.Mongodb42 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2) mongodb_ : null; }
      set {
        mongodb_ = value;
        mongodbCase_ = value == null ? MongodbOneofCase.None : MongodbOneofCase.Mongodb42;
      }
    }

    /// <summary>Field number for the "mongodb_4_4" field.</summary>
    public const int Mongodb44FieldNumber = 8;
    /// <summary>
    /// Configuration and resource allocation for a MongoDB 4.4 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4 Mongodb44 {
      get { return mongodbCase_ == MongodbOneofCase.Mongodb44 ? (global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4) mongodb_ : null; }
      set {
        mongodb_ = value;
        mongodbCase_ = value == null ? MongodbOneofCase.None : MongodbOneofCase.Mongodb44;
      }
    }

    /// <summary>Field number for the "backup_window_start" field.</summary>
    public const int BackupWindowStartFieldNumber = 3;
    private global::Google.Type.TimeOfDay backupWindowStart_;
    /// <summary>
    /// Time to start the daily backup, in the UTC timezone.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Type.TimeOfDay BackupWindowStart {
      get { return backupWindowStart_; }
      set {
        backupWindowStart_ = value;
      }
    }

    /// <summary>Field number for the "backup_retain_period_days" field.</summary>
    public const int BackupRetainPeriodDaysFieldNumber = 9;
    private static readonly pb::FieldCodec<long?> _single_backupRetainPeriodDays_codec = pb::FieldCodec.ForStructWrapper<long>(74);
    private long? backupRetainPeriodDays_;
    /// <summary>
    /// Retain period of automatically created backup in days
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long? BackupRetainPeriodDays {
      get { return backupRetainPeriodDays_; }
      set {
        backupRetainPeriodDays_ = value;
      }
    }


    /// <summary>Field number for the "access" field.</summary>
    public const int AccessFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Access access_;
    /// <summary>
    /// Access policy to DB
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Access Access {
      get { return access_; }
      set {
        access_ = value;
      }
    }

    private object mongodb_;
    /// <summary>Enum of possible cases for the "mongodb" oneof.</summary>
    public enum MongodbOneofCase {
      None = 0,
      Mongodb36 = 2,
      Mongodb40 = 4,
      Mongodb42 = 7,
      Mongodb44 = 8,
    }
    private MongodbOneofCase mongodbCase_ = MongodbOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MongodbOneofCase MongodbCase {
      get { return mongodbCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMongodb() {
      mongodbCase_ = MongodbOneofCase.None;
      mongodb_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClusterConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClusterConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (FeatureCompatibilityVersion != other.FeatureCompatibilityVersion) return false;
      if (!object.Equals(Mongodb36, other.Mongodb36)) return false;
      if (!object.Equals(Mongodb40, other.Mongodb40)) return false;
      if (!object.Equals(Mongodb42, other.Mongodb42)) return false;
      if (!object.Equals(Mongodb44, other.Mongodb44)) return false;
      if (!object.Equals(BackupWindowStart, other.BackupWindowStart)) return false;
      if (BackupRetainPeriodDays != other.BackupRetainPeriodDays) return false;
      if (!object.Equals(Access, other.Access)) return false;
      if (MongodbCase != other.MongodbCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (FeatureCompatibilityVersion.Length != 0) hash ^= FeatureCompatibilityVersion.GetHashCode();
      if (mongodbCase_ == MongodbOneofCase.Mongodb36) hash ^= Mongodb36.GetHashCode();
      if (mongodbCase_ == MongodbOneofCase.Mongodb40) hash ^= Mongodb40.GetHashCode();
      if (mongodbCase_ == MongodbOneofCase.Mongodb42) hash ^= Mongodb42.GetHashCode();
      if (mongodbCase_ == MongodbOneofCase.Mongodb44) hash ^= Mongodb44.GetHashCode();
      if (backupWindowStart_ != null) hash ^= BackupWindowStart.GetHashCode();
      if (backupRetainPeriodDays_ != null) hash ^= BackupRetainPeriodDays.GetHashCode();
      if (access_ != null) hash ^= Access.GetHashCode();
      hash ^= (int) mongodbCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb36) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongodb36);
      }
      if (backupWindowStart_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BackupWindowStart);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb40) {
        output.WriteRawTag(34);
        output.WriteMessage(Mongodb40);
      }
      if (FeatureCompatibilityVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FeatureCompatibilityVersion);
      }
      if (access_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Access);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb42) {
        output.WriteRawTag(58);
        output.WriteMessage(Mongodb42);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb44) {
        output.WriteRawTag(66);
        output.WriteMessage(Mongodb44);
      }
      if (backupRetainPeriodDays_ != null) {
        _single_backupRetainPeriodDays_codec.WriteTagAndValue(output, BackupRetainPeriodDays);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (FeatureCompatibilityVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeatureCompatibilityVersion);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb36) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongodb36);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb40) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongodb40);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb42) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongodb42);
      }
      if (mongodbCase_ == MongodbOneofCase.Mongodb44) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongodb44);
      }
      if (backupWindowStart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackupWindowStart);
      }
      if (backupRetainPeriodDays_ != null) {
        size += _single_backupRetainPeriodDays_codec.CalculateSizeWithTag(BackupRetainPeriodDays);
      }
      if (access_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Access);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClusterConfig other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.FeatureCompatibilityVersion.Length != 0) {
        FeatureCompatibilityVersion = other.FeatureCompatibilityVersion;
      }
      if (other.backupWindowStart_ != null) {
        if (backupWindowStart_ == null) {
          BackupWindowStart = new global::Google.Type.TimeOfDay();
        }
        BackupWindowStart.MergeFrom(other.BackupWindowStart);
      }
      if (other.backupRetainPeriodDays_ != null) {
        if (backupRetainPeriodDays_ == null || other.BackupRetainPeriodDays != 0L) {
          BackupRetainPeriodDays = other.BackupRetainPeriodDays;
        }
      }
      if (other.access_ != null) {
        if (access_ == null) {
          Access = new global::Yandex.Cloud.Mdb.Mongodb.V1.Access();
        }
        Access.MergeFrom(other.Access);
      }
      switch (other.MongodbCase) {
        case MongodbOneofCase.Mongodb36:
          if (Mongodb36 == null) {
            Mongodb36 = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6();
          }
          Mongodb36.MergeFrom(other.Mongodb36);
          break;
        case MongodbOneofCase.Mongodb40:
          if (Mongodb40 == null) {
            Mongodb40 = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0();
          }
          Mongodb40.MergeFrom(other.Mongodb40);
          break;
        case MongodbOneofCase.Mongodb42:
          if (Mongodb42 == null) {
            Mongodb42 = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2();
          }
          Mongodb42.MergeFrom(other.Mongodb42);
          break;
        case MongodbOneofCase.Mongodb44:
          if (Mongodb44 == null) {
            Mongodb44 = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4();
          }
          Mongodb44.MergeFrom(other.Mongodb44);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6();
            if (mongodbCase_ == MongodbOneofCase.Mongodb36) {
              subBuilder.MergeFrom(Mongodb36);
            }
            input.ReadMessage(subBuilder);
            Mongodb36 = subBuilder;
            break;
          }
          case 26: {
            if (backupWindowStart_ == null) {
              BackupWindowStart = new global::Google.Type.TimeOfDay();
            }
            input.ReadMessage(BackupWindowStart);
            break;
          }
          case 34: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0();
            if (mongodbCase_ == MongodbOneofCase.Mongodb40) {
              subBuilder.MergeFrom(Mongodb40);
            }
            input.ReadMessage(subBuilder);
            Mongodb40 = subBuilder;
            break;
          }
          case 42: {
            FeatureCompatibilityVersion = input.ReadString();
            break;
          }
          case 50: {
            if (access_ == null) {
              Access = new global::Yandex.Cloud.Mdb.Mongodb.V1.Access();
            }
            input.ReadMessage(Access);
            break;
          }
          case 58: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2();
            if (mongodbCase_ == MongodbOneofCase.Mongodb42) {
              subBuilder.MergeFrom(Mongodb42);
            }
            input.ReadMessage(subBuilder);
            Mongodb42 = subBuilder;
            break;
          }
          case 66: {
            global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4 subBuilder = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4();
            if (mongodbCase_ == MongodbOneofCase.Mongodb44) {
              subBuilder.MergeFrom(Mongodb44);
            }
            input.ReadMessage(subBuilder);
            Mongodb44 = subBuilder;
            break;
          }
          case 74: {
            long? value = _single_backupRetainPeriodDays_codec.Read(input);
            if (backupRetainPeriodDays_ == null || value != 0L) {
              BackupRetainPeriodDays = value;
            }
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Mongodb3_6 : pb::IMessage<Mongodb3_6> {
    private static readonly pb::MessageParser<Mongodb3_6> _parser = new pb::MessageParser<Mongodb3_6>(() => new Mongodb3_6());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mongodb3_6> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb3_6() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb3_6(Mongodb3_6 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      mongoinfra_ = other.mongoinfra_ != null ? other.mongoinfra_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb3_6 Clone() {
      return new Mongodb3_6(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod in a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg in a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos in a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    /// <summary>Field number for the "mongoinfra" field.</summary>
    public const int MongoinfraFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra mongoinfra_;
    /// <summary>
    /// Configuration and resource allocation for mongoinfra (mongos+mongocfg) in a MongoDB 3.6 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra Mongoinfra {
      get { return mongoinfra_; }
      set {
        mongoinfra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mongodb3_6);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mongodb3_6 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      if (!object.Equals(Mongoinfra, other.Mongoinfra)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (mongoinfra_ != null) hash ^= Mongoinfra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (mongoinfra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mongoinfra);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (mongoinfra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongoinfra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mongodb3_6 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      if (other.mongoinfra_ != null) {
        if (mongoinfra_ == null) {
          Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra();
        }
        Mongoinfra.MergeFrom(other.Mongoinfra);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
          case 34: {
            if (mongoinfra_ == null) {
              Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Types.MongoInfra();
            }
            input.ReadMessage(Mongoinfra);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mongodb3_6 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet3_6 config_;
        /// <summary>
        /// Configuration for a mongod 3.6 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to MongoDB hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6 config_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6 config_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoInfra : pb::IMessage<MongoInfra> {
        private static readonly pb::MessageParser<MongoInfra> _parser = new pb::MessageParser<MongoInfra>(() => new MongoInfra());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoInfra> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb3_6.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra(MongoInfra other) : this() {
          configMongos_ = other.configMongos_ != null ? other.configMongos_.Clone() : null;
          configMongocfg_ = other.configMongocfg_ != null ? other.configMongocfg_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra Clone() {
          return new MongoInfra(this);
        }

        /// <summary>Field number for the "config_mongos" field.</summary>
        public const int ConfigMongosFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6 configMongos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6 ConfigMongos {
          get { return configMongos_; }
          set {
            configMongos_ = value;
          }
        }

        /// <summary>Field number for the "config_mongocfg" field.</summary>
        public const int ConfigMongocfgFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6 configMongocfg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6 ConfigMongocfg {
          get { return configMongocfg_; }
          set {
            configMongocfg_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongoinfra (mongos+mongocfg) hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoInfra);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoInfra other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ConfigMongos, other.ConfigMongos)) return false;
          if (!object.Equals(ConfigMongocfg, other.ConfigMongocfg)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (configMongos_ != null) hash ^= ConfigMongos.GetHashCode();
          if (configMongocfg_ != null) hash ^= ConfigMongocfg.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (configMongos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ConfigMongocfg);
          }
          if (resources_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (configMongos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongocfg);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoInfra other) {
          if (other == null) {
            return;
          }
          if (other.configMongos_ != null) {
            if (configMongos_ == null) {
              ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6();
            }
            ConfigMongos.MergeFrom(other.ConfigMongos);
          }
          if (other.configMongocfg_ != null) {
            if (configMongocfg_ == null) {
              ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6();
            }
            ConfigMongocfg.MergeFrom(other.ConfigMongocfg);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (configMongos_ == null) {
                  ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet3_6();
                }
                input.ReadMessage(ConfigMongos);
                break;
              }
              case 18: {
                if (configMongocfg_ == null) {
                  ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet3_6();
                }
                input.ReadMessage(ConfigMongocfg);
                break;
              }
              case 26: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Mongodb4_0 : pb::IMessage<Mongodb4_0> {
    private static readonly pb::MessageParser<Mongodb4_0> _parser = new pb::MessageParser<Mongodb4_0>(() => new Mongodb4_0());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mongodb4_0> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_0() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_0(Mongodb4_0 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      mongoinfra_ = other.mongoinfra_ != null ? other.mongoinfra_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_0 Clone() {
      return new Mongodb4_0(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod in a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg in a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos in a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    /// <summary>Field number for the "mongoinfra" field.</summary>
    public const int MongoinfraFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra mongoinfra_;
    /// <summary>
    /// Configuration and resource allocation for mongoinfra (mongos+mongocfg) in a MongoDB 4.0 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra Mongoinfra {
      get { return mongoinfra_; }
      set {
        mongoinfra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mongodb4_0);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mongodb4_0 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      if (!object.Equals(Mongoinfra, other.Mongoinfra)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (mongoinfra_ != null) hash ^= Mongoinfra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (mongoinfra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mongoinfra);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (mongoinfra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongoinfra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mongodb4_0 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      if (other.mongoinfra_ != null) {
        if (mongoinfra_ == null) {
          Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra();
        }
        Mongoinfra.MergeFrom(other.Mongoinfra);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
          case 34: {
            if (mongoinfra_ == null) {
              Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Types.MongoInfra();
            }
            input.ReadMessage(Mongoinfra);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mongodb4_0 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_0 config_;
        /// <summary>
        /// Configuration for mongod 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongod hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0 config_;
        /// <summary>
        /// Configuration for mongocfg 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0 config_;
        /// <summary>
        /// Configuration for mongos 4.0 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongos hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoInfra : pb::IMessage<MongoInfra> {
        private static readonly pb::MessageParser<MongoInfra> _parser = new pb::MessageParser<MongoInfra>(() => new MongoInfra());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoInfra> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_0.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra(MongoInfra other) : this() {
          configMongos_ = other.configMongos_ != null ? other.configMongos_.Clone() : null;
          configMongocfg_ = other.configMongocfg_ != null ? other.configMongocfg_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra Clone() {
          return new MongoInfra(this);
        }

        /// <summary>Field number for the "config_mongos" field.</summary>
        public const int ConfigMongosFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0 configMongos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0 ConfigMongos {
          get { return configMongos_; }
          set {
            configMongos_ = value;
          }
        }

        /// <summary>Field number for the "config_mongocfg" field.</summary>
        public const int ConfigMongocfgFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0 configMongocfg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0 ConfigMongocfg {
          get { return configMongocfg_; }
          set {
            configMongocfg_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongoinfra (mongos+mongocfg) hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoInfra);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoInfra other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ConfigMongos, other.ConfigMongos)) return false;
          if (!object.Equals(ConfigMongocfg, other.ConfigMongocfg)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (configMongos_ != null) hash ^= ConfigMongos.GetHashCode();
          if (configMongocfg_ != null) hash ^= ConfigMongocfg.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (configMongos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ConfigMongocfg);
          }
          if (resources_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (configMongos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongocfg);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoInfra other) {
          if (other == null) {
            return;
          }
          if (other.configMongos_ != null) {
            if (configMongos_ == null) {
              ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0();
            }
            ConfigMongos.MergeFrom(other.ConfigMongos);
          }
          if (other.configMongocfg_ != null) {
            if (configMongocfg_ == null) {
              ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0();
            }
            ConfigMongocfg.MergeFrom(other.ConfigMongocfg);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (configMongos_ == null) {
                  ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_0();
                }
                input.ReadMessage(ConfigMongos);
                break;
              }
              case 18: {
                if (configMongocfg_ == null) {
                  ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_0();
                }
                input.ReadMessage(ConfigMongocfg);
                break;
              }
              case 26: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Mongodb4_2 : pb::IMessage<Mongodb4_2> {
    private static readonly pb::MessageParser<Mongodb4_2> _parser = new pb::MessageParser<Mongodb4_2>(() => new Mongodb4_2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mongodb4_2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_2(Mongodb4_2 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      mongoinfra_ = other.mongoinfra_ != null ? other.mongoinfra_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_2 Clone() {
      return new Mongodb4_2(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod in a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg in a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos in a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    /// <summary>Field number for the "mongoinfra" field.</summary>
    public const int MongoinfraFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra mongoinfra_;
    /// <summary>
    /// Configuration and resource allocation for mongoinfra (mongos+mongocfg) in a MongoDB 4.2 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra Mongoinfra {
      get { return mongoinfra_; }
      set {
        mongoinfra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mongodb4_2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mongodb4_2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      if (!object.Equals(Mongoinfra, other.Mongoinfra)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (mongoinfra_ != null) hash ^= Mongoinfra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (mongoinfra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mongoinfra);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (mongoinfra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongoinfra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mongodb4_2 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      if (other.mongoinfra_ != null) {
        if (mongoinfra_ == null) {
          Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra();
        }
        Mongoinfra.MergeFrom(other.Mongoinfra);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
          case 34: {
            if (mongoinfra_ == null) {
              Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Types.MongoInfra();
            }
            input.ReadMessage(Mongoinfra);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mongodb4_2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_2 config_;
        /// <summary>
        /// Configuration for mongod 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongod hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2 config_;
        /// <summary>
        /// Configuration for mongocfg 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2 config_;
        /// <summary>
        /// Configuration for mongos 4.2 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongos hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoInfra : pb::IMessage<MongoInfra> {
        private static readonly pb::MessageParser<MongoInfra> _parser = new pb::MessageParser<MongoInfra>(() => new MongoInfra());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoInfra> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_2.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra(MongoInfra other) : this() {
          configMongos_ = other.configMongos_ != null ? other.configMongos_.Clone() : null;
          configMongocfg_ = other.configMongocfg_ != null ? other.configMongocfg_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra Clone() {
          return new MongoInfra(this);
        }

        /// <summary>Field number for the "config_mongos" field.</summary>
        public const int ConfigMongosFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2 configMongos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2 ConfigMongos {
          get { return configMongos_; }
          set {
            configMongos_ = value;
          }
        }

        /// <summary>Field number for the "config_mongocfg" field.</summary>
        public const int ConfigMongocfgFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2 configMongocfg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2 ConfigMongocfg {
          get { return configMongocfg_; }
          set {
            configMongocfg_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongoinfra (mongos+mongocfg) hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoInfra);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoInfra other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ConfigMongos, other.ConfigMongos)) return false;
          if (!object.Equals(ConfigMongocfg, other.ConfigMongocfg)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (configMongos_ != null) hash ^= ConfigMongos.GetHashCode();
          if (configMongocfg_ != null) hash ^= ConfigMongocfg.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (configMongos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ConfigMongocfg);
          }
          if (resources_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (configMongos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongocfg);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoInfra other) {
          if (other == null) {
            return;
          }
          if (other.configMongos_ != null) {
            if (configMongos_ == null) {
              ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2();
            }
            ConfigMongos.MergeFrom(other.ConfigMongos);
          }
          if (other.configMongocfg_ != null) {
            if (configMongocfg_ == null) {
              ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2();
            }
            ConfigMongocfg.MergeFrom(other.ConfigMongocfg);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (configMongos_ == null) {
                  ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_2();
                }
                input.ReadMessage(ConfigMongos);
                break;
              }
              case 18: {
                if (configMongocfg_ == null) {
                  ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_2();
                }
                input.ReadMessage(ConfigMongocfg);
                break;
              }
              case 26: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Mongodb4_4 : pb::IMessage<Mongodb4_4> {
    private static readonly pb::MessageParser<Mongodb4_4> _parser = new pb::MessageParser<Mongodb4_4>(() => new Mongodb4_4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mongodb4_4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_4(Mongodb4_4 other) : this() {
      mongod_ = other.mongod_ != null ? other.mongod_.Clone() : null;
      mongocfg_ = other.mongocfg_ != null ? other.mongocfg_.Clone() : null;
      mongos_ = other.mongos_ != null ? other.mongos_.Clone() : null;
      mongoinfra_ = other.mongoinfra_ != null ? other.mongoinfra_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mongodb4_4 Clone() {
      return new Mongodb4_4(this);
    }

    /// <summary>Field number for the "mongod" field.</summary>
    public const int MongodFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod mongod_;
    /// <summary>
    /// Configuration and resource allocation for mongod in a MongoDB 4.4 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod Mongod {
      get { return mongod_; }
      set {
        mongod_ = value;
      }
    }

    /// <summary>Field number for the "mongocfg" field.</summary>
    public const int MongocfgFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg mongocfg_;
    /// <summary>
    /// Configuration and resource allocation for mongocfg in a MongoDB 4.4 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg Mongocfg {
      get { return mongocfg_; }
      set {
        mongocfg_ = value;
      }
    }

    /// <summary>Field number for the "mongos" field.</summary>
    public const int MongosFieldNumber = 3;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos mongos_;
    /// <summary>
    /// Configuration and resource allocation for mongos in a MongoDB 4.4 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos Mongos {
      get { return mongos_; }
      set {
        mongos_ = value;
      }
    }

    /// <summary>Field number for the "mongoinfra" field.</summary>
    public const int MongoinfraFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra mongoinfra_;
    /// <summary>
    /// Configuration and resource allocation for mongoinfra (mongos+mongocfg) in a MongoDB 4.4 cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra Mongoinfra {
      get { return mongoinfra_; }
      set {
        mongoinfra_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mongodb4_4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mongodb4_4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Mongod, other.Mongod)) return false;
      if (!object.Equals(Mongocfg, other.Mongocfg)) return false;
      if (!object.Equals(Mongos, other.Mongos)) return false;
      if (!object.Equals(Mongoinfra, other.Mongoinfra)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (mongod_ != null) hash ^= Mongod.GetHashCode();
      if (mongocfg_ != null) hash ^= Mongocfg.GetHashCode();
      if (mongos_ != null) hash ^= Mongos.GetHashCode();
      if (mongoinfra_ != null) hash ^= Mongoinfra.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (mongod_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Mongod);
      }
      if (mongocfg_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Mongocfg);
      }
      if (mongos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mongos);
      }
      if (mongoinfra_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Mongoinfra);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (mongod_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongod);
      }
      if (mongocfg_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongocfg);
      }
      if (mongos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongos);
      }
      if (mongoinfra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mongoinfra);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mongodb4_4 other) {
      if (other == null) {
        return;
      }
      if (other.mongod_ != null) {
        if (mongod_ == null) {
          Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod();
        }
        Mongod.MergeFrom(other.Mongod);
      }
      if (other.mongocfg_ != null) {
        if (mongocfg_ == null) {
          Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg();
        }
        Mongocfg.MergeFrom(other.Mongocfg);
      }
      if (other.mongos_ != null) {
        if (mongos_ == null) {
          Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos();
        }
        Mongos.MergeFrom(other.Mongos);
      }
      if (other.mongoinfra_ != null) {
        if (mongoinfra_ == null) {
          Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra();
        }
        Mongoinfra.MergeFrom(other.Mongoinfra);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mongod_ == null) {
              Mongod = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongod();
            }
            input.ReadMessage(Mongod);
            break;
          }
          case 18: {
            if (mongocfg_ == null) {
              Mongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoCfg();
            }
            input.ReadMessage(Mongocfg);
            break;
          }
          case 26: {
            if (mongos_ == null) {
              Mongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.Mongos();
            }
            input.ReadMessage(Mongos);
            break;
          }
          case 34: {
            if (mongoinfra_ == null) {
              Mongoinfra = new global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Types.MongoInfra();
            }
            input.ReadMessage(Mongoinfra);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Mongodb4_4 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Mongod : pb::IMessage<Mongod> {
        private static readonly pb::MessageParser<Mongod> _parser = new pb::MessageParser<Mongod>(() => new Mongod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod(Mongod other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongod Clone() {
          return new Mongod(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_4 config_;
        /// <summary>
        /// Configuration for mongod 4.4 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_4 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongod hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongod other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongod other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_4();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongodConfigSet4_4();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoCfg : pb::IMessage<MongoCfg> {
        private static readonly pb::MessageParser<MongoCfg> _parser = new pb::MessageParser<MongoCfg>(() => new MongoCfg());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoCfg> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg(MongoCfg other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoCfg Clone() {
          return new MongoCfg(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4 config_;
        /// <summary>
        /// Configuration for mongocfg 4.4 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongocfg hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoCfg);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoCfg other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoCfg other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class Mongos : pb::IMessage<Mongos> {
        private static readonly pb::MessageParser<Mongos> _parser = new pb::MessageParser<Mongos>(() => new Mongos());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Mongos> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos(Mongos other) : this() {
          config_ = other.config_ != null ? other.config_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Mongos Clone() {
          return new Mongos(this);
        }

        /// <summary>Field number for the "config" field.</summary>
        public const int ConfigFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4 config_;
        /// <summary>
        /// Configuration for mongos 4.4 hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4 Config {
          get { return config_; }
          set {
            config_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongos hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Mongos);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Mongos other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Config, other.Config)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (config_ != null) hash ^= Config.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (config_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Config);
          }
          if (resources_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (config_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Mongos other) {
          if (other == null) {
            return;
          }
          if (other.config_ != null) {
            if (config_ == null) {
              Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4();
            }
            Config.MergeFrom(other.Config);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (config_ == null) {
                  Config = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4();
                }
                input.ReadMessage(Config);
                break;
              }
              case 18: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class MongoInfra : pb::IMessage<MongoInfra> {
        private static readonly pb::MessageParser<MongoInfra> _parser = new pb::MessageParser<MongoInfra>(() => new MongoInfra());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MongoInfra> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Mdb.Mongodb.V1.Mongodb4_4.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra(MongoInfra other) : this() {
          configMongos_ = other.configMongos_ != null ? other.configMongos_.Clone() : null;
          configMongocfg_ = other.configMongocfg_ != null ? other.configMongocfg_.Clone() : null;
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MongoInfra Clone() {
          return new MongoInfra(this);
        }

        /// <summary>Field number for the "config_mongos" field.</summary>
        public const int ConfigMongosFieldNumber = 1;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4 configMongos_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4 ConfigMongos {
          get { return configMongos_; }
          set {
            configMongos_ = value;
          }
        }

        /// <summary>Field number for the "config_mongocfg" field.</summary>
        public const int ConfigMongocfgFieldNumber = 2;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4 configMongocfg_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4 ConfigMongocfg {
          get { return configMongocfg_; }
          set {
            configMongocfg_ = value;
          }
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 3;
        private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
        /// <summary>
        /// Resources allocated to mongoinfra (mongos+mongocfg) hosts.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MongoInfra);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MongoInfra other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(ConfigMongos, other.ConfigMongos)) return false;
          if (!object.Equals(ConfigMongocfg, other.ConfigMongocfg)) return false;
          if (!object.Equals(Resources, other.Resources)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (configMongos_ != null) hash ^= ConfigMongos.GetHashCode();
          if (configMongocfg_ != null) hash ^= ConfigMongocfg.GetHashCode();
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (configMongos_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(ConfigMongocfg);
          }
          if (resources_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Resources);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (configMongos_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongos);
          }
          if (configMongocfg_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConfigMongocfg);
          }
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MongoInfra other) {
          if (other == null) {
            return;
          }
          if (other.configMongos_ != null) {
            if (configMongos_ == null) {
              ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4();
            }
            ConfigMongos.MergeFrom(other.ConfigMongos);
          }
          if (other.configMongocfg_ != null) {
            if (configMongocfg_ == null) {
              ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4();
            }
            ConfigMongocfg.MergeFrom(other.ConfigMongocfg);
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            Resources.MergeFrom(other.Resources);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (configMongos_ == null) {
                  ConfigMongos = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongosConfigSet4_4();
                }
                input.ReadMessage(ConfigMongos);
                break;
              }
              case 18: {
                if (configMongocfg_ == null) {
                  ConfigMongocfg = new global::Yandex.Cloud.Mdb.Mongodb.V1.Config.MongoCfgConfigSet4_4();
                }
                input.ReadMessage(ConfigMongocfg);
                break;
              }
              case 26: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
                }
                input.ReadMessage(Resources);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Shard : pb::IMessage<Shard> {
    private static readonly pb::MessageParser<Shard> _parser = new pb::MessageParser<Shard>(() => new Shard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Shard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard(Shard other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Shard Clone() {
      return new Shard(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the shard.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the shard belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Shard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Shard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Shard other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Host : pb::IMessage<Host> {
    private static readonly pb::MessageParser<Host> _parser = new pb::MessageParser<Host>(() => new Host());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Host> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host(Host other) : this() {
      name_ = other.name_;
      clusterId_ = other.clusterId_;
      zoneId_ = other.zoneId_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      role_ = other.role_;
      health_ = other.health_;
      services_ = other.services_.Clone();
      subnetId_ = other.subnetId_;
      assignPublicIp_ = other.assignPublicIp_;
      shardName_ = other.shardName_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Host Clone() {
      return new Host(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the MongoDB host. The host name is assigned by MDB at creation time, and cannot be changed.
    /// 1-63 characters long.
    ///
    /// The name is unique across all existing MDB hosts in Yandex.Cloud, as it defines the FQDN of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the MongoDB host. The ID is assigned by MDB at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 3;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the MongoDB host resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 4;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to the MongoDB host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 5;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role role_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role.Unknown;
    /// <summary>
    /// Role of the host in the cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 6;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health health_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health.Unknown;
    /// <summary>
    /// Status code of the aggregated health of the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Mdb.Mongodb.V1.Service> _repeated_services_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Service> services_ = new pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Service>();
    /// <summary>
    /// Services provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Mdb.Mongodb.V1.Service> Services {
      get { return services_; }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 8;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the host belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "assign_public_ip" field.</summary>
    public const int AssignPublicIpFieldNumber = 9;
    private bool assignPublicIp_;
    /// <summary>
    /// Flag showing public IP assignment status to this host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AssignPublicIp {
      get { return assignPublicIp_; }
      set {
        assignPublicIp_ = value;
      }
    }

    /// <summary>Field number for the "shard_name" field.</summary>
    public const int ShardNameFieldNumber = 10;
    private string shardName_ = "";
    /// <summary>
    /// Shard which this host belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ShardName {
      get { return shardName_; }
      set {
        shardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 11;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type type_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type.Unspecified;
    /// <summary>
    /// Host type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Host);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Host other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ClusterId != other.ClusterId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (Role != other.Role) return false;
      if (Health != other.Health) return false;
      if(!services_.Equals(other.services_)) return false;
      if (SubnetId != other.SubnetId) return false;
      if (AssignPublicIp != other.AssignPublicIp) return false;
      if (ShardName != other.ShardName) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (Role != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role.Unknown) hash ^= Role.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health.Unknown) hash ^= Health.GetHashCode();
      hash ^= services_.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (AssignPublicIp != false) hash ^= AssignPublicIp.GetHashCode();
      if (ShardName.Length != 0) hash ^= ShardName.GetHashCode();
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ZoneId);
      }
      if (resources_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Resources);
      }
      if (Role != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role.Unknown) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Role);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health.Unknown) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Health);
      }
      services_.WriteTo(output, _repeated_services_codec);
      if (SubnetId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SubnetId);
      }
      if (AssignPublicIp != false) {
        output.WriteRawTag(72);
        output.WriteBool(AssignPublicIp);
      }
      if (ShardName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShardName);
      }
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type.Unspecified) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (Role != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      size += services_.CalculateSize(_repeated_services_codec);
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (AssignPublicIp != false) {
        size += 1 + 1;
      }
      if (ShardName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardName);
      }
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Host other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.Role != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role.Unknown) {
        Role = other.Role;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health.Unknown) {
        Health = other.Health;
      }
      services_.Add(other.services_);
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.AssignPublicIp != false) {
        AssignPublicIp = other.AssignPublicIp;
      }
      if (other.ShardName.Length != 0) {
        ShardName = other.ShardName;
      }
      if (other.Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            ZoneId = input.ReadString();
            break;
          }
          case 34: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Mdb.Mongodb.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 40: {
            Role = (global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Role) input.ReadEnum();
            break;
          }
          case 48: {
            Health = (global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Health) input.ReadEnum();
            break;
          }
          case 58: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
          case 66: {
            SubnetId = input.ReadString();
            break;
          }
          case 72: {
            AssignPublicIp = input.ReadBool();
            break;
          }
          case 82: {
            ShardName = input.ReadString();
            break;
          }
          case 88: {
            Type = (global::Yandex.Cloud.Mdb.Mongodb.V1.Host.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Host message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// A mongod host.
        /// </summary>
        [pbr::OriginalName("MONGOD")] Mongod = 1,
        /// <summary>
        /// A mongos host.
        /// </summary>
        [pbr::OriginalName("MONGOS")] Mongos = 2,
        /// <summary>
        /// A mongocfg host.
        /// </summary>
        [pbr::OriginalName("MONGOCFG")] Mongocfg = 3,
        /// <summary>
        /// A mongoinfra (mongos+mongocfg) host.
        /// </summary>
        [pbr::OriginalName("MONGOINFRA")] Mongoinfra = 4,
      }

      internal enum Role {
        /// <summary>
        /// Role of the host in the cluster is unknown.
        /// </summary>
        [pbr::OriginalName("ROLE_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// Host is the primary MongoDB server in the cluster.
        /// </summary>
        [pbr::OriginalName("PRIMARY")] Primary = 1,
        /// <summary>
        /// Host is a secondary MongoDB server in the cluster.
        /// </summary>
        [pbr::OriginalName("SECONDARY")] Secondary = 2,
      }

      internal enum Health {
        /// <summary>
        /// Health of the host is unknown.
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The host is performing all its functions normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The host is inoperable, and cannot perform any of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
        /// <summary>
        /// The host is degraded, and can perform only some of its essential functions.
        /// </summary>
        [pbr::OriginalName("DEGRADED")] Degraded = 3,
      }

    }
    #endregion

  }

  internal sealed partial class Service : pb::IMessage<Service> {
    private static readonly pb::MessageParser<Service> _parser = new pb::MessageParser<Service>(() => new Service());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Service> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service(Service other) : this() {
      type_ = other.type_;
      health_ = other.health_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Service Clone() {
      return new Service(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type type_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type.Unspecified;
    /// <summary>
    /// Type of the service provided by the host.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 2;
    private global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health health_ = global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health.Unknown;
    /// <summary>
    /// Status code of server availability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Service);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Service other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Health != other.Health) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health.Unknown) hash ^= Health.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health.Unknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Health);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Service other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type.Unspecified) {
        Type = other.Type;
      }
      if (other.Health != global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health.Unknown) {
        Health = other.Health;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Type) input.ReadEnum();
            break;
          }
          case 16: {
            Health = (global::Yandex.Cloud.Mdb.Mongodb.V1.Service.Types.Health) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Service message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The host is running a mongod daemon.
        /// </summary>
        [pbr::OriginalName("MONGOD")] Mongod = 1,
        /// <summary>
        /// The host is running a mongos daemon.
        /// </summary>
        [pbr::OriginalName("MONGOS")] Mongos = 2,
        /// <summary>
        /// The host is running a MongoDB config server.
        /// </summary>
        [pbr::OriginalName("MONGOCFG")] Mongocfg = 3,
      }

      internal enum Health {
        /// <summary>
        /// Health of the server is unknown.
        /// </summary>
        [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
        /// <summary>
        /// The server is working normally.
        /// </summary>
        [pbr::OriginalName("ALIVE")] Alive = 1,
        /// <summary>
        /// The server is dead or unresponsive.
        /// </summary>
        [pbr::OriginalName("DEAD")] Dead = 2,
      }

    }
    #endregion

  }

  internal sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      resourcePresetId_ = other.resourcePresetId_;
      diskSize_ = other.diskSize_;
      diskTypeId_ = other.diskTypeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 1;
    private string resourcePresetId_ = "";
    /// <summary>
    /// ID of the preset for computational resources available to a host (CPU, memory etc.).
    /// All available presets are listed in the [documentation](/docs/managed-mongodb/concepts/instance-types).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 2;
    private long diskSize_;
    /// <summary>
    /// Volume of the storage available to a host, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    /// <summary>Field number for the "disk_type_id" field.</summary>
    public const int DiskTypeIdFieldNumber = 3;
    private string diskTypeId_ = "";
    /// <summary>
    /// Type of the storage environment for the host.
    /// Possible values:
    /// * network-hdd — network HDD drive,
    /// * network-ssd — network SSD drive,
    /// * local-ssd — local SSD storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskTypeId {
      get { return diskTypeId_; }
      set {
        diskTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (DiskSize != other.DiskSize) return false;
      if (DiskTypeId != other.DiskTypeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (DiskTypeId.Length != 0) hash ^= DiskTypeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSize);
      }
      if (DiskTypeId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DiskTypeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (DiskTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskTypeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      if (other.DiskTypeId.Length != 0) {
        DiskTypeId = other.DiskTypeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 16: {
            DiskSize = input.ReadInt64();
            break;
          }
          case 26: {
            DiskTypeId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Access : pb::IMessage<Access> {
    private static readonly pb::MessageParser<Access> _parser = new pb::MessageParser<Access>(() => new Access());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Access> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Mdb.Mongodb.V1.ClusterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access(Access other) : this() {
      dataLens_ = other.dataLens_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Access Clone() {
      return new Access(this);
    }

    /// <summary>Field number for the "data_lens" field.</summary>
    public const int DataLensFieldNumber = 1;
    private bool dataLens_;
    /// <summary>
    /// Allow access for DataLens
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DataLens {
      get { return dataLens_; }
      set {
        dataLens_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Access);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Access other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataLens != other.DataLens) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataLens != false) hash ^= DataLens.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataLens != false) {
        output.WriteRawTag(8);
        output.WriteBool(DataLens);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataLens != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Access other) {
      if (other == null) {
        return;
      }
      if (other.DataLens != false) {
        DataLens = other.DataLens;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DataLens = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
