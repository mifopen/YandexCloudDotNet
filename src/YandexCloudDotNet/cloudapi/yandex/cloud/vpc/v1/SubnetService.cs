// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/vpc/v1/subnet_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Vpc.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/vpc/v1/subnet_service.proto</summary>
  internal static partial class SubnetServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/vpc/v1/subnet_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SubnetServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cih5YW5kZXgvY2xvdWQvdnBjL3YxL3N1Ym5ldF9zZXJ2aWNlLnByb3RvEhN5",
            "YW5kZXguY2xvdWQudnBjLnYxGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvGiBnb29nbGUvcHJvdG9idWYvZmllbGRfbWFzay5wcm90bxogeWFuZGV4",
            "L2Nsb3VkL2FwaS9vcGVyYXRpb24ucHJvdG8aIHlhbmRleC9jbG91ZC92cGMv",
            "djEvc3VibmV0LnByb3RvGiZ5YW5kZXgvY2xvdWQvb3BlcmF0aW9uL29wZXJh",
            "dGlvbi5wcm90bxodeWFuZGV4L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8aJnlh",
            "bmRleC9jbG91ZC9yZWZlcmVuY2UvcmVmZXJlbmNlLnByb3RvIjMKEEdldFN1",
            "Ym5ldFJlcXVlc3QSHwoJc3VibmV0X2lkGAEgASgJQgzoxzEBisgxBDw9NTAi",
            "jwEKEkxpc3RTdWJuZXRzUmVxdWVzdBIfCglmb2xkZXJfaWQYASABKAlCDOjH",
            "MQGKyDEEPD01MBIdCglwYWdlX3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoK",
            "cGFnZV90b2tlbhgDIAEoCUIJisgxBTw9MTAwEhoKBmZpbHRlchgEIAEoCUIK",
            "isgxBjw9MTAwMCJcChNMaXN0U3VibmV0c1Jlc3BvbnNlEiwKB3N1Ym5ldHMY",
            "ASADKAsyGy55YW5kZXguY2xvdWQudnBjLnYxLlN1Ym5ldBIXCg9uZXh0X3Bh",
            "Z2VfdG9rZW4YAiABKAki9wMKE0NyZWF0ZVN1Ym5ldFJlcXVlc3QSHwoJZm9s",
            "ZGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASLwoEbmFtZRgCIAEoCUIh8scx",
            "HXxbYS16XVstYS16MC05XXsxLDYxfVthLXowLTldEh4KC2Rlc2NyaXB0aW9u",
            "GAMgASgJQgmKyDEFPD0yNTYShQEKBmxhYmVscxgEIAMoCzI0LnlhbmRleC5j",
            "bG91ZC52cGMudjEuQ3JlYXRlU3VibmV0UmVxdWVzdC5MYWJlbHNFbnRyeUI/",
            "gsgxBDw9NjSKyDEEPD02M/LHMQtbLV8wLTlhLXpdKrLIMQYaBDEtNjOyyDES",
            "EhBbYS16XVstXzAtOWEtel0qEiAKCm5ldHdvcmtfaWQYBSABKAlCDOjHMQGK",
            "yDEEPD01MBIdCgd6b25lX2lkGAYgASgJQgzoxzEBisgxBDw9NTASHAoOdjRf",
            "Y2lkcl9ibG9ja3MYByADKAlCBOjHMQESIAoOcm91dGVfdGFibGVfaWQYCSAB",
            "KAlCCIrIMQQ8PTUwEjYKDGRoY3Bfb3B0aW9ucxgKIAEoCzIgLnlhbmRleC5j",
            "bG91ZC52cGMudjEuRGhjcE9wdGlvbnMaLQoLTGFiZWxzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASIpChRDcmVhdGVTdWJuZXRNZXRh",
            "ZGF0YRIRCglzdWJuZXRfaWQYASABKAkiyQMKE1VwZGF0ZVN1Ym5ldFJlcXVl",
            "c3QSHwoJc3VibmV0X2lkGAEgASgJQgzoxzEBisgxBDw9NTASLwoLdXBkYXRl",
            "X21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrEi8KBG5h",
            "bWUYAyABKAlCIfLHMR18W2Etel1bLWEtejAtOV17MSw2MX1bYS16MC05XRIe",
            "CgtkZXNjcmlwdGlvbhgEIAEoCUIJisgxBTw9MjU2EoUBCgZsYWJlbHMYBSAD",
            "KAsyNC55YW5kZXguY2xvdWQudnBjLnYxLlVwZGF0ZVN1Ym5ldFJlcXVlc3Qu",
            "TGFiZWxzRW50cnlCP4LIMQQ8PTY0isgxBDw9NjPyxzELWy1fMC05YS16XSqy",
            "yDEGGgQxLTYzssgxEhIQW2Etel1bLV8wLTlhLXpdKhIgCg5yb3V0ZV90YWJs",
            "ZV9pZBgGIAEoCUIIisgxBDw9NTASNgoMZGhjcF9vcHRpb25zGAcgASgLMiAu",
            "eWFuZGV4LmNsb3VkLnZwYy52MS5EaGNwT3B0aW9ucxotCgtMYWJlbHNFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIikKFFVwZGF0ZVN1",
            "Ym5ldE1ldGFkYXRhEhEKCXN1Ym5ldF9pZBgBIAEoCSI2ChNEZWxldGVTdWJu",
            "ZXRSZXF1ZXN0Eh8KCXN1Ym5ldF9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwIikK",
            "FERlbGV0ZVN1Ym5ldE1ldGFkYXRhEhEKCXN1Ym5ldF9pZBgBIAEoCSJ8ChtM",
            "aXN0U3VibmV0T3BlcmF0aW9uc1JlcXVlc3QSHwoJc3VibmV0X2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTASHQoJcGFnZV9zaXplGAIgASgDQgr6xzEGPD0xMDAw",
            "Eh0KCnBhZ2VfdG9rZW4YAyABKAlCCYrIMQU8PTEwMCJuChxMaXN0U3VibmV0",
            "T3BlcmF0aW9uc1Jlc3BvbnNlEjUKCm9wZXJhdGlvbnMYASADKAsyIS55YW5k",
            "ZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbhIXCg9uZXh0X3BhZ2VfdG9r",
            "ZW4YAiABKAkiYQoRTW92ZVN1Ym5ldFJlcXVlc3QSHwoJc3VibmV0X2lkGAEg",
            "ASgJQgzoxzEBisgxBDw9NTASKwoVZGVzdGluYXRpb25fZm9sZGVyX2lkGAIg",
            "ASgJQgzoxzEBisgxBDw9NTAiJwoSTW92ZVN1Ym5ldE1ldGFkYXRhEhEKCXN1",
            "Ym5ldF9pZBgBIAEoCSJqChhMaXN0VXNlZEFkZHJlc3Nlc1JlcXVlc3QSFwoJ",
            "c3VibmV0X2lkGAEgASgJQgToxzEBEhEKCXBhZ2Vfc2l6ZRgCIAEoAxISCgpw",
            "YWdlX3Rva2VuGAMgASgJEg4KBmZpbHRlchgEIAEoCSJpChlMaXN0VXNlZEFk",
            "ZHJlc3Nlc1Jlc3BvbnNlEjMKCWFkZHJlc3NlcxgBIAMoCzIgLnlhbmRleC5j",
            "bG91ZC52cGMudjEuVXNlZEFkZHJlc3MSFwoPbmV4dF9wYWdlX3Rva2VuGAIg",
            "ASgJIokBCgtVc2VkQWRkcmVzcxIPCgdhZGRyZXNzGAEgASgJEjIKCmlwX3Zl",
            "cnNpb24YAiABKA4yHi55YW5kZXguY2xvdWQudnBjLnYxLklwVmVyc2lvbhI1",
            "CgpyZWZlcmVuY2VzGAMgAygLMiEueWFuZGV4LmNsb3VkLnJlZmVyZW5jZS5S",
            "ZWZlcmVuY2UylgkKDVN1Ym5ldFNlcnZpY2USbgoDR2V0EiUueWFuZGV4LmNs",
            "b3VkLnZwYy52MS5HZXRTdWJuZXRSZXF1ZXN0GhsueWFuZGV4LmNsb3VkLnZw",
            "Yy52MS5TdWJuZXQiI4LT5JMCHRIbL3ZwYy92MS9zdWJuZXRzL3tzdWJuZXRf",
            "aWR9EnIKBExpc3QSJy55YW5kZXguY2xvdWQudnBjLnYxLkxpc3RTdWJuZXRz",
            "UmVxdWVzdBooLnlhbmRleC5jbG91ZC52cGMudjEuTGlzdFN1Ym5ldHNSZXNw",
            "b25zZSIXgtPkkwIREg8vdnBjL3YxL3N1Ym5ldHMSkwEKBkNyZWF0ZRIoLnlh",
            "bmRleC5jbG91ZC52cGMudjEuQ3JlYXRlU3VibmV0UmVxdWVzdBohLnlhbmRl",
            "eC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIjyC0+STAhQiDy92cGMvdjEv",
            "c3VibmV0czoBKrLSKh4KFENyZWF0ZVN1Ym5ldE1ldGFkYXRhEgZTdWJuZXQS",
            "nwEKBlVwZGF0ZRIoLnlhbmRleC5jbG91ZC52cGMudjEuVXBkYXRlU3VibmV0",
            "UmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIkiC",
            "0+STAiAyGy92cGMvdjEvc3VibmV0cy97c3VibmV0X2lkfToBKrLSKh4KFFVw",
            "ZGF0ZVN1Ym5ldE1ldGFkYXRhEgZTdWJuZXQSqwEKBkRlbGV0ZRIoLnlhbmRl",
            "eC5jbG91ZC52cGMudjEuRGVsZXRlU3VibmV0UmVxdWVzdBohLnlhbmRleC5j",
            "bG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIlSC0+STAh0qGy92cGMvdjEvc3Vi",
            "bmV0cy97c3VibmV0X2lkfbLSKi0KFERlbGV0ZVN1Ym5ldE1ldGFkYXRhEhVn",
            "b29nbGUucHJvdG9idWYuRW1wdHkSpQEKDkxpc3RPcGVyYXRpb25zEjAueWFu",
            "ZGV4LmNsb3VkLnZwYy52MS5MaXN0U3VibmV0T3BlcmF0aW9uc1JlcXVlc3Qa",
            "MS55YW5kZXguY2xvdWQudnBjLnYxLkxpc3RTdWJuZXRPcGVyYXRpb25zUmVz",
            "cG9uc2UiLoLT5JMCKBImL3ZwYy92MS9zdWJuZXRzL3tzdWJuZXRfaWR9L29w",
            "ZXJhdGlvbnMSngEKBE1vdmUSJi55YW5kZXguY2xvdWQudnBjLnYxLk1vdmVT",
            "dWJuZXRSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRp",
            "b24iS4LT5JMCJSIgL3ZwYy92MS9zdWJuZXRzL3tzdWJuZXRfaWR9Om1vdmU6",
            "ASqy0iocChJNb3ZlU3VibmV0TWV0YWRhdGESBlN1Ym5ldBJyChFMaXN0VXNl",
            "ZEFkZHJlc3NlcxItLnlhbmRleC5jbG91ZC52cGMudjEuTGlzdFVzZWRBZGRy",
            "ZXNzZXNSZXF1ZXN0Gi4ueWFuZGV4LmNsb3VkLnZwYy52MS5MaXN0VXNlZEFk",
            "ZHJlc3Nlc1Jlc3BvbnNlQlYKF3lhbmRleC5jbG91ZC5hcGkudnBjLnYxWjtn",
            "aXRodWIuY29tL3lhbmRleC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xv",
            "dWQvdnBjL3YxO3ZwY2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Vpc.V1.SubnetReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Reference.ReferenceReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.GetSubnetRequest), global::Yandex.Cloud.Vpc.V1.GetSubnetRequest.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListSubnetsRequest), global::Yandex.Cloud.Vpc.V1.ListSubnetsRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListSubnetsResponse), global::Yandex.Cloud.Vpc.V1.ListSubnetsResponse.Parser, new[]{ "Subnets", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.CreateSubnetRequest), global::Yandex.Cloud.Vpc.V1.CreateSubnetRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "NetworkId", "ZoneId", "V4CidrBlocks", "RouteTableId", "DhcpOptions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.CreateSubnetMetadata), global::Yandex.Cloud.Vpc.V1.CreateSubnetMetadata.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.UpdateSubnetRequest), global::Yandex.Cloud.Vpc.V1.UpdateSubnetRequest.Parser, new[]{ "SubnetId", "UpdateMask", "Name", "Description", "Labels", "RouteTableId", "DhcpOptions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.UpdateSubnetMetadata), global::Yandex.Cloud.Vpc.V1.UpdateSubnetMetadata.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.DeleteSubnetRequest), global::Yandex.Cloud.Vpc.V1.DeleteSubnetRequest.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.DeleteSubnetMetadata), global::Yandex.Cloud.Vpc.V1.DeleteSubnetMetadata.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListSubnetOperationsRequest), global::Yandex.Cloud.Vpc.V1.ListSubnetOperationsRequest.Parser, new[]{ "SubnetId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListSubnetOperationsResponse), global::Yandex.Cloud.Vpc.V1.ListSubnetOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.MoveSubnetRequest), global::Yandex.Cloud.Vpc.V1.MoveSubnetRequest.Parser, new[]{ "SubnetId", "DestinationFolderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.MoveSubnetMetadata), global::Yandex.Cloud.Vpc.V1.MoveSubnetMetadata.Parser, new[]{ "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListUsedAddressesRequest), global::Yandex.Cloud.Vpc.V1.ListUsedAddressesRequest.Parser, new[]{ "SubnetId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.ListUsedAddressesResponse), global::Yandex.Cloud.Vpc.V1.ListUsedAddressesResponse.Parser, new[]{ "Addresses", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Vpc.V1.UsedAddress), global::Yandex.Cloud.Vpc.V1.UsedAddress.Parser, new[]{ "Address", "IpVersion", "References" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetSubnetRequest : pb::IMessage<GetSubnetRequest> {
    private static readonly pb::MessageParser<GetSubnetRequest> _parser = new pb::MessageParser<GetSubnetRequest>(() => new GetSubnetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSubnetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubnetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubnetRequest(GetSubnetRequest other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubnetRequest Clone() {
      return new GetSubnetRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource to return.
    /// To get the subnet ID use a [SubnetService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSubnetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSubnetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSubnetRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubnetsRequest : pb::IMessage<ListSubnetsRequest> {
    private static readonly pb::MessageParser<ListSubnetsRequest> _parser = new pb::MessageParser<ListSubnetsRequest>(() => new ListSubnetsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubnetsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsRequest(ListSubnetsRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsRequest Clone() {
      return new ListSubnetsRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list subnets in.
    /// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListSubnetsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests. Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListSubnetsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [Subnet.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Must be 3-63 characters long and match the regular expression `^[a-z][-a-z0-9]{1,61}[a-z0-9]$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubnetsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubnetsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubnetsRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubnetsResponse : pb::IMessage<ListSubnetsResponse> {
    private static readonly pb::MessageParser<ListSubnetsResponse> _parser = new pb::MessageParser<ListSubnetsResponse>(() => new ListSubnetsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubnetsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsResponse(ListSubnetsResponse other) : this() {
      subnets_ = other.subnets_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetsResponse Clone() {
      return new ListSubnetsResponse(this);
    }

    /// <summary>Field number for the "subnets" field.</summary>
    public const int SubnetsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Vpc.V1.Subnet> _repeated_subnets_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Vpc.V1.Subnet.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.Subnet> subnets_ = new pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.Subnet>();
    /// <summary>
    /// List of Subnet resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.Subnet> Subnets {
      get { return subnets_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListSubnetsRequest.page_size], use
    /// the [next_page_token] as the value
    /// for the [ListSubnetsRequest.page_token] query parameter
    /// in the next list request. Subsequent list requests will have their own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubnetsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubnetsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subnets_.Equals(other.subnets_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subnets_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subnets_.WriteTo(output, _repeated_subnets_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subnets_.CalculateSize(_repeated_subnets_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubnetsResponse other) {
      if (other == null) {
        return;
      }
      subnets_.Add(other.subnets_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            subnets_.AddEntriesFrom(input, _repeated_subnets_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateSubnetRequest : pb::IMessage<CreateSubnetRequest> {
    private static readonly pb::MessageParser<CreateSubnetRequest> _parser = new pb::MessageParser<CreateSubnetRequest>(() => new CreateSubnetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSubnetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetRequest(CreateSubnetRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      networkId_ = other.networkId_;
      zoneId_ = other.zoneId_;
      v4CidrBlocks_ = other.v4CidrBlocks_.Clone();
      routeTableId_ = other.routeTableId_;
      dhcpOptions_ = other.dhcpOptions_ != null ? other.dhcpOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetRequest Clone() {
      return new CreateSubnetRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create a subnet in.
    /// To get folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the subnet.
    /// The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the subnet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels, `` key:value `` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 5;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network to create subnet in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 6;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the subnet resides.
    /// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "v4_cidr_blocks" field.</summary>
    public const int V4CidrBlocksFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_v4CidrBlocks_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> v4CidrBlocks_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// CIDR block.
    /// The range of internal addresses that are defined for this subnet.
    /// This field can be set only at Subnet resource creation time and cannot be changed.
    /// For example, 10.0.0.0/22 or 192.168.0.0/24.
    /// Minimum subnet size is /28, maximum subnet size is /16.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> V4CidrBlocks {
      get { return v4CidrBlocks_; }
    }

    /// <summary>Field number for the "route_table_id" field.</summary>
    public const int RouteTableIdFieldNumber = 9;
    private string routeTableId_ = "";
    /// <summary>
    /// ID of route table the subnet is linked to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteTableId {
      get { return routeTableId_; }
      set {
        routeTableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dhcp_options" field.</summary>
    public const int DhcpOptionsFieldNumber = 10;
    private global::Yandex.Cloud.Vpc.V1.DhcpOptions dhcpOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Vpc.V1.DhcpOptions DhcpOptions {
      get { return dhcpOptions_; }
      set {
        dhcpOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSubnetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSubnetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (NetworkId != other.NetworkId) return false;
      if (ZoneId != other.ZoneId) return false;
      if(!v4CidrBlocks_.Equals(other.v4CidrBlocks_)) return false;
      if (RouteTableId != other.RouteTableId) return false;
      if (!object.Equals(DhcpOptions, other.DhcpOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      hash ^= v4CidrBlocks_.GetHashCode();
      if (RouteTableId.Length != 0) hash ^= RouteTableId.GetHashCode();
      if (dhcpOptions_ != null) hash ^= DhcpOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (NetworkId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(NetworkId);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ZoneId);
      }
      v4CidrBlocks_.WriteTo(output, _repeated_v4CidrBlocks_codec);
      if (RouteTableId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RouteTableId);
      }
      if (dhcpOptions_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(DhcpOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      size += v4CidrBlocks_.CalculateSize(_repeated_v4CidrBlocks_codec);
      if (RouteTableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteTableId);
      }
      if (dhcpOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DhcpOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSubnetRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      v4CidrBlocks_.Add(other.v4CidrBlocks_);
      if (other.RouteTableId.Length != 0) {
        RouteTableId = other.RouteTableId;
      }
      if (other.dhcpOptions_ != null) {
        if (dhcpOptions_ == null) {
          DhcpOptions = new global::Yandex.Cloud.Vpc.V1.DhcpOptions();
        }
        DhcpOptions.MergeFrom(other.DhcpOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            NetworkId = input.ReadString();
            break;
          }
          case 50: {
            ZoneId = input.ReadString();
            break;
          }
          case 58: {
            v4CidrBlocks_.AddEntriesFrom(input, _repeated_v4CidrBlocks_codec);
            break;
          }
          case 74: {
            RouteTableId = input.ReadString();
            break;
          }
          case 82: {
            if (dhcpOptions_ == null) {
              DhcpOptions = new global::Yandex.Cloud.Vpc.V1.DhcpOptions();
            }
            input.ReadMessage(DhcpOptions);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateSubnetMetadata : pb::IMessage<CreateSubnetMetadata> {
    private static readonly pb::MessageParser<CreateSubnetMetadata> _parser = new pb::MessageParser<CreateSubnetMetadata>(() => new CreateSubnetMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSubnetMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetMetadata(CreateSubnetMetadata other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubnetMetadata Clone() {
      return new CreateSubnetMetadata(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSubnetMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSubnetMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSubnetMetadata other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateSubnetRequest : pb::IMessage<UpdateSubnetRequest> {
    private static readonly pb::MessageParser<UpdateSubnetRequest> _parser = new pb::MessageParser<UpdateSubnetRequest>(() => new UpdateSubnetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSubnetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetRequest(UpdateSubnetRequest other) : this() {
      subnetId_ = other.subnetId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      routeTableId_ = other.routeTableId_;
      dhcpOptions_ = other.dhcpOptions_ != null ? other.dhcpOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetRequest Clone() {
      return new UpdateSubnetRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the Subnet resource are going to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name of the subnet.
    /// The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description of the subnet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `` key:value `` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "route_table_id" field.</summary>
    public const int RouteTableIdFieldNumber = 6;
    private string routeTableId_ = "";
    /// <summary>
    /// ID of route table the subnet is linked to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RouteTableId {
      get { return routeTableId_; }
      set {
        routeTableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dhcp_options" field.</summary>
    public const int DhcpOptionsFieldNumber = 7;
    private global::Yandex.Cloud.Vpc.V1.DhcpOptions dhcpOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Vpc.V1.DhcpOptions DhcpOptions {
      get { return dhcpOptions_; }
      set {
        dhcpOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSubnetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSubnetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (RouteTableId != other.RouteTableId) return false;
      if (!object.Equals(DhcpOptions, other.DhcpOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (RouteTableId.Length != 0) hash ^= RouteTableId.GetHashCode();
      if (dhcpOptions_ != null) hash ^= DhcpOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (RouteTableId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RouteTableId);
      }
      if (dhcpOptions_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DhcpOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (RouteTableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RouteTableId);
      }
      if (dhcpOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DhcpOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSubnetRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.RouteTableId.Length != 0) {
        RouteTableId = other.RouteTableId;
      }
      if (other.dhcpOptions_ != null) {
        if (dhcpOptions_ == null) {
          DhcpOptions = new global::Yandex.Cloud.Vpc.V1.DhcpOptions();
        }
        DhcpOptions.MergeFrom(other.DhcpOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 50: {
            RouteTableId = input.ReadString();
            break;
          }
          case 58: {
            if (dhcpOptions_ == null) {
              DhcpOptions = new global::Yandex.Cloud.Vpc.V1.DhcpOptions();
            }
            input.ReadMessage(DhcpOptions);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateSubnetMetadata : pb::IMessage<UpdateSubnetMetadata> {
    private static readonly pb::MessageParser<UpdateSubnetMetadata> _parser = new pb::MessageParser<UpdateSubnetMetadata>(() => new UpdateSubnetMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSubnetMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetMetadata(UpdateSubnetMetadata other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubnetMetadata Clone() {
      return new UpdateSubnetMetadata(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSubnetMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSubnetMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSubnetMetadata other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteSubnetRequest : pb::IMessage<DeleteSubnetRequest> {
    private static readonly pb::MessageParser<DeleteSubnetRequest> _parser = new pb::MessageParser<DeleteSubnetRequest>(() => new DeleteSubnetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteSubnetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetRequest(DeleteSubnetRequest other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetRequest Clone() {
      return new DeleteSubnetRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet to delete.
    /// To get the subnet ID use a [SubnetService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteSubnetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteSubnetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteSubnetRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteSubnetMetadata : pb::IMessage<DeleteSubnetMetadata> {
    private static readonly pb::MessageParser<DeleteSubnetMetadata> _parser = new pb::MessageParser<DeleteSubnetMetadata>(() => new DeleteSubnetMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteSubnetMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetMetadata(DeleteSubnetMetadata other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubnetMetadata Clone() {
      return new DeleteSubnetMetadata(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteSubnetMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteSubnetMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteSubnetMetadata other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubnetOperationsRequest : pb::IMessage<ListSubnetOperationsRequest> {
    private static readonly pb::MessageParser<ListSubnetOperationsRequest> _parser = new pb::MessageParser<ListSubnetOperationsRequest>(() => new ListSubnetOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubnetOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsRequest(ListSubnetOperationsRequest other) : this() {
      subnetId_ = other.subnetId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsRequest Clone() {
      return new ListSubnetOperationsRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource to list operations for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page that should be returned. If the number of available
    /// results is larger than [page_size], the service returns a [ListSubnetOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests. Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListSubnetOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubnetOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubnetOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubnetOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubnetOperationsResponse : pb::IMessage<ListSubnetOperationsResponse> {
    private static readonly pb::MessageParser<ListSubnetOperationsResponse> _parser = new pb::MessageParser<ListSubnetOperationsResponse>(() => new ListSubnetOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubnetOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsResponse(ListSubnetOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubnetOperationsResponse Clone() {
      return new ListSubnetOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of operations for the specified Subnet resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListSubnetOperationsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListSubnetOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubnetOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubnetOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubnetOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveSubnetRequest : pb::IMessage<MoveSubnetRequest> {
    private static readonly pb::MessageParser<MoveSubnetRequest> _parser = new pb::MessageParser<MoveSubnetRequest>(() => new MoveSubnetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveSubnetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetRequest(MoveSubnetRequest other) : this() {
      subnetId_ = other.subnetId_;
      destinationFolderId_ = other.destinationFolderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetRequest Clone() {
      return new MoveSubnetRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource to move.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_folder_id" field.</summary>
    public const int DestinationFolderIdFieldNumber = 2;
    private string destinationFolderId_ = "";
    /// <summary>
    /// ID of the destination folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestinationFolderId {
      get { return destinationFolderId_; }
      set {
        destinationFolderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveSubnetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveSubnetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (DestinationFolderId != other.DestinationFolderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (DestinationFolderId.Length != 0) hash ^= DestinationFolderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (DestinationFolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestinationFolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (DestinationFolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationFolderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveSubnetRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.DestinationFolderId.Length != 0) {
        DestinationFolderId = other.DestinationFolderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 18: {
            DestinationFolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MoveSubnetMetadata : pb::IMessage<MoveSubnetMetadata> {
    private static readonly pb::MessageParser<MoveSubnetMetadata> _parser = new pb::MessageParser<MoveSubnetMetadata>(() => new MoveSubnetMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveSubnetMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetMetadata(MoveSubnetMetadata other) : this() {
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSubnetMetadata Clone() {
      return new MoveSubnetMetadata(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the Subnet resource that is being moved.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveSubnetMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveSubnetMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveSubnetMetadata other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListUsedAddressesRequest : pb::IMessage<ListUsedAddressesRequest> {
    private static readonly pb::MessageParser<ListUsedAddressesRequest> _parser = new pb::MessageParser<ListUsedAddressesRequest>(() => new ListUsedAddressesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUsedAddressesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesRequest(ListUsedAddressesRequest other) : this() {
      subnetId_ = other.subnetId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesRequest Clone() {
      return new ListUsedAddressesRequest(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUsedAddressesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUsedAddressesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUsedAddressesRequest other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListUsedAddressesResponse : pb::IMessage<ListUsedAddressesResponse> {
    private static readonly pb::MessageParser<ListUsedAddressesResponse> _parser = new pb::MessageParser<ListUsedAddressesResponse>(() => new ListUsedAddressesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUsedAddressesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesResponse(ListUsedAddressesResponse other) : this() {
      addresses_ = other.addresses_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUsedAddressesResponse Clone() {
      return new ListUsedAddressesResponse(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Vpc.V1.UsedAddress> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Vpc.V1.UsedAddress.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.UsedAddress> addresses_ = new pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.UsedAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Vpc.V1.UsedAddress> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUsedAddressesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUsedAddressesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUsedAddressesResponse other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UsedAddress : pb::IMessage<UsedAddress> {
    private static readonly pb::MessageParser<UsedAddress> _parser = new pb::MessageParser<UsedAddress>(() => new UsedAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsedAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Vpc.V1.SubnetServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsedAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsedAddress(UsedAddress other) : this() {
      address_ = other.address_;
      ipVersion_ = other.ipVersion_;
      references_ = other.references_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsedAddress Clone() {
      return new UsedAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 2;
    private global::Yandex.Cloud.Vpc.V1.IpVersion ipVersion_ = global::Yandex.Cloud.Vpc.V1.IpVersion.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Vpc.V1.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    /// <summary>Field number for the "references" field.</summary>
    public const int ReferencesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Reference.Reference> _repeated_references_codec
        = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.Reference.Reference.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Reference.Reference> references_ = new pbc::RepeatedField<global::Yandex.Cloud.Reference.Reference>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Reference.Reference> References {
      get { return references_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsedAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsedAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (IpVersion != other.IpVersion) return false;
      if(!references_.Equals(other.references_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (IpVersion != global::Yandex.Cloud.Vpc.V1.IpVersion.Unspecified) hash ^= IpVersion.GetHashCode();
      hash ^= references_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (IpVersion != global::Yandex.Cloud.Vpc.V1.IpVersion.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IpVersion);
      }
      references_.WriteTo(output, _repeated_references_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (IpVersion != global::Yandex.Cloud.Vpc.V1.IpVersion.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      size += references_.CalculateSize(_repeated_references_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsedAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.IpVersion != global::Yandex.Cloud.Vpc.V1.IpVersion.Unspecified) {
        IpVersion = other.IpVersion;
      }
      references_.Add(other.references_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            IpVersion = (global::Yandex.Cloud.Vpc.V1.IpVersion) input.ReadEnum();
            break;
          }
          case 26: {
            references_.AddEntriesFrom(input, _repeated_references_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
