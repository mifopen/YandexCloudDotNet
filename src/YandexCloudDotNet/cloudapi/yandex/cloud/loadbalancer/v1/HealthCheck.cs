// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/loadbalancer/v1/health_check.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Loadbalancer.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/loadbalancer/v1/health_check.proto</summary>
  internal static partial class HealthCheckReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/loadbalancer/v1/health_check.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HealthCheckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci95YW5kZXgvY2xvdWQvbG9hZGJhbGFuY2VyL3YxL2hlYWx0aF9jaGVjay5w",
            "cm90bxIceWFuZGV4LmNsb3VkLmxvYWRiYWxhbmNlci52MRoeZ29vZ2xlL3By",
            "b3RvYnVmL2R1cmF0aW9uLnByb3RvGh15YW5kZXgvY2xvdWQvdmFsaWRhdGlv",
            "bi5wcm90byL1AwoLSGVhbHRoQ2hlY2sSMwoEbmFtZRgBIAEoCUIl6McxAfLH",
            "MR18W2Etel1bLWEtejAtOV17MSw2MX1bYS16MC05XRIrCghpbnRlcnZhbBgC",
            "IAEoCzIZLmdvb2dsZS5wcm90b2J1Zi5EdXJhdGlvbhIqCgd0aW1lb3V0GAMg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEiUKE3VuaGVhbHRoeV90",
            "aHJlc2hvbGQYBCABKANCCPrHMQQyLTEwEiMKEWhlYWx0aHlfdGhyZXNob2xk",
            "GAUgASgDQgj6xzEEMi0xMBJLCgt0Y3Bfb3B0aW9ucxgGIAEoCzI0LnlhbmRl",
            "eC5jbG91ZC5sb2FkYmFsYW5jZXIudjEuSGVhbHRoQ2hlY2suVGNwT3B0aW9u",
            "c0gAEk0KDGh0dHBfb3B0aW9ucxgHIAEoCzI1LnlhbmRleC5jbG91ZC5sb2Fk",
            "YmFsYW5jZXIudjEuSGVhbHRoQ2hlY2suSHR0cE9wdGlvbnNIABonCgpUY3BP",
            "cHRpb25zEhkKBHBvcnQYASABKANCC/rHMQcxLTY1NTM1GjYKC0h0dHBPcHRp",
            "b25zEhkKBHBvcnQYASABKANCC/rHMQcxLTY1NTM1EgwKBHBhdGgYAiABKAlC",
            "DwoHb3B0aW9ucxIEwMExAUJxCiB5YW5kZXguY2xvdWQuYXBpLmxvYWRiYWxh",
            "bmNlci52MVpNZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2xvYWRiYWxhbmNlci92MTtsb2FkYmFsYW5jZXJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.HealthCheck), global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Parser, new[]{ "Name", "Interval", "Timeout", "UnhealthyThreshold", "HealthyThreshold", "TcpOptions", "HttpOptions" }, new[]{ "Options" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions), global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions.Parser, new[]{ "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions), global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions.Parser, new[]{ "Port", "Path" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A HealthCheck resource. For more information, see [Health check](/docs/load-balancer/concepts/health-check).
  /// </summary>
  internal sealed partial class HealthCheck : pb::IMessage<HealthCheck> {
    private static readonly pb::MessageParser<HealthCheck> _parser = new pb::MessageParser<HealthCheck>(() => new HealthCheck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthCheck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Loadbalancer.V1.HealthCheckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck(HealthCheck other) : this() {
      name_ = other.name_;
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      unhealthyThreshold_ = other.unhealthyThreshold_;
      healthyThreshold_ = other.healthyThreshold_;
      switch (other.OptionsCase) {
        case OptionsOneofCase.TcpOptions:
          TcpOptions = other.TcpOptions.Clone();
          break;
        case OptionsOneofCase.HttpOptions:
          HttpOptions = other.HttpOptions.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheck Clone() {
      return new HealthCheck(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the health check. The name must be unique for each target group that attached to a single load balancer. 3-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The interval between health checks. The default is 2 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Duration timeout_;
    /// <summary>
    /// Timeout for a target to return a response for the health check. The default is 1 second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_threshold" field.</summary>
    public const int UnhealthyThresholdFieldNumber = 4;
    private long unhealthyThreshold_;
    /// <summary>
    /// Number of failed health checks before changing the status to `` UNHEALTHY ``. The default is 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnhealthyThreshold {
      get { return unhealthyThreshold_; }
      set {
        unhealthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "healthy_threshold" field.</summary>
    public const int HealthyThresholdFieldNumber = 5;
    private long healthyThreshold_;
    /// <summary>
    /// Number of successful health checks required in order to set the `` HEALTHY `` status for the target. The default is 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HealthyThreshold {
      get { return healthyThreshold_; }
      set {
        healthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "tcp_options" field.</summary>
    public const int TcpOptionsFieldNumber = 6;
    /// <summary>
    /// Options for TCP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions TcpOptions {
      get { return optionsCase_ == OptionsOneofCase.TcpOptions ? (global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions) options_ : null; }
      set {
        options_ = value;
        optionsCase_ = value == null ? OptionsOneofCase.None : OptionsOneofCase.TcpOptions;
      }
    }

    /// <summary>Field number for the "http_options" field.</summary>
    public const int HttpOptionsFieldNumber = 7;
    /// <summary>
    /// Options for HTTP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions HttpOptions {
      get { return optionsCase_ == OptionsOneofCase.HttpOptions ? (global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions) options_ : null; }
      set {
        options_ = value;
        optionsCase_ = value == null ? OptionsOneofCase.None : OptionsOneofCase.HttpOptions;
      }
    }

    private object options_;
    /// <summary>Enum of possible cases for the "options" oneof.</summary>
    public enum OptionsOneofCase {
      None = 0,
      TcpOptions = 6,
      HttpOptions = 7,
    }
    private OptionsOneofCase optionsCase_ = OptionsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptionsOneofCase OptionsCase {
      get { return optionsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOptions() {
      optionsCase_ = OptionsOneofCase.None;
      options_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthCheck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthCheck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (UnhealthyThreshold != other.UnhealthyThreshold) return false;
      if (HealthyThreshold != other.HealthyThreshold) return false;
      if (!object.Equals(TcpOptions, other.TcpOptions)) return false;
      if (!object.Equals(HttpOptions, other.HttpOptions)) return false;
      if (OptionsCase != other.OptionsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (UnhealthyThreshold != 0L) hash ^= UnhealthyThreshold.GetHashCode();
      if (HealthyThreshold != 0L) hash ^= HealthyThreshold.GetHashCode();
      if (optionsCase_ == OptionsOneofCase.TcpOptions) hash ^= TcpOptions.GetHashCode();
      if (optionsCase_ == OptionsOneofCase.HttpOptions) hash ^= HttpOptions.GetHashCode();
      hash ^= (int) optionsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (interval_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Interval);
      }
      if (timeout_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timeout);
      }
      if (UnhealthyThreshold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UnhealthyThreshold);
      }
      if (HealthyThreshold != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(HealthyThreshold);
      }
      if (optionsCase_ == OptionsOneofCase.TcpOptions) {
        output.WriteRawTag(50);
        output.WriteMessage(TcpOptions);
      }
      if (optionsCase_ == OptionsOneofCase.HttpOptions) {
        output.WriteRawTag(58);
        output.WriteMessage(HttpOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (UnhealthyThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnhealthyThreshold);
      }
      if (HealthyThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HealthyThreshold);
      }
      if (optionsCase_ == OptionsOneofCase.TcpOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcpOptions);
      }
      if (optionsCase_ == OptionsOneofCase.HttpOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthCheck other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.UnhealthyThreshold != 0L) {
        UnhealthyThreshold = other.UnhealthyThreshold;
      }
      if (other.HealthyThreshold != 0L) {
        HealthyThreshold = other.HealthyThreshold;
      }
      switch (other.OptionsCase) {
        case OptionsOneofCase.TcpOptions:
          if (TcpOptions == null) {
            TcpOptions = new global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions();
          }
          TcpOptions.MergeFrom(other.TcpOptions);
          break;
        case OptionsOneofCase.HttpOptions:
          if (HttpOptions == null) {
            HttpOptions = new global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions();
          }
          HttpOptions.MergeFrom(other.HttpOptions);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 26: {
            if (timeout_ == null) {
              Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Timeout);
            break;
          }
          case 32: {
            UnhealthyThreshold = input.ReadInt64();
            break;
          }
          case 40: {
            HealthyThreshold = input.ReadInt64();
            break;
          }
          case 50: {
            global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions subBuilder = new global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.TcpOptions();
            if (optionsCase_ == OptionsOneofCase.TcpOptions) {
              subBuilder.MergeFrom(TcpOptions);
            }
            input.ReadMessage(subBuilder);
            TcpOptions = subBuilder;
            break;
          }
          case 58: {
            global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions subBuilder = new global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Types.HttpOptions();
            if (optionsCase_ == OptionsOneofCase.HttpOptions) {
              subBuilder.MergeFrom(HttpOptions);
            }
            input.ReadMessage(subBuilder);
            HttpOptions = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HealthCheck message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Configuration option for a TCP health check.
      /// </summary>
      internal sealed partial class TcpOptions : pb::IMessage<TcpOptions> {
        private static readonly pb::MessageParser<TcpOptions> _parser = new pb::MessageParser<TcpOptions>(() => new TcpOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TcpOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions(TcpOptions other) : this() {
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions Clone() {
          return new TcpOptions(this);
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 1;
        private long port_;
        /// <summary>
        /// Port to use for TCP health checks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TcpOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TcpOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Port != 0L) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Port != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Port != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TcpOptions other) {
          if (other == null) {
            return;
          }
          if (other.Port != 0L) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Port = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Configuration option for an HTTP health check.
      /// </summary>
      internal sealed partial class HttpOptions : pb::IMessage<HttpOptions> {
        private static readonly pb::MessageParser<HttpOptions> _parser = new pb::MessageParser<HttpOptions>(() => new HttpOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HttpOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions(HttpOptions other) : this() {
          port_ = other.port_;
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions Clone() {
          return new HttpOptions(this);
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 1;
        private long port_;
        /// <summary>
        /// Port to use for HTTP health checks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        /// <summary>
        /// URL path to set for health checking requests for every target in the target group. 
        /// For example `` /ping ``. The default path is `` / ``.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HttpOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HttpOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Port != other.Port) return false;
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Port != 0L) hash ^= Port.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Port != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Port);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Port != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HttpOptions other) {
          if (other == null) {
            return;
          }
          if (other.Port != 0L) {
            Port = other.Port;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Port = input.ReadInt64();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
