// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/loadbalancer/v1/network_load_balancer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Loadbalancer.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/loadbalancer/v1/network_load_balancer.proto</summary>
  internal static partial class NetworkLoadBalancerReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/loadbalancer/v1/network_load_balancer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkLoadBalancerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjh5YW5kZXgvY2xvdWQvbG9hZGJhbGFuY2VyL3YxL25ldHdvcmtfbG9hZF9i",
            "YWxhbmNlci5wcm90bxIceWFuZGV4LmNsb3VkLmxvYWRiYWxhbmNlci52MRof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxodeWFuZGV4L2Nsb3Vk",
            "L3ZhbGlkYXRpb24ucHJvdG8aL3lhbmRleC9jbG91ZC9sb2FkYmFsYW5jZXIv",
            "djEvaGVhbHRoX2NoZWNrLnByb3RvIo8HChNOZXR3b3JrTG9hZEJhbGFuY2Vy",
            "EgoKAmlkGAEgASgJEhEKCWZvbGRlcl9pZBgCIAEoCRIuCgpjcmVhdGVkX2F0",
            "GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIMCgRuYW1lGAQg",
            "ASgJEhMKC2Rlc2NyaXB0aW9uGAUgASgJEk0KBmxhYmVscxgGIAMoCzI9Lnlh",
            "bmRleC5jbG91ZC5sb2FkYmFsYW5jZXIudjEuTmV0d29ya0xvYWRCYWxhbmNl",
            "ci5MYWJlbHNFbnRyeRIRCglyZWdpb25faWQYByABKAkSSAoGc3RhdHVzGAkg",
            "ASgOMjgueWFuZGV4LmNsb3VkLmxvYWRiYWxhbmNlci52MS5OZXR3b3JrTG9h",
            "ZEJhbGFuY2VyLlN0YXR1cxJECgR0eXBlGAogASgOMjYueWFuZGV4LmNsb3Vk",
            "LmxvYWRiYWxhbmNlci52MS5OZXR3b3JrTG9hZEJhbGFuY2VyLlR5cGUSWwoQ",
            "c2Vzc2lvbl9hZmZpbml0eRgLIAEoDjJBLnlhbmRleC5jbG91ZC5sb2FkYmFs",
            "YW5jZXIudjEuTmV0d29ya0xvYWRCYWxhbmNlci5TZXNzaW9uQWZmaW5pdHkS",
            "OQoJbGlzdGVuZXJzGAwgAygLMiYueWFuZGV4LmNsb3VkLmxvYWRiYWxhbmNl",
            "ci52MS5MaXN0ZW5lchJRChZhdHRhY2hlZF90YXJnZXRfZ3JvdXBzGA0gAygL",
            "MjEueWFuZGV4LmNsb3VkLmxvYWRiYWxhbmNlci52MS5BdHRhY2hlZFRhcmdl",
            "dEdyb3VwGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEifwoGU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAAEgwK",
            "CENSRUFUSU5HEAESDAoIU1RBUlRJTkcQAhIKCgZBQ1RJVkUQAxIMCghTVE9Q",
            "UElORxAEEgsKB1NUT1BQRUQQBRIMCghERUxFVElORxAGEgwKCElOQUNUSVZF",
            "EAciKgoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDAoIRVhURVJOQUwQ",
            "ASJNCg9TZXNzaW9uQWZmaW5pdHkSIAocU0VTU0lPTl9BRkZJTklUWV9VTlNQ",
            "RUNJRklFRBAAEhgKFENMSUVOVF9JUF9QT1JUX1BST1RPEAEihQEKE0F0dGFj",
            "aGVkVGFyZ2V0R3JvdXASJQoPdGFyZ2V0X2dyb3VwX2lkGAEgASgJQgzoxzEB",
            "isgxBDw9NTASRwoNaGVhbHRoX2NoZWNrcxgCIAMoCzIpLnlhbmRleC5jbG91",
            "ZC5sb2FkYmFsYW5jZXIudjEuSGVhbHRoQ2hlY2tCBYLIMQExIr4BCghMaXN0",
            "ZW5lchIMCgRuYW1lGAEgASgJEg8KB2FkZHJlc3MYAiABKAkSDAoEcG9ydBgD",
            "IAEoAxJBCghwcm90b2NvbBgEIAEoDjIvLnlhbmRleC5jbG91ZC5sb2FkYmFs",
            "YW5jZXIudjEuTGlzdGVuZXIuUHJvdG9jb2wSEwoLdGFyZ2V0X3BvcnQYBSAB",
            "KAMiLQoIUHJvdG9jb2wSGAoUUFJPVE9DT0xfVU5TUEVDSUZJRUQQABIHCgNU",
            "Q1AQASLaAQoLVGFyZ2V0U3RhdGUSEQoJc3VibmV0X2lkGAEgASgJEg8KB2Fk",
            "ZHJlc3MYAiABKAkSQAoGc3RhdHVzGAMgASgOMjAueWFuZGV4LmNsb3VkLmxv",
            "YWRiYWxhbmNlci52MS5UYXJnZXRTdGF0ZS5TdGF0dXMiZQoGU3RhdHVzEhYK",
            "ElNUQVRVU19VTlNQRUNJRklFRBAAEgsKB0lOSVRJQUwQARILCgdIRUFMVEhZ",
            "EAISDQoJVU5IRUFMVEhZEAMSDAoIRFJBSU5JTkcQBBIMCghJTkFDVElWRRAF",
            "KjsKCUlwVmVyc2lvbhIaChZJUF9WRVJTSU9OX1VOU1BFQ0lGSUVEEAASCAoE",
            "SVBWNBABEggKBElQVjYQAkJxCiB5YW5kZXguY2xvdWQuYXBpLmxvYWRiYWxh",
            "bmNlci52MVpNZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2xvYWRiYWxhbmNlci92MTtsb2FkYmFsYW5jZXJiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Loadbalancer.V1.HealthCheckReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Loadbalancer.V1.IpVersion), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer), global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "RegionId", "Status", "Type", "SessionAffinity", "Listeners", "AttachedTargetGroups" }, null, new[]{ typeof(global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Status), typeof(global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Type), typeof(global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.SessionAffinity) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup), global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup.Parser, new[]{ "TargetGroupId", "HealthChecks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.Listener), global::Yandex.Cloud.Loadbalancer.V1.Listener.Parser, new[]{ "Name", "Address", "Port", "Protocol", "TargetPort" }, null, new[]{ typeof(global::Yandex.Cloud.Loadbalancer.V1.Listener.Types.Protocol) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Loadbalancer.V1.TargetState), global::Yandex.Cloud.Loadbalancer.V1.TargetState.Parser, new[]{ "SubnetId", "Address", "Status" }, null, new[]{ typeof(global::Yandex.Cloud.Loadbalancer.V1.TargetState.Types.Status) }, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// IP version of the addresses that the load balancer works with.
  /// Only IPv4 is currently available.
  /// </summary>
  internal enum IpVersion {
    [pbr::OriginalName("IP_VERSION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// IPv4
    /// </summary>
    [pbr::OriginalName("IPV4")] Ipv4 = 1,
    /// <summary>
    /// IPv6
    /// </summary>
    [pbr::OriginalName("IPV6")] Ipv6 = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A NetworkLoadBalancer resource. For more information, see [Network Load Balancer](/docs/load-balancer/concepts).
  /// </summary>
  internal sealed partial class NetworkLoadBalancer : pb::IMessage<NetworkLoadBalancer> {
    private static readonly pb::MessageParser<NetworkLoadBalancer> _parser = new pb::MessageParser<NetworkLoadBalancer>(() => new NetworkLoadBalancer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkLoadBalancer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkLoadBalancer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkLoadBalancer(NetworkLoadBalancer other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      regionId_ = other.regionId_;
      status_ = other.status_;
      type_ = other.type_;
      sessionAffinity_ = other.sessionAffinity_;
      listeners_ = other.listeners_.Clone();
      attachedTargetGroups_ = other.attachedTargetGroups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkLoadBalancer Clone() {
      return new NetworkLoadBalancer(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the network load balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the network load balancer belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the network load balancer. The name is unique within the folder. 3-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Optional description of the network load balancer. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `` key:value `` pairs. Мaximum of 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 7;
    private string regionId_ = "";
    /// <summary>
    /// ID of the region that the network load balancer belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionId {
      get { return regionId_; }
      set {
        regionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Status status_ = 0;
    /// <summary>
    /// Status of the network load balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 10;
    private global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Type type_ = 0;
    /// <summary>
    /// Type of the network load balancer. Only external network load balancers are available now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "session_affinity" field.</summary>
    public const int SessionAffinityFieldNumber = 11;
    private global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.SessionAffinity sessionAffinity_ = 0;
    /// <summary>
    /// Type of the session affinity. Only 5-tuple affinity is available now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.SessionAffinity SessionAffinity {
      get { return sessionAffinity_; }
      set {
        sessionAffinity_ = value;
      }
    }

    /// <summary>Field number for the "listeners" field.</summary>
    public const int ListenersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Loadbalancer.V1.Listener> _repeated_listeners_codec
        = pb::FieldCodec.ForMessage(98, global::Yandex.Cloud.Loadbalancer.V1.Listener.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.Listener> listeners_ = new pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.Listener>();
    /// <summary>
    /// List of listeners for the network load balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.Listener> Listeners {
      get { return listeners_; }
    }

    /// <summary>Field number for the "attached_target_groups" field.</summary>
    public const int AttachedTargetGroupsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup> _repeated_attachedTargetGroups_codec
        = pb::FieldCodec.ForMessage(106, global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup> attachedTargetGroups_ = new pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup>();
    /// <summary>
    /// List of target groups attached to the network load balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.AttachedTargetGroup> AttachedTargetGroups {
      get { return attachedTargetGroups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkLoadBalancer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkLoadBalancer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (RegionId != other.RegionId) return false;
      if (Status != other.Status) return false;
      if (Type != other.Type) return false;
      if (SessionAffinity != other.SessionAffinity) return false;
      if(!listeners_.Equals(other.listeners_)) return false;
      if(!attachedTargetGroups_.Equals(other.attachedTargetGroups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (RegionId.Length != 0) hash ^= RegionId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SessionAffinity != 0) hash ^= SessionAffinity.GetHashCode();
      hash ^= listeners_.GetHashCode();
      hash ^= attachedTargetGroups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (RegionId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(RegionId);
      }
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (Type != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Type);
      }
      if (SessionAffinity != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SessionAffinity);
      }
      listeners_.WriteTo(output, _repeated_listeners_codec);
      attachedTargetGroups_.WriteTo(output, _repeated_attachedTargetGroups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (RegionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SessionAffinity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SessionAffinity);
      }
      size += listeners_.CalculateSize(_repeated_listeners_codec);
      size += attachedTargetGroups_.CalculateSize(_repeated_attachedTargetGroups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkLoadBalancer other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.RegionId.Length != 0) {
        RegionId = other.RegionId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SessionAffinity != 0) {
        SessionAffinity = other.SessionAffinity;
      }
      listeners_.Add(other.listeners_);
      attachedTargetGroups_.Add(other.attachedTargetGroups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 58: {
            RegionId = input.ReadString();
            break;
          }
          case 72: {
            Status = (global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Status) input.ReadEnum();
            break;
          }
          case 80: {
            Type = (global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.Type) input.ReadEnum();
            break;
          }
          case 88: {
            SessionAffinity = (global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Types.SessionAffinity) input.ReadEnum();
            break;
          }
          case 98: {
            listeners_.AddEntriesFrom(input, _repeated_listeners_codec);
            break;
          }
          case 106: {
            attachedTargetGroups_.AddEntriesFrom(input, _repeated_attachedTargetGroups_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetworkLoadBalancer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Network load balancer is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Network load balancer is being started.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 2,
        /// <summary>
        /// Network load balancer is active and sends traffic to the targets.
        /// </summary>
        [pbr::OriginalName("ACTIVE")] Active = 3,
        /// <summary>
        /// Network load balancer is being stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 4,
        /// <summary>
        /// Network load balancer is stopped and doesn't send traffic to the targets.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 5,
        /// <summary>
        /// Network load balancer is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 6,
        /// <summary>
        /// The load balancer doesn't have any listeners or target groups, or
        /// attached target groups are empty. The load balancer doesn't perform any health checks or
        /// send traffic in this state.
        /// </summary>
        [pbr::OriginalName("INACTIVE")] Inactive = 7,
      }

      /// <summary>
      /// Type of the load balancer. Only external load balancers are currently available.
      /// </summary>
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// External network load balancer.
        /// </summary>
        [pbr::OriginalName("EXTERNAL")] External = 1,
      }

      /// <summary>
      /// Type of session affinity. Only 5-tuple affinity is currently available.
      /// For more information, see [Load Balancer concepts](/load-balancer/concepts/).
      /// </summary>
      internal enum SessionAffinity {
        [pbr::OriginalName("SESSION_AFFINITY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// 5-tuple affinity.
        /// </summary>
        [pbr::OriginalName("CLIENT_IP_PORT_PROTO")] ClientIpPortProto = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// An AttachedTargetGroup resource. For more information, see [Targets and groups](/docs/load-balancer/concepts/target-resources).
  /// </summary>
  internal sealed partial class AttachedTargetGroup : pb::IMessage<AttachedTargetGroup> {
    private static readonly pb::MessageParser<AttachedTargetGroup> _parser = new pb::MessageParser<AttachedTargetGroup>(() => new AttachedTargetGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachedTargetGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedTargetGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedTargetGroup(AttachedTargetGroup other) : this() {
      targetGroupId_ = other.targetGroupId_;
      healthChecks_ = other.healthChecks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedTargetGroup Clone() {
      return new AttachedTargetGroup(this);
    }

    /// <summary>Field number for the "target_group_id" field.</summary>
    public const int TargetGroupIdFieldNumber = 1;
    private string targetGroupId_ = "";
    /// <summary>
    /// ID of the target group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetGroupId {
      get { return targetGroupId_; }
      set {
        targetGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "health_checks" field.</summary>
    public const int HealthChecksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Loadbalancer.V1.HealthCheck> _repeated_healthChecks_codec
        = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Loadbalancer.V1.HealthCheck.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.HealthCheck> healthChecks_ = new pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.HealthCheck>();
    /// <summary>
    /// A health check to perform on the target group.
    /// For now we accept only one health check per AttachedTargetGroup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Loadbalancer.V1.HealthCheck> HealthChecks {
      get { return healthChecks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachedTargetGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachedTargetGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetGroupId != other.TargetGroupId) return false;
      if(!healthChecks_.Equals(other.healthChecks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetGroupId.Length != 0) hash ^= TargetGroupId.GetHashCode();
      hash ^= healthChecks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetGroupId);
      }
      healthChecks_.WriteTo(output, _repeated_healthChecks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetGroupId);
      }
      size += healthChecks_.CalculateSize(_repeated_healthChecks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachedTargetGroup other) {
      if (other == null) {
        return;
      }
      if (other.TargetGroupId.Length != 0) {
        TargetGroupId = other.TargetGroupId;
      }
      healthChecks_.Add(other.healthChecks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetGroupId = input.ReadString();
            break;
          }
          case 18: {
            healthChecks_.AddEntriesFrom(input, _repeated_healthChecks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Listener resource. For more information, see [Listener](/docs/load-balancer/concepts/listener)
  /// </summary>
  internal sealed partial class Listener : pb::IMessage<Listener> {
    private static readonly pb::MessageParser<Listener> _parser = new pb::MessageParser<Listener>(() => new Listener());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Listener> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listener() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listener(Listener other) : this() {
      name_ = other.name_;
      address_ = other.address_;
      port_ = other.port_;
      protocol_ = other.protocol_;
      targetPort_ = other.targetPort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Listener Clone() {
      return new Listener(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the listener. The name must be unique for each listener on a single load balancer. 3-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    /// IP address for the listener.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private long port_;
    /// <summary>
    /// Port.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 4;
    private global::Yandex.Cloud.Loadbalancer.V1.Listener.Types.Protocol protocol_ = 0;
    /// <summary>
    /// Network protocol for incoming traffic.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.Listener.Types.Protocol Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    /// <summary>Field number for the "target_port" field.</summary>
    public const int TargetPortFieldNumber = 5;
    private long targetPort_;
    /// <summary>
    /// Port of a target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetPort {
      get { return targetPort_; }
      set {
        targetPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Listener);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Listener other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (Protocol != other.Protocol) return false;
      if (TargetPort != other.TargetPort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0L) hash ^= Port.GetHashCode();
      if (Protocol != 0) hash ^= Protocol.GetHashCode();
      if (TargetPort != 0L) hash ^= TargetPort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Port != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Port);
      }
      if (Protocol != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Protocol);
      }
      if (TargetPort != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TargetPort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
      }
      if (Protocol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (TargetPort != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetPort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Listener other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0L) {
        Port = other.Port;
      }
      if (other.Protocol != 0) {
        Protocol = other.Protocol;
      }
      if (other.TargetPort != 0L) {
        TargetPort = other.TargetPort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt64();
            break;
          }
          case 32: {
            Protocol = (global::Yandex.Cloud.Loadbalancer.V1.Listener.Types.Protocol) input.ReadEnum();
            break;
          }
          case 40: {
            TargetPort = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Listener message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Network protocol to use.
      /// </summary>
      internal enum Protocol {
        [pbr::OriginalName("PROTOCOL_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("TCP")] Tcp = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// State of the target that was returned after the last health check.
  /// </summary>
  internal sealed partial class TargetState : pb::IMessage<TargetState> {
    private static readonly pb::MessageParser<TargetState> _parser = new pb::MessageParser<TargetState>(() => new TargetState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetState(TargetState other) : this() {
      subnetId_ = other.subnetId_;
      address_ = other.address_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetState Clone() {
      return new TargetState(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet that the target is connected to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    /// IP address of the target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::Yandex.Cloud.Loadbalancer.V1.TargetState.Types.Status status_ = 0;
    /// <summary>
    /// Status of the target.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Loadbalancer.V1.TargetState.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (Address != other.Address) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetState other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 24: {
            Status = (global::Yandex.Cloud.Loadbalancer.V1.TargetState.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TargetState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of the target.
      /// </summary>
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The network load balancer is setting up health checks for this target.
        /// </summary>
        [pbr::OriginalName("INITIAL")] Initial = 1,
        /// <summary>
        /// Health check passed and the target is ready to receive traffic.
        /// </summary>
        [pbr::OriginalName("HEALTHY")] Healthy = 2,
        /// <summary>
        /// Health check failed and the target is not receiving traffic.
        /// </summary>
        [pbr::OriginalName("UNHEALTHY")] Unhealthy = 3,
        /// <summary>
        /// Target is being deleted and the network load balancer is no longer sending traffic to this target.
        /// </summary>
        [pbr::OriginalName("DRAINING")] Draining = 4,
        /// <summary>
        /// The network load balancer is stopped and not performing health checks on this target.
        /// </summary>
        [pbr::OriginalName("INACTIVE")] Inactive = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
