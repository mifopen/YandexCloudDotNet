// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/kms/v1/symmetric_crypto_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Kms.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/kms/v1/symmetric_crypto_service.proto</summary>
  internal static partial class SymmetricCryptoServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/kms/v1/symmetric_crypto_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SymmetricCryptoServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjJ5YW5kZXgvY2xvdWQva21zL3YxL3N5bW1ldHJpY19jcnlwdG9fc2Vydmlj",
            "ZS5wcm90bxITeWFuZGV4LmNsb3VkLmttcy52MRocZ29vZ2xlL2FwaS9hbm5v",
            "dGF0aW9ucy5wcm90bxoneWFuZGV4L2Nsb3VkL2ttcy92MS9zeW1tZXRyaWNf",
            "a2V5LnByb3RvGh15YW5kZXgvY2xvdWQvdmFsaWRhdGlvbi5wcm90byKaAQoX",
            "U3ltbWV0cmljRW5jcnlwdFJlcXVlc3QSHAoGa2V5X2lkGAEgASgJQgzoxzEB",
            "isgxBDw9NTASHAoKdmVyc2lvbl9pZBgCIAEoCUIIisgxBDw9NTASHwoLYWFk",
            "X2NvbnRleHQYAyABKAxCCorIMQY8PTgxOTISIgoJcGxhaW50ZXh0GAQgASgM",
            "Qg/oxzEBisgxBzw9MzI3NjgiagoYU3ltbWV0cmljRW5jcnlwdFJlc3BvbnNl",
            "EhwKBmtleV9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEhwKCnZlcnNpb25faWQY",
            "AiABKAlCCIrIMQQ8PTUwEhIKCmNpcGhlcnRleHQYAyABKAwicgoXU3ltbWV0",
            "cmljRGVjcnlwdFJlcXVlc3QSHAoGa2V5X2lkGAEgASgJQgzoxzEBisgxBDw9",
            "NTASHwoLYWFkX2NvbnRleHQYAiABKAxCCorIMQY8PTgxOTISGAoKY2lwaGVy",
            "dGV4dBgDIAEoDEIE6McxASJRChhTeW1tZXRyaWNEZWNyeXB0UmVzcG9uc2US",
            "DgoGa2V5X2lkGAEgASgJEhIKCnZlcnNpb25faWQYAiABKAkSEQoJcGxhaW50",
            "ZXh0GAMgASgMIs0BChZHZW5lcmF0ZURhdGFLZXlSZXF1ZXN0EhwKBmtleV9p",
            "ZBgBIAEoCUIM6McxAYrIMQQ8PTUwEhwKCnZlcnNpb25faWQYAiABKAlCCIrI",
            "MQQ8PTUwEh8KC2FhZF9jb250ZXh0GAMgASgMQgqKyDEGPD04MTkyEj4KDWRh",
            "dGFfa2V5X3NwZWMYBCABKA4yJy55YW5kZXguY2xvdWQua21zLnYxLlN5bW1l",
            "dHJpY0FsZ29yaXRobRIWCg5za2lwX3BsYWludGV4dBgFIAEoCCJ2ChdHZW5l",
            "cmF0ZURhdGFLZXlSZXNwb25zZRIOCgZrZXlfaWQYASABKAkSEgoKdmVyc2lv",
            "bl9pZBgCIAEoCRIaChJkYXRhX2tleV9wbGFpbnRleHQYAyABKAwSGwoTZGF0",
            "YV9rZXlfY2lwaGVydGV4dBgEIAEoDCLfAQoZU3ltbWV0cmljUmVFbmNyeXB0",
            "UmVxdWVzdBIcCgZrZXlfaWQYASABKAlCDOjHMQGKyDEEPD01MBIcCgp2ZXJz",
            "aW9uX2lkGAIgASgJQgiKyDEEPD01MBIfCgthYWRfY29udGV4dBgDIAEoDEIK",
            "isgxBjw9ODE5MhIjCg1zb3VyY2Vfa2V5X2lkGAQgASgJQgzoxzEBisgxBDw9",
            "NTASJgoSc291cmNlX2FhZF9jb250ZXh0GAUgASgMQgqKyDEGPD04MTkyEhgK",
            "CmNpcGhlcnRleHQYBiABKAxCBOjHMQEihgEKGlN5bW1ldHJpY1JlRW5jcnlw",
            "dFJlc3BvbnNlEg4KBmtleV9pZBgBIAEoCRISCgp2ZXJzaW9uX2lkGAIgASgJ",
            "EhUKDXNvdXJjZV9rZXlfaWQYAyABKAkSGQoRc291cmNlX3ZlcnNpb25faWQY",
            "BCABKAkSEgoKY2lwaGVydGV4dBgFIAEoDDL6BAoWU3ltbWV0cmljQ3J5cHRv",
            "U2VydmljZRKQAQoHRW5jcnlwdBIsLnlhbmRleC5jbG91ZC5rbXMudjEuU3lt",
            "bWV0cmljRW5jcnlwdFJlcXVlc3QaLS55YW5kZXguY2xvdWQua21zLnYxLlN5",
            "bW1ldHJpY0VuY3J5cHRSZXNwb25zZSIogtPkkwIiIh0va21zL3YxL2tleXMv",
            "e2tleV9pZH06ZW5jcnlwdDoBKhKQAQoHRGVjcnlwdBIsLnlhbmRleC5jbG91",
            "ZC5rbXMudjEuU3ltbWV0cmljRGVjcnlwdFJlcXVlc3QaLS55YW5kZXguY2xv",
            "dWQua21zLnYxLlN5bW1ldHJpY0RlY3J5cHRSZXNwb25zZSIogtPkkwIiIh0v",
            "a21zL3YxL2tleXMve2tleV9pZH06ZGVjcnlwdDoBKhKYAQoJUmVFbmNyeXB0",
            "Ei4ueWFuZGV4LmNsb3VkLmttcy52MS5TeW1tZXRyaWNSZUVuY3J5cHRSZXF1",
            "ZXN0Gi8ueWFuZGV4LmNsb3VkLmttcy52MS5TeW1tZXRyaWNSZUVuY3J5cHRS",
            "ZXNwb25zZSIqgtPkkwIkIh8va21zL3YxL2tleXMve2tleV9pZH06cmVFbmNy",
            "eXB0OgEqEp4BCg9HZW5lcmF0ZURhdGFLZXkSKy55YW5kZXguY2xvdWQua21z",
            "LnYxLkdlbmVyYXRlRGF0YUtleVJlcXVlc3QaLC55YW5kZXguY2xvdWQua21z",
            "LnYxLkdlbmVyYXRlRGF0YUtleVJlc3BvbnNlIjCC0+STAioiJS9rbXMvdjEv",
            "a2V5cy97a2V5X2lkfTpnZW5lcmF0ZURhdGFLZXk6ASpCVgoXeWFuZGV4LmNs",
            "b3VkLmFwaS5rbXMudjFaO2dpdGh1Yi5jb20veWFuZGV4LWNsb3VkL2dvLWdl",
            "bnByb3RvL3lhbmRleC9jbG91ZC9rbXMvdjE7a21zYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Yandex.Cloud.Kms.V1.SymmetricKeyReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricEncryptRequest), global::Yandex.Cloud.Kms.V1.SymmetricEncryptRequest.Parser, new[]{ "KeyId", "VersionId", "AadContext", "Plaintext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricEncryptResponse), global::Yandex.Cloud.Kms.V1.SymmetricEncryptResponse.Parser, new[]{ "KeyId", "VersionId", "Ciphertext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricDecryptRequest), global::Yandex.Cloud.Kms.V1.SymmetricDecryptRequest.Parser, new[]{ "KeyId", "AadContext", "Ciphertext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricDecryptResponse), global::Yandex.Cloud.Kms.V1.SymmetricDecryptResponse.Parser, new[]{ "KeyId", "VersionId", "Plaintext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.GenerateDataKeyRequest), global::Yandex.Cloud.Kms.V1.GenerateDataKeyRequest.Parser, new[]{ "KeyId", "VersionId", "AadContext", "DataKeySpec", "SkipPlaintext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.GenerateDataKeyResponse), global::Yandex.Cloud.Kms.V1.GenerateDataKeyResponse.Parser, new[]{ "KeyId", "VersionId", "DataKeyPlaintext", "DataKeyCiphertext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricReEncryptRequest), global::Yandex.Cloud.Kms.V1.SymmetricReEncryptRequest.Parser, new[]{ "KeyId", "VersionId", "AadContext", "SourceKeyId", "SourceAadContext", "Ciphertext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Kms.V1.SymmetricReEncryptResponse), global::Yandex.Cloud.Kms.V1.SymmetricReEncryptResponse.Parser, new[]{ "KeyId", "VersionId", "SourceKeyId", "SourceVersionId", "Ciphertext" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class SymmetricEncryptRequest : pb::IMessage<SymmetricEncryptRequest> {
    private static readonly pb::MessageParser<SymmetricEncryptRequest> _parser = new pb::MessageParser<SymmetricEncryptRequest>(() => new SymmetricEncryptRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricEncryptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptRequest(SymmetricEncryptRequest other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      aadContext_ = other.aadContext_;
      plaintext_ = other.plaintext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptRequest Clone() {
      return new SymmetricEncryptRequest(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key to use for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the key version to encrypt plaintext with.
    /// Defaults to the primary version if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aad_context" field.</summary>
    public const int AadContextFieldNumber = 3;
    private pb::ByteString aadContext_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional authenticated data (AAD context), optional.
    /// If specified, this data will be required for decryption with the [SymmetricDecryptRequest].
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AadContext {
      get { return aadContext_; }
      set {
        aadContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plaintext" field.</summary>
    public const int PlaintextFieldNumber = 4;
    private pb::ByteString plaintext_ = pb::ByteString.Empty;
    /// <summary>
    /// Plaintext to be encrypted.
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Plaintext {
      get { return plaintext_; }
      set {
        plaintext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricEncryptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricEncryptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (AadContext != other.AadContext) return false;
      if (Plaintext != other.Plaintext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (AadContext.Length != 0) hash ^= AadContext.GetHashCode();
      if (Plaintext.Length != 0) hash ^= Plaintext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (AadContext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AadContext);
      }
      if (Plaintext.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Plaintext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (AadContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AadContext);
      }
      if (Plaintext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Plaintext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricEncryptRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.AadContext.Length != 0) {
        AadContext = other.AadContext;
      }
      if (other.Plaintext.Length != 0) {
        Plaintext = other.Plaintext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            AadContext = input.ReadBytes();
            break;
          }
          case 34: {
            Plaintext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymmetricEncryptResponse : pb::IMessage<SymmetricEncryptResponse> {
    private static readonly pb::MessageParser<SymmetricEncryptResponse> _parser = new pb::MessageParser<SymmetricEncryptResponse>(() => new SymmetricEncryptResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricEncryptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptResponse(SymmetricEncryptResponse other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      ciphertext_ = other.ciphertext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricEncryptResponse Clone() {
      return new SymmetricEncryptResponse(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key that was used for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the key version that was used for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ciphertext" field.</summary>
    public const int CiphertextFieldNumber = 3;
    private pb::ByteString ciphertext_ = pb::ByteString.Empty;
    /// <summary>
    /// Resulting ciphertext.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ciphertext {
      get { return ciphertext_; }
      set {
        ciphertext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricEncryptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricEncryptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (Ciphertext != other.Ciphertext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (Ciphertext.Length != 0) hash ^= Ciphertext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (Ciphertext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Ciphertext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (Ciphertext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ciphertext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricEncryptResponse other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.Ciphertext.Length != 0) {
        Ciphertext = other.Ciphertext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            Ciphertext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymmetricDecryptRequest : pb::IMessage<SymmetricDecryptRequest> {
    private static readonly pb::MessageParser<SymmetricDecryptRequest> _parser = new pb::MessageParser<SymmetricDecryptRequest>(() => new SymmetricDecryptRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricDecryptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptRequest(SymmetricDecryptRequest other) : this() {
      keyId_ = other.keyId_;
      aadContext_ = other.aadContext_;
      ciphertext_ = other.ciphertext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptRequest Clone() {
      return new SymmetricDecryptRequest(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key to use for decryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aad_context" field.</summary>
    public const int AadContextFieldNumber = 2;
    private pb::ByteString aadContext_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional authenticated data, must be the same as was provided
    /// in the corresponding [SymmetricEncryptRequest].
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AadContext {
      get { return aadContext_; }
      set {
        aadContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ciphertext" field.</summary>
    public const int CiphertextFieldNumber = 3;
    private pb::ByteString ciphertext_ = pb::ByteString.Empty;
    /// <summary>
    /// Ciphertext to be decrypted.
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ciphertext {
      get { return ciphertext_; }
      set {
        ciphertext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricDecryptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricDecryptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (AadContext != other.AadContext) return false;
      if (Ciphertext != other.Ciphertext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (AadContext.Length != 0) hash ^= AadContext.GetHashCode();
      if (Ciphertext.Length != 0) hash ^= Ciphertext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (AadContext.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AadContext);
      }
      if (Ciphertext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Ciphertext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (AadContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AadContext);
      }
      if (Ciphertext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ciphertext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricDecryptRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.AadContext.Length != 0) {
        AadContext = other.AadContext;
      }
      if (other.Ciphertext.Length != 0) {
        Ciphertext = other.Ciphertext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            AadContext = input.ReadBytes();
            break;
          }
          case 26: {
            Ciphertext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymmetricDecryptResponse : pb::IMessage<SymmetricDecryptResponse> {
    private static readonly pb::MessageParser<SymmetricDecryptResponse> _parser = new pb::MessageParser<SymmetricDecryptResponse>(() => new SymmetricDecryptResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricDecryptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptResponse(SymmetricDecryptResponse other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      plaintext_ = other.plaintext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricDecryptResponse Clone() {
      return new SymmetricDecryptResponse(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key that was used for decryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the key version that was used for decryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plaintext" field.</summary>
    public const int PlaintextFieldNumber = 3;
    private pb::ByteString plaintext_ = pb::ByteString.Empty;
    /// <summary>
    /// Decrypted plaintext.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Plaintext {
      get { return plaintext_; }
      set {
        plaintext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricDecryptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricDecryptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (Plaintext != other.Plaintext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (Plaintext.Length != 0) hash ^= Plaintext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (Plaintext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Plaintext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (Plaintext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Plaintext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricDecryptResponse other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.Plaintext.Length != 0) {
        Plaintext = other.Plaintext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            Plaintext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GenerateDataKeyRequest : pb::IMessage<GenerateDataKeyRequest> {
    private static readonly pb::MessageParser<GenerateDataKeyRequest> _parser = new pb::MessageParser<GenerateDataKeyRequest>(() => new GenerateDataKeyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateDataKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyRequest(GenerateDataKeyRequest other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      aadContext_ = other.aadContext_;
      dataKeySpec_ = other.dataKeySpec_;
      skipPlaintext_ = other.skipPlaintext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyRequest Clone() {
      return new GenerateDataKeyRequest(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key that the generated data key should be encrypted with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the key version to encrypt the generated data key with.
    /// Defaults to the primary version if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aad_context" field.</summary>
    public const int AadContextFieldNumber = 3;
    private pb::ByteString aadContext_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional authenticated data (AAD context), optional.
    /// If specified, this data will be required for decryption with the [SymmetricDecryptRequest].
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AadContext {
      get { return aadContext_; }
      set {
        aadContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_key_spec" field.</summary>
    public const int DataKeySpecFieldNumber = 4;
    private global::Yandex.Cloud.Kms.V1.SymmetricAlgorithm dataKeySpec_ = 0;
    /// <summary>
    /// Encryption algorithm and key length for the generated data key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Kms.V1.SymmetricAlgorithm DataKeySpec {
      get { return dataKeySpec_; }
      set {
        dataKeySpec_ = value;
      }
    }

    /// <summary>Field number for the "skip_plaintext" field.</summary>
    public const int SkipPlaintextFieldNumber = 5;
    private bool skipPlaintext_;
    /// <summary>
    /// If `true`, the method won't return the data key as plaintext.
    /// Default value is `false`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipPlaintext {
      get { return skipPlaintext_; }
      set {
        skipPlaintext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateDataKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateDataKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (AadContext != other.AadContext) return false;
      if (DataKeySpec != other.DataKeySpec) return false;
      if (SkipPlaintext != other.SkipPlaintext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (AadContext.Length != 0) hash ^= AadContext.GetHashCode();
      if (DataKeySpec != 0) hash ^= DataKeySpec.GetHashCode();
      if (SkipPlaintext != false) hash ^= SkipPlaintext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (AadContext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AadContext);
      }
      if (DataKeySpec != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DataKeySpec);
      }
      if (SkipPlaintext != false) {
        output.WriteRawTag(40);
        output.WriteBool(SkipPlaintext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (AadContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AadContext);
      }
      if (DataKeySpec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataKeySpec);
      }
      if (SkipPlaintext != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateDataKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.AadContext.Length != 0) {
        AadContext = other.AadContext;
      }
      if (other.DataKeySpec != 0) {
        DataKeySpec = other.DataKeySpec;
      }
      if (other.SkipPlaintext != false) {
        SkipPlaintext = other.SkipPlaintext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            AadContext = input.ReadBytes();
            break;
          }
          case 32: {
            DataKeySpec = (global::Yandex.Cloud.Kms.V1.SymmetricAlgorithm) input.ReadEnum();
            break;
          }
          case 40: {
            SkipPlaintext = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GenerateDataKeyResponse : pb::IMessage<GenerateDataKeyResponse> {
    private static readonly pb::MessageParser<GenerateDataKeyResponse> _parser = new pb::MessageParser<GenerateDataKeyResponse>(() => new GenerateDataKeyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateDataKeyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyResponse(GenerateDataKeyResponse other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      dataKeyPlaintext_ = other.dataKeyPlaintext_;
      dataKeyCiphertext_ = other.dataKeyCiphertext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateDataKeyResponse Clone() {
      return new GenerateDataKeyResponse(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the symmetric KMS key that was used to encrypt the generated data key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the key version that was used for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_key_plaintext" field.</summary>
    public const int DataKeyPlaintextFieldNumber = 3;
    private pb::ByteString dataKeyPlaintext_ = pb::ByteString.Empty;
    /// <summary>
    /// Generated data key as plaintext.
    /// The field is empty, if the [GenerateDataKeyRequest.skip_plaintext] parameter
    /// was set to `true`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataKeyPlaintext {
      get { return dataKeyPlaintext_; }
      set {
        dataKeyPlaintext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_key_ciphertext" field.</summary>
    public const int DataKeyCiphertextFieldNumber = 4;
    private pb::ByteString dataKeyCiphertext_ = pb::ByteString.Empty;
    /// <summary>
    /// The encrypted data key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DataKeyCiphertext {
      get { return dataKeyCiphertext_; }
      set {
        dataKeyCiphertext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateDataKeyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateDataKeyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (DataKeyPlaintext != other.DataKeyPlaintext) return false;
      if (DataKeyCiphertext != other.DataKeyCiphertext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (DataKeyPlaintext.Length != 0) hash ^= DataKeyPlaintext.GetHashCode();
      if (DataKeyCiphertext.Length != 0) hash ^= DataKeyCiphertext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (DataKeyPlaintext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DataKeyPlaintext);
      }
      if (DataKeyCiphertext.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DataKeyCiphertext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (DataKeyPlaintext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataKeyPlaintext);
      }
      if (DataKeyCiphertext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DataKeyCiphertext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateDataKeyResponse other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.DataKeyPlaintext.Length != 0) {
        DataKeyPlaintext = other.DataKeyPlaintext;
      }
      if (other.DataKeyCiphertext.Length != 0) {
        DataKeyCiphertext = other.DataKeyCiphertext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            DataKeyPlaintext = input.ReadBytes();
            break;
          }
          case 34: {
            DataKeyCiphertext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymmetricReEncryptRequest : pb::IMessage<SymmetricReEncryptRequest> {
    private static readonly pb::MessageParser<SymmetricReEncryptRequest> _parser = new pb::MessageParser<SymmetricReEncryptRequest>(() => new SymmetricReEncryptRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricReEncryptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptRequest(SymmetricReEncryptRequest other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      aadContext_ = other.aadContext_;
      sourceKeyId_ = other.sourceKeyId_;
      sourceAadContext_ = other.sourceAadContext_;
      ciphertext_ = other.ciphertext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptRequest Clone() {
      return new SymmetricReEncryptRequest(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the new key to be used for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of the version of the new key to be used for encryption.
    /// Defaults to the primary version if not specified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aad_context" field.</summary>
    public const int AadContextFieldNumber = 3;
    private pb::ByteString aadContext_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional authenticated data to be required for decryption.
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AadContext {
      get { return aadContext_; }
      set {
        aadContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_key_id" field.</summary>
    public const int SourceKeyIdFieldNumber = 4;
    private string sourceKeyId_ = "";
    /// <summary>
    /// ID of the key that the ciphertext is currently encrypted with. May be the same as for the new key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceKeyId {
      get { return sourceKeyId_; }
      set {
        sourceKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_aad_context" field.</summary>
    public const int SourceAadContextFieldNumber = 5;
    private pb::ByteString sourceAadContext_ = pb::ByteString.Empty;
    /// <summary>
    /// Additional authenticated data provided with the initial encryption request.
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceAadContext {
      get { return sourceAadContext_; }
      set {
        sourceAadContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ciphertext" field.</summary>
    public const int CiphertextFieldNumber = 6;
    private pb::ByteString ciphertext_ = pb::ByteString.Empty;
    /// <summary>
    /// Ciphertext to re-encrypt.
    /// Should be encoded with base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ciphertext {
      get { return ciphertext_; }
      set {
        ciphertext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricReEncryptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricReEncryptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (AadContext != other.AadContext) return false;
      if (SourceKeyId != other.SourceKeyId) return false;
      if (SourceAadContext != other.SourceAadContext) return false;
      if (Ciphertext != other.Ciphertext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (AadContext.Length != 0) hash ^= AadContext.GetHashCode();
      if (SourceKeyId.Length != 0) hash ^= SourceKeyId.GetHashCode();
      if (SourceAadContext.Length != 0) hash ^= SourceAadContext.GetHashCode();
      if (Ciphertext.Length != 0) hash ^= Ciphertext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (AadContext.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AadContext);
      }
      if (SourceKeyId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceKeyId);
      }
      if (SourceAadContext.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SourceAadContext);
      }
      if (Ciphertext.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Ciphertext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (AadContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AadContext);
      }
      if (SourceKeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceKeyId);
      }
      if (SourceAadContext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceAadContext);
      }
      if (Ciphertext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ciphertext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricReEncryptRequest other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.AadContext.Length != 0) {
        AadContext = other.AadContext;
      }
      if (other.SourceKeyId.Length != 0) {
        SourceKeyId = other.SourceKeyId;
      }
      if (other.SourceAadContext.Length != 0) {
        SourceAadContext = other.SourceAadContext;
      }
      if (other.Ciphertext.Length != 0) {
        Ciphertext = other.Ciphertext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            AadContext = input.ReadBytes();
            break;
          }
          case 34: {
            SourceKeyId = input.ReadString();
            break;
          }
          case 42: {
            SourceAadContext = input.ReadBytes();
            break;
          }
          case 50: {
            Ciphertext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SymmetricReEncryptResponse : pb::IMessage<SymmetricReEncryptResponse> {
    private static readonly pb::MessageParser<SymmetricReEncryptResponse> _parser = new pb::MessageParser<SymmetricReEncryptResponse>(() => new SymmetricReEncryptResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SymmetricReEncryptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Kms.V1.SymmetricCryptoServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptResponse(SymmetricReEncryptResponse other) : this() {
      keyId_ = other.keyId_;
      versionId_ = other.versionId_;
      sourceKeyId_ = other.sourceKeyId_;
      sourceVersionId_ = other.sourceVersionId_;
      ciphertext_ = other.ciphertext_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SymmetricReEncryptResponse Clone() {
      return new SymmetricReEncryptResponse(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// ID of the key that the ciphertext is encrypted with now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 2;
    private string versionId_ = "";
    /// <summary>
    /// ID of key version that was used for encryption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_key_id" field.</summary>
    public const int SourceKeyIdFieldNumber = 3;
    private string sourceKeyId_ = "";
    /// <summary>
    /// ID of the key that the ciphertext was encrypted with previously.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceKeyId {
      get { return sourceKeyId_; }
      set {
        sourceKeyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_version_id" field.</summary>
    public const int SourceVersionIdFieldNumber = 4;
    private string sourceVersionId_ = "";
    /// <summary>
    /// ID of the key version that was used to decrypt the re-encrypted ciphertext.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceVersionId {
      get { return sourceVersionId_; }
      set {
        sourceVersionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ciphertext" field.</summary>
    public const int CiphertextFieldNumber = 5;
    private pb::ByteString ciphertext_ = pb::ByteString.Empty;
    /// <summary>
    /// Resulting re-encrypted ciphertext.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Ciphertext {
      get { return ciphertext_; }
      set {
        ciphertext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SymmetricReEncryptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SymmetricReEncryptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      if (VersionId != other.VersionId) return false;
      if (SourceKeyId != other.SourceKeyId) return false;
      if (SourceVersionId != other.SourceVersionId) return false;
      if (Ciphertext != other.Ciphertext) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (SourceKeyId.Length != 0) hash ^= SourceKeyId.GetHashCode();
      if (SourceVersionId.Length != 0) hash ^= SourceVersionId.GetHashCode();
      if (Ciphertext.Length != 0) hash ^= Ciphertext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VersionId);
      }
      if (SourceKeyId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SourceKeyId);
      }
      if (SourceVersionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SourceVersionId);
      }
      if (Ciphertext.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Ciphertext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (SourceKeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceKeyId);
      }
      if (SourceVersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceVersionId);
      }
      if (Ciphertext.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ciphertext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SymmetricReEncryptResponse other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      if (other.SourceKeyId.Length != 0) {
        SourceKeyId = other.SourceKeyId;
      }
      if (other.SourceVersionId.Length != 0) {
        SourceVersionId = other.SourceVersionId;
      }
      if (other.Ciphertext.Length != 0) {
        Ciphertext = other.Ciphertext;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
          case 18: {
            VersionId = input.ReadString();
            break;
          }
          case 26: {
            SourceKeyId = input.ReadString();
            break;
          }
          case 34: {
            SourceVersionId = input.ReadString();
            break;
          }
          case 42: {
            Ciphertext = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
