// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/containerregistry/v1/image_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Containerregistry.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/containerregistry/v1/image_service.proto</summary>
  internal static partial class ImageServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/containerregistry/v1/image_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjV5YW5kZXgvY2xvdWQvY29udGFpbmVycmVnaXN0cnkvdjEvaW1hZ2Vfc2Vy",
            "dmljZS5wcm90bxIheWFuZGV4LmNsb3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYx",
            "Ghp5YW5kZXgvYXBpL29wZXJhdGlvbi5wcm90bxoteWFuZGV4L2Nsb3VkL2Nv",
            "bnRhaW5lcnJlZ2lzdHJ5L3YxL2ltYWdlLnByb3RvGiZ5YW5kZXgvY2xvdWQv",
            "b3BlcmF0aW9uL29wZXJhdGlvbi5wcm90bxodeWFuZGV4L2Nsb3VkL3ZhbGlk",
            "YXRpb24ucHJvdG8aHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8ipAIK",
            "EUxpc3RJbWFnZXNSZXF1ZXN0Eh0KC3JlZ2lzdHJ5X2lkGAEgASgJQgiKyDEE",
            "PD01MBJcCg9yZXBvc2l0b3J5X25hbWUYAiABKAlCQ/LHMT98W2EtejAtOV0r",
            "KD86Wy5fLV1bYS16MC05XSspKigvKFthLXowLTldKyg/OlsuXy1dW2EtejAt",
            "OV0rKSopKSoSGwoJZm9sZGVyX2lkGAcgASgJQgiKyDEEPD01MBIdCglwYWdl",
            "X3NpemUYAyABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgEIAEoCUIJ",
            "isgxBTw9MTAwEhoKBmZpbHRlchgFIAEoCUIKisgxBjw9MTAwMBIbCghvcmRl",
            "cl9ieRgGIAEoCUIJisgxBTw9MTAwImcKEkxpc3RJbWFnZXNSZXNwb25zZRI4",
            "CgZpbWFnZXMYASADKAsyKC55YW5kZXguY2xvdWQuY29udGFpbmVycmVnaXN0",
            "cnkudjEuSW1hZ2USFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIjEKD0dldElt",
            "YWdlUmVxdWVzdBIeCghpbWFnZV9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwIjQK",
            "EkRlbGV0ZUltYWdlUmVxdWVzdBIeCghpbWFnZV9pZBgBIAEoCUIM6McxAYrI",
            "MQQ8PTUwIicKE0RlbGV0ZUltYWdlTWV0YWRhdGESEAoIaW1hZ2VfaWQYASAB",
            "KAkyigQKDEltYWdlU2VydmljZRKaAQoETGlzdBI0LnlhbmRleC5jbG91ZC5j",
            "b250YWluZXJyZWdpc3RyeS52MS5MaXN0SW1hZ2VzUmVxdWVzdBo1LnlhbmRl",
            "eC5jbG91ZC5jb250YWluZXJyZWdpc3RyeS52MS5MaXN0SW1hZ2VzUmVzcG9u",
            "c2UiJYLT5JMCHxIdL2NvbnRhaW5lci1yZWdpc3RyeS92MS9pbWFnZXMSlQEK",
            "A0dldBIyLnlhbmRleC5jbG91ZC5jb250YWluZXJyZWdpc3RyeS52MS5HZXRJ",
            "bWFnZVJlcXVlc3QaKC55YW5kZXguY2xvdWQuY29udGFpbmVycmVnaXN0cnku",
            "djEuSW1hZ2UiMILT5JMCKhIoL2NvbnRhaW5lci1yZWdpc3RyeS92MS9pbWFn",
            "ZXMve2ltYWdlX2lkfRLEAQoGRGVsZXRlEjUueWFuZGV4LmNsb3VkLmNvbnRh",
            "aW5lcnJlZ2lzdHJ5LnYxLkRlbGV0ZUltYWdlUmVxdWVzdBohLnlhbmRleC5j",
            "bG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uImCC0+STAioqKC9jb250YWluZXIt",
            "cmVnaXN0cnkvdjEvaW1hZ2VzL3tpbWFnZV9pZH2y0iosChNEZWxldGVJbWFn",
            "ZU1ldGFkYXRhEhVnb29nbGUucHJvdG9idWYuRW1wdHlCWVpXZ2l0aHViLmNv",
            "bS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8veWFuZGV4L2Nsb3VkL2NvbnRh",
            "aW5lcnJlZ2lzdHJ5L3YxO2NvbnRhaW5lcnJlZ2lzdHJ5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Yandex.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Containerregistry.V1.ImageReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListImagesRequest), global::Yandex.Cloud.Containerregistry.V1.ListImagesRequest.Parser, new[]{ "RegistryId", "RepositoryName", "FolderId", "PageSize", "PageToken", "Filter", "OrderBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListImagesResponse), global::Yandex.Cloud.Containerregistry.V1.ListImagesResponse.Parser, new[]{ "Images", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.GetImageRequest), global::Yandex.Cloud.Containerregistry.V1.GetImageRequest.Parser, new[]{ "ImageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.DeleteImageRequest), global::Yandex.Cloud.Containerregistry.V1.DeleteImageRequest.Parser, new[]{ "ImageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.DeleteImageMetadata), global::Yandex.Cloud.Containerregistry.V1.DeleteImageMetadata.Parser, new[]{ "ImageId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class ListImagesRequest : pb::IMessage<ListImagesRequest> {
    private static readonly pb::MessageParser<ListImagesRequest> _parser = new pb::MessageParser<ListImagesRequest>(() => new ListImagesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListImagesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ImageServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesRequest(ListImagesRequest other) : this() {
      registryId_ = other.registryId_;
      repositoryName_ = other.repositoryName_;
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      orderBy_ = other.orderBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesRequest Clone() {
      return new ListImagesRequest(this);
    }

    /// <summary>Field number for the "registry_id" field.</summary>
    public const int RegistryIdFieldNumber = 1;
    private string registryId_ = "";
    /// <summary>
    /// ID of the registry to list Docker images in.
    ///
    /// [registry_id] is ignored if a [ListImagesRequest.repository_name] is specified in the request.
    ///
    /// To get the registry ID use a [RegistryService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegistryId {
      get { return registryId_; }
      set {
        registryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "repository_name" field.</summary>
    public const int RepositoryNameFieldNumber = 2;
    private string repositoryName_ = "";
    /// <summary>
    /// Name of the repository to list Docker images in.
    ///
    /// To get the repository name use a [RepositoryService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepositoryName {
      get { return repositoryName_; }
      set {
        repositoryName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 7;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list Docker images in.
    ///
    /// [folder_id] is ignored if a [ListImagesRequest.repository_name] or a [ListImagesRequest.registry_id] are specified in the request.
    ///
    /// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListImagesResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListImagesResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 5;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [Image.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Must be a maximum of 256 characters and match the regular expression `[a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 6;
    private string orderBy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListImagesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListImagesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegistryId != other.RegistryId) return false;
      if (RepositoryName != other.RepositoryName) return false;
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      if (OrderBy != other.OrderBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegistryId.Length != 0) hash ^= RegistryId.GetHashCode();
      if (RepositoryName.Length != 0) hash ^= RepositoryName.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegistryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RegistryId);
      }
      if (RepositoryName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RepositoryName);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Filter);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OrderBy);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FolderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegistryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegistryId);
      }
      if (RepositoryName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepositoryName);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListImagesRequest other) {
      if (other == null) {
        return;
      }
      if (other.RegistryId.Length != 0) {
        RegistryId = other.RegistryId;
      }
      if (other.RepositoryName.Length != 0) {
        RepositoryName = other.RepositoryName;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RegistryId = input.ReadString();
            break;
          }
          case 18: {
            RepositoryName = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt64();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 42: {
            Filter = input.ReadString();
            break;
          }
          case 50: {
            OrderBy = input.ReadString();
            break;
          }
          case 58: {
            FolderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListImagesResponse : pb::IMessage<ListImagesResponse> {
    private static readonly pb::MessageParser<ListImagesResponse> _parser = new pb::MessageParser<ListImagesResponse>(() => new ListImagesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListImagesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ImageServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesResponse(ListImagesResponse other) : this() {
      images_ = other.images_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListImagesResponse Clone() {
      return new ListImagesResponse(this);
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Containerregistry.V1.Image> _repeated_images_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Containerregistry.V1.Image.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Image> images_ = new pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Image>();
    /// <summary>
    /// List of Image resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Image> Images {
      get { return images_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListImagesRequest.page_size], use
    /// the [next_page_token] as the value
    /// for the [ListImagesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListImagesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListImagesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!images_.Equals(other.images_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= images_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      images_.WriteTo(output, _repeated_images_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += images_.CalculateSize(_repeated_images_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListImagesResponse other) {
      if (other == null) {
        return;
      }
      images_.Add(other.images_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetImageRequest : pb::IMessage<GetImageRequest> {
    private static readonly pb::MessageParser<GetImageRequest> _parser = new pb::MessageParser<GetImageRequest>(() => new GetImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ImageServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest(GetImageRequest other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetImageRequest Clone() {
      return new GetImageRequest(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private string imageId_ = "";
    /// <summary>
    /// ID of the Docker image resource to return.
    ///
    /// To get the Docker image ID use a [ImageService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteImageRequest : pb::IMessage<DeleteImageRequest> {
    private static readonly pb::MessageParser<DeleteImageRequest> _parser = new pb::MessageParser<DeleteImageRequest>(() => new DeleteImageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteImageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ImageServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageRequest(DeleteImageRequest other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageRequest Clone() {
      return new DeleteImageRequest(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private string imageId_ = "";
    /// <summary>
    /// ID of the Docker image to delete.
    ///
    /// To get Docker image ID use a [ImageService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteImageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteImageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteImageRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteImageMetadata : pb::IMessage<DeleteImageMetadata> {
    private static readonly pb::MessageParser<DeleteImageMetadata> _parser = new pb::MessageParser<DeleteImageMetadata>(() => new DeleteImageMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteImageMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ImageServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageMetadata(DeleteImageMetadata other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteImageMetadata Clone() {
      return new DeleteImageMetadata(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private string imageId_ = "";
    /// <summary>
    /// ID of the Docker image that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteImageMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteImageMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteImageMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
