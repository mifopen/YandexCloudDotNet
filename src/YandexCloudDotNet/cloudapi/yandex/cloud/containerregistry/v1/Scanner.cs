// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/containerregistry/v1/scanner.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Containerregistry.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/containerregistry/v1/scanner.proto</summary>
  internal static partial class ScannerReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/containerregistry/v1/scanner.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScannerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci95YW5kZXgvY2xvdWQvY29udGFpbmVycmVnaXN0cnkvdjEvc2Nhbm5lci5w",
            "cm90bxIheWFuZGV4LmNsb3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYxGh15YW5k",
            "ZXgvY2xvdWQvdmFsaWRhdGlvbi5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3Rp",
            "bWVzdGFtcC5wcm90byK1AgoKU2NhblJlc3VsdBIKCgJpZBgBIAEoCRIQCghp",
            "bWFnZV9pZBgCIAEoCRIuCgpzY2FubmVkX2F0GAMgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBJECgZzdGF0dXMYBCABKA4yNC55YW5kZXguY2xv",
            "dWQuY29udGFpbmVycmVnaXN0cnkudjEuU2NhblJlc3VsdC5TdGF0dXMSTgoP",
            "dnVsbmVyYWJpbGl0aWVzGAUgASgLMjUueWFuZGV4LmNsb3VkLmNvbnRhaW5l",
            "cnJlZ2lzdHJ5LnYxLlZ1bG5lcmFiaWxpdHlTdGF0cyJDCgZTdGF0dXMSFgoS",
            "U1RBVFVTX1VOU1BFQ0lGSUVEEAASCwoHUlVOTklORxABEgkKBVJFQURZEAIS",
            "CQoFRVJST1IQAyJ4ChJWdWxuZXJhYmlsaXR5U3RhdHMSEAoIY3JpdGljYWwY",
            "ASABKAMSDAoEaGlnaBgCIAEoAxIOCgZtZWRpdW0YAyABKAMSCwoDbG93GAQg",
            "ASgDEhIKCm5lZ2xpZ2libGUYBSABKAMSEQoJdW5kZWZpbmVkGAYgASgDIrEC",
            "Cg1WdWxuZXJhYmlsaXR5EksKCHNldmVyaXR5GAEgASgOMjkueWFuZGV4LmNs",
            "b3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYxLlZ1bG5lcmFiaWxpdHkuU2V2ZXJp",
            "dHkSSgoHcGFja2FnZRgCIAEoCzI3LnlhbmRleC5jbG91ZC5jb250YWluZXJy",
            "ZWdpc3RyeS52MS5QYWNrYWdlVnVsbmVyYWJpbGl0eUgAInAKCFNldmVyaXR5",
            "EhgKFFNFVkVSSVRZX1VOU1BFQ0lGSUVEEAASDAoIQ1JJVElDQUwQARIICgRI",
            "SUdIEAISCgoGTUVESVVNEAMSBwoDTE9XEAQSDgoKTkVHTElHSUJMRRAFEg0K",
            "CVVOREVGSU5FRBAGQhUKDXZ1bG5lcmFiaWxpdHkSBMDBMQEidgoUUGFja2Fn",
            "ZVZ1bG5lcmFiaWxpdHkSDAoEbmFtZRgBIAEoCRIMCgRsaW5rGAIgASgJEg8K",
            "B3BhY2thZ2UYAyABKAkSDgoGc291cmNlGAQgASgJEg8KB3ZlcnNpb24YBSAB",
            "KAkSEAoIZml4ZWRfYnkYBiABKAlCgAEKJXlhbmRleC5jbG91ZC5hcGkuY29u",
            "dGFpbmVycmVnaXN0cnkudjFaV2dpdGh1Yi5jb20veWFuZGV4LWNsb3VkL2dv",
            "LWdlbnByb3RvL3lhbmRleC9jbG91ZC9jb250YWluZXJyZWdpc3RyeS92MTtj",
            "b250YWluZXJyZWdpc3RyeWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Yandex.Cloud.ValidationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ScanResult), global::Yandex.Cloud.Containerregistry.V1.ScanResult.Parser, new[]{ "Id", "ImageId", "ScannedAt", "Status", "Vulnerabilities" }, null, new[]{ typeof(global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats), global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats.Parser, new[]{ "Critical", "High", "Medium", "Low", "Negligible", "Undefined" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.Vulnerability), global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Parser, new[]{ "Severity", "Package" }, new[]{ "Vulnerability" }, new[]{ typeof(global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability), global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability.Parser, new[]{ "Name", "Link", "Package", "Source", "Version", "FixedBy" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A ScanResult resource.
  /// </summary>
  internal sealed partial class ScanResult : pb::IMessage<ScanResult> {
    private static readonly pb::MessageParser<ScanResult> _parser = new pb::MessageParser<ScanResult>(() => new ScanResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult(ScanResult other) : this() {
      id_ = other.id_;
      imageId_ = other.imageId_;
      scannedAt_ = other.scannedAt_ != null ? other.scannedAt_.Clone() : null;
      status_ = other.status_;
      vulnerabilities_ = other.vulnerabilities_ != null ? other.vulnerabilities_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanResult Clone() {
      return new ScanResult(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Output only. ID of the ScanResult.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 2;
    private string imageId_ = "";
    /// <summary>
    /// Output only. ID of the Image that the ScanResult belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scanned_at" field.</summary>
    public const int ScannedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp scannedAt_;
    /// <summary>
    /// Output only. The timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format when the scan been finished.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ScannedAt {
      get { return scannedAt_; }
      set {
        scannedAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status status_ = global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status.Unspecified;
    /// <summary>
    /// Output only. The status of the ScanResult.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "vulnerabilities" field.</summary>
    public const int VulnerabilitiesFieldNumber = 5;
    private global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats vulnerabilities_;
    /// <summary>
    /// Output only. Summary information about vulnerabilities found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats Vulnerabilities {
      get { return vulnerabilities_; }
      set {
        vulnerabilities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ImageId != other.ImageId) return false;
      if (!object.Equals(ScannedAt, other.ScannedAt)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Vulnerabilities, other.Vulnerabilities)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (scannedAt_ != null) hash ^= ScannedAt.GetHashCode();
      if (Status != global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (vulnerabilities_ != null) hash ^= Vulnerabilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ImageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ImageId);
      }
      if (scannedAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScannedAt);
      }
      if (Status != global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status.Unspecified) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (vulnerabilities_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Vulnerabilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (scannedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScannedAt);
      }
      if (Status != global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (vulnerabilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Vulnerabilities);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanResult other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      if (other.scannedAt_ != null) {
        if (scannedAt_ == null) {
          ScannedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ScannedAt.MergeFrom(other.ScannedAt);
      }
      if (other.Status != global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.vulnerabilities_ != null) {
        if (vulnerabilities_ == null) {
          Vulnerabilities = new global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats();
        }
        Vulnerabilities.MergeFrom(other.Vulnerabilities);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ImageId = input.ReadString();
            break;
          }
          case 26: {
            if (scannedAt_ == null) {
              ScannedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ScannedAt);
            break;
          }
          case 32: {
            Status = (global::Yandex.Cloud.Containerregistry.V1.ScanResult.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            if (vulnerabilities_ == null) {
              Vulnerabilities = new global::Yandex.Cloud.Containerregistry.V1.VulnerabilityStats();
            }
            input.ReadMessage(Vulnerabilities);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScanResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Image scan is in progress.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 1,
        /// <summary>
        /// Image has been scanned and result is ready.
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 2,
        /// <summary>
        /// Image scan is failed.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// A VulnerabilityStats resource.
  /// </summary>
  internal sealed partial class VulnerabilityStats : pb::IMessage<VulnerabilityStats> {
    private static readonly pb::MessageParser<VulnerabilityStats> _parser = new pb::MessageParser<VulnerabilityStats>(() => new VulnerabilityStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VulnerabilityStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityStats(VulnerabilityStats other) : this() {
      critical_ = other.critical_;
      high_ = other.high_;
      medium_ = other.medium_;
      low_ = other.low_;
      negligible_ = other.negligible_;
      undefined_ = other.undefined_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityStats Clone() {
      return new VulnerabilityStats(this);
    }

    /// <summary>Field number for the "critical" field.</summary>
    public const int CriticalFieldNumber = 1;
    private long critical_;
    /// <summary>
    /// Count of CRITICAL vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Critical {
      get { return critical_; }
      set {
        critical_ = value;
      }
    }

    /// <summary>Field number for the "high" field.</summary>
    public const int HighFieldNumber = 2;
    private long high_;
    /// <summary>
    /// Count of HIGH vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long High {
      get { return high_; }
      set {
        high_ = value;
      }
    }

    /// <summary>Field number for the "medium" field.</summary>
    public const int MediumFieldNumber = 3;
    private long medium_;
    /// <summary>
    /// Count of MEDIUM vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Medium {
      get { return medium_; }
      set {
        medium_ = value;
      }
    }

    /// <summary>Field number for the "low" field.</summary>
    public const int LowFieldNumber = 4;
    private long low_;
    /// <summary>
    /// Count of LOW vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Low {
      get { return low_; }
      set {
        low_ = value;
      }
    }

    /// <summary>Field number for the "negligible" field.</summary>
    public const int NegligibleFieldNumber = 5;
    private long negligible_;
    /// <summary>
    /// Count of NEGLIGIBLE vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Negligible {
      get { return negligible_; }
      set {
        negligible_ = value;
      }
    }

    /// <summary>Field number for the "undefined" field.</summary>
    public const int UndefinedFieldNumber = 6;
    private long undefined_;
    /// <summary>
    /// Count of other vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Undefined {
      get { return undefined_; }
      set {
        undefined_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VulnerabilityStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VulnerabilityStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Critical != other.Critical) return false;
      if (High != other.High) return false;
      if (Medium != other.Medium) return false;
      if (Low != other.Low) return false;
      if (Negligible != other.Negligible) return false;
      if (Undefined != other.Undefined) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Critical != 0L) hash ^= Critical.GetHashCode();
      if (High != 0L) hash ^= High.GetHashCode();
      if (Medium != 0L) hash ^= Medium.GetHashCode();
      if (Low != 0L) hash ^= Low.GetHashCode();
      if (Negligible != 0L) hash ^= Negligible.GetHashCode();
      if (Undefined != 0L) hash ^= Undefined.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Critical != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Critical);
      }
      if (High != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(High);
      }
      if (Medium != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Medium);
      }
      if (Low != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Low);
      }
      if (Negligible != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Negligible);
      }
      if (Undefined != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Undefined);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Critical != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Critical);
      }
      if (High != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(High);
      }
      if (Medium != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Medium);
      }
      if (Low != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Low);
      }
      if (Negligible != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Negligible);
      }
      if (Undefined != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Undefined);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VulnerabilityStats other) {
      if (other == null) {
        return;
      }
      if (other.Critical != 0L) {
        Critical = other.Critical;
      }
      if (other.High != 0L) {
        High = other.High;
      }
      if (other.Medium != 0L) {
        Medium = other.Medium;
      }
      if (other.Low != 0L) {
        Low = other.Low;
      }
      if (other.Negligible != 0L) {
        Negligible = other.Negligible;
      }
      if (other.Undefined != 0L) {
        Undefined = other.Undefined;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Critical = input.ReadInt64();
            break;
          }
          case 16: {
            High = input.ReadInt64();
            break;
          }
          case 24: {
            Medium = input.ReadInt64();
            break;
          }
          case 32: {
            Low = input.ReadInt64();
            break;
          }
          case 40: {
            Negligible = input.ReadInt64();
            break;
          }
          case 48: {
            Undefined = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A Vulnerability resource.
  /// </summary>
  internal sealed partial class Vulnerability : pb::IMessage<Vulnerability> {
    private static readonly pb::MessageParser<Vulnerability> _parser = new pb::MessageParser<Vulnerability>(() => new Vulnerability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vulnerability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability(Vulnerability other) : this() {
      severity_ = other.severity_;
      switch (other.VulnerabilityCase) {
        case VulnerabilityOneofCase.Package:
          Package = other.Package.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vulnerability Clone() {
      return new Vulnerability(this);
    }

    /// <summary>Field number for the "severity" field.</summary>
    public const int SeverityFieldNumber = 1;
    private global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity severity_ = global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity.Unspecified;
    /// <summary>
    /// Output only. Severity of the Vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity Severity {
      get { return severity_; }
      set {
        severity_ = value;
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability Package {
      get { return vulnerabilityCase_ == VulnerabilityOneofCase.Package ? (global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability) vulnerability_ : null; }
      set {
        vulnerability_ = value;
        vulnerabilityCase_ = value == null ? VulnerabilityOneofCase.None : VulnerabilityOneofCase.Package;
      }
    }

    private object vulnerability_;
    /// <summary>Enum of possible cases for the "vulnerability" oneof.</summary>
    public enum VulnerabilityOneofCase {
      None = 0,
      Package = 2,
    }
    private VulnerabilityOneofCase vulnerabilityCase_ = VulnerabilityOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VulnerabilityOneofCase VulnerabilityCase {
      get { return vulnerabilityCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVulnerability() {
      vulnerabilityCase_ = VulnerabilityOneofCase.None;
      vulnerability_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vulnerability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vulnerability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Severity != other.Severity) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (VulnerabilityCase != other.VulnerabilityCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Severity != global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity.Unspecified) hash ^= Severity.GetHashCode();
      if (vulnerabilityCase_ == VulnerabilityOneofCase.Package) hash ^= Package.GetHashCode();
      hash ^= (int) vulnerabilityCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Severity != global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Severity);
      }
      if (vulnerabilityCase_ == VulnerabilityOneofCase.Package) {
        output.WriteRawTag(18);
        output.WriteMessage(Package);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Severity != global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Severity);
      }
      if (vulnerabilityCase_ == VulnerabilityOneofCase.Package) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vulnerability other) {
      if (other == null) {
        return;
      }
      if (other.Severity != global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity.Unspecified) {
        Severity = other.Severity;
      }
      switch (other.VulnerabilityCase) {
        case VulnerabilityOneofCase.Package:
          if (Package == null) {
            Package = new global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability();
          }
          Package.MergeFrom(other.Package);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Severity = (global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Types.Severity) input.ReadEnum();
            break;
          }
          case 18: {
            global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability subBuilder = new global::Yandex.Cloud.Containerregistry.V1.PackageVulnerability();
            if (vulnerabilityCase_ == VulnerabilityOneofCase.Package) {
              subBuilder.MergeFrom(Package);
            }
            input.ReadMessage(subBuilder);
            Package = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Vulnerability message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Severity {
        [pbr::OriginalName("SEVERITY_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Critical severity is a world-burning problem, exploitable for nearly all users.
        /// Includes remote root privilege escalations, or massive data loss.
        /// </summary>
        [pbr::OriginalName("CRITICAL")] Critical = 1,
        /// <summary>
        /// High severity is a real problem, exploitable for many users in a default installation.
        /// Includes serious remote denial of services, local root privilege escalations, or data loss.
        /// </summary>
        [pbr::OriginalName("HIGH")] High = 2,
        /// <summary>
        /// Medium severity is a real security problem, and is exploitable for many users.
        /// Includes network daemon denial of service attacks, cross-site scripting, and gaining user privileges.
        /// Updates should be made soon for this priority of issue.
        /// </summary>
        [pbr::OriginalName("MEDIUM")] Medium = 3,
        /// <summary>
        /// Low severity is a security problem, but is hard to exploit due to environment, requires a user-assisted attack,
        /// a small install base, or does very little damage. These tend to be included in security updates only when
        /// higher priority issues require an update, or if many low priority issues have built up.
        /// </summary>
        [pbr::OriginalName("LOW")] Low = 4,
        /// <summary>
        /// Negligible severity is technically a security problem, but is only theoretical in nature, requires a very special situation,
        /// has almost no install base, or does no real damage. These tend not to get backport from upstream,
        /// and will likely not be included in security updates unless there is an easy fix and some other issue causes an update.
        /// </summary>
        [pbr::OriginalName("NEGLIGIBLE")] Negligible = 5,
        /// <summary>
        /// Unknown severity is either a security problem that has not been assigned to a priority yet or
        /// a priority that our system did not recognize.
        /// </summary>
        [pbr::OriginalName("UNDEFINED")] Undefined = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// A PackageVulnerability resource.
  /// </summary>
  internal sealed partial class PackageVulnerability : pb::IMessage<PackageVulnerability> {
    private static readonly pb::MessageParser<PackageVulnerability> _parser = new pb::MessageParser<PackageVulnerability>(() => new PackageVulnerability());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackageVulnerability> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageVulnerability() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageVulnerability(PackageVulnerability other) : this() {
      name_ = other.name_;
      link_ = other.link_;
      package_ = other.package_;
      source_ = other.source_;
      version_ = other.version_;
      fixedBy_ = other.fixedBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackageVulnerability Clone() {
      return new PackageVulnerability(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of vulnerability in CVE database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 2;
    private string link_ = "";
    /// <summary>
    /// URL to the page with description of vulnerability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "package" field.</summary>
    public const int PackageFieldNumber = 3;
    private string package_ = "";
    /// <summary>
    /// The package name where vulnerability has been found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Package {
      get { return package_; }
      set {
        package_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 4;
    private string source_ = "";
    /// <summary>
    /// The package manager name. Ex.: yum, rpm, dpkg.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 5;
    private string version_ = "";
    /// <summary>
    /// The version of the package where vulnerability has been found.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fixed_by" field.</summary>
    public const int FixedByFieldNumber = 6;
    private string fixedBy_ = "";
    /// <summary>
    /// The version of the package where vulnerability has been fixed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FixedBy {
      get { return fixedBy_; }
      set {
        fixedBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackageVulnerability);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackageVulnerability other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Link != other.Link) return false;
      if (Package != other.Package) return false;
      if (Source != other.Source) return false;
      if (Version != other.Version) return false;
      if (FixedBy != other.FixedBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      if (Package.Length != 0) hash ^= Package.GetHashCode();
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (FixedBy.Length != 0) hash ^= FixedBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Link);
      }
      if (Package.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Package);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Source);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Version);
      }
      if (FixedBy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FixedBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      if (Package.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Package);
      }
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (FixedBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FixedBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackageVulnerability other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
      if (other.Package.Length != 0) {
        Package = other.Package;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.FixedBy.Length != 0) {
        FixedBy = other.FixedBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Link = input.ReadString();
            break;
          }
          case 26: {
            Package = input.ReadString();
            break;
          }
          case 34: {
            Source = input.ReadString();
            break;
          }
          case 42: {
            Version = input.ReadString();
            break;
          }
          case 50: {
            FixedBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
