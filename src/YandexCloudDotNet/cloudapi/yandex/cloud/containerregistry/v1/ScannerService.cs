// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/containerregistry/v1/scanner_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Containerregistry.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/containerregistry/v1/scanner_service.proto</summary>
  internal static partial class ScannerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/containerregistry/v1/scanner_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScannerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjd5YW5kZXgvY2xvdWQvY29udGFpbmVycmVnaXN0cnkvdjEvc2Nhbm5lcl9z",
            "ZXJ2aWNlLnByb3RvEiF5YW5kZXguY2xvdWQuY29udGFpbmVycmVnaXN0cnku",
            "djEaIHlhbmRleC9jbG91ZC9hcGkvb3BlcmF0aW9uLnByb3RvGi95YW5kZXgv",
            "Y2xvdWQvY29udGFpbmVycmVnaXN0cnkvdjEvc2Nhbm5lci5wcm90bxomeWFu",
            "ZGV4L2Nsb3VkL29wZXJhdGlvbi9vcGVyYXRpb24ucHJvdG8aHXlhbmRleC9j",
            "bG91ZC92YWxpZGF0aW9uLnByb3RvIi0KC1NjYW5SZXF1ZXN0Eh4KCGltYWdl",
            "X2lkGAEgASgJQgzoxzEBisgxBDw9NTAiJgoMU2Nhbk1ldGFkYXRhEhYKDnNj",
            "YW5fcmVzdWx0X2lkGAEgASgJIjwKFEdldFNjYW5SZXN1bHRSZXF1ZXN0EiQK",
            "DnNjYW5fcmVzdWx0X2lkGAEgASgJQgzoxzEBisgxBDw9NTAiNgoYR2V0TGFz",
            "dFNjYW5SZXN1bHRSZXF1ZXN0EhoKCGltYWdlX2lkGAEgASgJQgiKyDEEPD01",
            "MCLcAQoWTGlzdFNjYW5SZXN1bHRzUmVxdWVzdBIcCghpbWFnZV9pZBgBIAEo",
            "CUIIisgxBDw9NTBIABIhCg1yZXBvc2l0b3J5X2lkGAIgASgJQgiKyDEEPD01",
            "MEgAEh0KCXBhZ2Vfc2l6ZRgDIAEoA0IK+scxBjAtMTAwMBIdCgpwYWdlX3Rv",
            "a2VuGAQgASgJQgmKyDEFPD0xMDASGgoGZmlsdGVyGAUgASgJQgqKyDEGPD0x",
            "MDAwEhsKCG9yZGVyX2J5GAYgASgJQgmKyDEFPD0xMDBCCgoCaWQSBMDBMQEi",
            "dwoXTGlzdFNjYW5SZXN1bHRzUmVzcG9uc2USQwoMc2Nhbl9yZXN1bHRzGAEg",
            "AygLMi0ueWFuZGV4LmNsb3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYxLlNjYW5S",
            "ZXN1bHQSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIrkBChpMaXN0VnVsbmVy",
            "YWJpbGl0aWVzUmVxdWVzdBIkCg5zY2FuX3Jlc3VsdF9pZBgBIAEoCUIM6Mcx",
            "AYrIMQQ8PTUwEh0KCXBhZ2Vfc2l6ZRgCIAEoA0IK+scxBjAtMTAwMBIdCgpw",
            "YWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDASGgoGZmlsdGVyGAQgASgJQgqK",
            "yDEGPD0xMDAwEhsKCG9yZGVyX2J5GAUgASgJQgmKyDEFPD0xMDAigQEKG0xp",
            "c3RWdWxuZXJhYmlsaXRpZXNSZXNwb25zZRJJCg92dWxuZXJhYmlsaXRpZXMY",
            "ASADKAsyMC55YW5kZXguY2xvdWQuY29udGFpbmVycmVnaXN0cnkudjEuVnVs",
            "bmVyYWJpbGl0eRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkyhwUKDlNjYW5u",
            "ZXJTZXJ2aWNlEnkKBFNjYW4SLi55YW5kZXguY2xvdWQuY29udGFpbmVycmVn",
            "aXN0cnkudjEuU2NhblJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9u",
            "Lk9wZXJhdGlvbiIestIqGgoMU2Nhbk1ldGFkYXRhEgpTY2FuUmVzdWx0Em0K",
            "A0dldBI3LnlhbmRleC5jbG91ZC5jb250YWluZXJyZWdpc3RyeS52MS5HZXRT",
            "Y2FuUmVzdWx0UmVxdWVzdBotLnlhbmRleC5jbG91ZC5jb250YWluZXJyZWdp",
            "c3RyeS52MS5TY2FuUmVzdWx0EnUKB0dldExhc3QSOy55YW5kZXguY2xvdWQu",
            "Y29udGFpbmVycmVnaXN0cnkudjEuR2V0TGFzdFNjYW5SZXN1bHRSZXF1ZXN0",
            "Gi0ueWFuZGV4LmNsb3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYxLlNjYW5SZXN1",
            "bHQSfQoETGlzdBI5LnlhbmRleC5jbG91ZC5jb250YWluZXJyZWdpc3RyeS52",
            "MS5MaXN0U2NhblJlc3VsdHNSZXF1ZXN0GjoueWFuZGV4LmNsb3VkLmNvbnRh",
            "aW5lcnJlZ2lzdHJ5LnYxLkxpc3RTY2FuUmVzdWx0c1Jlc3BvbnNlEpQBChNM",
            "aXN0VnVsbmVyYWJpbGl0aWVzEj0ueWFuZGV4LmNsb3VkLmNvbnRhaW5lcnJl",
            "Z2lzdHJ5LnYxLkxpc3RWdWxuZXJhYmlsaXRpZXNSZXF1ZXN0Gj4ueWFuZGV4",
            "LmNsb3VkLmNvbnRhaW5lcnJlZ2lzdHJ5LnYxLkxpc3RWdWxuZXJhYmlsaXRp",
            "ZXNSZXNwb25zZUKAAQoleWFuZGV4LmNsb3VkLmFwaS5jb250YWluZXJyZWdp",
            "c3RyeS52MVpXZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2NvbnRhaW5lcnJlZ2lzdHJ5L3YxO2NvbnRhaW5lcnJl",
            "Z2lzdHJ5YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Containerregistry.V1.ScannerReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ScanRequest), global::Yandex.Cloud.Containerregistry.V1.ScanRequest.Parser, new[]{ "ImageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ScanMetadata), global::Yandex.Cloud.Containerregistry.V1.ScanMetadata.Parser, new[]{ "ScanResultId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.GetScanResultRequest), global::Yandex.Cloud.Containerregistry.V1.GetScanResultRequest.Parser, new[]{ "ScanResultId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.GetLastScanResultRequest), global::Yandex.Cloud.Containerregistry.V1.GetLastScanResultRequest.Parser, new[]{ "ImageId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListScanResultsRequest), global::Yandex.Cloud.Containerregistry.V1.ListScanResultsRequest.Parser, new[]{ "ImageId", "RepositoryId", "PageSize", "PageToken", "Filter", "OrderBy" }, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListScanResultsResponse), global::Yandex.Cloud.Containerregistry.V1.ListScanResultsResponse.Parser, new[]{ "ScanResults", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListVulnerabilitiesRequest), global::Yandex.Cloud.Containerregistry.V1.ListVulnerabilitiesRequest.Parser, new[]{ "ScanResultId", "PageSize", "PageToken", "Filter", "OrderBy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Containerregistry.V1.ListVulnerabilitiesResponse), global::Yandex.Cloud.Containerregistry.V1.ListVulnerabilitiesResponse.Parser, new[]{ "Vulnerabilities", "NextPageToken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class ScanRequest : pb::IMessage<ScanRequest> {
    private static readonly pb::MessageParser<ScanRequest> _parser = new pb::MessageParser<ScanRequest>(() => new ScanRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRequest(ScanRequest other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanRequest Clone() {
      return new ScanRequest(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private string imageId_ = "";
    /// <summary>
    /// ID of the Image to be scanned for vulnerabilities.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ScanMetadata : pb::IMessage<ScanMetadata> {
    private static readonly pb::MessageParser<ScanMetadata> _parser = new pb::MessageParser<ScanMetadata>(() => new ScanMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScanMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanMetadata(ScanMetadata other) : this() {
      scanResultId_ = other.scanResultId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScanMetadata Clone() {
      return new ScanMetadata(this);
    }

    /// <summary>Field number for the "scan_result_id" field.</summary>
    public const int ScanResultIdFieldNumber = 1;
    private string scanResultId_ = "";
    /// <summary>
    /// ID of the ScanResult that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanResultId {
      get { return scanResultId_; }
      set {
        scanResultId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScanMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScanMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanResultId != other.ScanResultId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanResultId.Length != 0) hash ^= ScanResultId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanResultId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanResultId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanResultId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanResultId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScanMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ScanResultId.Length != 0) {
        ScanResultId = other.ScanResultId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScanResultId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetScanResultRequest : pb::IMessage<GetScanResultRequest> {
    private static readonly pb::MessageParser<GetScanResultRequest> _parser = new pb::MessageParser<GetScanResultRequest>(() => new GetScanResultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetScanResultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScanResultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScanResultRequest(GetScanResultRequest other) : this() {
      scanResultId_ = other.scanResultId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetScanResultRequest Clone() {
      return new GetScanResultRequest(this);
    }

    /// <summary>Field number for the "scan_result_id" field.</summary>
    public const int ScanResultIdFieldNumber = 1;
    private string scanResultId_ = "";
    /// <summary>
    /// ID of the ScanResult to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanResultId {
      get { return scanResultId_; }
      set {
        scanResultId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetScanResultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetScanResultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanResultId != other.ScanResultId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanResultId.Length != 0) hash ^= ScanResultId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanResultId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanResultId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanResultId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanResultId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetScanResultRequest other) {
      if (other == null) {
        return;
      }
      if (other.ScanResultId.Length != 0) {
        ScanResultId = other.ScanResultId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScanResultId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetLastScanResultRequest : pb::IMessage<GetLastScanResultRequest> {
    private static readonly pb::MessageParser<GetLastScanResultRequest> _parser = new pb::MessageParser<GetLastScanResultRequest>(() => new GetLastScanResultRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLastScanResultRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastScanResultRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastScanResultRequest(GetLastScanResultRequest other) : this() {
      imageId_ = other.imageId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastScanResultRequest Clone() {
      return new GetLastScanResultRequest(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    private string imageId_ = "";
    /// <summary>
    /// ID of the Image to get last finished ScanResult.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return imageId_; }
      set {
        imageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLastScanResultRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLastScanResultRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ImageId.Length != 0) hash ^= ImageId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ImageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ImageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLastScanResultRequest other) {
      if (other == null) {
        return;
      }
      if (other.ImageId.Length != 0) {
        ImageId = other.ImageId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListScanResultsRequest : pb::IMessage<ListScanResultsRequest> {
    private static readonly pb::MessageParser<ListScanResultsRequest> _parser = new pb::MessageParser<ListScanResultsRequest>(() => new ListScanResultsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListScanResultsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsRequest(ListScanResultsRequest other) : this() {
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      orderBy_ = other.orderBy_;
      switch (other.IdCase) {
        case IdOneofCase.ImageId:
          ImageId = other.ImageId;
          break;
        case IdOneofCase.RepositoryId:
          RepositoryId = other.RepositoryId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsRequest Clone() {
      return new ListScanResultsRequest(this);
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageId {
      get { return idCase_ == IdOneofCase.ImageId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.ImageId;
      }
    }

    /// <summary>Field number for the "repository_id" field.</summary>
    public const int RepositoryIdFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RepositoryId {
      get { return idCase_ == IdOneofCase.RepositoryId ? (string) id_ : ""; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        idCase_ = IdOneofCase.RepositoryId;
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 3;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListRegistriesResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 4;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListRegistriesResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 5;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [ScanResult.status] and [ScanResult.scanned_at] fields.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. Value or a list of values to compare against the values of the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 6;
    private string orderBy_ = "";
    /// <summary>
    /// An order expression that orders resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [ScanResult.status] and [ScanResult.scanned_at] fields.
    /// 2. Order selector. Can be either ASC or DESC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object id_;
    /// <summary>Enum of possible cases for the "id" oneof.</summary>
    public enum IdOneofCase {
      None = 0,
      ImageId = 1,
      RepositoryId = 2,
    }
    private IdOneofCase idCase_ = IdOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdOneofCase IdCase {
      get { return idCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      idCase_ = IdOneofCase.None;
      id_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListScanResultsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListScanResultsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ImageId != other.ImageId) return false;
      if (RepositoryId != other.RepositoryId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      if (OrderBy != other.OrderBy) return false;
      if (IdCase != other.IdCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (idCase_ == IdOneofCase.ImageId) hash ^= ImageId.GetHashCode();
      if (idCase_ == IdOneofCase.RepositoryId) hash ^= RepositoryId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      hash ^= (int) idCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (idCase_ == IdOneofCase.ImageId) {
        output.WriteRawTag(10);
        output.WriteString(ImageId);
      }
      if (idCase_ == IdOneofCase.RepositoryId) {
        output.WriteRawTag(18);
        output.WriteString(RepositoryId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Filter);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OrderBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (idCase_ == IdOneofCase.ImageId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
      }
      if (idCase_ == IdOneofCase.RepositoryId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RepositoryId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListScanResultsRequest other) {
      if (other == null) {
        return;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
      switch (other.IdCase) {
        case IdOneofCase.ImageId:
          ImageId = other.ImageId;
          break;
        case IdOneofCase.RepositoryId:
          RepositoryId = other.RepositoryId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ImageId = input.ReadString();
            break;
          }
          case 18: {
            RepositoryId = input.ReadString();
            break;
          }
          case 24: {
            PageSize = input.ReadInt64();
            break;
          }
          case 34: {
            PageToken = input.ReadString();
            break;
          }
          case 42: {
            Filter = input.ReadString();
            break;
          }
          case 50: {
            OrderBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListScanResultsResponse : pb::IMessage<ListScanResultsResponse> {
    private static readonly pb::MessageParser<ListScanResultsResponse> _parser = new pb::MessageParser<ListScanResultsResponse>(() => new ListScanResultsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListScanResultsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsResponse(ListScanResultsResponse other) : this() {
      scanResults_ = other.scanResults_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListScanResultsResponse Clone() {
      return new ListScanResultsResponse(this);
    }

    /// <summary>Field number for the "scan_results" field.</summary>
    public const int ScanResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Containerregistry.V1.ScanResult> _repeated_scanResults_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Containerregistry.V1.ScanResult.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.ScanResult> scanResults_ = new pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.ScanResult>();
    /// <summary>
    /// List of ScanResult resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.ScanResult> ScanResults {
      get { return scanResults_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListImagesRequest.page_size], use
    /// the [next_page_token] as the value
    /// for the [ListImagesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListScanResultsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListScanResultsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!scanResults_.Equals(other.scanResults_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= scanResults_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scanResults_.WriteTo(output, _repeated_scanResults_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scanResults_.CalculateSize(_repeated_scanResults_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListScanResultsResponse other) {
      if (other == null) {
        return;
      }
      scanResults_.Add(other.scanResults_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            scanResults_.AddEntriesFrom(input, _repeated_scanResults_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListVulnerabilitiesRequest : pb::IMessage<ListVulnerabilitiesRequest> {
    private static readonly pb::MessageParser<ListVulnerabilitiesRequest> _parser = new pb::MessageParser<ListVulnerabilitiesRequest>(() => new ListVulnerabilitiesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVulnerabilitiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesRequest(ListVulnerabilitiesRequest other) : this() {
      scanResultId_ = other.scanResultId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      orderBy_ = other.orderBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesRequest Clone() {
      return new ListVulnerabilitiesRequest(this);
    }

    /// <summary>Field number for the "scan_result_id" field.</summary>
    public const int ScanResultIdFieldNumber = 1;
    private string scanResultId_ = "";
    /// <summary>
    /// ID of the ScanResult to get list of vulnerabilities for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScanResultId {
      get { return scanResultId_; }
      set {
        scanResultId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListRegistriesResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListRegistriesResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [Vulnerability.severity] and [Vulnerability.type] fields.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. Value or a list of values to compare against the values of the field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_by" field.</summary>
    public const int OrderByFieldNumber = 5;
    private string orderBy_ = "";
    /// <summary>
    /// An order expression that orders resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [Vulnerability.severity] and [Vulnerability.type] fields.
    /// 2. Order selector. Can be either ASC or DESC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVulnerabilitiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVulnerabilitiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanResultId != other.ScanResultId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      if (OrderBy != other.OrderBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ScanResultId.Length != 0) hash ^= ScanResultId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (OrderBy.Length != 0) hash ^= OrderBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScanResultId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ScanResultId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (OrderBy.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrderBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScanResultId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScanResultId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (OrderBy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVulnerabilitiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ScanResultId.Length != 0) {
        ScanResultId = other.ScanResultId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.OrderBy.Length != 0) {
        OrderBy = other.OrderBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ScanResultId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
          case 42: {
            OrderBy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListVulnerabilitiesResponse : pb::IMessage<ListVulnerabilitiesResponse> {
    private static readonly pb::MessageParser<ListVulnerabilitiesResponse> _parser = new pb::MessageParser<ListVulnerabilitiesResponse>(() => new ListVulnerabilitiesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListVulnerabilitiesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Containerregistry.V1.ScannerServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesResponse(ListVulnerabilitiesResponse other) : this() {
      vulnerabilities_ = other.vulnerabilities_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListVulnerabilitiesResponse Clone() {
      return new ListVulnerabilitiesResponse(this);
    }

    /// <summary>Field number for the "vulnerabilities" field.</summary>
    public const int VulnerabilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Containerregistry.V1.Vulnerability> _repeated_vulnerabilities_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Containerregistry.V1.Vulnerability.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Vulnerability> vulnerabilities_ = new pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Vulnerability>();
    /// <summary>
    /// List of Vulnerability resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Containerregistry.V1.Vulnerability> Vulnerabilities {
      get { return vulnerabilities_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListImagesRequest.page_size], use
    /// the [next_page_token] as the value
    /// for the [ListImagesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListVulnerabilitiesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListVulnerabilitiesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!vulnerabilities_.Equals(other.vulnerabilities_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= vulnerabilities_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      vulnerabilities_.WriteTo(output, _repeated_vulnerabilities_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += vulnerabilities_.CalculateSize(_repeated_vulnerabilities_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListVulnerabilitiesResponse other) {
      if (other == null) {
        return;
      }
      vulnerabilities_.Add(other.vulnerabilities_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            vulnerabilities_.AddEntriesFrom(input, _repeated_vulnerabilities_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
