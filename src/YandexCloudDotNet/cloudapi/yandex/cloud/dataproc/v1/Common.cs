// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/dataproc/v1/common.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Dataproc.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/dataproc/v1/common.proto</summary>
  internal static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/dataproc/v1/common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiV5YW5kZXgvY2xvdWQvZGF0YXByb2MvdjEvY29tbW9uLnByb3RvEhh5YW5k",
            "ZXguY2xvdWQuZGF0YXByb2MudjEiUAoJUmVzb3VyY2VzEhoKEnJlc291cmNl",
            "X3ByZXNldF9pZBgBIAEoCRIUCgxkaXNrX3R5cGVfaWQYAiABKAkSEQoJZGlz",
            "a19zaXplGAMgASgDKj8KBkhlYWx0aBISCg5IRUFMVEhfVU5LTk9XThAAEgkK",
            "BUFMSVZFEAESCAoEREVBRBACEgwKCERFR1JBREVEEANCZQoceWFuZGV4LmNs",
            "b3VkLmFwaS5kYXRhcHJvYy52MVpFZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQv",
            "Z28tZ2VucHJvdG8veWFuZGV4L2Nsb3VkL2RhdGFwcm9jL3YxO2RhdGFwcm9j",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Dataproc.V1.Health), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.Resources), global::Yandex.Cloud.Dataproc.V1.Resources.Parser, new[]{ "ResourcePresetId", "DiskTypeId", "DiskSize" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum Health {
    /// <summary>
    /// State of the cluster is unknown ([Host.health] for every host in the cluster is UNKNOWN).
    /// </summary>
    [pbr::OriginalName("HEALTH_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Cluster is alive and well ([Host.health] for every host in the cluster is ALIVE).
    /// </summary>
    [pbr::OriginalName("ALIVE")] Alive = 1,
    /// <summary>
    /// Cluster is inoperable ([Host.health] for every host in the cluster is DEAD).
    /// </summary>
    [pbr::OriginalName("DEAD")] Dead = 2,
    /// <summary>
    /// Cluster is working below capacity ([Host.health] for at least one host in the cluster is not ALIVE).
    /// </summary>
    [pbr::OriginalName("DEGRADED")] Degraded = 3,
  }

  #endregion

  #region Messages
  internal sealed partial class Resources : pb::IMessage<Resources> {
    private static readonly pb::MessageParser<Resources> _parser = new pb::MessageParser<Resources>(() => new Resources());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resources> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources(Resources other) : this() {
      resourcePresetId_ = other.resourcePresetId_;
      diskTypeId_ = other.diskTypeId_;
      diskSize_ = other.diskSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resources Clone() {
      return new Resources(this);
    }

    /// <summary>Field number for the "resource_preset_id" field.</summary>
    public const int ResourcePresetIdFieldNumber = 1;
    private string resourcePresetId_ = "";
    /// <summary>
    /// ID of the resource preset for computational resources available to a host (CPU, memory etc.).
    /// All available presets are listed in the [documentation](/docs/data-proc/concepts/instance-types).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcePresetId {
      get { return resourcePresetId_; }
      set {
        resourcePresetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_type_id" field.</summary>
    public const int DiskTypeIdFieldNumber = 2;
    private string diskTypeId_ = "";
    /// <summary>
    /// Type of the storage environment for the host.
    /// Possible values:
    /// * network-hdd — network HDD drive,
    /// * network-ssd — network SSD drive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskTypeId {
      get { return diskTypeId_; }
      set {
        diskTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 3;
    private long diskSize_;
    /// <summary>
    /// Volume of the storage available to a host, in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resources);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resources other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourcePresetId != other.ResourcePresetId) return false;
      if (DiskTypeId != other.DiskTypeId) return false;
      if (DiskSize != other.DiskSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResourcePresetId.Length != 0) hash ^= ResourcePresetId.GetHashCode();
      if (DiskTypeId.Length != 0) hash ^= DiskTypeId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourcePresetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourcePresetId);
      }
      if (DiskTypeId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiskTypeId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DiskSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResourcePresetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcePresetId);
      }
      if (DiskTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskTypeId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resources other) {
      if (other == null) {
        return;
      }
      if (other.ResourcePresetId.Length != 0) {
        ResourcePresetId = other.ResourcePresetId;
      }
      if (other.DiskTypeId.Length != 0) {
        DiskTypeId = other.DiskTypeId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ResourcePresetId = input.ReadString();
            break;
          }
          case 18: {
            DiskTypeId = input.ReadString();
            break;
          }
          case 24: {
            DiskSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
