// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/dataproc/v1/subcluster_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Dataproc.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/dataproc/v1/subcluster_service.proto</summary>
  internal static partial class SubclusterServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/dataproc/v1/subcluster_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SubclusterServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjF5YW5kZXgvY2xvdWQvZGF0YXByb2MvdjEvc3ViY2x1c3Rlcl9zZXJ2aWNl",
            "LnByb3RvEhh5YW5kZXguY2xvdWQuZGF0YXByb2MudjEaHGdvb2dsZS9hcGkv",
            "YW5ub3RhdGlvbnMucHJvdG8aIGdvb2dsZS9wcm90b2J1Zi9maWVsZF9tYXNr",
            "LnByb3RvGiZ5YW5kZXgvY2xvdWQvb3BlcmF0aW9uL29wZXJhdGlvbi5wcm90",
            "bxoleWFuZGV4L2Nsb3VkL2RhdGFwcm9jL3YxL2NvbW1vbi5wcm90bxopeWFu",
            "ZGV4L2Nsb3VkL2RhdGFwcm9jL3YxL3N1YmNsdXN0ZXIucHJvdG8aHXlhbmRl",
            "eC9jbG91ZC92YWxpZGF0aW9uLnByb3RvGiB5YW5kZXgvY2xvdWQvYXBpL29w",
            "ZXJhdGlvbi5wcm90byJdChRHZXRTdWJjbHVzdGVyUmVxdWVzdBIgCgpjbHVz",
            "dGVyX2lkGAEgASgJQgzoxzEBisgxBDw9NTASIwoNc3ViY2x1c3Rlcl9pZBgC",
            "IAEoCUIM6McxAYrIMQQ8PTUwIpQBChZMaXN0U3ViY2x1c3RlcnNSZXF1ZXN0",
            "EiAKCmNsdXN0ZXJfaWQYASABKAlCDOjHMQGKyDEEPD01MBIdCglwYWdlX3Np",
            "emUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgDIAEoCUIJisgx",
            "BTw9MTAwEhoKBmZpbHRlchgEIAEoCUIKisgxBjw9MTAwMCJtChdMaXN0U3Vi",
            "Y2x1c3RlcnNSZXNwb25zZRI5CgtzdWJjbHVzdGVycxgBIAMoCzIkLnlhbmRl",
            "eC5jbG91ZC5kYXRhcHJvYy52MS5TdWJjbHVzdGVyEhcKD25leHRfcGFnZV90",
            "b2tlbhgCIAEoCSKhAgoXQ3JlYXRlU3ViY2x1c3RlclJlcXVlc3QSIAoKY2x1",
            "c3Rlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEi8KBG5hbWUYAiABKAlCIfLH",
            "MR18W2Etel1bLWEtejAtOV17MSw2MX1bYS16MC05XRIyCgRyb2xlGAMgASgO",
            "Mh4ueWFuZGV4LmNsb3VkLmRhdGFwcm9jLnYxLlJvbGVCBOjHMQESPAoJcmVz",
            "b3VyY2VzGAQgASgLMiMueWFuZGV4LmNsb3VkLmRhdGFwcm9jLnYxLlJlc291",
            "cmNlc0IE6McxARIfCglzdWJuZXRfaWQYBSABKAlCDOjHMQGKyDEEPD01MBIg",
            "Cgtob3N0c19jb3VudBgGIAEoA0IL6McxAfrHMQM+PTEiWQoYQ3JlYXRlU3Vi",
            "Y2x1c3Rlck1ldGFkYXRhEhwKCmNsdXN0ZXJfaWQYASABKAlCCIrIMQQ8PTUw",
            "Eh8KDXN1YmNsdXN0ZXJfaWQYAiABKAlCCIrIMQQ8PTUwIpwCChdVcGRhdGVT",
            "dWJjbHVzdGVyUmVxdWVzdBIgCgpjbHVzdGVyX2lkGAEgASgJQgzoxzEBisgx",
            "BDw9NTASIwoNc3ViY2x1c3Rlcl9pZBgCIAEoCUIM6McxAYrIMQQ8PTUwEi8K",
            "C3VwZGF0ZV9tYXNrGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFz",
            "axI2CglyZXNvdXJjZXMYBCABKAsyIy55YW5kZXguY2xvdWQuZGF0YXByb2Mu",
            "djEuUmVzb3VyY2VzEi8KBG5hbWUYBSABKAlCIfLHMR18W2Etel1bLWEtejAt",
            "OV17MSw2MX1bYS16MC05XRIgCgtob3N0c19jb3VudBgGIAEoA0IL6McxAfrH",
            "MQM+PTEiWQoYVXBkYXRlU3ViY2x1c3Rlck1ldGFkYXRhEhwKCmNsdXN0ZXJf",
            "aWQYASABKAlCCIrIMQQ8PTUwEh8KDXN1YmNsdXN0ZXJfaWQYAiABKAlCCIrI",
            "MQQ8PTUwImAKF0RlbGV0ZVN1YmNsdXN0ZXJSZXF1ZXN0EiAKCmNsdXN0ZXJf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MBIjCg1zdWJjbHVzdGVyX2lkGAIgASgJ",
            "QgzoxzEBisgxBDw9NTAiWQoYRGVsZXRlU3ViY2x1c3Rlck1ldGFkYXRhEhwK",
            "CmNsdXN0ZXJfaWQYASABKAlCCIrIMQQ8PTUwEh8KDXN1YmNsdXN0ZXJfaWQY",
            "AiABKAlCCIrIMQQ8PTUwMtkHChFTdWJjbHVzdGVyU2VydmljZRKjAQoDR2V0",
            "Ei4ueWFuZGV4LmNsb3VkLmRhdGFwcm9jLnYxLkdldFN1YmNsdXN0ZXJSZXF1",
            "ZXN0GiQueWFuZGV4LmNsb3VkLmRhdGFwcm9jLnYxLlN1YmNsdXN0ZXIiRoLT",
            "5JMCQBI+L2RhdGFwcm9jL3YxL2NsdXN0ZXJzL3tjbHVzdGVyX2lkfS9zdWJj",
            "bHVzdGVycy97c3ViY2x1c3Rlcl9pZH0SowEKBExpc3QSMC55YW5kZXguY2xv",
            "dWQuZGF0YXByb2MudjEuTGlzdFN1YmNsdXN0ZXJzUmVxdWVzdBoxLnlhbmRl",
            "eC5jbG91ZC5kYXRhcHJvYy52MS5MaXN0U3ViY2x1c3RlcnNSZXNwb25zZSI2",
            "gtPkkwIwEi4vZGF0YXByb2MvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L3N1",
            "YmNsdXN0ZXJzEsMBCgZDcmVhdGUSMS55YW5kZXguY2xvdWQuZGF0YXByb2Mu",
            "djEuQ3JlYXRlU3ViY2x1c3RlclJlcXVlc3QaIS55YW5kZXguY2xvdWQub3Bl",
            "cmF0aW9uLk9wZXJhdGlvbiJjgtPkkwIzIi4vZGF0YXByb2MvdjEvY2x1c3Rl",
            "cnMve2NsdXN0ZXJfaWR9L3N1YmNsdXN0ZXJzOgEqstIqJgoYQ3JlYXRlU3Vi",
            "Y2x1c3Rlck1ldGFkYXRhEgpTdWJjbHVzdGVyEtMBCgZVcGRhdGUSMS55YW5k",
            "ZXguY2xvdWQuZGF0YXByb2MudjEuVXBkYXRlU3ViY2x1c3RlclJlcXVlc3Qa",
            "IS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJzgtPkkwJDMj4v",
            "ZGF0YXByb2MvdjEvY2x1c3RlcnMve2NsdXN0ZXJfaWR9L3N1YmNsdXN0ZXJz",
            "L3tzdWJjbHVzdGVyX2lkfToBKrLSKiYKGFVwZGF0ZVN1YmNsdXN0ZXJNZXRh",
            "ZGF0YRIKU3ViY2x1c3RlchLbAQoGRGVsZXRlEjEueWFuZGV4LmNsb3VkLmRh",
            "dGFwcm9jLnYxLkRlbGV0ZVN1YmNsdXN0ZXJSZXF1ZXN0GiEueWFuZGV4LmNs",
            "b3VkLm9wZXJhdGlvbi5PcGVyYXRpb24ie4LT5JMCQCo+L2RhdGFwcm9jL3Yx",
            "L2NsdXN0ZXJzL3tjbHVzdGVyX2lkfS9zdWJjbHVzdGVycy97c3ViY2x1c3Rl",
            "cl9pZH2y0ioxChhEZWxldGVTdWJjbHVzdGVyTWV0YWRhdGESFWdvb2dsZS5w",
            "cm90b2J1Zi5FbXB0eUJlChx5YW5kZXguY2xvdWQuYXBpLmRhdGFwcm9jLnYx",
            "WkVnaXRodWIuY29tL3lhbmRleC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgv",
            "Y2xvdWQvZGF0YXByb2MvdjE7ZGF0YXByb2NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.Dataproc.V1.CommonReflection.Descriptor, global::Yandex.Cloud.Dataproc.V1.SubclusterReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.GetSubclusterRequest), global::Yandex.Cloud.Dataproc.V1.GetSubclusterRequest.Parser, new[]{ "ClusterId", "SubclusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.ListSubclustersRequest), global::Yandex.Cloud.Dataproc.V1.ListSubclustersRequest.Parser, new[]{ "ClusterId", "PageSize", "PageToken", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.ListSubclustersResponse), global::Yandex.Cloud.Dataproc.V1.ListSubclustersResponse.Parser, new[]{ "Subclusters", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.CreateSubclusterRequest), global::Yandex.Cloud.Dataproc.V1.CreateSubclusterRequest.Parser, new[]{ "ClusterId", "Name", "Role", "Resources", "SubnetId", "HostsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.CreateSubclusterMetadata), global::Yandex.Cloud.Dataproc.V1.CreateSubclusterMetadata.Parser, new[]{ "ClusterId", "SubclusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.UpdateSubclusterRequest), global::Yandex.Cloud.Dataproc.V1.UpdateSubclusterRequest.Parser, new[]{ "ClusterId", "SubclusterId", "UpdateMask", "Resources", "Name", "HostsCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.UpdateSubclusterMetadata), global::Yandex.Cloud.Dataproc.V1.UpdateSubclusterMetadata.Parser, new[]{ "ClusterId", "SubclusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.DeleteSubclusterRequest), global::Yandex.Cloud.Dataproc.V1.DeleteSubclusterRequest.Parser, new[]{ "ClusterId", "SubclusterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.V1.DeleteSubclusterMetadata), global::Yandex.Cloud.Dataproc.V1.DeleteSubclusterMetadata.Parser, new[]{ "ClusterId", "SubclusterId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetSubclusterRequest : pb::IMessage<GetSubclusterRequest> {
    private static readonly pb::MessageParser<GetSubclusterRequest> _parser = new pb::MessageParser<GetSubclusterRequest>(() => new GetSubclusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSubclusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubclusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubclusterRequest(GetSubclusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSubclusterRequest Clone() {
      return new GetSubclusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster to get subcluster from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource to return.
    /// To get the subcluster ID use a [SubclusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSubclusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSubclusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSubclusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubclustersRequest : pb::IMessage<ListSubclustersRequest> {
    private static readonly pb::MessageParser<ListSubclustersRequest> _parser = new pb::MessageParser<ListSubclustersRequest>(() => new ListSubclustersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubclustersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersRequest(ListSubclustersRequest other) : this() {
      clusterId_ = other.clusterId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersRequest Clone() {
      return new ListSubclustersRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster to get subclusters from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page that should be returned. If the number of available
    /// results is larger than `page_size`, the service returns a `next_page_token` that can be used
    /// to get the next page of results in subsequent ListSubclusters requests.
    /// Acceptable values are 0 to 1000, inclusive. Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. Set `page_token` to the `next_page_token` returned by a previous ListSubclusters
    /// request to get the next page of results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can only use filtering with the [Cluster.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Мust be 1-63 characters long and match the regular expression `^[a-zA-Z0-9_-]+$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubclustersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubclustersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubclustersRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListSubclustersResponse : pb::IMessage<ListSubclustersResponse> {
    private static readonly pb::MessageParser<ListSubclustersResponse> _parser = new pb::MessageParser<ListSubclustersResponse>(() => new ListSubclustersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListSubclustersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersResponse(ListSubclustersResponse other) : this() {
      subclusters_ = other.subclusters_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListSubclustersResponse Clone() {
      return new ListSubclustersResponse(this);
    }

    /// <summary>Field number for the "subclusters" field.</summary>
    public const int SubclustersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.V1.Subcluster> _repeated_subclusters_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Dataproc.V1.Subcluster.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.V1.Subcluster> subclusters_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.V1.Subcluster>();
    /// <summary>
    /// List of Dataproc subclusters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.V1.Subcluster> Subclusters {
      get { return subclusters_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for ListSubclusters requests,
    /// if the number of results is larger than `page_size` specified in the request.
    /// To get the next page, specify the value of `next_page_token` as a value for
    /// the `page_token` parameter in the next ListClusters request. Subsequent ListClusters
    /// requests will have their own `next_page_token` to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListSubclustersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListSubclustersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!subclusters_.Equals(other.subclusters_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= subclusters_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      subclusters_.WriteTo(output, _repeated_subclusters_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += subclusters_.CalculateSize(_repeated_subclusters_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListSubclustersResponse other) {
      if (other == null) {
        return;
      }
      subclusters_.Add(other.subclusters_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            subclusters_.AddEntriesFrom(input, _repeated_subclusters_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateSubclusterRequest : pb::IMessage<CreateSubclusterRequest> {
    private static readonly pb::MessageParser<CreateSubclusterRequest> _parser = new pb::MessageParser<CreateSubclusterRequest>(() => new CreateSubclusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSubclusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterRequest(CreateSubclusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      name_ = other.name_;
      role_ = other.role_;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      subnetId_ = other.subnetId_;
      hostsCount_ = other.hostsCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterRequest Clone() {
      return new CreateSubclusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster to create create subcluster to.
    /// To get the Dataproc cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the Dataproc subcluster. The name must be unique within the folder.
    /// The name must be 1-63 characters long and match the regular expression `^[a-z]([-a-z0-9]{,61}[a-z0-9])?$`.
    /// The name can’t be changed after the Dataproc subcluster is created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private global::Yandex.Cloud.Dataproc.V1.Role role_ = 0;
    /// <summary>
    /// Role of hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.V1.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 4;
    private global::Yandex.Cloud.Dataproc.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 5;
    private string subnetId_ = "";
    /// <summary>
    /// ID of using compute subnet for hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hosts_count" field.</summary>
    public const int HostsCountFieldNumber = 6;
    private long hostsCount_;
    /// <summary>
    /// Number of hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HostsCount {
      get { return hostsCount_; }
      set {
        hostsCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSubclusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSubclusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (Name != other.Name) return false;
      if (Role != other.Role) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (SubnetId != other.SubnetId) return false;
      if (HostsCount != other.HostsCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (HostsCount != 0L) hash ^= HostsCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Role != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Role);
      }
      if (resources_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Resources);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SubnetId);
      }
      if (HostsCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HostsCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (HostsCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HostsCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSubclusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Dataproc.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.HostsCount != 0L) {
        HostsCount = other.HostsCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Role = (global::Yandex.Cloud.Dataproc.V1.Role) input.ReadEnum();
            break;
          }
          case 34: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Dataproc.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 42: {
            SubnetId = input.ReadString();
            break;
          }
          case 48: {
            HostsCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateSubclusterMetadata : pb::IMessage<CreateSubclusterMetadata> {
    private static readonly pb::MessageParser<CreateSubclusterMetadata> _parser = new pb::MessageParser<CreateSubclusterMetadata>(() => new CreateSubclusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSubclusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterMetadata(CreateSubclusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSubclusterMetadata Clone() {
      return new CreateSubclusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster resource to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSubclusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSubclusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSubclusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateSubclusterRequest : pb::IMessage<UpdateSubclusterRequest> {
    private static readonly pb::MessageParser<UpdateSubclusterRequest> _parser = new pb::MessageParser<UpdateSubclusterRequest>(() => new UpdateSubclusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSubclusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterRequest(UpdateSubclusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      resources_ = other.resources_ != null ? other.resources_.Clone() : null;
      name_ = other.name_;
      hostsCount_ = other.hostsCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterRequest Clone() {
      return new UpdateSubclusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster to update subcluster to.
    /// To get the Dataproc cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource.
    /// To get the subcluster ID use a [SubclusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "resources" field.</summary>
    public const int ResourcesFieldNumber = 4;
    private global::Yandex.Cloud.Dataproc.V1.Resources resources_;
    /// <summary>
    /// Resources allocated to hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.V1.Resources Resources {
      get { return resources_; }
      set {
        resources_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// Name of the Dataproc subcluster. The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hosts_count" field.</summary>
    public const int HostsCountFieldNumber = 6;
    private long hostsCount_;
    /// <summary>
    /// Number of hosts in subcluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HostsCount {
      get { return hostsCount_; }
      set {
        hostsCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSubclusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSubclusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (!object.Equals(Resources, other.Resources)) return false;
      if (Name != other.Name) return false;
      if (HostsCount != other.HostsCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (resources_ != null) hash ^= Resources.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HostsCount != 0L) hash ^= HostsCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UpdateMask);
      }
      if (resources_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Resources);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (HostsCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HostsCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (resources_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HostsCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HostsCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSubclusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.resources_ != null) {
        if (resources_ == null) {
          Resources = new global::Yandex.Cloud.Dataproc.V1.Resources();
        }
        Resources.MergeFrom(other.Resources);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HostsCount != 0L) {
        HostsCount = other.HostsCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
          case 26: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 34: {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.Dataproc.V1.Resources();
            }
            input.ReadMessage(Resources);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            HostsCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateSubclusterMetadata : pb::IMessage<UpdateSubclusterMetadata> {
    private static readonly pb::MessageParser<UpdateSubclusterMetadata> _parser = new pb::MessageParser<UpdateSubclusterMetadata>(() => new UpdateSubclusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateSubclusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterMetadata(UpdateSubclusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateSubclusterMetadata Clone() {
      return new UpdateSubclusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster resource to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource to update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateSubclusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateSubclusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateSubclusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteSubclusterRequest : pb::IMessage<DeleteSubclusterRequest> {
    private static readonly pb::MessageParser<DeleteSubclusterRequest> _parser = new pb::MessageParser<DeleteSubclusterRequest>(() => new DeleteSubclusterRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteSubclusterRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterRequest(DeleteSubclusterRequest other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterRequest Clone() {
      return new DeleteSubclusterRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster to delete subcluster from.
    /// To get the Dataproc cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteSubclusterRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteSubclusterRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteSubclusterRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteSubclusterMetadata : pb::IMessage<DeleteSubclusterMetadata> {
    private static readonly pb::MessageParser<DeleteSubclusterMetadata> _parser = new pb::MessageParser<DeleteSubclusterMetadata>(() => new DeleteSubclusterMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteSubclusterMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.V1.SubclusterServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterMetadata(DeleteSubclusterMetadata other) : this() {
      clusterId_ = other.clusterId_;
      subclusterId_ = other.subclusterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteSubclusterMetadata Clone() {
      return new DeleteSubclusterMetadata(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Dataproc cluster resource to return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subcluster_id" field.</summary>
    public const int SubclusterIdFieldNumber = 2;
    private string subclusterId_ = "";
    /// <summary>
    /// ID of the Dataproc subcluster resource to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubclusterId {
      get { return subclusterId_; }
      set {
        subclusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteSubclusterMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteSubclusterMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (SubclusterId != other.SubclusterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (SubclusterId.Length != 0) hash ^= SubclusterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubclusterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (SubclusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubclusterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteSubclusterMetadata other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.SubclusterId.Length != 0) {
        SubclusterId = other.SubclusterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            SubclusterId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
