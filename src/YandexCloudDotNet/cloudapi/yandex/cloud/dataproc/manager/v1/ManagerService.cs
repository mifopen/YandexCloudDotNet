// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/dataproc/manager/v1/manager_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Dataproc.Manager.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/dataproc/manager/v1/manager_service.proto</summary>
  internal static partial class ManagerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/dataproc/manager/v1/manager_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ManagerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZ5YW5kZXgvY2xvdWQvZGF0YXByb2MvbWFuYWdlci92MS9tYW5hZ2VyX3Nl",
            "cnZpY2UucHJvdG8SIHlhbmRleC5jbG91ZC5kYXRhcHJvYy5tYW5hZ2VyLnYx",
            "Il8KDUhiYXNlTm9kZUluZm8SDAoEbmFtZRgBIAEoCRIQCghyZXF1ZXN0cxgC",
            "IAEoAxIUCgxoZWFwX3NpemVfbWIYAyABKAMSGAoQbWF4X2hlYXBfc2l6ZV9t",
            "YhgEIAEoAyLhAQoJSGJhc2VJbmZvEhEKCWF2YWlsYWJsZRgBIAEoCBIPCgdy",
            "ZWdpb25zGAIgASgDEhAKCHJlcXVlc3RzGAMgASgDEhQKDGF2ZXJhZ2VfbG9h",
            "ZBgEIAEoARJDCgpsaXZlX25vZGVzGAUgAygLMi8ueWFuZGV4LmNsb3VkLmRh",
            "dGFwcm9jLm1hbmFnZXIudjEuSGJhc2VOb2RlSW5mbxJDCgpkZWFkX25vZGVz",
            "GAYgAygLMi8ueWFuZGV4LmNsb3VkLmRhdGFwcm9jLm1hbmFnZXIudjEuSGJh",
            "c2VOb2RlSW5mbyJyCgxIREZTTm9kZUluZm8SDAoEbmFtZRgBIAEoCRIMCgR1",
            "c2VkGAIgASgDEhEKCXJlbWFpbmluZxgDIAEoAxIQCghjYXBhY2l0eRgEIAEo",
            "AxISCgpudW1fYmxvY2tzGAUgASgDEg0KBXN0YXRlGAYgASgJIuMDCghIREZT",
            "SW5mbxIRCglhdmFpbGFibGUYASABKAgSGQoRcGVyY2VudF9yZW1haW5pbmcY",
            "AiABKAESDAoEdXNlZBgDIAEoAxIMCgRmcmVlGAQgASgDEhQKDHRvdGFsX2Js",
            "b2NrcxgFIAEoAxIWCg5taXNzaW5nX2Jsb2NrcxgGIAEoAxIiChptaXNzaW5n",
            "X2Jsb2Nrc19yZXBsaWNhX29uZRgHIAEoAxJCCgpsaXZlX25vZGVzGAggAygL",
            "Mi4ueWFuZGV4LmNsb3VkLmRhdGFwcm9jLm1hbmFnZXIudjEuSERGU05vZGVJ",
            "bmZvEkIKCmRlYWRfbm9kZXMYCSADKAsyLi55YW5kZXguY2xvdWQuZGF0YXBy",
            "b2MubWFuYWdlci52MS5IREZTTm9kZUluZm8SEAoIc2FmZW1vZGUYCyABKAkS",
            "TQoVZGVjb21taXNzaW9uaW5nX25vZGVzGAwgAygLMi4ueWFuZGV4LmNsb3Vk",
            "LmRhdGFwcm9jLm1hbmFnZXIudjEuSERGU05vZGVJbmZvEkwKFGRlY29tbWlz",
            "c2lvbmVkX25vZGVzGA0gAygLMi4ueWFuZGV4LmNsb3VkLmRhdGFwcm9jLm1h",
            "bmFnZXIudjEuSERGU05vZGVJbmZvSgQIChALIpsBCghIaXZlSW5mbxIRCglh",
            "dmFpbGFibGUYASABKAgSGQoRcXVlcmllc19zdWNjZWVkZWQYAiABKAMSFgoO",
            "cXVlcmllc19mYWlsZWQYAyABKAMSGQoRcXVlcmllc19leGVjdXRpbmcYBCAB",
            "KAMSFQoNc2Vzc2lvbnNfb3BlbhgFIAEoAxIXCg9zZXNzaW9uc19hY3RpdmUY",
            "BiABKAMieAoMWWFybk5vZGVJbmZvEgwKBG5hbWUYASABKAkSDQoFc3RhdGUY",
            "AiABKAkSFgoObnVtX2NvbnRhaW5lcnMYAyABKAMSFgoOdXNlZF9tZW1vcnlf",
            "bWIYBCABKAMSGwoTYXZhaWxhYmxlX21lbW9yeV9tYhgFIAEoAyJhCghZYXJu",
            "SW5mbxIRCglhdmFpbGFibGUYASABKAgSQgoKbGl2ZV9ub2RlcxgCIAMoCzIu",
            "LnlhbmRleC5jbG91ZC5kYXRhcHJvYy5tYW5hZ2VyLnYxLllhcm5Ob2RlSW5m",
            "byIeCg1ab29rZWVwZXJJbmZvEg0KBWFsaXZlGAEgASgIIhoKCU9vemllSW5m",
            "bxINCgVhbGl2ZRgBIAEoCCLwAgoESW5mbxI4CgRoZGZzGAEgASgLMioueWFu",
            "ZGV4LmNsb3VkLmRhdGFwcm9jLm1hbmFnZXIudjEuSERGU0luZm8SOAoEeWFy",
            "bhgCIAEoCzIqLnlhbmRleC5jbG91ZC5kYXRhcHJvYy5tYW5hZ2VyLnYxLllh",
            "cm5JbmZvEjgKBGhpdmUYAyABKAsyKi55YW5kZXguY2xvdWQuZGF0YXByb2Mu",
            "bWFuYWdlci52MS5IaXZlSW5mbxJCCgl6b29rZWVwZXIYBCABKAsyLy55YW5k",
            "ZXguY2xvdWQuZGF0YXByb2MubWFuYWdlci52MS5ab29rZWVwZXJJbmZvEjoK",
            "BWhiYXNlGAUgASgLMisueWFuZGV4LmNsb3VkLmRhdGFwcm9jLm1hbmFnZXIu",
            "djEuSGJhc2VJbmZvEjoKBW9vemllGAYgASgLMisueWFuZGV4LmNsb3VkLmRh",
            "dGFwcm9jLm1hbmFnZXIudjEuT296aWVJbmZvIm0KDVJlcG9ydFJlcXVlc3QS",
            "CwoDY2lkGAEgASgJEhkKEXRvcG9sb2d5X3JldmlzaW9uGAIgASgDEjQKBGlu",
            "Zm8YAyABKAsyJi55YW5kZXguY2xvdWQuZGF0YXByb2MubWFuYWdlci52MS5J",
            "bmZvInMKC1JlcG9ydFJlcGx5EhwKFGRlY29tbWlzc2lvbl90aW1lb3V0GAEg",
            "ASgDEiIKGnlhcm5faG9zdHNfdG9fZGVjb21taXNzaW9uGAIgAygJEiIKGmhk",
            "ZnNfaG9zdHNfdG9fZGVjb21taXNzaW9uGAMgAygJMoQBChZEYXRhcHJvY01h",
            "bmFnZXJTZXJ2aWNlEmoKBlJlcG9ydBIvLnlhbmRleC5jbG91ZC5kYXRhcHJv",
            "Yy5tYW5hZ2VyLnYxLlJlcG9ydFJlcXVlc3QaLS55YW5kZXguY2xvdWQuZGF0",
            "YXByb2MubWFuYWdlci52MS5SZXBvcnRSZXBseSIAQn0KJHlhbmRleC5jbG91",
            "ZC5hcGkuZGF0YXByb2MubWFuYWdlci52MVpVZ2l0aHViLmNvbS95YW5kZXgt",
            "Y2xvdWQvZ28tZ2VucHJvdG8veWFuZGV4L2Nsb3VkL2RhdGFwcm9jL21hbmFn",
            "ZXIvdjE7ZGF0YXByb2NfbWFuYWdlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo), global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo.Parser, new[]{ "Name", "Requests", "HeapSizeMb", "MaxHeapSizeMb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo), global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo.Parser, new[]{ "Available", "Regions", "Requests", "AverageLoad", "LiveNodes", "DeadNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo), global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo.Parser, new[]{ "Name", "Used", "Remaining", "Capacity", "NumBlocks", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo), global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo.Parser, new[]{ "Available", "PercentRemaining", "Used", "Free", "TotalBlocks", "MissingBlocks", "MissingBlocksReplicaOne", "LiveNodes", "DeadNodes", "Safemode", "DecommissioningNodes", "DecommissionedNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo), global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo.Parser, new[]{ "Available", "QueriesSucceeded", "QueriesFailed", "QueriesExecuting", "SessionsOpen", "SessionsActive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo), global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo.Parser, new[]{ "Name", "State", "NumContainers", "UsedMemoryMb", "AvailableMemoryMb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo), global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo.Parser, new[]{ "Available", "LiveNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo), global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo.Parser, new[]{ "Alive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo), global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo.Parser, new[]{ "Alive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.Info), global::Yandex.Cloud.Dataproc.Manager.V1.Info.Parser, new[]{ "Hdfs", "Yarn", "Hive", "Zookeeper", "Hbase", "Oozie" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.ReportRequest), global::Yandex.Cloud.Dataproc.Manager.V1.ReportRequest.Parser, new[]{ "Cid", "TopologyRevision", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Dataproc.Manager.V1.ReportReply), global::Yandex.Cloud.Dataproc.Manager.V1.ReportReply.Parser, new[]{ "DecommissionTimeout", "YarnHostsToDecommission", "HdfsHostsToDecommission" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class HbaseNodeInfo : pb::IMessage<HbaseNodeInfo> {
    private static readonly pb::MessageParser<HbaseNodeInfo> _parser = new pb::MessageParser<HbaseNodeInfo>(() => new HbaseNodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HbaseNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseNodeInfo(HbaseNodeInfo other) : this() {
      name_ = other.name_;
      requests_ = other.requests_;
      heapSizeMb_ = other.heapSizeMb_;
      maxHeapSizeMb_ = other.maxHeapSizeMb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseNodeInfo Clone() {
      return new HbaseNodeInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 2;
    private long requests_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Requests {
      get { return requests_; }
      set {
        requests_ = value;
      }
    }

    /// <summary>Field number for the "heap_size_mb" field.</summary>
    public const int HeapSizeMbFieldNumber = 3;
    private long heapSizeMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HeapSizeMb {
      get { return heapSizeMb_; }
      set {
        heapSizeMb_ = value;
      }
    }

    /// <summary>Field number for the "max_heap_size_mb" field.</summary>
    public const int MaxHeapSizeMbFieldNumber = 4;
    private long maxHeapSizeMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxHeapSizeMb {
      get { return maxHeapSizeMb_; }
      set {
        maxHeapSizeMb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HbaseNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HbaseNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Requests != other.Requests) return false;
      if (HeapSizeMb != other.HeapSizeMb) return false;
      if (MaxHeapSizeMb != other.MaxHeapSizeMb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Requests != 0L) hash ^= Requests.GetHashCode();
      if (HeapSizeMb != 0L) hash ^= HeapSizeMb.GetHashCode();
      if (MaxHeapSizeMb != 0L) hash ^= MaxHeapSizeMb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Requests != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Requests);
      }
      if (HeapSizeMb != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(HeapSizeMb);
      }
      if (MaxHeapSizeMb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MaxHeapSizeMb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Requests != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Requests);
      }
      if (HeapSizeMb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HeapSizeMb);
      }
      if (MaxHeapSizeMb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxHeapSizeMb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HbaseNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Requests != 0L) {
        Requests = other.Requests;
      }
      if (other.HeapSizeMb != 0L) {
        HeapSizeMb = other.HeapSizeMb;
      }
      if (other.MaxHeapSizeMb != 0L) {
        MaxHeapSizeMb = other.MaxHeapSizeMb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Requests = input.ReadInt64();
            break;
          }
          case 24: {
            HeapSizeMb = input.ReadInt64();
            break;
          }
          case 32: {
            MaxHeapSizeMb = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HbaseInfo : pb::IMessage<HbaseInfo> {
    private static readonly pb::MessageParser<HbaseInfo> _parser = new pb::MessageParser<HbaseInfo>(() => new HbaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HbaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseInfo(HbaseInfo other) : this() {
      available_ = other.available_;
      regions_ = other.regions_;
      requests_ = other.requests_;
      averageLoad_ = other.averageLoad_;
      liveNodes_ = other.liveNodes_.Clone();
      deadNodes_ = other.deadNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HbaseInfo Clone() {
      return new HbaseInfo(this);
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 1;
    private bool available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "regions" field.</summary>
    public const int RegionsFieldNumber = 2;
    private long regions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Regions {
      get { return regions_; }
      set {
        regions_ = value;
      }
    }

    /// <summary>Field number for the "requests" field.</summary>
    public const int RequestsFieldNumber = 3;
    private long requests_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Requests {
      get { return requests_; }
      set {
        requests_ = value;
      }
    }

    /// <summary>Field number for the "average_load" field.</summary>
    public const int AverageLoadFieldNumber = 4;
    private double averageLoad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AverageLoad {
      get { return averageLoad_; }
      set {
        averageLoad_ = value;
      }
    }

    /// <summary>Field number for the "live_nodes" field.</summary>
    public const int LiveNodesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> _repeated_liveNodes_codec
        = pb::FieldCodec.ForMessage(42, global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> liveNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> LiveNodes {
      get { return liveNodes_; }
    }

    /// <summary>Field number for the "dead_nodes" field.</summary>
    public const int DeadNodesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> _repeated_deadNodes_codec
        = pb::FieldCodec.ForMessage(50, global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> deadNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HbaseNodeInfo> DeadNodes {
      get { return deadNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HbaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HbaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Available != other.Available) return false;
      if (Regions != other.Regions) return false;
      if (Requests != other.Requests) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageLoad, other.AverageLoad)) return false;
      if(!liveNodes_.Equals(other.liveNodes_)) return false;
      if(!deadNodes_.Equals(other.deadNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Available != false) hash ^= Available.GetHashCode();
      if (Regions != 0L) hash ^= Regions.GetHashCode();
      if (Requests != 0L) hash ^= Requests.GetHashCode();
      if (AverageLoad != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageLoad);
      hash ^= liveNodes_.GetHashCode();
      hash ^= deadNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Available != false) {
        output.WriteRawTag(8);
        output.WriteBool(Available);
      }
      if (Regions != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Regions);
      }
      if (Requests != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Requests);
      }
      if (AverageLoad != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(AverageLoad);
      }
      liveNodes_.WriteTo(output, _repeated_liveNodes_codec);
      deadNodes_.WriteTo(output, _repeated_deadNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Available != false) {
        size += 1 + 1;
      }
      if (Regions != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Regions);
      }
      if (Requests != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Requests);
      }
      if (AverageLoad != 0D) {
        size += 1 + 8;
      }
      size += liveNodes_.CalculateSize(_repeated_liveNodes_codec);
      size += deadNodes_.CalculateSize(_repeated_deadNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HbaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.Regions != 0L) {
        Regions = other.Regions;
      }
      if (other.Requests != 0L) {
        Requests = other.Requests;
      }
      if (other.AverageLoad != 0D) {
        AverageLoad = other.AverageLoad;
      }
      liveNodes_.Add(other.liveNodes_);
      deadNodes_.Add(other.deadNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Available = input.ReadBool();
            break;
          }
          case 16: {
            Regions = input.ReadInt64();
            break;
          }
          case 24: {
            Requests = input.ReadInt64();
            break;
          }
          case 33: {
            AverageLoad = input.ReadDouble();
            break;
          }
          case 42: {
            liveNodes_.AddEntriesFrom(input, _repeated_liveNodes_codec);
            break;
          }
          case 50: {
            deadNodes_.AddEntriesFrom(input, _repeated_deadNodes_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HDFSNodeInfo : pb::IMessage<HDFSNodeInfo> {
    private static readonly pb::MessageParser<HDFSNodeInfo> _parser = new pb::MessageParser<HDFSNodeInfo>(() => new HDFSNodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDFSNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSNodeInfo(HDFSNodeInfo other) : this() {
      name_ = other.name_;
      used_ = other.used_;
      remaining_ = other.remaining_;
      capacity_ = other.capacity_;
      numBlocks_ = other.numBlocks_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSNodeInfo Clone() {
      return new HDFSNodeInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 2;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "remaining" field.</summary>
    public const int RemainingFieldNumber = 3;
    private long remaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Remaining {
      get { return remaining_; }
      set {
        remaining_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 4;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "num_blocks" field.</summary>
    public const int NumBlocksFieldNumber = 5;
    private long numBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumBlocks {
      get { return numBlocks_; }
      set {
        numBlocks_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDFSNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDFSNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Used != other.Used) return false;
      if (Remaining != other.Remaining) return false;
      if (Capacity != other.Capacity) return false;
      if (NumBlocks != other.NumBlocks) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Remaining != 0L) hash ^= Remaining.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (NumBlocks != 0L) hash ^= NumBlocks.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Used != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Used);
      }
      if (Remaining != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Remaining);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Capacity);
      }
      if (NumBlocks != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NumBlocks);
      }
      if (State.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Remaining != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Remaining);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (NumBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumBlocks);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDFSNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Remaining != 0L) {
        Remaining = other.Remaining;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.NumBlocks != 0L) {
        NumBlocks = other.NumBlocks;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Used = input.ReadInt64();
            break;
          }
          case 24: {
            Remaining = input.ReadInt64();
            break;
          }
          case 32: {
            Capacity = input.ReadInt64();
            break;
          }
          case 40: {
            NumBlocks = input.ReadInt64();
            break;
          }
          case 50: {
            State = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HDFSInfo : pb::IMessage<HDFSInfo> {
    private static readonly pb::MessageParser<HDFSInfo> _parser = new pb::MessageParser<HDFSInfo>(() => new HDFSInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDFSInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSInfo(HDFSInfo other) : this() {
      available_ = other.available_;
      percentRemaining_ = other.percentRemaining_;
      used_ = other.used_;
      free_ = other.free_;
      totalBlocks_ = other.totalBlocks_;
      missingBlocks_ = other.missingBlocks_;
      missingBlocksReplicaOne_ = other.missingBlocksReplicaOne_;
      liveNodes_ = other.liveNodes_.Clone();
      deadNodes_ = other.deadNodes_.Clone();
      safemode_ = other.safemode_;
      decommissioningNodes_ = other.decommissioningNodes_.Clone();
      decommissionedNodes_ = other.decommissionedNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDFSInfo Clone() {
      return new HDFSInfo(this);
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 1;
    private bool available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "percent_remaining" field.</summary>
    public const int PercentRemainingFieldNumber = 2;
    private double percentRemaining_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PercentRemaining {
      get { return percentRemaining_; }
      set {
        percentRemaining_ = value;
      }
    }

    /// <summary>Field number for the "used" field.</summary>
    public const int UsedFieldNumber = 3;
    private long used_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Used {
      get { return used_; }
      set {
        used_ = value;
      }
    }

    /// <summary>Field number for the "free" field.</summary>
    public const int FreeFieldNumber = 4;
    private long free_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Free {
      get { return free_; }
      set {
        free_ = value;
      }
    }

    /// <summary>Field number for the "total_blocks" field.</summary>
    public const int TotalBlocksFieldNumber = 5;
    private long totalBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBlocks {
      get { return totalBlocks_; }
      set {
        totalBlocks_ = value;
      }
    }

    /// <summary>Field number for the "missing_blocks" field.</summary>
    public const int MissingBlocksFieldNumber = 6;
    private long missingBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissingBlocks {
      get { return missingBlocks_; }
      set {
        missingBlocks_ = value;
      }
    }

    /// <summary>Field number for the "missing_blocks_replica_one" field.</summary>
    public const int MissingBlocksReplicaOneFieldNumber = 7;
    private long missingBlocksReplicaOne_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissingBlocksReplicaOne {
      get { return missingBlocksReplicaOne_; }
      set {
        missingBlocksReplicaOne_ = value;
      }
    }

    /// <summary>Field number for the "live_nodes" field.</summary>
    public const int LiveNodesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> _repeated_liveNodes_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> liveNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> LiveNodes {
      get { return liveNodes_; }
    }

    /// <summary>Field number for the "dead_nodes" field.</summary>
    public const int DeadNodesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> _repeated_deadNodes_codec
        = pb::FieldCodec.ForMessage(74, global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> deadNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> DeadNodes {
      get { return deadNodes_; }
    }

    /// <summary>Field number for the "safemode" field.</summary>
    public const int SafemodeFieldNumber = 11;
    private string safemode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Safemode {
      get { return safemode_; }
      set {
        safemode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decommissioning_nodes" field.</summary>
    public const int DecommissioningNodesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> _repeated_decommissioningNodes_codec
        = pb::FieldCodec.ForMessage(98, global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> decommissioningNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> DecommissioningNodes {
      get { return decommissioningNodes_; }
    }

    /// <summary>Field number for the "decommissioned_nodes" field.</summary>
    public const int DecommissionedNodesFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> _repeated_decommissionedNodes_codec
        = pb::FieldCodec.ForMessage(106, global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> decommissionedNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.HDFSNodeInfo> DecommissionedNodes {
      get { return decommissionedNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDFSInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDFSInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Available != other.Available) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PercentRemaining, other.PercentRemaining)) return false;
      if (Used != other.Used) return false;
      if (Free != other.Free) return false;
      if (TotalBlocks != other.TotalBlocks) return false;
      if (MissingBlocks != other.MissingBlocks) return false;
      if (MissingBlocksReplicaOne != other.MissingBlocksReplicaOne) return false;
      if(!liveNodes_.Equals(other.liveNodes_)) return false;
      if(!deadNodes_.Equals(other.deadNodes_)) return false;
      if (Safemode != other.Safemode) return false;
      if(!decommissioningNodes_.Equals(other.decommissioningNodes_)) return false;
      if(!decommissionedNodes_.Equals(other.decommissionedNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Available != false) hash ^= Available.GetHashCode();
      if (PercentRemaining != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PercentRemaining);
      if (Used != 0L) hash ^= Used.GetHashCode();
      if (Free != 0L) hash ^= Free.GetHashCode();
      if (TotalBlocks != 0L) hash ^= TotalBlocks.GetHashCode();
      if (MissingBlocks != 0L) hash ^= MissingBlocks.GetHashCode();
      if (MissingBlocksReplicaOne != 0L) hash ^= MissingBlocksReplicaOne.GetHashCode();
      hash ^= liveNodes_.GetHashCode();
      hash ^= deadNodes_.GetHashCode();
      if (Safemode.Length != 0) hash ^= Safemode.GetHashCode();
      hash ^= decommissioningNodes_.GetHashCode();
      hash ^= decommissionedNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Available != false) {
        output.WriteRawTag(8);
        output.WriteBool(Available);
      }
      if (PercentRemaining != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PercentRemaining);
      }
      if (Used != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Used);
      }
      if (Free != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Free);
      }
      if (TotalBlocks != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalBlocks);
      }
      if (MissingBlocks != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MissingBlocks);
      }
      if (MissingBlocksReplicaOne != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(MissingBlocksReplicaOne);
      }
      liveNodes_.WriteTo(output, _repeated_liveNodes_codec);
      deadNodes_.WriteTo(output, _repeated_deadNodes_codec);
      if (Safemode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Safemode);
      }
      decommissioningNodes_.WriteTo(output, _repeated_decommissioningNodes_codec);
      decommissionedNodes_.WriteTo(output, _repeated_decommissionedNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Available != false) {
        size += 1 + 1;
      }
      if (PercentRemaining != 0D) {
        size += 1 + 8;
      }
      if (Used != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Used);
      }
      if (Free != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Free);
      }
      if (TotalBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBlocks);
      }
      if (MissingBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissingBlocks);
      }
      if (MissingBlocksReplicaOne != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissingBlocksReplicaOne);
      }
      size += liveNodes_.CalculateSize(_repeated_liveNodes_codec);
      size += deadNodes_.CalculateSize(_repeated_deadNodes_codec);
      if (Safemode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Safemode);
      }
      size += decommissioningNodes_.CalculateSize(_repeated_decommissioningNodes_codec);
      size += decommissionedNodes_.CalculateSize(_repeated_decommissionedNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDFSInfo other) {
      if (other == null) {
        return;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.PercentRemaining != 0D) {
        PercentRemaining = other.PercentRemaining;
      }
      if (other.Used != 0L) {
        Used = other.Used;
      }
      if (other.Free != 0L) {
        Free = other.Free;
      }
      if (other.TotalBlocks != 0L) {
        TotalBlocks = other.TotalBlocks;
      }
      if (other.MissingBlocks != 0L) {
        MissingBlocks = other.MissingBlocks;
      }
      if (other.MissingBlocksReplicaOne != 0L) {
        MissingBlocksReplicaOne = other.MissingBlocksReplicaOne;
      }
      liveNodes_.Add(other.liveNodes_);
      deadNodes_.Add(other.deadNodes_);
      if (other.Safemode.Length != 0) {
        Safemode = other.Safemode;
      }
      decommissioningNodes_.Add(other.decommissioningNodes_);
      decommissionedNodes_.Add(other.decommissionedNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Available = input.ReadBool();
            break;
          }
          case 17: {
            PercentRemaining = input.ReadDouble();
            break;
          }
          case 24: {
            Used = input.ReadInt64();
            break;
          }
          case 32: {
            Free = input.ReadInt64();
            break;
          }
          case 40: {
            TotalBlocks = input.ReadInt64();
            break;
          }
          case 48: {
            MissingBlocks = input.ReadInt64();
            break;
          }
          case 56: {
            MissingBlocksReplicaOne = input.ReadInt64();
            break;
          }
          case 66: {
            liveNodes_.AddEntriesFrom(input, _repeated_liveNodes_codec);
            break;
          }
          case 74: {
            deadNodes_.AddEntriesFrom(input, _repeated_deadNodes_codec);
            break;
          }
          case 90: {
            Safemode = input.ReadString();
            break;
          }
          case 98: {
            decommissioningNodes_.AddEntriesFrom(input, _repeated_decommissioningNodes_codec);
            break;
          }
          case 106: {
            decommissionedNodes_.AddEntriesFrom(input, _repeated_decommissionedNodes_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HiveInfo : pb::IMessage<HiveInfo> {
    private static readonly pb::MessageParser<HiveInfo> _parser = new pb::MessageParser<HiveInfo>(() => new HiveInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HiveInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiveInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiveInfo(HiveInfo other) : this() {
      available_ = other.available_;
      queriesSucceeded_ = other.queriesSucceeded_;
      queriesFailed_ = other.queriesFailed_;
      queriesExecuting_ = other.queriesExecuting_;
      sessionsOpen_ = other.sessionsOpen_;
      sessionsActive_ = other.sessionsActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HiveInfo Clone() {
      return new HiveInfo(this);
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 1;
    private bool available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "queries_succeeded" field.</summary>
    public const int QueriesSucceededFieldNumber = 2;
    private long queriesSucceeded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QueriesSucceeded {
      get { return queriesSucceeded_; }
      set {
        queriesSucceeded_ = value;
      }
    }

    /// <summary>Field number for the "queries_failed" field.</summary>
    public const int QueriesFailedFieldNumber = 3;
    private long queriesFailed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QueriesFailed {
      get { return queriesFailed_; }
      set {
        queriesFailed_ = value;
      }
    }

    /// <summary>Field number for the "queries_executing" field.</summary>
    public const int QueriesExecutingFieldNumber = 4;
    private long queriesExecuting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long QueriesExecuting {
      get { return queriesExecuting_; }
      set {
        queriesExecuting_ = value;
      }
    }

    /// <summary>Field number for the "sessions_open" field.</summary>
    public const int SessionsOpenFieldNumber = 5;
    private long sessionsOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionsOpen {
      get { return sessionsOpen_; }
      set {
        sessionsOpen_ = value;
      }
    }

    /// <summary>Field number for the "sessions_active" field.</summary>
    public const int SessionsActiveFieldNumber = 6;
    private long sessionsActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SessionsActive {
      get { return sessionsActive_; }
      set {
        sessionsActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HiveInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HiveInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Available != other.Available) return false;
      if (QueriesSucceeded != other.QueriesSucceeded) return false;
      if (QueriesFailed != other.QueriesFailed) return false;
      if (QueriesExecuting != other.QueriesExecuting) return false;
      if (SessionsOpen != other.SessionsOpen) return false;
      if (SessionsActive != other.SessionsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Available != false) hash ^= Available.GetHashCode();
      if (QueriesSucceeded != 0L) hash ^= QueriesSucceeded.GetHashCode();
      if (QueriesFailed != 0L) hash ^= QueriesFailed.GetHashCode();
      if (QueriesExecuting != 0L) hash ^= QueriesExecuting.GetHashCode();
      if (SessionsOpen != 0L) hash ^= SessionsOpen.GetHashCode();
      if (SessionsActive != 0L) hash ^= SessionsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Available != false) {
        output.WriteRawTag(8);
        output.WriteBool(Available);
      }
      if (QueriesSucceeded != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(QueriesSucceeded);
      }
      if (QueriesFailed != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(QueriesFailed);
      }
      if (QueriesExecuting != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(QueriesExecuting);
      }
      if (SessionsOpen != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SessionsOpen);
      }
      if (SessionsActive != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SessionsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Available != false) {
        size += 1 + 1;
      }
      if (QueriesSucceeded != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueriesSucceeded);
      }
      if (QueriesFailed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueriesFailed);
      }
      if (QueriesExecuting != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(QueriesExecuting);
      }
      if (SessionsOpen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionsOpen);
      }
      if (SessionsActive != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SessionsActive);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HiveInfo other) {
      if (other == null) {
        return;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.QueriesSucceeded != 0L) {
        QueriesSucceeded = other.QueriesSucceeded;
      }
      if (other.QueriesFailed != 0L) {
        QueriesFailed = other.QueriesFailed;
      }
      if (other.QueriesExecuting != 0L) {
        QueriesExecuting = other.QueriesExecuting;
      }
      if (other.SessionsOpen != 0L) {
        SessionsOpen = other.SessionsOpen;
      }
      if (other.SessionsActive != 0L) {
        SessionsActive = other.SessionsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Available = input.ReadBool();
            break;
          }
          case 16: {
            QueriesSucceeded = input.ReadInt64();
            break;
          }
          case 24: {
            QueriesFailed = input.ReadInt64();
            break;
          }
          case 32: {
            QueriesExecuting = input.ReadInt64();
            break;
          }
          case 40: {
            SessionsOpen = input.ReadInt64();
            break;
          }
          case 48: {
            SessionsActive = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class YarnNodeInfo : pb::IMessage<YarnNodeInfo> {
    private static readonly pb::MessageParser<YarnNodeInfo> _parser = new pb::MessageParser<YarnNodeInfo>(() => new YarnNodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YarnNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnNodeInfo(YarnNodeInfo other) : this() {
      name_ = other.name_;
      state_ = other.state_;
      numContainers_ = other.numContainers_;
      usedMemoryMb_ = other.usedMemoryMb_;
      availableMemoryMb_ = other.availableMemoryMb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnNodeInfo Clone() {
      return new YarnNodeInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private string state_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string State {
      get { return state_; }
      set {
        state_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_containers" field.</summary>
    public const int NumContainersFieldNumber = 3;
    private long numContainers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumContainers {
      get { return numContainers_; }
      set {
        numContainers_ = value;
      }
    }

    /// <summary>Field number for the "used_memory_mb" field.</summary>
    public const int UsedMemoryMbFieldNumber = 4;
    private long usedMemoryMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UsedMemoryMb {
      get { return usedMemoryMb_; }
      set {
        usedMemoryMb_ = value;
      }
    }

    /// <summary>Field number for the "available_memory_mb" field.</summary>
    public const int AvailableMemoryMbFieldNumber = 5;
    private long availableMemoryMb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AvailableMemoryMb {
      get { return availableMemoryMb_; }
      set {
        availableMemoryMb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YarnNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YarnNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (State != other.State) return false;
      if (NumContainers != other.NumContainers) return false;
      if (UsedMemoryMb != other.UsedMemoryMb) return false;
      if (AvailableMemoryMb != other.AvailableMemoryMb) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (State.Length != 0) hash ^= State.GetHashCode();
      if (NumContainers != 0L) hash ^= NumContainers.GetHashCode();
      if (UsedMemoryMb != 0L) hash ^= UsedMemoryMb.GetHashCode();
      if (AvailableMemoryMb != 0L) hash ^= AvailableMemoryMb.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (State.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(State);
      }
      if (NumContainers != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumContainers);
      }
      if (UsedMemoryMb != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(UsedMemoryMb);
      }
      if (AvailableMemoryMb != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AvailableMemoryMb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (State.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(State);
      }
      if (NumContainers != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumContainers);
      }
      if (UsedMemoryMb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UsedMemoryMb);
      }
      if (AvailableMemoryMb != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AvailableMemoryMb);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YarnNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.State.Length != 0) {
        State = other.State;
      }
      if (other.NumContainers != 0L) {
        NumContainers = other.NumContainers;
      }
      if (other.UsedMemoryMb != 0L) {
        UsedMemoryMb = other.UsedMemoryMb;
      }
      if (other.AvailableMemoryMb != 0L) {
        AvailableMemoryMb = other.AvailableMemoryMb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            State = input.ReadString();
            break;
          }
          case 24: {
            NumContainers = input.ReadInt64();
            break;
          }
          case 32: {
            UsedMemoryMb = input.ReadInt64();
            break;
          }
          case 40: {
            AvailableMemoryMb = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class YarnInfo : pb::IMessage<YarnInfo> {
    private static readonly pb::MessageParser<YarnInfo> _parser = new pb::MessageParser<YarnInfo>(() => new YarnInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YarnInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnInfo(YarnInfo other) : this() {
      available_ = other.available_;
      liveNodes_ = other.liveNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YarnInfo Clone() {
      return new YarnInfo(this);
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 1;
    private bool available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "live_nodes" field.</summary>
    public const int LiveNodesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo> _repeated_liveNodes_codec
        = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo> liveNodes_ = new pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Dataproc.Manager.V1.YarnNodeInfo> LiveNodes {
      get { return liveNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YarnInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YarnInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Available != other.Available) return false;
      if(!liveNodes_.Equals(other.liveNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Available != false) hash ^= Available.GetHashCode();
      hash ^= liveNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Available != false) {
        output.WriteRawTag(8);
        output.WriteBool(Available);
      }
      liveNodes_.WriteTo(output, _repeated_liveNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Available != false) {
        size += 1 + 1;
      }
      size += liveNodes_.CalculateSize(_repeated_liveNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YarnInfo other) {
      if (other == null) {
        return;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      liveNodes_.Add(other.liveNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Available = input.ReadBool();
            break;
          }
          case 18: {
            liveNodes_.AddEntriesFrom(input, _repeated_liveNodes_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ZookeeperInfo : pb::IMessage<ZookeeperInfo> {
    private static readonly pb::MessageParser<ZookeeperInfo> _parser = new pb::MessageParser<ZookeeperInfo>(() => new ZookeeperInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZookeeperInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZookeeperInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZookeeperInfo(ZookeeperInfo other) : this() {
      alive_ = other.alive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZookeeperInfo Clone() {
      return new ZookeeperInfo(this);
    }

    /// <summary>Field number for the "alive" field.</summary>
    public const int AliveFieldNumber = 1;
    private bool alive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alive {
      get { return alive_; }
      set {
        alive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZookeeperInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZookeeperInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Alive != other.Alive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alive != false) hash ^= Alive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alive != false) {
        output.WriteRawTag(8);
        output.WriteBool(Alive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZookeeperInfo other) {
      if (other == null) {
        return;
      }
      if (other.Alive != false) {
        Alive = other.Alive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Alive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OozieInfo : pb::IMessage<OozieInfo> {
    private static readonly pb::MessageParser<OozieInfo> _parser = new pb::MessageParser<OozieInfo>(() => new OozieInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OozieInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OozieInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OozieInfo(OozieInfo other) : this() {
      alive_ = other.alive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OozieInfo Clone() {
      return new OozieInfo(this);
    }

    /// <summary>Field number for the "alive" field.</summary>
    public const int AliveFieldNumber = 1;
    private bool alive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Alive {
      get { return alive_; }
      set {
        alive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OozieInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OozieInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Alive != other.Alive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alive != false) hash ^= Alive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alive != false) {
        output.WriteRawTag(8);
        output.WriteBool(Alive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OozieInfo other) {
      if (other == null) {
        return;
      }
      if (other.Alive != false) {
        Alive = other.Alive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Alive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Info : pb::IMessage<Info> {
    private static readonly pb::MessageParser<Info> _parser = new pb::MessageParser<Info>(() => new Info());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Info> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info(Info other) : this() {
      hdfs_ = other.hdfs_ != null ? other.hdfs_.Clone() : null;
      yarn_ = other.yarn_ != null ? other.yarn_.Clone() : null;
      hive_ = other.hive_ != null ? other.hive_.Clone() : null;
      zookeeper_ = other.zookeeper_ != null ? other.zookeeper_.Clone() : null;
      hbase_ = other.hbase_ != null ? other.hbase_.Clone() : null;
      oozie_ = other.oozie_ != null ? other.oozie_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Info Clone() {
      return new Info(this);
    }

    /// <summary>Field number for the "hdfs" field.</summary>
    public const int HdfsFieldNumber = 1;
    private global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo hdfs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo Hdfs {
      get { return hdfs_; }
      set {
        hdfs_ = value;
      }
    }

    /// <summary>Field number for the "yarn" field.</summary>
    public const int YarnFieldNumber = 2;
    private global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo yarn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo Yarn {
      get { return yarn_; }
      set {
        yarn_ = value;
      }
    }

    /// <summary>Field number for the "hive" field.</summary>
    public const int HiveFieldNumber = 3;
    private global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo hive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo Hive {
      get { return hive_; }
      set {
        hive_ = value;
      }
    }

    /// <summary>Field number for the "zookeeper" field.</summary>
    public const int ZookeeperFieldNumber = 4;
    private global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo zookeeper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo Zookeeper {
      get { return zookeeper_; }
      set {
        zookeeper_ = value;
      }
    }

    /// <summary>Field number for the "hbase" field.</summary>
    public const int HbaseFieldNumber = 5;
    private global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo hbase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo Hbase {
      get { return hbase_; }
      set {
        hbase_ = value;
      }
    }

    /// <summary>Field number for the "oozie" field.</summary>
    public const int OozieFieldNumber = 6;
    private global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo oozie_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo Oozie {
      get { return oozie_; }
      set {
        oozie_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Info);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Info other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Hdfs, other.Hdfs)) return false;
      if (!object.Equals(Yarn, other.Yarn)) return false;
      if (!object.Equals(Hive, other.Hive)) return false;
      if (!object.Equals(Zookeeper, other.Zookeeper)) return false;
      if (!object.Equals(Hbase, other.Hbase)) return false;
      if (!object.Equals(Oozie, other.Oozie)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (hdfs_ != null) hash ^= Hdfs.GetHashCode();
      if (yarn_ != null) hash ^= Yarn.GetHashCode();
      if (hive_ != null) hash ^= Hive.GetHashCode();
      if (zookeeper_ != null) hash ^= Zookeeper.GetHashCode();
      if (hbase_ != null) hash ^= Hbase.GetHashCode();
      if (oozie_ != null) hash ^= Oozie.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (hdfs_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Hdfs);
      }
      if (yarn_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Yarn);
      }
      if (hive_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Hive);
      }
      if (zookeeper_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Zookeeper);
      }
      if (hbase_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hbase);
      }
      if (oozie_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Oozie);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (hdfs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdfs);
      }
      if (yarn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yarn);
      }
      if (hive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hive);
      }
      if (zookeeper_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Zookeeper);
      }
      if (hbase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hbase);
      }
      if (oozie_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oozie);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Info other) {
      if (other == null) {
        return;
      }
      if (other.hdfs_ != null) {
        if (hdfs_ == null) {
          Hdfs = new global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo();
        }
        Hdfs.MergeFrom(other.Hdfs);
      }
      if (other.yarn_ != null) {
        if (yarn_ == null) {
          Yarn = new global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo();
        }
        Yarn.MergeFrom(other.Yarn);
      }
      if (other.hive_ != null) {
        if (hive_ == null) {
          Hive = new global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo();
        }
        Hive.MergeFrom(other.Hive);
      }
      if (other.zookeeper_ != null) {
        if (zookeeper_ == null) {
          Zookeeper = new global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo();
        }
        Zookeeper.MergeFrom(other.Zookeeper);
      }
      if (other.hbase_ != null) {
        if (hbase_ == null) {
          Hbase = new global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo();
        }
        Hbase.MergeFrom(other.Hbase);
      }
      if (other.oozie_ != null) {
        if (oozie_ == null) {
          Oozie = new global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo();
        }
        Oozie.MergeFrom(other.Oozie);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (hdfs_ == null) {
              Hdfs = new global::Yandex.Cloud.Dataproc.Manager.V1.HDFSInfo();
            }
            input.ReadMessage(Hdfs);
            break;
          }
          case 18: {
            if (yarn_ == null) {
              Yarn = new global::Yandex.Cloud.Dataproc.Manager.V1.YarnInfo();
            }
            input.ReadMessage(Yarn);
            break;
          }
          case 26: {
            if (hive_ == null) {
              Hive = new global::Yandex.Cloud.Dataproc.Manager.V1.HiveInfo();
            }
            input.ReadMessage(Hive);
            break;
          }
          case 34: {
            if (zookeeper_ == null) {
              Zookeeper = new global::Yandex.Cloud.Dataproc.Manager.V1.ZookeeperInfo();
            }
            input.ReadMessage(Zookeeper);
            break;
          }
          case 42: {
            if (hbase_ == null) {
              Hbase = new global::Yandex.Cloud.Dataproc.Manager.V1.HbaseInfo();
            }
            input.ReadMessage(Hbase);
            break;
          }
          case 50: {
            if (oozie_ == null) {
              Oozie = new global::Yandex.Cloud.Dataproc.Manager.V1.OozieInfo();
            }
            input.ReadMessage(Oozie);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message containing the host status report.
  /// </summary>
  internal sealed partial class ReportRequest : pb::IMessage<ReportRequest> {
    private static readonly pb::MessageParser<ReportRequest> _parser = new pb::MessageParser<ReportRequest>(() => new ReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest(ReportRequest other) : this() {
      cid_ = other.cid_;
      topologyRevision_ = other.topologyRevision_;
      info_ = other.info_ != null ? other.info_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportRequest Clone() {
      return new ReportRequest(this);
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 1;
    private string cid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cid {
      get { return cid_; }
      set {
        cid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "topology_revision" field.</summary>
    public const int TopologyRevisionFieldNumber = 2;
    private long topologyRevision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TopologyRevision {
      get { return topologyRevision_; }
      set {
        topologyRevision_ = value;
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 3;
    private global::Yandex.Cloud.Dataproc.Manager.V1.Info info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Dataproc.Manager.V1.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cid != other.Cid) return false;
      if (TopologyRevision != other.TopologyRevision) return false;
      if (!object.Equals(Info, other.Info)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cid.Length != 0) hash ^= Cid.GetHashCode();
      if (TopologyRevision != 0L) hash ^= TopologyRevision.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Cid);
      }
      if (TopologyRevision != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TopologyRevision);
      }
      if (info_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cid);
      }
      if (TopologyRevision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TopologyRevision);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cid.Length != 0) {
        Cid = other.Cid;
      }
      if (other.TopologyRevision != 0L) {
        TopologyRevision = other.TopologyRevision;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Yandex.Cloud.Dataproc.Manager.V1.Info();
        }
        Info.MergeFrom(other.Info);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Cid = input.ReadString();
            break;
          }
          case 16: {
            TopologyRevision = input.ReadInt64();
            break;
          }
          case 26: {
            if (info_ == null) {
              Info = new global::Yandex.Cloud.Dataproc.Manager.V1.Info();
            }
            input.ReadMessage(Info);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the agent commands to apply on host.
  /// </summary>
  internal sealed partial class ReportReply : pb::IMessage<ReportReply> {
    private static readonly pb::MessageParser<ReportReply> _parser = new pb::MessageParser<ReportReply>(() => new ReportReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Dataproc.Manager.V1.ManagerServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReply(ReportReply other) : this() {
      decommissionTimeout_ = other.decommissionTimeout_;
      yarnHostsToDecommission_ = other.yarnHostsToDecommission_.Clone();
      hdfsHostsToDecommission_ = other.hdfsHostsToDecommission_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportReply Clone() {
      return new ReportReply(this);
    }

    /// <summary>Field number for the "decommission_timeout" field.</summary>
    public const int DecommissionTimeoutFieldNumber = 1;
    private long decommissionTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DecommissionTimeout {
      get { return decommissionTimeout_; }
      set {
        decommissionTimeout_ = value;
      }
    }

    /// <summary>Field number for the "yarn_hosts_to_decommission" field.</summary>
    public const int YarnHostsToDecommissionFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_yarnHostsToDecommission_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> yarnHostsToDecommission_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> YarnHostsToDecommission {
      get { return yarnHostsToDecommission_; }
    }

    /// <summary>Field number for the "hdfs_hosts_to_decommission" field.</summary>
    public const int HdfsHostsToDecommissionFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_hdfsHostsToDecommission_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> hdfsHostsToDecommission_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> HdfsHostsToDecommission {
      get { return hdfsHostsToDecommission_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DecommissionTimeout != other.DecommissionTimeout) return false;
      if(!yarnHostsToDecommission_.Equals(other.yarnHostsToDecommission_)) return false;
      if(!hdfsHostsToDecommission_.Equals(other.hdfsHostsToDecommission_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DecommissionTimeout != 0L) hash ^= DecommissionTimeout.GetHashCode();
      hash ^= yarnHostsToDecommission_.GetHashCode();
      hash ^= hdfsHostsToDecommission_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DecommissionTimeout != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DecommissionTimeout);
      }
      yarnHostsToDecommission_.WriteTo(output, _repeated_yarnHostsToDecommission_codec);
      hdfsHostsToDecommission_.WriteTo(output, _repeated_hdfsHostsToDecommission_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DecommissionTimeout != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DecommissionTimeout);
      }
      size += yarnHostsToDecommission_.CalculateSize(_repeated_yarnHostsToDecommission_codec);
      size += hdfsHostsToDecommission_.CalculateSize(_repeated_hdfsHostsToDecommission_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportReply other) {
      if (other == null) {
        return;
      }
      if (other.DecommissionTimeout != 0L) {
        DecommissionTimeout = other.DecommissionTimeout;
      }
      yarnHostsToDecommission_.Add(other.yarnHostsToDecommission_);
      hdfsHostsToDecommission_.Add(other.hdfsHostsToDecommission_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DecommissionTimeout = input.ReadInt64();
            break;
          }
          case 18: {
            yarnHostsToDecommission_.AddEntriesFrom(input, _repeated_yarnHostsToDecommission_codec);
            break;
          }
          case 26: {
            hdfsHostsToDecommission_.AddEntriesFrom(input, _repeated_hdfsHostsToDecommission_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
