// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/compute/v1/disk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Compute.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/compute/v1/disk.proto</summary>
  internal static partial class DiskReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/compute/v1/disk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DiskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJ5YW5kZXgvY2xvdWQvY29tcHV0ZS92MS9kaXNrLnByb3RvEhd5YW5kZXgu",
            "Y2xvdWQuY29tcHV0ZS52MRofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5w",
            "cm90byKKBAoERGlzaxIKCgJpZBgBIAEoCRIRCglmb2xkZXJfaWQYAiABKAkS",
            "LgoKY3JlYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASDAoEbmFtZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRI5CgZsYWJl",
            "bHMYBiADKAsyKS55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5EaXNrLkxhYmVs",
            "c0VudHJ5Eg8KB3R5cGVfaWQYByABKAkSDwoHem9uZV9pZBgIIAEoCRIMCgRz",
            "aXplGAkgASgDEhMKC3Byb2R1Y3RfaWRzGAogAygJEjQKBnN0YXR1cxgLIAEo",
            "DjIkLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkRpc2suU3RhdHVzEhkKD3Nv",
            "dXJjZV9pbWFnZV9pZBgMIAEoCUgAEhwKEnNvdXJjZV9zbmFwc2hvdF9pZBgN",
            "IAEoCUgAEhQKDGluc3RhbmNlX2lkcxgOIAMoCRotCgtMYWJlbHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlIKBlN0YXR1cxIWChJT",
            "VEFUVVNfVU5TUEVDSUZJRUQQABIMCghDUkVBVElORxABEgkKBVJFQURZEAIS",
            "CQoFRVJST1IQAxIMCghERUxFVElORxAEQggKBnNvdXJjZUJiCht5YW5kZXgu",
            "Y2xvdWQuYXBpLmNvbXB1dGUudjFaQ2dpdGh1Yi5jb20veWFuZGV4LWNsb3Vk",
            "L2dvLWdlbnByb3RvL3lhbmRleC9jbG91ZC9jb21wdXRlL3YxO2NvbXB1dGVi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Disk), global::Yandex.Cloud.Compute.V1.Disk.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "TypeId", "ZoneId", "Size", "ProductIds", "Status", "SourceImageId", "SourceSnapshotId", "InstanceIds" }, new[]{ "Source" }, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Disk.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A Disk resource. For more information, see [Disks](/docs/compute/concepts/disk).
  /// </summary>
  internal sealed partial class Disk : pb::IMessage<Disk> {
    private static readonly pb::MessageParser<Disk> _parser = new pb::MessageParser<Disk>(() => new Disk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Disk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disk(Disk other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      typeId_ = other.typeId_;
      zoneId_ = other.zoneId_;
      size_ = other.size_;
      productIds_ = other.productIds_.Clone();
      status_ = other.status_;
      instanceIds_ = other.instanceIds_.Clone();
      switch (other.SourceCase) {
        case SourceOneofCase.SourceImageId:
          SourceImageId = other.SourceImageId;
          break;
        case SourceOneofCase.SourceSnapshotId:
          SourceSnapshotId = other.SourceSnapshotId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Disk Clone() {
      return new Disk(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the disk belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the disk. 1-63 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the disk. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs. Maximum of 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "type_id" field.</summary>
    public const int TypeIdFieldNumber = 7;
    private string typeId_ = "";
    /// <summary>
    /// ID of the disk type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeId {
      get { return typeId_; }
      set {
        typeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 8;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the disk resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 9;
    private long size_;
    /// <summary>
    /// Size of the disk, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "product_ids" field.</summary>
    public const int ProductIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_productIds_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> productIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// License IDs that indicate which licenses are attached to this resource.
    /// License IDs are used to calculate additional charges for the use of the virtual machine.
    ///
    /// The correct license ID is generated by Yandex.Cloud. IDs are inherited by new resources created from this resource.
    ///
    /// If you know the license IDs, specify them when you create the image.
    /// For example, if you create a disk image using a third-party utility and load it into Yandex Object Storage, the license IDs will be lost.
    /// You can specify them in the [yandex.cloud.compute.v1.ImageService.Create] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ProductIds {
      get { return productIds_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 11;
    private global::Yandex.Cloud.Compute.V1.Disk.Types.Status status_ = 0;
    /// <summary>
    /// Current status of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Disk.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "source_image_id" field.</summary>
    public const int SourceImageIdFieldNumber = 12;
    /// <summary>
    /// ID of the image that was used for disk creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceImageId {
      get { return sourceCase_ == SourceOneofCase.SourceImageId ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.SourceImageId;
      }
    }

    /// <summary>Field number for the "source_snapshot_id" field.</summary>
    public const int SourceSnapshotIdFieldNumber = 13;
    /// <summary>
    /// ID of the snapshot that was used for disk creation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceSnapshotId {
      get { return sourceCase_ == SourceOneofCase.SourceSnapshotId ? (string) source_ : ""; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        sourceCase_ = SourceOneofCase.SourceSnapshotId;
      }
    }

    /// <summary>Field number for the "instance_ids" field.</summary>
    public const int InstanceIdsFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_instanceIds_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> instanceIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Array of instances to which the disk is attached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> InstanceIds {
      get { return instanceIds_; }
    }

    private object source_;
    /// <summary>Enum of possible cases for the "source" oneof.</summary>
    public enum SourceOneofCase {
      None = 0,
      SourceImageId = 12,
      SourceSnapshotId = 13,
    }
    private SourceOneofCase sourceCase_ = SourceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceOneofCase SourceCase {
      get { return sourceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSource() {
      sourceCase_ = SourceOneofCase.None;
      source_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Disk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Disk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (TypeId != other.TypeId) return false;
      if (ZoneId != other.ZoneId) return false;
      if (Size != other.Size) return false;
      if(!productIds_.Equals(other.productIds_)) return false;
      if (Status != other.Status) return false;
      if (SourceImageId != other.SourceImageId) return false;
      if (SourceSnapshotId != other.SourceSnapshotId) return false;
      if(!instanceIds_.Equals(other.instanceIds_)) return false;
      if (SourceCase != other.SourceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (TypeId.Length != 0) hash ^= TypeId.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      hash ^= productIds_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (sourceCase_ == SourceOneofCase.SourceImageId) hash ^= SourceImageId.GetHashCode();
      if (sourceCase_ == SourceOneofCase.SourceSnapshotId) hash ^= SourceSnapshotId.GetHashCode();
      hash ^= instanceIds_.GetHashCode();
      hash ^= (int) sourceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (TypeId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TypeId);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ZoneId);
      }
      if (Size != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Size);
      }
      productIds_.WriteTo(output, _repeated_productIds_codec);
      if (Status != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Status);
      }
      if (sourceCase_ == SourceOneofCase.SourceImageId) {
        output.WriteRawTag(98);
        output.WriteString(SourceImageId);
      }
      if (sourceCase_ == SourceOneofCase.SourceSnapshotId) {
        output.WriteRawTag(106);
        output.WriteString(SourceSnapshotId);
      }
      instanceIds_.WriteTo(output, _repeated_instanceIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (TypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeId);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      size += productIds_.CalculateSize(_repeated_productIds_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (sourceCase_ == SourceOneofCase.SourceImageId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceImageId);
      }
      if (sourceCase_ == SourceOneofCase.SourceSnapshotId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceSnapshotId);
      }
      size += instanceIds_.CalculateSize(_repeated_instanceIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Disk other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.TypeId.Length != 0) {
        TypeId = other.TypeId;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      productIds_.Add(other.productIds_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      instanceIds_.Add(other.instanceIds_);
      switch (other.SourceCase) {
        case SourceOneofCase.SourceImageId:
          SourceImageId = other.SourceImageId;
          break;
        case SourceOneofCase.SourceSnapshotId:
          SourceSnapshotId = other.SourceSnapshotId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 58: {
            TypeId = input.ReadString();
            break;
          }
          case 66: {
            ZoneId = input.ReadString();
            break;
          }
          case 72: {
            Size = input.ReadInt64();
            break;
          }
          case 82: {
            productIds_.AddEntriesFrom(input, _repeated_productIds_codec);
            break;
          }
          case 88: {
            Status = (global::Yandex.Cloud.Compute.V1.Disk.Types.Status) input.ReadEnum();
            break;
          }
          case 98: {
            SourceImageId = input.ReadString();
            break;
          }
          case 106: {
            SourceSnapshotId = input.ReadString();
            break;
          }
          case 114: {
            instanceIds_.AddEntriesFrom(input, _repeated_instanceIds_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Disk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Disk is being created.
        /// </summary>
        [pbr::OriginalName("CREATING")] Creating = 1,
        /// <summary>
        /// Disk is ready to use.
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 2,
        /// <summary>
        /// Disk encountered a problem and cannot operate.
        /// </summary>
        [pbr::OriginalName("ERROR")] Error = 3,
        /// <summary>
        /// Disk is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 4,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
