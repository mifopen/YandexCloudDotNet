// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/compute/v1/disk_placement_group_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Compute.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/compute/v1/disk_placement_group_service.proto</summary>
  internal static partial class DiskPlacementGroupServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/compute/v1/disk_placement_group_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DiskPlacementGroupServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjp5YW5kZXgvY2xvdWQvY29tcHV0ZS92MS9kaXNrX3BsYWNlbWVudF9ncm91",
            "cF9zZXJ2aWNlLnByb3RvEhd5YW5kZXguY2xvdWQuY29tcHV0ZS52MRocZ29v",
            "Z2xlL2FwaS9hbm5vdGF0aW9ucy5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2Zp",
            "ZWxkX21hc2sucHJvdG8aIHlhbmRleC9jbG91ZC9hcGkvb3BlcmF0aW9uLnBy",
            "b3RvGiJ5YW5kZXgvY2xvdWQvY29tcHV0ZS92MS9kaXNrLnByb3RvGjJ5YW5k",
            "ZXgvY2xvdWQvY29tcHV0ZS92MS9kaXNrX3BsYWNlbWVudF9ncm91cC5wcm90",
            "bxomeWFuZGV4L2Nsb3VkL29wZXJhdGlvbi9vcGVyYXRpb24ucHJvdG8aHXlh",
            "bmRleC9jbG91ZC92YWxpZGF0aW9uLnByb3RvIk0KHEdldERpc2tQbGFjZW1l",
            "bnRHcm91cFJlcXVlc3QSLQoXZGlza19wbGFjZW1lbnRfZ3JvdXBfaWQYASAB",
            "KAlCDOjHMQGKyDEEPD01MCKbAQoeTGlzdERpc2tQbGFjZW1lbnRHcm91cHNS",
            "ZXF1ZXN0Eh8KCWZvbGRlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBh",
            "Z2Vfc2l6ZRgCIAEoA0IK+scxBjw9MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJ",
            "QgmKyDEFPD0xMDASGgoGZmlsdGVyGAQgASgJQgqKyDEGPD0xMDAwIoYBCh9M",
            "aXN0RGlza1BsYWNlbWVudEdyb3Vwc1Jlc3BvbnNlEkoKFWRpc2tfcGxhY2Vt",
            "ZW50X2dyb3VwcxgBIAMoCzIrLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkRp",
            "c2tQbGFjZW1lbnRHcm91cBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAki+wMK",
            "H0NyZWF0ZURpc2tQbGFjZW1lbnRHcm91cFJlcXVlc3QSHwoJZm9sZGVyX2lk",
            "GAEgASgJQgzoxzEBisgxBDw9NTASMgoEbmFtZRgCIAEoCUIk8scxIHxbYS16",
            "XShbLWEtejAtOV17MCw2MX1bYS16MC05XSk/Eh4KC2Rlc2NyaXB0aW9uGAMg",
            "ASgJQgmKyDEFPD0yNTYSnQEKBmxhYmVscxgEIAMoCzJELnlhbmRleC5jbG91",
            "ZC5jb21wdXRlLnYxLkNyZWF0ZURpc2tQbGFjZW1lbnRHcm91cFJlcXVlc3Qu",
            "TGFiZWxzRW50cnlCR4LIMQQ8PTY0isgxBDw9NjPyxzEPWy1fLi9cQDAtOWEt",
            "el0qssgxBhoEMS02M7LIMRYSFFthLXpdWy1fLi9cQDAtOWEtel0qEh0KB3pv",
            "bmVfaWQYBSABKAlCDOjHMQGKyDEEPD01MBJZChlzcHJlYWRfcGxhY2VtZW50",
            "X3N0cmF0ZWd5GAYgASgLMjQueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuRGlz",
            "a1NwcmVhZFBsYWNlbWVudFN0cmF0ZWd5SAAaLQoLTGFiZWxzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIaChJwbGFjZW1lbnRfc3Ry",
            "YXRlZ3kSBMDBMQEiQwogQ3JlYXRlRGlza1BsYWNlbWVudEdyb3VwTWV0YWRh",
            "dGESHwoXZGlza19wbGFjZW1lbnRfZ3JvdXBfaWQYASABKAkipAMKH1VwZGF0",
            "ZURpc2tQbGFjZW1lbnRHcm91cFJlcXVlc3QSLQoXZGlza19wbGFjZW1lbnRf",
            "Z3JvdXBfaWQYASABKAlCDOjHMQGKyDEEPD01MBIvCgt1cGRhdGVfbWFzaxgC",
            "IAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sSMgoEbmFtZRgDIAEo",
            "CUIk8scxIHxbYS16XShbLWEtejAtOV17MCw2MX1bYS16MC05XSk/Eh4KC2Rl",
            "c2NyaXB0aW9uGAQgASgJQgmKyDEFPD0yNTYSnQEKBmxhYmVscxgFIAMoCzJE",
            "LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLlVwZGF0ZURpc2tQbGFjZW1lbnRH",
            "cm91cFJlcXVlc3QuTGFiZWxzRW50cnlCR4LIMQQ8PTY0isgxBDw9NjPyxzEP",
            "Wy1fLi9cQDAtOWEtel0qssgxBhoEMS02M7LIMRYSFFthLXpdWy1fLi9cQDAt",
            "OWEtel0qGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEiQwogVXBkYXRlRGlza1BsYWNlbWVudEdyb3VwTWV0YWRhdGES",
            "HwoXZGlza19wbGFjZW1lbnRfZ3JvdXBfaWQYASABKAkiUAofRGVsZXRlRGlz",
            "a1BsYWNlbWVudEdyb3VwUmVxdWVzdBItChdkaXNrX3BsYWNlbWVudF9ncm91",
            "cF9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwIkMKIERlbGV0ZURpc2tQbGFjZW1l",
            "bnRHcm91cE1ldGFkYXRhEh8KF2Rpc2tfcGxhY2VtZW50X2dyb3VwX2lkGAEg",
            "ASgJIpEBCiJMaXN0RGlza1BsYWNlbWVudEdyb3VwRGlza3NSZXF1ZXN0Ei0K",
            "F2Rpc2tfcGxhY2VtZW50X2dyb3VwX2lkGAEgASgJQgzoxzEBisgxBDw9NTAS",
            "HQoJcGFnZV9zaXplGAIgASgDQgr6xzEGPD0xMDAwEh0KCnBhZ2VfdG9rZW4Y",
            "AyABKAlCCYrIMQU8PTEwMCJsCiNMaXN0RGlza1BsYWNlbWVudEdyb3VwRGlz",
            "a3NSZXNwb25zZRIsCgVkaXNrcxgBIAMoCzIdLnlhbmRleC5jbG91ZC5jb21w",
            "dXRlLnYxLkRpc2sSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIpYBCidMaXN0",
            "RGlza1BsYWNlbWVudEdyb3VwT3BlcmF0aW9uc1JlcXVlc3QSLQoXZGlza19w",
            "bGFjZW1lbnRfZ3JvdXBfaWQYASABKAlCDOjHMQGKyDEEPD01MBIdCglwYWdl",
            "X3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgDIAEoCUIJ",
            "isgxBTw9MTAwInoKKExpc3REaXNrUGxhY2VtZW50R3JvdXBPcGVyYXRpb25z",
            "UmVzcG9uc2USNQoKb3BlcmF0aW9ucxgBIAMoCzIhLnlhbmRleC5jbG91ZC5v",
            "cGVyYXRpb24uT3BlcmF0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCTLF",
            "CwoZRGlza1BsYWNlbWVudEdyb3VwU2VydmljZRKsAQoDR2V0EjUueWFuZGV4",
            "LmNsb3VkLmNvbXB1dGUudjEuR2V0RGlza1BsYWNlbWVudEdyb3VwUmVxdWVz",
            "dBorLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkRpc2tQbGFjZW1lbnRHcm91",
            "cCJBgtPkkwI7EjkvY29tcHV0ZS92MS9kaXNrUGxhY2VtZW50R3JvdXBzL3tk",
            "aXNrX3BsYWNlbWVudF9ncm91cF9pZH0SogEKBExpc3QSNy55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5MaXN0RGlza1BsYWNlbWVudEdyb3Vwc1JlcXVlc3Qa",
            "OC55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5MaXN0RGlza1BsYWNlbWVudEdy",
            "b3Vwc1Jlc3BvbnNlIieC0+STAiESHy9jb21wdXRlL3YxL2Rpc2tQbGFjZW1l",
            "bnRHcm91cHMSywEKBkNyZWF0ZRI4LnlhbmRleC5jbG91ZC5jb21wdXRlLnYx",
            "LkNyZWF0ZURpc2tQbGFjZW1lbnRHcm91cFJlcXVlc3QaIS55YW5kZXguY2xv",
            "dWQub3BlcmF0aW9uLk9wZXJhdGlvbiJkgtPkkwIkIh8vY29tcHV0ZS92MS9k",
            "aXNrUGxhY2VtZW50R3JvdXBzOgEqstIqNgogQ3JlYXRlRGlza1BsYWNlbWVu",
            "dEdyb3VwTWV0YWRhdGESEkRpc2tQbGFjZW1lbnRHcm91cBLlAQoGVXBkYXRl",
            "EjgueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuVXBkYXRlRGlza1BsYWNlbWVu",
            "dEdyb3VwUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0",
            "aW9uIn6C0+STAj4yOS9jb21wdXRlL3YxL2Rpc2tQbGFjZW1lbnRHcm91cHMv",
            "e2Rpc2tfcGxhY2VtZW50X2dyb3VwX2lkfToBKrLSKjYKIFVwZGF0ZURpc2tQ",
            "bGFjZW1lbnRHcm91cE1ldGFkYXRhEhJEaXNrUGxhY2VtZW50R3JvdXAS5QEK",
            "BkRlbGV0ZRI4LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkRlbGV0ZURpc2tQ",
            "bGFjZW1lbnRHcm91cFJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9u",
            "Lk9wZXJhdGlvbiJ+gtPkkwI7KjkvY29tcHV0ZS92MS9kaXNrUGxhY2VtZW50",
            "R3JvdXBzL3tkaXNrX3BsYWNlbWVudF9ncm91cF9pZH2y0io5CiBEZWxldGVE",
            "aXNrUGxhY2VtZW50R3JvdXBNZXRhZGF0YRIVZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5Es8BCglMaXN0RGlza3MSOy55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5M",
            "aXN0RGlza1BsYWNlbWVudEdyb3VwRGlza3NSZXF1ZXN0GjwueWFuZGV4LmNs",
            "b3VkLmNvbXB1dGUudjEuTGlzdERpc2tQbGFjZW1lbnRHcm91cERpc2tzUmVz",
            "cG9uc2UiR4LT5JMCQRI/L2NvbXB1dGUvdjEvZGlza1BsYWNlbWVudEdyb3Vw",
            "cy97ZGlza19wbGFjZW1lbnRfZ3JvdXBfaWR9L2Rpc2tzEuMBCg5MaXN0T3Bl",
            "cmF0aW9ucxJALnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkxpc3REaXNrUGxh",
            "Y2VtZW50R3JvdXBPcGVyYXRpb25zUmVxdWVzdBpBLnlhbmRleC5jbG91ZC5j",
            "b21wdXRlLnYxLkxpc3REaXNrUGxhY2VtZW50R3JvdXBPcGVyYXRpb25zUmVz",
            "cG9uc2UiTILT5JMCRhJEL2NvbXB1dGUvdjEvZGlza1BsYWNlbWVudEdyb3Vw",
            "cy97ZGlza19wbGFjZW1lbnRfZ3JvdXBfaWR9L29wZXJhdGlvbnNCYgobeWFu",
            "ZGV4LmNsb3VkLmFwaS5jb21wdXRlLnYxWkNnaXRodWIuY29tL3lhbmRleC1j",
            "bG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvY29tcHV0ZS92MTtjb21w",
            "dXRlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Compute.V1.DiskReflection.Descriptor, global::Yandex.Cloud.Compute.V1.DiskPlacementGroupReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.GetDiskPlacementGroupRequest), global::Yandex.Cloud.Compute.V1.GetDiskPlacementGroupRequest.Parser, new[]{ "DiskPlacementGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupsRequest), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupsRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupsResponse), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupsResponse.Parser, new[]{ "DiskPlacementGroups", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.CreateDiskPlacementGroupRequest), global::Yandex.Cloud.Compute.V1.CreateDiskPlacementGroupRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "ZoneId", "SpreadPlacementStrategy" }, new[]{ "PlacementStrategy" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.CreateDiskPlacementGroupMetadata), global::Yandex.Cloud.Compute.V1.CreateDiskPlacementGroupMetadata.Parser, new[]{ "DiskPlacementGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateDiskPlacementGroupRequest), global::Yandex.Cloud.Compute.V1.UpdateDiskPlacementGroupRequest.Parser, new[]{ "DiskPlacementGroupId", "UpdateMask", "Name", "Description", "Labels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateDiskPlacementGroupMetadata), global::Yandex.Cloud.Compute.V1.UpdateDiskPlacementGroupMetadata.Parser, new[]{ "DiskPlacementGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DeleteDiskPlacementGroupRequest), global::Yandex.Cloud.Compute.V1.DeleteDiskPlacementGroupRequest.Parser, new[]{ "DiskPlacementGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DeleteDiskPlacementGroupMetadata), global::Yandex.Cloud.Compute.V1.DeleteDiskPlacementGroupMetadata.Parser, new[]{ "DiskPlacementGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupDisksRequest), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupDisksRequest.Parser, new[]{ "DiskPlacementGroupId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupDisksResponse), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupDisksResponse.Parser, new[]{ "Disks", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupOperationsRequest), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupOperationsRequest.Parser, new[]{ "DiskPlacementGroupId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupOperationsResponse), global::Yandex.Cloud.Compute.V1.ListDiskPlacementGroupOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetDiskPlacementGroupRequest : pb::IMessage<GetDiskPlacementGroupRequest> {
    private static readonly pb::MessageParser<GetDiskPlacementGroupRequest> _parser = new pb::MessageParser<GetDiskPlacementGroupRequest>(() => new GetDiskPlacementGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDiskPlacementGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiskPlacementGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiskPlacementGroupRequest(GetDiskPlacementGroupRequest other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiskPlacementGroupRequest Clone() {
      return new GetDiskPlacementGroupRequest(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group to return.
    /// To get the placement group ID, use [DiskPlacementGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDiskPlacementGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDiskPlacementGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDiskPlacementGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupsRequest : pb::IMessage<ListDiskPlacementGroupsRequest> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupsRequest> _parser = new pb::MessageParser<ListDiskPlacementGroupsRequest>(() => new ListDiskPlacementGroupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsRequest(ListDiskPlacementGroupsRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsRequest Clone() {
      return new ListDiskPlacementGroupsRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list placement groups in.
    /// To get the folder ID, use [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListDiskPlacementGroupsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results,
    /// set [page_token] to the [ListDiskPlacementGroupsResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// Currently you can use filtering only on the [DiskPlacementGroup.name] field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupsResponse : pb::IMessage<ListDiskPlacementGroupsResponse> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupsResponse> _parser = new pb::MessageParser<ListDiskPlacementGroupsResponse>(() => new ListDiskPlacementGroupsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsResponse(ListDiskPlacementGroupsResponse other) : this() {
      diskPlacementGroups_ = other.diskPlacementGroups_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupsResponse Clone() {
      return new ListDiskPlacementGroupsResponse(this);
    }

    /// <summary>Field number for the "disk_placement_groups" field.</summary>
    public const int DiskPlacementGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.DiskPlacementGroup> _repeated_diskPlacementGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Compute.V1.DiskPlacementGroup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.DiskPlacementGroup> diskPlacementGroups_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.DiskPlacementGroup>();
    /// <summary>
    /// Lists placement groups for the specified folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.DiskPlacementGroup> DiskPlacementGroups {
      get { return diskPlacementGroups_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListDiskPlacementGroupsRequest.page_size], use
    /// [next_page_token] as the value
    /// for the [ListDiskPlacementGroupsRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diskPlacementGroups_.Equals(other.diskPlacementGroups_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diskPlacementGroups_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diskPlacementGroups_.WriteTo(output, _repeated_diskPlacementGroups_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diskPlacementGroups_.CalculateSize(_repeated_diskPlacementGroups_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupsResponse other) {
      if (other == null) {
        return;
      }
      diskPlacementGroups_.Add(other.diskPlacementGroups_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            diskPlacementGroups_.AddEntriesFrom(input, _repeated_diskPlacementGroups_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateDiskPlacementGroupRequest : pb::IMessage<CreateDiskPlacementGroupRequest> {
    private static readonly pb::MessageParser<CreateDiskPlacementGroupRequest> _parser = new pb::MessageParser<CreateDiskPlacementGroupRequest>(() => new CreateDiskPlacementGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDiskPlacementGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupRequest(CreateDiskPlacementGroupRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      zoneId_ = other.zoneId_;
      switch (other.PlacementStrategyCase) {
        case PlacementStrategyOneofCase.SpreadPlacementStrategy:
          SpreadPlacementStrategy = other.SpreadPlacementStrategy.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupRequest Clone() {
      return new CreateDiskPlacementGroupRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create a placement group in.
    /// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 5;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the placement group resides.
    /// To get a list of available zones use the [yandex.cloud.compute.v1.ZoneService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spread_placement_strategy" field.</summary>
    public const int SpreadPlacementStrategyFieldNumber = 6;
    /// <summary>
    /// Distribute disks over distinct failure domains.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.DiskSpreadPlacementStrategy SpreadPlacementStrategy {
      get { return placementStrategyCase_ == PlacementStrategyOneofCase.SpreadPlacementStrategy ? (global::Yandex.Cloud.Compute.V1.DiskSpreadPlacementStrategy) placementStrategy_ : null; }
      set {
        placementStrategy_ = value;
        placementStrategyCase_ = value == null ? PlacementStrategyOneofCase.None : PlacementStrategyOneofCase.SpreadPlacementStrategy;
      }
    }

    private object placementStrategy_;
    /// <summary>Enum of possible cases for the "placement_strategy" oneof.</summary>
    public enum PlacementStrategyOneofCase {
      None = 0,
      SpreadPlacementStrategy = 6,
    }
    private PlacementStrategyOneofCase placementStrategyCase_ = PlacementStrategyOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlacementStrategyOneofCase PlacementStrategyCase {
      get { return placementStrategyCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPlacementStrategy() {
      placementStrategyCase_ = PlacementStrategyOneofCase.None;
      placementStrategy_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDiskPlacementGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDiskPlacementGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (ZoneId != other.ZoneId) return false;
      if (!object.Equals(SpreadPlacementStrategy, other.SpreadPlacementStrategy)) return false;
      if (PlacementStrategyCase != other.PlacementStrategyCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (placementStrategyCase_ == PlacementStrategyOneofCase.SpreadPlacementStrategy) hash ^= SpreadPlacementStrategy.GetHashCode();
      hash ^= (int) placementStrategyCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (ZoneId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ZoneId);
      }
      if (placementStrategyCase_ == PlacementStrategyOneofCase.SpreadPlacementStrategy) {
        output.WriteRawTag(50);
        output.WriteMessage(SpreadPlacementStrategy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (placementStrategyCase_ == PlacementStrategyOneofCase.SpreadPlacementStrategy) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SpreadPlacementStrategy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDiskPlacementGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      switch (other.PlacementStrategyCase) {
        case PlacementStrategyOneofCase.SpreadPlacementStrategy:
          if (SpreadPlacementStrategy == null) {
            SpreadPlacementStrategy = new global::Yandex.Cloud.Compute.V1.DiskSpreadPlacementStrategy();
          }
          SpreadPlacementStrategy.MergeFrom(other.SpreadPlacementStrategy);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            ZoneId = input.ReadString();
            break;
          }
          case 50: {
            global::Yandex.Cloud.Compute.V1.DiskSpreadPlacementStrategy subBuilder = new global::Yandex.Cloud.Compute.V1.DiskSpreadPlacementStrategy();
            if (placementStrategyCase_ == PlacementStrategyOneofCase.SpreadPlacementStrategy) {
              subBuilder.MergeFrom(SpreadPlacementStrategy);
            }
            input.ReadMessage(subBuilder);
            SpreadPlacementStrategy = subBuilder;
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateDiskPlacementGroupMetadata : pb::IMessage<CreateDiskPlacementGroupMetadata> {
    private static readonly pb::MessageParser<CreateDiskPlacementGroupMetadata> _parser = new pb::MessageParser<CreateDiskPlacementGroupMetadata>(() => new CreateDiskPlacementGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateDiskPlacementGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupMetadata(CreateDiskPlacementGroupMetadata other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateDiskPlacementGroupMetadata Clone() {
      return new CreateDiskPlacementGroupMetadata(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateDiskPlacementGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateDiskPlacementGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateDiskPlacementGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateDiskPlacementGroupRequest : pb::IMessage<UpdateDiskPlacementGroupRequest> {
    private static readonly pb::MessageParser<UpdateDiskPlacementGroupRequest> _parser = new pb::MessageParser<UpdateDiskPlacementGroupRequest>(() => new UpdateDiskPlacementGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDiskPlacementGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupRequest(UpdateDiskPlacementGroupRequest other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupRequest Clone() {
      return new UpdateDiskPlacementGroupRequest(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group to update.
    /// To get the placement group ID, use an [DiskPlacementGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the DiskPlacementGroup resource are going to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name of the placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description of the placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    ///
    /// The existing set of `labels` is completely replaced by the provided set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDiskPlacementGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDiskPlacementGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDiskPlacementGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateDiskPlacementGroupMetadata : pb::IMessage<UpdateDiskPlacementGroupMetadata> {
    private static readonly pb::MessageParser<UpdateDiskPlacementGroupMetadata> _parser = new pb::MessageParser<UpdateDiskPlacementGroupMetadata>(() => new UpdateDiskPlacementGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDiskPlacementGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupMetadata(UpdateDiskPlacementGroupMetadata other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDiskPlacementGroupMetadata Clone() {
      return new UpdateDiskPlacementGroupMetadata(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDiskPlacementGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDiskPlacementGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDiskPlacementGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteDiskPlacementGroupRequest : pb::IMessage<DeleteDiskPlacementGroupRequest> {
    private static readonly pb::MessageParser<DeleteDiskPlacementGroupRequest> _parser = new pb::MessageParser<DeleteDiskPlacementGroupRequest>(() => new DeleteDiskPlacementGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDiskPlacementGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupRequest(DeleteDiskPlacementGroupRequest other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupRequest Clone() {
      return new DeleteDiskPlacementGroupRequest(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group to delete.
    /// To get the placement group ID, use [DiskPlacementGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDiskPlacementGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDiskPlacementGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDiskPlacementGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteDiskPlacementGroupMetadata : pb::IMessage<DeleteDiskPlacementGroupMetadata> {
    private static readonly pb::MessageParser<DeleteDiskPlacementGroupMetadata> _parser = new pb::MessageParser<DeleteDiskPlacementGroupMetadata>(() => new DeleteDiskPlacementGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteDiskPlacementGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupMetadata(DeleteDiskPlacementGroupMetadata other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteDiskPlacementGroupMetadata Clone() {
      return new DeleteDiskPlacementGroupMetadata(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteDiskPlacementGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteDiskPlacementGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteDiskPlacementGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupDisksRequest : pb::IMessage<ListDiskPlacementGroupDisksRequest> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupDisksRequest> _parser = new pb::MessageParser<ListDiskPlacementGroupDisksRequest>(() => new ListDiskPlacementGroupDisksRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupDisksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksRequest(ListDiskPlacementGroupDisksRequest other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksRequest Clone() {
      return new ListDiskPlacementGroupDisksRequest(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group to list disks for.
    /// To get the placement group ID, use [DiskPlacementGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListDiskPlacementGroupDisksResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results,
    /// set [page_token] to the [ListDiskPlacementGroupDisksResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupDisksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupDisksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupDisksRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupDisksResponse : pb::IMessage<ListDiskPlacementGroupDisksResponse> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupDisksResponse> _parser = new pb::MessageParser<ListDiskPlacementGroupDisksResponse>(() => new ListDiskPlacementGroupDisksResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupDisksResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksResponse(ListDiskPlacementGroupDisksResponse other) : this() {
      disks_ = other.disks_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupDisksResponse Clone() {
      return new ListDiskPlacementGroupDisksResponse(this);
    }

    /// <summary>Field number for the "disks" field.</summary>
    public const int DisksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Disk> _repeated_disks_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Compute.V1.Disk.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Disk> disks_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Disk>();
    /// <summary>
    /// Lists disks for the specified placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Disk> Disks {
      get { return disks_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is more than [ListDiskPlacementGroupInstancesRequest.page_size], use
    /// [next_page_token] as the value
    /// for the [ListDiskPlacementGroupInstancesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupDisksResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupDisksResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!disks_.Equals(other.disks_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= disks_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      disks_.WriteTo(output, _repeated_disks_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += disks_.CalculateSize(_repeated_disks_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupDisksResponse other) {
      if (other == null) {
        return;
      }
      disks_.Add(other.disks_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            disks_.AddEntriesFrom(input, _repeated_disks_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupOperationsRequest : pb::IMessage<ListDiskPlacementGroupOperationsRequest> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupOperationsRequest> _parser = new pb::MessageParser<ListDiskPlacementGroupOperationsRequest>(() => new ListDiskPlacementGroupOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsRequest(ListDiskPlacementGroupOperationsRequest other) : this() {
      diskPlacementGroupId_ = other.diskPlacementGroupId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsRequest Clone() {
      return new ListDiskPlacementGroupOperationsRequest(this);
    }

    /// <summary>Field number for the "disk_placement_group_id" field.</summary>
    public const int DiskPlacementGroupIdFieldNumber = 1;
    private string diskPlacementGroupId_ = "";
    /// <summary>
    /// ID of the placement group to list operations for.
    /// To get the placement group ID, use [DiskPlacementGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskPlacementGroupId {
      get { return diskPlacementGroupId_; }
      set {
        diskPlacementGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListDiskPlacementGroupOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListDiskPlacementGroupOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskPlacementGroupId != other.DiskPlacementGroupId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskPlacementGroupId.Length != 0) hash ^= DiskPlacementGroupId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskPlacementGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskPlacementGroupId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskPlacementGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskPlacementGroupId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.DiskPlacementGroupId.Length != 0) {
        DiskPlacementGroupId = other.DiskPlacementGroupId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskPlacementGroupId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListDiskPlacementGroupOperationsResponse : pb::IMessage<ListDiskPlacementGroupOperationsResponse> {
    private static readonly pb::MessageParser<ListDiskPlacementGroupOperationsResponse> _parser = new pb::MessageParser<ListDiskPlacementGroupOperationsResponse>(() => new ListDiskPlacementGroupOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListDiskPlacementGroupOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.DiskPlacementGroupServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsResponse(ListDiskPlacementGroupOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListDiskPlacementGroupOperationsResponse Clone() {
      return new ListDiskPlacementGroupOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of operations for the specified placement group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListDiskPlacementGroupOperationsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListDiskPlacementGroupOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListDiskPlacementGroupOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListDiskPlacementGroupOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListDiskPlacementGroupOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
