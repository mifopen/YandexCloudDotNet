// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/compute/v1/instancegroup/instance_group.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Compute.V1.Instancegroup {

  /// <summary>Holder for reflection information generated from yandex/cloud/compute/v1/instancegroup/instance_group.proto</summary>
  internal static partial class InstanceGroupReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/compute/v1/instancegroup/instance_group.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstanceGroupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjp5YW5kZXgvY2xvdWQvY29tcHV0ZS92MS9pbnN0YW5jZWdyb3VwL2luc3Rh",
            "bmNlX2dyb3VwLnByb3RvEiV5YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0",
            "YW5jZWdyb3VwGh15YW5kZXgvY2xvdWQvdmFsaWRhdGlvbi5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoeZ29vZ2xlL3Byb3RvYnVm",
            "L2R1cmF0aW9uLnByb3RvIrIJCg1JbnN0YW5jZUdyb3VwEgoKAmlkGAEgASgJ",
            "EhEKCWZvbGRlcl9pZBgCIAEoCRIuCgpjcmVhdGVkX2F0GAMgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIMCgRuYW1lGAQgASgJEhMKC2Rlc2Ny",
            "aXB0aW9uGAUgASgJElAKBmxhYmVscxgGIAMoCzJALnlhbmRleC5jbG91ZC5j",
            "b21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuSW5zdGFuY2VHcm91cC5MYWJlbHNF",
            "bnRyeRJSChFpbnN0YW5jZV90ZW1wbGF0ZRgHIAEoCzI3LnlhbmRleC5jbG91",
            "ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuSW5zdGFuY2VUZW1wbGF0ZRJI",
            "CgxzY2FsZV9wb2xpY3kYCCABKAsyMi55YW5kZXguY2xvdWQuY29tcHV0ZS52",
            "MS5pbnN0YW5jZWdyb3VwLlNjYWxlUG9saWN5EkoKDWRlcGxveV9wb2xpY3kY",
            "CSABKAsyMy55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0YW5jZWdyb3Vw",
            "LkRlcGxveVBvbGljeRJSChFhbGxvY2F0aW9uX3BvbGljeRgKIAEoCzI3Lnlh",
            "bmRleC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuQWxsb2NhdGlv",
            "blBvbGljeRJVChNsb2FkX2JhbGFuY2VyX3N0YXRlGAsgASgLMjgueWFuZGV4",
            "LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5Mb2FkQmFsYW5jZXJT",
            "dGF0ZRJdChdtYW5hZ2VkX2luc3RhbmNlc19zdGF0ZRgMIAEoCzI8LnlhbmRl",
            "eC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuTWFuYWdlZEluc3Rh",
            "bmNlc1N0YXRlElMKEmxvYWRfYmFsYW5jZXJfc3BlYxgOIAEoCzI3LnlhbmRl",
            "eC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuTG9hZEJhbGFuY2Vy",
            "U3BlYxJTChJoZWFsdGhfY2hlY2tzX3NwZWMYDyABKAsyNy55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5pbnN0YW5jZWdyb3VwLkhlYWx0aENoZWNrc1NwZWMS",
            "GgoSc2VydmljZV9hY2NvdW50X2lkGBAgASgJEksKBnN0YXR1cxgRIAEoDjI7",
            "LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuSW5zdGFu",
            "Y2VHcm91cC5TdGF0dXMSQgoJdmFyaWFibGVzGBIgAygLMi8ueWFuZGV4LmNs",
            "b3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5WYXJpYWJsZRotCgtMYWJl",
            "bHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBImMKBlN0",
            "YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABIMCghTVEFSVElORxABEgoK",
            "BkFDVElWRRACEgwKCFNUT1BQSU5HEAMSCwoHU1RPUFBFRBAEEgwKCERFTEVU",
            "SU5HEAUiTwoIVmFyaWFibGUSKQoDa2V5GAEgASgJQhyKyDEFMS0xMjjyxzEP",
            "W2EtekEtWjAtOS5fLV0qEhgKBXZhbHVlGAIgASgJQgmKyDEFPD0xMjgiRAoR",
            "TG9hZEJhbGFuY2VyU3RhdGUSFwoPdGFyZ2V0X2dyb3VwX2lkGAEgASgJEhYK",
            "DnN0YXR1c19tZXNzYWdlGAIgASgJIr8CChVNYW5hZ2VkSW5zdGFuY2VzU3Rh",
            "dGUSEwoLdGFyZ2V0X3NpemUYASABKAMSHAoUcnVubmluZ19hY3R1YWxfY291",
            "bnQYBCABKAMSHgoWcnVubmluZ19vdXRkYXRlZF9jb3VudBgFIAEoAxIYChBw",
            "cm9jZXNzaW5nX2NvdW50GAYgASgDGrgBCghTdGF0dXNlcxIQCghjcmVhdGlu",
            "ZxgBIAEoAxIQCghzdGFydGluZxgCIAEoAxIPCgdvcGVuaW5nGAMgASgDEg8K",
            "B3dhcm1pbmcYBCABKAMSDwoHcnVubmluZxgFIAEoAxIPCgdjbG9zaW5nGAYg",
            "ASgDEhAKCHN0b3BwaW5nGAcgASgDEhAKCHVwZGF0aW5nGAggASgDEhAKCGRl",
            "bGV0aW5nGAkgASgDEg4KBmZhaWxlZBgKIAEoAyKxDAoLU2NhbGVQb2xpY3kS",
            "VAoLZml4ZWRfc2NhbGUYASABKAsyPS55YW5kZXguY2xvdWQuY29tcHV0ZS52",
            "MS5pbnN0YW5jZWdyb3VwLlNjYWxlUG9saWN5LkZpeGVkU2NhbGVIABJSCgph",
            "dXRvX3NjYWxlGAIgASgLMjwueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5z",
            "dGFuY2Vncm91cC5TY2FsZVBvbGljeS5BdXRvU2NhbGVIABJVCg90ZXN0X2F1",
            "dG9fc2NhbGUYAyABKAsyPC55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0",
            "YW5jZWdyb3VwLlNjYWxlUG9saWN5LkF1dG9TY2FsZRr7AwoJQXV0b1NjYWxl",
            "EiAKDW1pbl96b25lX3NpemUYASABKANCCfrHMQUwLTEwMBIbCghtYXhfc2l6",
            "ZRgCIAEoA0IJ+scxBTAtMTAwEkcKFG1lYXN1cmVtZW50X2R1cmF0aW9uGAMg",
            "ASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQg7oxzEB+scxBjFtLTEw",
            "bRI9Cg93YXJtdXBfZHVyYXRpb24YBCABKAsyGS5nb29nbGUucHJvdG9idWYu",
            "RHVyYXRpb25CCfrHMQU8PTEwbRJFChZzdGFiaWxpemF0aW9uX2R1cmF0aW9u",
            "GAUgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgr6xzEGMW0tMzBt",
            "Eh0KDGluaXRpYWxfc2l6ZRgGIAEoA0IH+scxAz49MRJjChRjcHVfdXRpbGl6",
            "YXRpb25fcnVsZRgHIAEoCzJFLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmlu",
            "c3RhbmNlZ3JvdXAuU2NhbGVQb2xpY3kuQ3B1VXRpbGl6YXRpb25SdWxlElwK",
            "DGN1c3RvbV9ydWxlcxgIIAMoCzI9LnlhbmRleC5jbG91ZC5jb21wdXRlLnYx",
            "Lmluc3RhbmNlZ3JvdXAuU2NhbGVQb2xpY3kuQ3VzdG9tUnVsZUIHgsgxAzw9",
            "MRo8ChJDcHVVdGlsaXphdGlvblJ1bGUSJgoSdXRpbGl6YXRpb25fdGFyZ2V0",
            "GAEgASgBQgr6xzEGMTAtMTAwGqkFCgpDdXN0b21SdWxlEl8KCXJ1bGVfdHlw",
            "ZRgBIAEoDjJGLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3Jv",
            "dXAuU2NhbGVQb2xpY3kuQ3VzdG9tUnVsZS5SdWxlVHlwZUIE6McxARJjCgtt",
            "ZXRyaWNfdHlwZRgCIAEoDjJILnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmlu",
            "c3RhbmNlZ3JvdXAuU2NhbGVQb2xpY3kuQ3VzdG9tUnVsZS5NZXRyaWNUeXBl",
            "QgToxzEBEk8KC21ldHJpY19uYW1lGAMgASgJQjroxzEB8scxMlthLXpBLVow",
            "LTkuL0BfXVsgMC05YS16QS1aLi9AXyw6OygpXFtcXTw+LV17MCwxOTh9ErMB",
            "CgZsYWJlbHMYBSADKAsySS55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0",
            "YW5jZWdyb3VwLlNjYWxlUG9saWN5LkN1c3RvbVJ1bGUuTGFiZWxzRW50cnlC",
            "WPLHMTJbYS16QS1aMC05Li9AX11bIDAtOWEtekEtWi4vQF8sOjsoKVxbXF08",
            "Pi1dezAsMTk4fbLIMR4SHF5bYS16QS1aXVswLTlhLXpBLVpfXXswLDMxfSQS",
            "FgoGdGFyZ2V0GAQgASgBQgb6xzECPjAaLQoLTGFiZWxzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJECghSdWxlVHlwZRIZChVSVUxF",
            "X1RZUEVfVU5TUEVDSUZJRUQQABIPCgtVVElMSVpBVElPThABEgwKCFdPUktM",
            "T0FEEAIiQQoKTWV0cmljVHlwZRIbChdNRVRSSUNfVFlQRV9VTlNQRUNJRklF",
            "RBAAEgkKBUdBVUdFEAESCwoHQ09VTlRFUhACGiUKCkZpeGVkU2NhbGUSFwoE",
            "c2l6ZRgBIAEoA0IJ+scxBTEtMTAwQhIKCnNjYWxlX3R5cGUSBMDBMQEi1gEK",
            "DERlcGxveVBvbGljeRIiCg9tYXhfdW5hdmFpbGFibGUYASABKANCCfrHMQUw",
            "LTEwMBIfCgxtYXhfZGVsZXRpbmcYAiABKANCCfrHMQUwLTEwMBIfCgxtYXhf",
            "Y3JlYXRpbmcYAyABKANCCfrHMQUwLTEwMBIgCg1tYXhfZXhwYW5zaW9uGAYg",
            "ASgDQgn6xzEFMC0xMDASPgoQc3RhcnR1cF9kdXJhdGlvbhgHIAEoCzIZLmdv",
            "b2dsZS5wcm90b2J1Zi5EdXJhdGlvbkIJ+scxBTBtLTFoIocBChBBbGxvY2F0",
            "aW9uUG9saWN5ElQKBXpvbmVzGAEgAygLMjwueWFuZGV4LmNsb3VkLmNvbXB1",
            "dGUudjEuaW5zdGFuY2Vncm91cC5BbGxvY2F0aW9uUG9saWN5LlpvbmVCB4LI",
            "MQM+PTEaHQoEWm9uZRIVCgd6b25lX2lkGAEgASgJQgToxzEBIrMIChBJbnN0",
            "YW5jZVRlbXBsYXRlEh4KC2Rlc2NyaXB0aW9uGAEgASgJQgmKyDEFPD0yNTYS",
            "igEKBmxhYmVscxgCIAMoCzJDLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmlu",
            "c3RhbmNlZ3JvdXAuSW5zdGFuY2VUZW1wbGF0ZS5MYWJlbHNFbnRyeUI1gsgx",
            "BDw9NjSKyDEFPD0xMjiyyDEGGgQxLTYzssgxFhIUW2Etel1bLV8uL1xAMC05",
            "YS16XSoSGQoLcGxhdGZvcm1faWQYAyABKAlCBOjHMQESUgoOcmVzb3VyY2Vz",
            "X3NwZWMYBCABKAsyNC55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0YW5j",
            "ZWdyb3VwLlJlc291cmNlc1NwZWNCBOjHMQESjgEKCG1ldGFkYXRhGAUgAygL",
            "MkUueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5JbnN0",
            "YW5jZVRlbXBsYXRlLk1ldGFkYXRhRW50cnlCNYLIMQU8PTEyOIrIMQg8PTI2",
            "MjE0NLLIMQYaBDEtNjOyyDESEhBbYS16XVstXzAtOWEtel0qElUKDmJvb3Rf",
            "ZGlza19zcGVjGAYgASgLMjcueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5z",
            "dGFuY2Vncm91cC5BdHRhY2hlZERpc2tTcGVjQgToxzEBEl4KFHNlY29uZGFy",
            "eV9kaXNrX3NwZWNzGAcgAygLMjcueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEu",
            "aW5zdGFuY2Vncm91cC5BdHRhY2hlZERpc2tTcGVjQgeCyDEDPD0zEmMKF25l",
            "dHdvcmtfaW50ZXJmYWNlX3NwZWNzGAggAygLMjsueWFuZGV4LmNsb3VkLmNv",
            "bXB1dGUudjEuaW5zdGFuY2Vncm91cC5OZXR3b3JrSW50ZXJmYWNlU3BlY0IF",
            "gsgxATESUgoRc2NoZWR1bGluZ19wb2xpY3kYCSABKAsyNy55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5pbnN0YW5jZWdyb3VwLlNjaGVkdWxpbmdQb2xpY3kS",
            "GgoSc2VydmljZV9hY2NvdW50X2lkGAogASgJElAKEG5ldHdvcmtfc2V0dGlu",
            "Z3MYCyABKAsyNi55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0YW5jZWdy",
            "b3VwLk5ldHdvcmtTZXR0aW5ncxIXCgRuYW1lGAwgASgJQgmKyDEFPD0xMjgS",
            "GwoIaG9zdG5hbWUYDSABKAlCCYrIMQU8PTEyOBotCgtMYWJlbHNFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGi8KDU1ldGFkYXRhRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASLVAQoNUmVzb3Vy",
            "Y2VzU3BlYxIiCgZtZW1vcnkYASABKANCEvrHMQ48PTgyNDYzMzcyMDgzMhJb",
            "CgVjb3JlcxgCIAEoA0JM+scxSDEsMiw0LDYsOCwxMCwxMiwxNCwxNiwxOCwy",
            "MCwyMiwyNCwyNiwyOCwzMCwzMiwzNCwzNiw0MCw0NCw0OCw1Miw1Niw2MCw2",
            "NBIoCg1jb3JlX2ZyYWN0aW9uGAMgASgDQhH6xzENMCw1LDIwLDUwLDEwMBIZ",
            "CgRncHVzGAQgASgDQgv6xzEHMCwxLDIsNCLpAwoQQXR0YWNoZWREaXNrU3Bl",
            "YxJQCgRtb2RlGAEgASgOMjwueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5z",
            "dGFuY2Vncm91cC5BdHRhY2hlZERpc2tTcGVjLk1vZGVCBOjHMQESLwoLZGV2",
            "aWNlX25hbWUYAiABKAlCGvLHMRZ8W2Etel1bLV8wLTlhLXpdezAsMTl9ElkK",
            "CWRpc2tfc3BlYxgDIAEoCzJALnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmlu",
            "c3RhbmNlZ3JvdXAuQXR0YWNoZWREaXNrU3BlYy5EaXNrU3BlY0IE6McxARq5",
            "AQoIRGlza1NwZWMSHgoLZGVzY3JpcHRpb24YASABKAlCCYrIMQU8PTI1NhIV",
            "Cgd0eXBlX2lkGAIgASgJQgToxzEBEicKBHNpemUYAyABKANCGfrHMRU0MTk0",
            "MzA0LTQzOTgwNDY1MTExMDQSHAoIaW1hZ2VfaWQYBCABKAlCCIrIMQQ8PTUw",
            "SAASHwoLc25hcHNob3RfaWQYBSABKAlCCIrIMQQ8PTUwSABCDgoMc291cmNl",
            "X29uZW9mIjsKBE1vZGUSFAoQTU9ERV9VTlNQRUNJRklFRBAAEg0KCVJFQURf",
            "T05MWRABEg4KClJFQURfV1JJVEUQAiKSAgoUTmV0d29ya0ludGVyZmFjZVNw",
            "ZWMSEgoKbmV0d29ya19pZBgBIAEoCRISCgpzdWJuZXRfaWRzGAIgAygJEloK",
            "F3ByaW1hcnlfdjRfYWRkcmVzc19zcGVjGAMgASgLMjkueWFuZGV4LmNsb3Vk",
            "LmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5QcmltYXJ5QWRkcmVzc1NwZWMS",
            "WgoXcHJpbWFyeV92Nl9hZGRyZXNzX3NwZWMYBCABKAsyOS55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5pbnN0YW5jZWdyb3VwLlByaW1hcnlBZGRyZXNzU3Bl",
            "YxIaChJzZWN1cml0eV9ncm91cF9pZHMYBSADKAkiaQoSUHJpbWFyeUFkZHJl",
            "c3NTcGVjElMKE29uZV90b19vbmVfbmF0X3NwZWMYASABKAsyNi55YW5kZXgu",
            "Y2xvdWQuY29tcHV0ZS52MS5pbnN0YW5jZWdyb3VwLk9uZVRvT25lTmF0U3Bl",
            "YyJXCg9PbmVUb09uZU5hdFNwZWMSRAoKaXBfdmVyc2lvbhgBIAEoDjIwLnlh",
            "bmRleC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuSXBWZXJzaW9u",
            "IicKEFNjaGVkdWxpbmdQb2xpY3kSEwoLcHJlZW1wdGlibGUYASABKAgivAEK",
            "D05ldHdvcmtTZXR0aW5ncxJJCgR0eXBlGAEgASgOMjsueWFuZGV4LmNsb3Vk",
            "LmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5OZXR3b3JrU2V0dGluZ3MuVHlw",
            "ZSJeCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIMCghTVEFOREFSRBAB",
            "EhgKFFNPRlRXQVJFX0FDQ0VMRVJBVEVEEAISGAoUSEFSRFdBUkVfQUNDRUxF",
            "UkFURUQQAyJlChBMb2FkQmFsYW5jZXJTcGVjElEKEXRhcmdldF9ncm91cF9z",
            "cGVjGAEgASgLMjYueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vn",
            "cm91cC5UYXJnZXRHcm91cFNwZWMisgIKD1RhcmdldEdyb3VwU3BlYxIyCgRu",
            "YW1lGAEgASgJQiTyxzEgfFthLXpdKFstYS16MC05XXswLDYxfVthLXowLTld",
            "KT8SHgoLZGVzY3JpcHRpb24YAiABKAlCCYrIMQU8PTI1NhKbAQoGbGFiZWxz",
            "GAMgAygLMkIueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91",
            "cC5UYXJnZXRHcm91cFNwZWMuTGFiZWxzRW50cnlCR4LIMQQ8PTY0isgxBDw9",
            "NjPyxzEPWy1fLi9cQDAtOWEtel0qssgxBhoEMS02M7LIMRYSFFthLXpdWy1f",
            "Li9cQDAtOWEtel0qGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoCToCOAEibwoQSGVhbHRoQ2hlY2tzU3BlYxJbChJoZWFsdGhf",
            "Y2hlY2tfc3BlY3MYASADKAsyNi55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5p",
            "bnN0YW5jZWdyb3VwLkhlYWx0aENoZWNrU3BlY0IHgsgxAz49MSKkBAoPSGVh",
            "bHRoQ2hlY2tTcGVjEjgKCGludGVydmFsGAEgASgLMhkuZ29vZ2xlLnByb3Rv",
            "YnVmLkR1cmF0aW9uQgv6xzEHMXMtMzAwcxI2Cgd0aW1lb3V0GAIgASgLMhku",
            "Z29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uQgr6xzEGMXMtNjBzEjUKE3VuaGVh",
            "bHRoeV90aHJlc2hvbGQYAyABKANCGPrHMRQwLDIsMyw0LDUsNiw3LDgsOSwx",
            "MBIzChFoZWFsdGh5X3RocmVzaG9sZBgEIAEoA0IY+scxFDAsMiwzLDQsNSw2",
            "LDcsOCw5LDEwElgKC3RjcF9vcHRpb25zGAUgASgLMkEueWFuZGV4LmNsb3Vk",
            "LmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5IZWFsdGhDaGVja1NwZWMuVGNw",
            "T3B0aW9uc0gAEloKDGh0dHBfb3B0aW9ucxgGIAEoCzJCLnlhbmRleC5jbG91",
            "ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3JvdXAuSGVhbHRoQ2hlY2tTcGVjLkh0",
            "dHBPcHRpb25zSAAaJwoKVGNwT3B0aW9ucxIZCgRwb3J0GAEgASgDQgv6xzEH",
            "MS02NTUzNRo2CgtIdHRwT3B0aW9ucxIZCgRwb3J0GAEgASgDQgv6xzEHMS02",
            "NTUzNRIMCgRwYXRoGAIgASgJQhwKFGhlYWx0aF9jaGVja19vcHRpb25zEgTA",
            "wTEBIqgFCg9NYW5hZ2VkSW5zdGFuY2USCgoCaWQYASABKAkSTQoGc3RhdHVz",
            "GAIgASgOMj0ueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91",
            "cC5NYW5hZ2VkSW5zdGFuY2UuU3RhdHVzEhMKC2luc3RhbmNlX2lkGAMgASgJ",
            "EgwKBGZxZG4YBCABKAkSDAoEbmFtZRgFIAEoCRIWCg5zdGF0dXNfbWVzc2Fn",
            "ZRgGIAEoCRIPCgd6b25lX2lkGAcgASgJElMKEm5ldHdvcmtfaW50ZXJmYWNl",
            "cxgIIAMoCzI3LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLmluc3RhbmNlZ3Jv",
            "dXAuTmV0d29ya0ludGVyZmFjZRI1ChFzdGF0dXNfY2hhbmdlZF9hdBgJIAEo",
            "CzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAi0wIKBlN0YXR1cxIWChJT",
            "VEFUVVNfVU5TUEVDSUZJRUQQABIVChFDUkVBVElOR19JTlNUQU5DRRALEhUK",
            "EVVQREFUSU5HX0lOU1RBTkNFEAwSFQoRREVMRVRJTkdfSU5TVEFOQ0UQDRIV",
            "ChFTVEFSVElOR19JTlNUQU5DRRAOEhUKEVNUT1BQSU5HX0lOU1RBTkNFEA8S",
            "HQoZQVdBSVRJTkdfU1RBUlRVUF9EVVJBVElPThAQEhMKD0NIRUNLSU5HX0hF",
            "QUxUSBAREhMKD09QRU5JTkdfVFJBRkZJQxASEhwKGEFXQUlUSU5HX1dBUk1V",
            "UF9EVVJBVElPThATEhMKD0NMT1NJTkdfVFJBRkZJQxAUEhIKDlJVTk5JTkdf",
            "QUNUVUFMEBUSFAoQUlVOTklOR19PVVREQVRFRBAWEgsKB1NUT1BQRUQQFxIL",
            "CgdERUxFVEVEEBgi7wEKEE5ldHdvcmtJbnRlcmZhY2USDQoFaW5kZXgYASAB",
            "KAkSEwoLbWFjX2FkZHJlc3MYAiABKAkSEQoJc3VibmV0X2lkGAMgASgJElEK",
            "EnByaW1hcnlfdjRfYWRkcmVzcxgEIAEoCzI1LnlhbmRleC5jbG91ZC5jb21w",
            "dXRlLnYxLmluc3RhbmNlZ3JvdXAuUHJpbWFyeUFkZHJlc3MSUQoScHJpbWFy",
            "eV92Nl9hZGRyZXNzGAUgASgLMjUueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEu",
            "aW5zdGFuY2Vncm91cC5QcmltYXJ5QWRkcmVzcyJtCg5QcmltYXJ5QWRkcmVz",
            "cxIPCgdhZGRyZXNzGAEgASgJEkoKDm9uZV90b19vbmVfbmF0GAIgASgLMjIu",
            "eWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuaW5zdGFuY2Vncm91cC5PbmVUb09u",
            "ZU5hdCJkCgtPbmVUb09uZU5hdBIPCgdhZGRyZXNzGAEgASgJEkQKCmlwX3Zl",
            "cnNpb24YAiABKA4yMC55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5pbnN0YW5j",
            "ZWdyb3VwLklwVmVyc2lvbiJLCglMb2dSZWNvcmQSLQoJdGltZXN0YW1wGAEg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIPCgdtZXNzYWdlGAIg",
            "ASgJKjsKCUlwVmVyc2lvbhIaChZJUF9WRVJTSU9OX1VOU1BFQ0lGSUVEEAAS",
            "CAoESVBWNBABEggKBElQVjYQAkKEAQopeWFuZGV4LmNsb3VkLmFwaS5jb21w",
            "dXRlLnYxLmluc3RhbmNlZ3JvdXBaV2dpdGh1Yi5jb20veWFuZGV4LWNsb3Vk",
            "L2dvLWdlbnByb3RvL3lhbmRleC9jbG91ZC9jb21wdXRlL3YxL2luc3RhbmNl",
            "Z3JvdXA7aW5zdGFuY2Vncm91cGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Yandex.Cloud.ValidationReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.DurationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup), global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "InstanceTemplate", "ScalePolicy", "DeployPolicy", "AllocationPolicy", "LoadBalancerState", "ManagedInstancesState", "LoadBalancerSpec", "HealthChecksSpec", "ServiceAccountId", "Status", "Variables" }, null, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.Variable), global::Yandex.Cloud.Compute.V1.Instancegroup.Variable.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState), global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState.Parser, new[]{ "TargetGroupId", "StatusMessage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState), global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState.Parser, new[]{ "TargetSize", "RunningActualCount", "RunningOutdatedCount", "ProcessingCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState.Types.Statuses), global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState.Types.Statuses.Parser, new[]{ "Creating", "Starting", "Opening", "Warming", "Running", "Closing", "Stopping", "Updating", "Deleting", "Failed" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy), global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Parser, new[]{ "FixedScale", "AutoScale", "TestAutoScale" }, new[]{ "ScaleType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale), global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale.Parser, new[]{ "MinZoneSize", "MaxSize", "MeasurementDuration", "WarmupDuration", "StabilizationDuration", "InitialSize", "CpuUtilizationRule", "CustomRules" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule), global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule.Parser, new[]{ "UtilizationTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule), global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Parser, new[]{ "RuleType", "MetricType", "MetricName", "Labels", "Target" }, null, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType), typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale), global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale.Parser, new[]{ "Size" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy), global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy.Parser, new[]{ "MaxUnavailable", "MaxDeleting", "MaxCreating", "MaxExpansion", "StartupDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy), global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Parser, new[]{ "Zones" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone), global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone.Parser, new[]{ "ZoneId" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate), global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate.Parser, new[]{ "Description", "Labels", "PlatformId", "ResourcesSpec", "Metadata", "BootDiskSpec", "SecondaryDiskSpecs", "NetworkInterfaceSpecs", "SchedulingPolicy", "ServiceAccountId", "NetworkSettings", "Name", "Hostname" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec.Parser, new[]{ "Memory", "Cores", "CoreFraction", "Gpus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Parser, new[]{ "Mode", "DeviceName", "DiskSpec" }, null, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec.Parser, new[]{ "Description", "TypeId", "Size", "ImageId", "SnapshotId" }, new[]{ "SourceOneof" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec.Parser, new[]{ "NetworkId", "SubnetIds", "PrimaryV4AddressSpec", "PrimaryV6AddressSpec", "SecurityGroupIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec.Parser, new[]{ "OneToOneNatSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec.Parser, new[]{ "IpVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy), global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy.Parser, new[]{ "Preemptible" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings), global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Parser, new[]{ "Type" }, null, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec.Parser, new[]{ "TargetGroupSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec.Parser, new[]{ "Name", "Description", "Labels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec.Parser, new[]{ "HealthCheckSpecs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec), global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Parser, new[]{ "Interval", "Timeout", "UnhealthyThreshold", "HealthyThreshold", "TcpOptions", "HttpOptions" }, new[]{ "HealthCheckOptions" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions), global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions.Parser, new[]{ "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions), global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions.Parser, new[]{ "Port", "Path" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance), global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Parser, new[]{ "Id", "Status", "InstanceId", "Fqdn", "Name", "StatusMessage", "ZoneId", "NetworkInterfaces", "StatusChangedAt" }, null, new[]{ typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface), global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface.Parser, new[]{ "Index", "MacAddress", "SubnetId", "PrimaryV4Address", "PrimaryV6Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress), global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress.Parser, new[]{ "Address", "OneToOneNat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat), global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat.Parser, new[]{ "Address", "IpVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.Instancegroup.LogRecord), global::Yandex.Cloud.Compute.V1.Instancegroup.LogRecord.Parser, new[]{ "Timestamp", "Message" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum IpVersion {
    [pbr::OriginalName("IP_VERSION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// IPv4 address, for example 192.168.0.0.
    /// </summary>
    [pbr::OriginalName("IPV4")] Ipv4 = 1,
    /// <summary>
    /// IPv6 address, not available yet.
    /// </summary>
    [pbr::OriginalName("IPV6")] Ipv6 = 2,
  }

  #endregion

  #region Messages
  internal sealed partial class InstanceGroup : pb::IMessage<InstanceGroup> {
    private static readonly pb::MessageParser<InstanceGroup> _parser = new pb::MessageParser<InstanceGroup>(() => new InstanceGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroup(InstanceGroup other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      instanceTemplate_ = other.instanceTemplate_ != null ? other.instanceTemplate_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      deployPolicy_ = other.deployPolicy_ != null ? other.deployPolicy_.Clone() : null;
      allocationPolicy_ = other.allocationPolicy_ != null ? other.allocationPolicy_.Clone() : null;
      loadBalancerState_ = other.loadBalancerState_ != null ? other.loadBalancerState_.Clone() : null;
      managedInstancesState_ = other.managedInstancesState_ != null ? other.managedInstancesState_.Clone() : null;
      loadBalancerSpec_ = other.loadBalancerSpec_ != null ? other.loadBalancerSpec_.Clone() : null;
      healthChecksSpec_ = other.healthChecksSpec_ != null ? other.healthChecksSpec_.Clone() : null;
      serviceAccountId_ = other.serviceAccountId_;
      status_ = other.status_;
      variables_ = other.variables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceGroup Clone() {
      return new InstanceGroup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the instance group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the instance group.
    /// The name is unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "instance_template" field.</summary>
    public const int InstanceTemplateFieldNumber = 7;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate instanceTemplate_;
    /// <summary>
    /// Instance template for creating the instance group.
    /// For more information, see [Instance Templates](/docs/compute/concepts/ig-instance-templates).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate InstanceTemplate {
      get { return instanceTemplate_; }
      set {
        instanceTemplate_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 8;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy scalePolicy_;
    /// <summary>
    /// [Scaling policy](/docs/compute/concepts/instance-groups/scale) of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "deploy_policy" field.</summary>
    public const int DeployPolicyFieldNumber = 9;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy deployPolicy_;
    /// <summary>
    /// Deployment policy of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy DeployPolicy {
      get { return deployPolicy_; }
      set {
        deployPolicy_ = value;
      }
    }

    /// <summary>Field number for the "allocation_policy" field.</summary>
    public const int AllocationPolicyFieldNumber = 10;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy allocationPolicy_;
    /// <summary>
    /// Allocation policy of the instance group by zones and regions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy AllocationPolicy {
      get { return allocationPolicy_; }
      set {
        allocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "load_balancer_state" field.</summary>
    public const int LoadBalancerStateFieldNumber = 11;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState loadBalancerState_;
    /// <summary>
    /// Information that indicates which entities can be related to this load balancer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState LoadBalancerState {
      get { return loadBalancerState_; }
      set {
        loadBalancerState_ = value;
      }
    }

    /// <summary>Field number for the "managed_instances_state" field.</summary>
    public const int ManagedInstancesStateFieldNumber = 12;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState managedInstancesState_;
    /// <summary>
    /// States of instances for this instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState ManagedInstancesState {
      get { return managedInstancesState_; }
      set {
        managedInstancesState_ = value;
      }
    }

    /// <summary>Field number for the "load_balancer_spec" field.</summary>
    public const int LoadBalancerSpecFieldNumber = 14;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec loadBalancerSpec_;
    /// <summary>
    /// Load balancing specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec LoadBalancerSpec {
      get { return loadBalancerSpec_; }
      set {
        loadBalancerSpec_ = value;
      }
    }

    /// <summary>Field number for the "health_checks_spec" field.</summary>
    public const int HealthChecksSpecFieldNumber = 15;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec healthChecksSpec_;
    /// <summary>
    /// Health checking specification. For more information, see [Health check](/docs/load-balancer/concepts/health-check).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec HealthChecksSpec {
      get { return healthChecksSpec_; }
      set {
        healthChecksSpec_ = value;
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 16;
    private string serviceAccountId_ = "";
    /// <summary>
    /// ID of the service account. The service account will be used for all API calls
    /// made by the Instance Groups component on behalf of the user (for example, creating instances, adding them to load balancer target group, etc.). For more information, see [Service accounts](/docs/iam/concepts/users/service-accounts).
    /// To get the service account ID, use a [yandex.cloud.iam.v1.ServiceAccountService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 17;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status status_ = global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status.Unspecified;
    /// <summary>
    /// Status of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 18;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.Variable> _repeated_variables_codec
        = pb::FieldCodec.ForMessage(146, global::Yandex.Cloud.Compute.V1.Instancegroup.Variable.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.Variable> variables_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.Variable>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.Variable> Variables {
      get { return variables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(InstanceTemplate, other.InstanceTemplate)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (!object.Equals(DeployPolicy, other.DeployPolicy)) return false;
      if (!object.Equals(AllocationPolicy, other.AllocationPolicy)) return false;
      if (!object.Equals(LoadBalancerState, other.LoadBalancerState)) return false;
      if (!object.Equals(ManagedInstancesState, other.ManagedInstancesState)) return false;
      if (!object.Equals(LoadBalancerSpec, other.LoadBalancerSpec)) return false;
      if (!object.Equals(HealthChecksSpec, other.HealthChecksSpec)) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      if (Status != other.Status) return false;
      if(!variables_.Equals(other.variables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (instanceTemplate_ != null) hash ^= InstanceTemplate.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (deployPolicy_ != null) hash ^= DeployPolicy.GetHashCode();
      if (allocationPolicy_ != null) hash ^= AllocationPolicy.GetHashCode();
      if (loadBalancerState_ != null) hash ^= LoadBalancerState.GetHashCode();
      if (managedInstancesState_ != null) hash ^= ManagedInstancesState.GetHashCode();
      if (loadBalancerSpec_ != null) hash ^= LoadBalancerSpec.GetHashCode();
      if (healthChecksSpec_ != null) hash ^= HealthChecksSpec.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      hash ^= variables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (instanceTemplate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(InstanceTemplate);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(ScalePolicy);
      }
      if (deployPolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(DeployPolicy);
      }
      if (allocationPolicy_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AllocationPolicy);
      }
      if (loadBalancerState_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LoadBalancerState);
      }
      if (managedInstancesState_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ManagedInstancesState);
      }
      if (loadBalancerSpec_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LoadBalancerSpec);
      }
      if (healthChecksSpec_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(HealthChecksSpec);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ServiceAccountId);
      }
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status.Unspecified) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Status);
      }
      variables_.WriteTo(output, _repeated_variables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (instanceTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InstanceTemplate);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (deployPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeployPolicy);
      }
      if (allocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPolicy);
      }
      if (loadBalancerState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadBalancerState);
      }
      if (managedInstancesState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManagedInstancesState);
      }
      if (loadBalancerSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LoadBalancerSpec);
      }
      if (healthChecksSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HealthChecksSpec);
      }
      if (ServiceAccountId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += variables_.CalculateSize(_repeated_variables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceGroup other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.instanceTemplate_ != null) {
        if (instanceTemplate_ == null) {
          InstanceTemplate = new global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate();
        }
        InstanceTemplate.MergeFrom(other.InstanceTemplate);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.deployPolicy_ != null) {
        if (deployPolicy_ == null) {
          DeployPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy();
        }
        DeployPolicy.MergeFrom(other.DeployPolicy);
      }
      if (other.allocationPolicy_ != null) {
        if (allocationPolicy_ == null) {
          AllocationPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy();
        }
        AllocationPolicy.MergeFrom(other.AllocationPolicy);
      }
      if (other.loadBalancerState_ != null) {
        if (loadBalancerState_ == null) {
          LoadBalancerState = new global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState();
        }
        LoadBalancerState.MergeFrom(other.LoadBalancerState);
      }
      if (other.managedInstancesState_ != null) {
        if (managedInstancesState_ == null) {
          ManagedInstancesState = new global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState();
        }
        ManagedInstancesState.MergeFrom(other.ManagedInstancesState);
      }
      if (other.loadBalancerSpec_ != null) {
        if (loadBalancerSpec_ == null) {
          LoadBalancerSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec();
        }
        LoadBalancerSpec.MergeFrom(other.LoadBalancerSpec);
      }
      if (other.healthChecksSpec_ != null) {
        if (healthChecksSpec_ == null) {
          HealthChecksSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec();
        }
        HealthChecksSpec.MergeFrom(other.HealthChecksSpec);
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      if (other.Status != global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status.Unspecified) {
        Status = other.Status;
      }
      variables_.Add(other.variables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 58: {
            if (instanceTemplate_ == null) {
              InstanceTemplate = new global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceTemplate();
            }
            input.ReadMessage(InstanceTemplate);
            break;
          }
          case 66: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 74: {
            if (deployPolicy_ == null) {
              DeployPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.DeployPolicy();
            }
            input.ReadMessage(DeployPolicy);
            break;
          }
          case 82: {
            if (allocationPolicy_ == null) {
              AllocationPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy();
            }
            input.ReadMessage(AllocationPolicy);
            break;
          }
          case 90: {
            if (loadBalancerState_ == null) {
              LoadBalancerState = new global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerState();
            }
            input.ReadMessage(LoadBalancerState);
            break;
          }
          case 98: {
            if (managedInstancesState_ == null) {
              ManagedInstancesState = new global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState();
            }
            input.ReadMessage(ManagedInstancesState);
            break;
          }
          case 114: {
            if (loadBalancerSpec_ == null) {
              LoadBalancerSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.LoadBalancerSpec();
            }
            input.ReadMessage(LoadBalancerSpec);
            break;
          }
          case 122: {
            if (healthChecksSpec_ == null) {
              HealthChecksSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthChecksSpec();
            }
            input.ReadMessage(HealthChecksSpec);
            break;
          }
          case 130: {
            ServiceAccountId = input.ReadString();
            break;
          }
          case 136: {
            Status = (global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroup.Types.Status) input.ReadEnum();
            break;
          }
          case 146: {
            variables_.AddEntriesFrom(input, _repeated_variables_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the InstanceGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Instance group is being started and will become active soon.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 1,
        /// <summary>
        /// Instance group is active.
        /// In this state the group manages its instances and monitors their health,
        /// creating, deleting, stopping, updating and starting instances as needed.
        /// To stop the instance group, call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Stop].
        /// </summary>
        [pbr::OriginalName("ACTIVE")] Active = 2,
        /// <summary>
        /// Instance group is being stopped.
        /// Group's instances stop receiving traffic from the load balancer (if any) and are then stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 3,
        /// <summary>
        /// Instance group is stopped.
        /// In this state the group cannot be updated and does not react to any changes made to its instances.
        /// To start the instance group, call [yandex.cloud.compute.v1.instancegroup.InstanceGroupService.Start].
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 4,
        /// <summary>
        /// Instance group is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 5,
      }

    }
    #endregion

  }

  internal sealed partial class Variable : pb::IMessage<Variable> {
    private static readonly pb::MessageParser<Variable> _parser = new pb::MessageParser<Variable>(() => new Variable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Variable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable(Variable other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Variable Clone() {
      return new Variable(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Variable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Variable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Variable other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LoadBalancerState : pb::IMessage<LoadBalancerState> {
    private static readonly pb::MessageParser<LoadBalancerState> _parser = new pb::MessageParser<LoadBalancerState>(() => new LoadBalancerState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadBalancerState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerState(LoadBalancerState other) : this() {
      targetGroupId_ = other.targetGroupId_;
      statusMessage_ = other.statusMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerState Clone() {
      return new LoadBalancerState(this);
    }

    /// <summary>Field number for the "target_group_id" field.</summary>
    public const int TargetGroupIdFieldNumber = 1;
    private string targetGroupId_ = "";
    /// <summary>
    /// ID of the target group used for load balancing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetGroupId {
      get { return targetGroupId_; }
      set {
        targetGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status_message" field.</summary>
    public const int StatusMessageFieldNumber = 2;
    private string statusMessage_ = "";
    /// <summary>
    /// Status message of the target group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadBalancerState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadBalancerState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetGroupId != other.TargetGroupId) return false;
      if (StatusMessage != other.StatusMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetGroupId.Length != 0) hash ^= TargetGroupId.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TargetGroupId);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StatusMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetGroupId);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadBalancerState other) {
      if (other == null) {
        return;
      }
      if (other.TargetGroupId.Length != 0) {
        TargetGroupId = other.TargetGroupId;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TargetGroupId = input.ReadString();
            break;
          }
          case 18: {
            StatusMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ManagedInstancesState : pb::IMessage<ManagedInstancesState> {
    private static readonly pb::MessageParser<ManagedInstancesState> _parser = new pb::MessageParser<ManagedInstancesState>(() => new ManagedInstancesState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagedInstancesState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstancesState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstancesState(ManagedInstancesState other) : this() {
      targetSize_ = other.targetSize_;
      runningActualCount_ = other.runningActualCount_;
      runningOutdatedCount_ = other.runningOutdatedCount_;
      processingCount_ = other.processingCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstancesState Clone() {
      return new ManagedInstancesState(this);
    }

    /// <summary>Field number for the "target_size" field.</summary>
    public const int TargetSizeFieldNumber = 1;
    private long targetSize_;
    /// <summary>
    /// Target number of instances for this instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetSize {
      get { return targetSize_; }
      set {
        targetSize_ = value;
      }
    }

    /// <summary>Field number for the "running_actual_count" field.</summary>
    public const int RunningActualCountFieldNumber = 4;
    private long runningActualCount_;
    /// <summary>
    /// The number of running instances that match the current instance template. For more information, see [ManagedInstance.Status.RUNNING_ACTUAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RunningActualCount {
      get { return runningActualCount_; }
      set {
        runningActualCount_ = value;
      }
    }

    /// <summary>Field number for the "running_outdated_count" field.</summary>
    public const int RunningOutdatedCountFieldNumber = 5;
    private long runningOutdatedCount_;
    /// <summary>
    /// The number of running instances that does not match the current instance template. For more information, see [ManagedInstance.Status.RUNNING_OUTDATED].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RunningOutdatedCount {
      get { return runningOutdatedCount_; }
      set {
        runningOutdatedCount_ = value;
      }
    }

    /// <summary>Field number for the "processing_count" field.</summary>
    public const int ProcessingCountFieldNumber = 6;
    private long processingCount_;
    /// <summary>
    /// The number of instances in flight (for example, updating, starting, deleting). For more information, see [ManagedInstance.Status].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProcessingCount {
      get { return processingCount_; }
      set {
        processingCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagedInstancesState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagedInstancesState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetSize != other.TargetSize) return false;
      if (RunningActualCount != other.RunningActualCount) return false;
      if (RunningOutdatedCount != other.RunningOutdatedCount) return false;
      if (ProcessingCount != other.ProcessingCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetSize != 0L) hash ^= TargetSize.GetHashCode();
      if (RunningActualCount != 0L) hash ^= RunningActualCount.GetHashCode();
      if (RunningOutdatedCount != 0L) hash ^= RunningOutdatedCount.GetHashCode();
      if (ProcessingCount != 0L) hash ^= ProcessingCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetSize != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TargetSize);
      }
      if (RunningActualCount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RunningActualCount);
      }
      if (RunningOutdatedCount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RunningOutdatedCount);
      }
      if (ProcessingCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ProcessingCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetSize);
      }
      if (RunningActualCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RunningActualCount);
      }
      if (RunningOutdatedCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RunningOutdatedCount);
      }
      if (ProcessingCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessingCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagedInstancesState other) {
      if (other == null) {
        return;
      }
      if (other.TargetSize != 0L) {
        TargetSize = other.TargetSize;
      }
      if (other.RunningActualCount != 0L) {
        RunningActualCount = other.RunningActualCount;
      }
      if (other.RunningOutdatedCount != 0L) {
        RunningOutdatedCount = other.RunningOutdatedCount;
      }
      if (other.ProcessingCount != 0L) {
        ProcessingCount = other.ProcessingCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TargetSize = input.ReadInt64();
            break;
          }
          case 32: {
            RunningActualCount = input.ReadInt64();
            break;
          }
          case 40: {
            RunningOutdatedCount = input.ReadInt64();
            break;
          }
          case 48: {
            ProcessingCount = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ManagedInstancesState message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Statuses : pb::IMessage<Statuses> {
        private static readonly pb::MessageParser<Statuses> _parser = new pb::MessageParser<Statuses>(() => new Statuses());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Statuses> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstancesState.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Statuses() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Statuses(Statuses other) : this() {
          creating_ = other.creating_;
          starting_ = other.starting_;
          opening_ = other.opening_;
          warming_ = other.warming_;
          running_ = other.running_;
          closing_ = other.closing_;
          stopping_ = other.stopping_;
          updating_ = other.updating_;
          deleting_ = other.deleting_;
          failed_ = other.failed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Statuses Clone() {
          return new Statuses(this);
        }

        /// <summary>Field number for the "creating" field.</summary>
        public const int CreatingFieldNumber = 1;
        private long creating_;
        /// <summary>
        /// Instance is being created.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Creating {
          get { return creating_; }
          set {
            creating_ = value;
          }
        }

        /// <summary>Field number for the "starting" field.</summary>
        public const int StartingFieldNumber = 2;
        private long starting_;
        /// <summary>
        /// Instance is being started.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Starting {
          get { return starting_; }
          set {
            starting_ = value;
          }
        }

        /// <summary>Field number for the "opening" field.</summary>
        public const int OpeningFieldNumber = 3;
        private long opening_;
        /// <summary>
        /// Instance is being opened to receive traffic.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Opening {
          get { return opening_; }
          set {
            opening_ = value;
          }
        }

        /// <summary>Field number for the "warming" field.</summary>
        public const int WarmingFieldNumber = 4;
        private long warming_;
        /// <summary>
        /// Instance is being warmed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Warming {
          get { return warming_; }
          set {
            warming_ = value;
          }
        }

        /// <summary>Field number for the "running" field.</summary>
        public const int RunningFieldNumber = 5;
        private long running_;
        /// <summary>
        /// Instance is running normally.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Running {
          get { return running_; }
          set {
            running_ = value;
          }
        }

        /// <summary>Field number for the "closing" field.</summary>
        public const int ClosingFieldNumber = 6;
        private long closing_;
        /// <summary>
        /// Instance is being closed to traffic.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Closing {
          get { return closing_; }
          set {
            closing_ = value;
          }
        }

        /// <summary>Field number for the "stopping" field.</summary>
        public const int StoppingFieldNumber = 7;
        private long stopping_;
        /// <summary>
        /// Instance is being stopped.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Stopping {
          get { return stopping_; }
          set {
            stopping_ = value;
          }
        }

        /// <summary>Field number for the "updating" field.</summary>
        public const int UpdatingFieldNumber = 8;
        private long updating_;
        /// <summary>
        /// Instance is being updated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Updating {
          get { return updating_; }
          set {
            updating_ = value;
          }
        }

        /// <summary>Field number for the "deleting" field.</summary>
        public const int DeletingFieldNumber = 9;
        private long deleting_;
        /// <summary>
        /// Instance is being deleted.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Deleting {
          get { return deleting_; }
          set {
            deleting_ = value;
          }
        }

        /// <summary>Field number for the "failed" field.</summary>
        public const int FailedFieldNumber = 10;
        private long failed_;
        /// <summary>
        /// Instance failed and needs to be recreated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Failed {
          get { return failed_; }
          set {
            failed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Statuses);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Statuses other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Creating != other.Creating) return false;
          if (Starting != other.Starting) return false;
          if (Opening != other.Opening) return false;
          if (Warming != other.Warming) return false;
          if (Running != other.Running) return false;
          if (Closing != other.Closing) return false;
          if (Stopping != other.Stopping) return false;
          if (Updating != other.Updating) return false;
          if (Deleting != other.Deleting) return false;
          if (Failed != other.Failed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Creating != 0L) hash ^= Creating.GetHashCode();
          if (Starting != 0L) hash ^= Starting.GetHashCode();
          if (Opening != 0L) hash ^= Opening.GetHashCode();
          if (Warming != 0L) hash ^= Warming.GetHashCode();
          if (Running != 0L) hash ^= Running.GetHashCode();
          if (Closing != 0L) hash ^= Closing.GetHashCode();
          if (Stopping != 0L) hash ^= Stopping.GetHashCode();
          if (Updating != 0L) hash ^= Updating.GetHashCode();
          if (Deleting != 0L) hash ^= Deleting.GetHashCode();
          if (Failed != 0L) hash ^= Failed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Creating != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Creating);
          }
          if (Starting != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Starting);
          }
          if (Opening != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Opening);
          }
          if (Warming != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Warming);
          }
          if (Running != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(Running);
          }
          if (Closing != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(Closing);
          }
          if (Stopping != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(Stopping);
          }
          if (Updating != 0L) {
            output.WriteRawTag(64);
            output.WriteInt64(Updating);
          }
          if (Deleting != 0L) {
            output.WriteRawTag(72);
            output.WriteInt64(Deleting);
          }
          if (Failed != 0L) {
            output.WriteRawTag(80);
            output.WriteInt64(Failed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Creating != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Creating);
          }
          if (Starting != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Starting);
          }
          if (Opening != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Opening);
          }
          if (Warming != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Warming);
          }
          if (Running != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Running);
          }
          if (Closing != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Closing);
          }
          if (Stopping != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Stopping);
          }
          if (Updating != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Updating);
          }
          if (Deleting != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deleting);
          }
          if (Failed != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Failed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Statuses other) {
          if (other == null) {
            return;
          }
          if (other.Creating != 0L) {
            Creating = other.Creating;
          }
          if (other.Starting != 0L) {
            Starting = other.Starting;
          }
          if (other.Opening != 0L) {
            Opening = other.Opening;
          }
          if (other.Warming != 0L) {
            Warming = other.Warming;
          }
          if (other.Running != 0L) {
            Running = other.Running;
          }
          if (other.Closing != 0L) {
            Closing = other.Closing;
          }
          if (other.Stopping != 0L) {
            Stopping = other.Stopping;
          }
          if (other.Updating != 0L) {
            Updating = other.Updating;
          }
          if (other.Deleting != 0L) {
            Deleting = other.Deleting;
          }
          if (other.Failed != 0L) {
            Failed = other.Failed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Creating = input.ReadInt64();
                break;
              }
              case 16: {
                Starting = input.ReadInt64();
                break;
              }
              case 24: {
                Opening = input.ReadInt64();
                break;
              }
              case 32: {
                Warming = input.ReadInt64();
                break;
              }
              case 40: {
                Running = input.ReadInt64();
                break;
              }
              case 48: {
                Closing = input.ReadInt64();
                break;
              }
              case 56: {
                Stopping = input.ReadInt64();
                break;
              }
              case 64: {
                Updating = input.ReadInt64();
                break;
              }
              case 72: {
                Deleting = input.ReadInt64();
                break;
              }
              case 80: {
                Failed = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class ScalePolicy : pb::IMessage<ScalePolicy> {
    private static readonly pb::MessageParser<ScalePolicy> _parser = new pb::MessageParser<ScalePolicy>(() => new ScalePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScalePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy(ScalePolicy other) : this() {
      testAutoScale_ = other.testAutoScale_ != null ? other.testAutoScale_.Clone() : null;
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          FixedScale = other.FixedScale.Clone();
          break;
        case ScaleTypeOneofCase.AutoScale:
          AutoScale = other.AutoScale.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy Clone() {
      return new ScalePolicy(this);
    }

    /// <summary>Field number for the "fixed_scale" field.</summary>
    public const int FixedScaleFieldNumber = 1;
    /// <summary>
    /// [Manual scaling policy](/docs/compute/concepts/instance-groups/scale#fixed-policy) of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale FixedScale {
      get { return scaleTypeCase_ == ScaleTypeOneofCase.FixedScale ? (global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale) scaleType_ : null; }
      set {
        scaleType_ = value;
        scaleTypeCase_ = value == null ? ScaleTypeOneofCase.None : ScaleTypeOneofCase.FixedScale;
      }
    }

    /// <summary>Field number for the "auto_scale" field.</summary>
    public const int AutoScaleFieldNumber = 2;
    /// <summary>
    /// [Automatic scaling policy](/docs/compute/concepts/instance-groups/scale#auto-scale) of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale AutoScale {
      get { return scaleTypeCase_ == ScaleTypeOneofCase.AutoScale ? (global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale) scaleType_ : null; }
      set {
        scaleType_ = value;
        scaleTypeCase_ = value == null ? ScaleTypeOneofCase.None : ScaleTypeOneofCase.AutoScale;
      }
    }

    /// <summary>Field number for the "test_auto_scale" field.</summary>
    public const int TestAutoScaleFieldNumber = 3;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale testAutoScale_;
    /// <summary>
    /// Test spec for [automatic scaling policy](/docs/compute/concepts/instance-groups/scale#auto-scale) of the instance group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale TestAutoScale {
      get { return testAutoScale_; }
      set {
        testAutoScale_ = value;
      }
    }

    private object scaleType_;
    /// <summary>Enum of possible cases for the "scale_type" oneof.</summary>
    public enum ScaleTypeOneofCase {
      None = 0,
      FixedScale = 1,
      AutoScale = 2,
    }
    private ScaleTypeOneofCase scaleTypeCase_ = ScaleTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleTypeOneofCase ScaleTypeCase {
      get { return scaleTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaleType() {
      scaleTypeCase_ = ScaleTypeOneofCase.None;
      scaleType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScalePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScalePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FixedScale, other.FixedScale)) return false;
      if (!object.Equals(AutoScale, other.AutoScale)) return false;
      if (!object.Equals(TestAutoScale, other.TestAutoScale)) return false;
      if (ScaleTypeCase != other.ScaleTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) hash ^= FixedScale.GetHashCode();
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) hash ^= AutoScale.GetHashCode();
      if (testAutoScale_ != null) hash ^= TestAutoScale.GetHashCode();
      hash ^= (int) scaleTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        output.WriteRawTag(10);
        output.WriteMessage(FixedScale);
      }
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
        output.WriteRawTag(18);
        output.WriteMessage(AutoScale);
      }
      if (testAutoScale_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TestAutoScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedScale);
      }
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoScale);
      }
      if (testAutoScale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TestAutoScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScalePolicy other) {
      if (other == null) {
        return;
      }
      if (other.testAutoScale_ != null) {
        if (testAutoScale_ == null) {
          TestAutoScale = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale();
        }
        TestAutoScale.MergeFrom(other.TestAutoScale);
      }
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          if (FixedScale == null) {
            FixedScale = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale();
          }
          FixedScale.MergeFrom(other.FixedScale);
          break;
        case ScaleTypeOneofCase.AutoScale:
          if (AutoScale == null) {
            AutoScale = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale();
          }
          AutoScale.MergeFrom(other.AutoScale);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale subBuilder = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.FixedScale();
            if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
              subBuilder.MergeFrom(FixedScale);
            }
            input.ReadMessage(subBuilder);
            FixedScale = subBuilder;
            break;
          }
          case 18: {
            global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale subBuilder = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale();
            if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
              subBuilder.MergeFrom(AutoScale);
            }
            input.ReadMessage(subBuilder);
            AutoScale = subBuilder;
            break;
          }
          case 26: {
            if (testAutoScale_ == null) {
              TestAutoScale = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.AutoScale();
            }
            input.ReadMessage(TestAutoScale);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScalePolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class AutoScale : pb::IMessage<AutoScale> {
        private static readonly pb::MessageParser<AutoScale> _parser = new pb::MessageParser<AutoScale>(() => new AutoScale());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoScale> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale(AutoScale other) : this() {
          minZoneSize_ = other.minZoneSize_;
          maxSize_ = other.maxSize_;
          measurementDuration_ = other.measurementDuration_ != null ? other.measurementDuration_.Clone() : null;
          warmupDuration_ = other.warmupDuration_ != null ? other.warmupDuration_.Clone() : null;
          stabilizationDuration_ = other.stabilizationDuration_ != null ? other.stabilizationDuration_.Clone() : null;
          initialSize_ = other.initialSize_;
          cpuUtilizationRule_ = other.cpuUtilizationRule_ != null ? other.cpuUtilizationRule_.Clone() : null;
          customRules_ = other.customRules_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale Clone() {
          return new AutoScale(this);
        }

        /// <summary>Field number for the "min_zone_size" field.</summary>
        public const int MinZoneSizeFieldNumber = 1;
        private long minZoneSize_;
        /// <summary>
        /// Lower limit for instance count in each zone.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MinZoneSize {
          get { return minZoneSize_; }
          set {
            minZoneSize_ = value;
          }
        }

        /// <summary>Field number for the "max_size" field.</summary>
        public const int MaxSizeFieldNumber = 2;
        private long maxSize_;
        /// <summary>
        /// Upper limit for total instance count (across all zones).
        /// 0 means maximum limit = 100.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxSize {
          get { return maxSize_; }
          set {
            maxSize_ = value;
          }
        }

        /// <summary>Field number for the "measurement_duration" field.</summary>
        public const int MeasurementDurationFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Duration measurementDuration_;
        /// <summary>
        /// Time in seconds allotted for averaging metrics.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration MeasurementDuration {
          get { return measurementDuration_; }
          set {
            measurementDuration_ = value;
          }
        }

        /// <summary>Field number for the "warmup_duration" field.</summary>
        public const int WarmupDurationFieldNumber = 4;
        private global::Google.Protobuf.WellKnownTypes.Duration warmupDuration_;
        /// <summary>
        /// The warmup time of the instance in seconds. During this time,
        /// traffic is sent to the instance, but instance metrics are not collected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration WarmupDuration {
          get { return warmupDuration_; }
          set {
            warmupDuration_ = value;
          }
        }

        /// <summary>Field number for the "stabilization_duration" field.</summary>
        public const int StabilizationDurationFieldNumber = 5;
        private global::Google.Protobuf.WellKnownTypes.Duration stabilizationDuration_;
        /// <summary>
        /// Minimum amount of time in seconds allotted for monitoring before
        /// Instance Groups can reduce the number of instances in the group.
        /// During this time, the group size doesn't decrease, even if the new metric values
        /// indicate that it should.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Duration StabilizationDuration {
          get { return stabilizationDuration_; }
          set {
            stabilizationDuration_ = value;
          }
        }

        /// <summary>Field number for the "initial_size" field.</summary>
        public const int InitialSizeFieldNumber = 6;
        private long initialSize_;
        /// <summary>
        /// Target group size.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InitialSize {
          get { return initialSize_; }
          set {
            initialSize_ = value;
          }
        }

        /// <summary>Field number for the "cpu_utilization_rule" field.</summary>
        public const int CpuUtilizationRuleFieldNumber = 7;
        private global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule cpuUtilizationRule_;
        /// <summary>
        /// Defines an autoscaling rule based on the average CPU utilization of the instance group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule CpuUtilizationRule {
          get { return cpuUtilizationRule_; }
          set {
            cpuUtilizationRule_ = value;
          }
        }

        /// <summary>Field number for the "custom_rules" field.</summary>
        public const int CustomRulesFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule> _repeated_customRules_codec
            = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule> customRules_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule>();
        /// <summary>
        /// Defines an autoscaling rule based on a [custom metric](/docs/monitoring/operations/metric/add) from Yandex Monitoring.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule> CustomRules {
          get { return customRules_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AutoScale);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoScale other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MinZoneSize != other.MinZoneSize) return false;
          if (MaxSize != other.MaxSize) return false;
          if (!object.Equals(MeasurementDuration, other.MeasurementDuration)) return false;
          if (!object.Equals(WarmupDuration, other.WarmupDuration)) return false;
          if (!object.Equals(StabilizationDuration, other.StabilizationDuration)) return false;
          if (InitialSize != other.InitialSize) return false;
          if (!object.Equals(CpuUtilizationRule, other.CpuUtilizationRule)) return false;
          if(!customRules_.Equals(other.customRules_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MinZoneSize != 0L) hash ^= MinZoneSize.GetHashCode();
          if (MaxSize != 0L) hash ^= MaxSize.GetHashCode();
          if (measurementDuration_ != null) hash ^= MeasurementDuration.GetHashCode();
          if (warmupDuration_ != null) hash ^= WarmupDuration.GetHashCode();
          if (stabilizationDuration_ != null) hash ^= StabilizationDuration.GetHashCode();
          if (InitialSize != 0L) hash ^= InitialSize.GetHashCode();
          if (cpuUtilizationRule_ != null) hash ^= CpuUtilizationRule.GetHashCode();
          hash ^= customRules_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MinZoneSize != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(MinZoneSize);
          }
          if (MaxSize != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(MaxSize);
          }
          if (measurementDuration_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(MeasurementDuration);
          }
          if (warmupDuration_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(WarmupDuration);
          }
          if (stabilizationDuration_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(StabilizationDuration);
          }
          if (InitialSize != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(InitialSize);
          }
          if (cpuUtilizationRule_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(CpuUtilizationRule);
          }
          customRules_.WriteTo(output, _repeated_customRules_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MinZoneSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinZoneSize);
          }
          if (MaxSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSize);
          }
          if (measurementDuration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeasurementDuration);
          }
          if (warmupDuration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(WarmupDuration);
          }
          if (stabilizationDuration_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(StabilizationDuration);
          }
          if (InitialSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitialSize);
          }
          if (cpuUtilizationRule_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(CpuUtilizationRule);
          }
          size += customRules_.CalculateSize(_repeated_customRules_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoScale other) {
          if (other == null) {
            return;
          }
          if (other.MinZoneSize != 0L) {
            MinZoneSize = other.MinZoneSize;
          }
          if (other.MaxSize != 0L) {
            MaxSize = other.MaxSize;
          }
          if (other.measurementDuration_ != null) {
            if (measurementDuration_ == null) {
              MeasurementDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            MeasurementDuration.MergeFrom(other.MeasurementDuration);
          }
          if (other.warmupDuration_ != null) {
            if (warmupDuration_ == null) {
              WarmupDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            WarmupDuration.MergeFrom(other.WarmupDuration);
          }
          if (other.stabilizationDuration_ != null) {
            if (stabilizationDuration_ == null) {
              StabilizationDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            StabilizationDuration.MergeFrom(other.StabilizationDuration);
          }
          if (other.InitialSize != 0L) {
            InitialSize = other.InitialSize;
          }
          if (other.cpuUtilizationRule_ != null) {
            if (cpuUtilizationRule_ == null) {
              CpuUtilizationRule = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule();
            }
            CpuUtilizationRule.MergeFrom(other.CpuUtilizationRule);
          }
          customRules_.Add(other.customRules_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MinZoneSize = input.ReadInt64();
                break;
              }
              case 16: {
                MaxSize = input.ReadInt64();
                break;
              }
              case 26: {
                if (measurementDuration_ == null) {
                  MeasurementDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(MeasurementDuration);
                break;
              }
              case 34: {
                if (warmupDuration_ == null) {
                  WarmupDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(WarmupDuration);
                break;
              }
              case 42: {
                if (stabilizationDuration_ == null) {
                  StabilizationDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
                }
                input.ReadMessage(StabilizationDuration);
                break;
              }
              case 48: {
                InitialSize = input.ReadInt64();
                break;
              }
              case 58: {
                if (cpuUtilizationRule_ == null) {
                  CpuUtilizationRule = new global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CpuUtilizationRule();
                }
                input.ReadMessage(CpuUtilizationRule);
                break;
              }
              case 66: {
                customRules_.AddEntriesFrom(input, _repeated_customRules_codec);
                break;
              }
            }
          }
        }

      }

      internal sealed partial class CpuUtilizationRule : pb::IMessage<CpuUtilizationRule> {
        private static readonly pb::MessageParser<CpuUtilizationRule> _parser = new pb::MessageParser<CpuUtilizationRule>(() => new CpuUtilizationRule());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CpuUtilizationRule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CpuUtilizationRule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CpuUtilizationRule(CpuUtilizationRule other) : this() {
          utilizationTarget_ = other.utilizationTarget_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CpuUtilizationRule Clone() {
          return new CpuUtilizationRule(this);
        }

        /// <summary>Field number for the "utilization_target" field.</summary>
        public const int UtilizationTargetFieldNumber = 1;
        private double utilizationTarget_;
        /// <summary>
        /// Target CPU utilization level. Instance Groups maintains this level for each availability zone.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double UtilizationTarget {
          get { return utilizationTarget_; }
          set {
            utilizationTarget_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CpuUtilizationRule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CpuUtilizationRule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UtilizationTarget, other.UtilizationTarget)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (UtilizationTarget != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UtilizationTarget);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (UtilizationTarget != 0D) {
            output.WriteRawTag(9);
            output.WriteDouble(UtilizationTarget);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (UtilizationTarget != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CpuUtilizationRule other) {
          if (other == null) {
            return;
          }
          if (other.UtilizationTarget != 0D) {
            UtilizationTarget = other.UtilizationTarget;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                UtilizationTarget = input.ReadDouble();
                break;
              }
            }
          }
        }

      }

      internal sealed partial class CustomRule : pb::IMessage<CustomRule> {
        private static readonly pb::MessageParser<CustomRule> _parser = new pb::MessageParser<CustomRule>(() => new CustomRule());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CustomRule> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomRule() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomRule(CustomRule other) : this() {
          ruleType_ = other.ruleType_;
          metricType_ = other.metricType_;
          metricName_ = other.metricName_;
          labels_ = other.labels_.Clone();
          target_ = other.target_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CustomRule Clone() {
          return new CustomRule(this);
        }

        /// <summary>Field number for the "rule_type" field.</summary>
        public const int RuleTypeFieldNumber = 1;
        private global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType ruleType_ = global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType.Unspecified;
        /// <summary>
        /// Custom metric rule type. This field affects which label from
        /// the custom metric should be used: `zone_id` or `instance_id`.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType RuleType {
          get { return ruleType_; }
          set {
            ruleType_ = value;
          }
        }

        /// <summary>Field number for the "metric_type" field.</summary>
        public const int MetricTypeFieldNumber = 2;
        private global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType metricType_ = global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType.Unspecified;
        /// <summary>
        /// Type of custom metric. This field affects how Instance Groups calculates the average metric value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType MetricType {
          get { return metricType_; }
          set {
            metricType_ = value;
          }
        }

        /// <summary>Field number for the "metric_name" field.</summary>
        public const int MetricNameFieldNumber = 3;
        private string metricName_ = "";
        /// <summary>
        /// Name of custom metric in Yandex Monitoring that should be used for scaling.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MetricName {
          get { return metricName_; }
          set {
            metricName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "labels" field.</summary>
        public const int LabelsFieldNumber = 5;
        private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
        private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
        /// <summary>
        /// Labels of custom metric in Yandex Monitoring that should be used for scaling.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> Labels {
          get { return labels_; }
        }

        /// <summary>Field number for the "target" field.</summary>
        public const int TargetFieldNumber = 4;
        private double target_;
        /// <summary>
        /// Target value for the custom metric. Instance Groups maintains this level for each availability zone.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double Target {
          get { return target_; }
          set {
            target_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CustomRule);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CustomRule other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RuleType != other.RuleType) return false;
          if (MetricType != other.MetricType) return false;
          if (MetricName != other.MetricName) return false;
          if (!Labels.Equals(other.Labels)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Target, other.Target)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RuleType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType.Unspecified) hash ^= RuleType.GetHashCode();
          if (MetricType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType.Unspecified) hash ^= MetricType.GetHashCode();
          if (MetricName.Length != 0) hash ^= MetricName.GetHashCode();
          hash ^= Labels.GetHashCode();
          if (Target != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Target);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RuleType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType.Unspecified) {
            output.WriteRawTag(8);
            output.WriteEnum((int) RuleType);
          }
          if (MetricType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType.Unspecified) {
            output.WriteRawTag(16);
            output.WriteEnum((int) MetricType);
          }
          if (MetricName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(MetricName);
          }
          if (Target != 0D) {
            output.WriteRawTag(33);
            output.WriteDouble(Target);
          }
          labels_.WriteTo(output, _map_labels_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RuleType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RuleType);
          }
          if (MetricType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType.Unspecified) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MetricType);
          }
          if (MetricName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(MetricName);
          }
          size += labels_.CalculateSize(_map_labels_codec);
          if (Target != 0D) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CustomRule other) {
          if (other == null) {
            return;
          }
          if (other.RuleType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType.Unspecified) {
            RuleType = other.RuleType;
          }
          if (other.MetricType != global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType.Unspecified) {
            MetricType = other.MetricType;
          }
          if (other.MetricName.Length != 0) {
            MetricName = other.MetricName;
          }
          labels_.Add(other.labels_);
          if (other.Target != 0D) {
            Target = other.Target;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                RuleType = (global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.RuleType) input.ReadEnum();
                break;
              }
              case 16: {
                MetricType = (global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Types.CustomRule.Types.MetricType) input.ReadEnum();
                break;
              }
              case 26: {
                MetricName = input.ReadString();
                break;
              }
              case 33: {
                Target = input.ReadDouble();
                break;
              }
              case 42: {
                labels_.AddEntriesFrom(input, _map_labels_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CustomRule message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum RuleType {
            [pbr::OriginalName("RULE_TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// This type means that the metric applies to one instance.
            /// First, Instance Groups calculates the average metric value for each instance,
            /// then averages the values for instances in one availability zone.
            /// This type of metric must have the `instance_id` label.
            /// </summary>
            [pbr::OriginalName("UTILIZATION")] Utilization = 1,
            /// <summary>
            /// This type means that the metric applies to instances in one availability zone.
            /// This type of metric must have the `zone_id` label.
            /// </summary>
            [pbr::OriginalName("WORKLOAD")] Workload = 2,
          }

          internal enum MetricType {
            [pbr::OriginalName("METRIC_TYPE_UNSPECIFIED")] Unspecified = 0,
            /// <summary>
            /// This type is used for metrics that show the metric value at a certain point in time,
            /// such as requests per second to the server on an instance.
            ///
            /// Instance Groups calculates the average metric value for the period
            /// specified in the [AutoScale.measurement_duration] field.
            /// </summary>
            [pbr::OriginalName("GAUGE")] Gauge = 1,
            /// <summary>
            /// This type is used for metrics that monotonically increase over time,
            /// such as the total number of requests to the server on an instance.
            ///
            /// Instance Groups calculates the average value increase for the period
            /// specified in the [AutoScale.measurement_duration] field.
            /// </summary>
            [pbr::OriginalName("COUNTER")] Counter = 2,
          }

        }
        #endregion

      }

      internal sealed partial class FixedScale : pb::IMessage<FixedScale> {
        private static readonly pb::MessageParser<FixedScale> _parser = new pb::MessageParser<FixedScale>(() => new FixedScale());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FixedScale> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.ScalePolicy.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale(FixedScale other) : this() {
          size_ = other.size_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale Clone() {
          return new FixedScale(this);
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 1;
        private long size_;
        /// <summary>
        /// Number of instances in the instance group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FixedScale);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FixedScale other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Size != other.Size) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Size != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Size);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FixedScale other) {
          if (other == null) {
            return;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Size = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class DeployPolicy : pb::IMessage<DeployPolicy> {
    private static readonly pb::MessageParser<DeployPolicy> _parser = new pb::MessageParser<DeployPolicy>(() => new DeployPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeployPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy(DeployPolicy other) : this() {
      maxUnavailable_ = other.maxUnavailable_;
      maxDeleting_ = other.maxDeleting_;
      maxCreating_ = other.maxCreating_;
      maxExpansion_ = other.maxExpansion_;
      startupDuration_ = other.startupDuration_ != null ? other.startupDuration_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy Clone() {
      return new DeployPolicy(this);
    }

    /// <summary>Field number for the "max_unavailable" field.</summary>
    public const int MaxUnavailableFieldNumber = 1;
    private long maxUnavailable_;
    /// <summary>
    /// The maximum number of running instances that can be taken offline (i.e., stopped or deleted) at the same time
    /// during the update process.
    /// If [max_expansion] is not specified or set to zero, [max_unavailable] must be set to a non-zero value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxUnavailable {
      get { return maxUnavailable_; }
      set {
        maxUnavailable_ = value;
      }
    }

    /// <summary>Field number for the "max_deleting" field.</summary>
    public const int MaxDeletingFieldNumber = 2;
    private long maxDeleting_;
    /// <summary>
    /// The maximum number of instances that can be deleted at the same time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxDeleting {
      get { return maxDeleting_; }
      set {
        maxDeleting_ = value;
      }
    }

    /// <summary>Field number for the "max_creating" field.</summary>
    public const int MaxCreatingFieldNumber = 3;
    private long maxCreating_;
    /// <summary>
    /// The maximum number of instances that can be created at the same time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxCreating {
      get { return maxCreating_; }
      set {
        maxCreating_ = value;
      }
    }

    /// <summary>Field number for the "max_expansion" field.</summary>
    public const int MaxExpansionFieldNumber = 6;
    private long maxExpansion_;
    /// <summary>
    /// The maximum number of instances that can be temporarily allocated above the group's target size
    /// during the update process.
    /// If [max_unavailable] is not specified or set to zero, [max_expansion] must be set to a non-zero value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxExpansion {
      get { return maxExpansion_; }
      set {
        maxExpansion_ = value;
      }
    }

    /// <summary>Field number for the "startup_duration" field.</summary>
    public const int StartupDurationFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Duration startupDuration_;
    /// <summary>
    /// Instance startup duration.
    /// Instance will be considered up and running (and start receiving traffic) only after startup_duration
    /// has elapsed and all health checks are passed.
    /// See [yandex.cloud.compute.v1.instancegroup.ManagedInstance.Status] for more information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration StartupDuration {
      get { return startupDuration_; }
      set {
        startupDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeployPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeployPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxUnavailable != other.MaxUnavailable) return false;
      if (MaxDeleting != other.MaxDeleting) return false;
      if (MaxCreating != other.MaxCreating) return false;
      if (MaxExpansion != other.MaxExpansion) return false;
      if (!object.Equals(StartupDuration, other.StartupDuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxUnavailable != 0L) hash ^= MaxUnavailable.GetHashCode();
      if (MaxDeleting != 0L) hash ^= MaxDeleting.GetHashCode();
      if (MaxCreating != 0L) hash ^= MaxCreating.GetHashCode();
      if (MaxExpansion != 0L) hash ^= MaxExpansion.GetHashCode();
      if (startupDuration_ != null) hash ^= StartupDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxUnavailable != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxUnavailable);
      }
      if (MaxDeleting != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxDeleting);
      }
      if (MaxCreating != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MaxCreating);
      }
      if (MaxExpansion != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxExpansion);
      }
      if (startupDuration_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(StartupDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxUnavailable != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxUnavailable);
      }
      if (MaxDeleting != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxDeleting);
      }
      if (MaxCreating != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCreating);
      }
      if (MaxExpansion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxExpansion);
      }
      if (startupDuration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartupDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeployPolicy other) {
      if (other == null) {
        return;
      }
      if (other.MaxUnavailable != 0L) {
        MaxUnavailable = other.MaxUnavailable;
      }
      if (other.MaxDeleting != 0L) {
        MaxDeleting = other.MaxDeleting;
      }
      if (other.MaxCreating != 0L) {
        MaxCreating = other.MaxCreating;
      }
      if (other.MaxExpansion != 0L) {
        MaxExpansion = other.MaxExpansion;
      }
      if (other.startupDuration_ != null) {
        if (startupDuration_ == null) {
          StartupDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        StartupDuration.MergeFrom(other.StartupDuration);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxUnavailable = input.ReadInt64();
            break;
          }
          case 16: {
            MaxDeleting = input.ReadInt64();
            break;
          }
          case 24: {
            MaxCreating = input.ReadInt64();
            break;
          }
          case 48: {
            MaxExpansion = input.ReadInt64();
            break;
          }
          case 58: {
            if (startupDuration_ == null) {
              StartupDuration = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(StartupDuration);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AllocationPolicy : pb::IMessage<AllocationPolicy> {
    private static readonly pb::MessageParser<AllocationPolicy> _parser = new pb::MessageParser<AllocationPolicy>(() => new AllocationPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllocationPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationPolicy(AllocationPolicy other) : this() {
      zones_ = other.zones_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllocationPolicy Clone() {
      return new AllocationPolicy(this);
    }

    /// <summary>Field number for the "zones" field.</summary>
    public const int ZonesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone> _repeated_zones_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone> zones_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone>();
    /// <summary>
    /// List of availability zones.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Types.Zone> Zones {
      get { return zones_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllocationPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllocationPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!zones_.Equals(other.zones_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= zones_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      zones_.WriteTo(output, _repeated_zones_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += zones_.CalculateSize(_repeated_zones_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllocationPolicy other) {
      if (other == null) {
        return;
      }
      zones_.Add(other.zones_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            zones_.AddEntriesFrom(input, _repeated_zones_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AllocationPolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Zone : pb::IMessage<Zone> {
        private static readonly pb::MessageParser<Zone> _parser = new pb::MessageParser<Zone>(() => new Zone());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Zone> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.AllocationPolicy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zone() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zone(Zone other) : this() {
          zoneId_ = other.zoneId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Zone Clone() {
          return new Zone(this);
        }

        /// <summary>Field number for the "zone_id" field.</summary>
        public const int ZoneIdFieldNumber = 1;
        private string zoneId_ = "";
        /// <summary>
        /// ID of the availability zone where the instance resides.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ZoneId {
          get { return zoneId_; }
          set {
            zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Zone);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Zone other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ZoneId != other.ZoneId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ZoneId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ZoneId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ZoneId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Zone other) {
          if (other == null) {
            return;
          }
          if (other.ZoneId.Length != 0) {
            ZoneId = other.ZoneId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ZoneId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class InstanceTemplate : pb::IMessage<InstanceTemplate> {
    private static readonly pb::MessageParser<InstanceTemplate> _parser = new pb::MessageParser<InstanceTemplate>(() => new InstanceTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstanceTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceTemplate(InstanceTemplate other) : this() {
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      platformId_ = other.platformId_;
      resourcesSpec_ = other.resourcesSpec_ != null ? other.resourcesSpec_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      bootDiskSpec_ = other.bootDiskSpec_ != null ? other.bootDiskSpec_.Clone() : null;
      secondaryDiskSpecs_ = other.secondaryDiskSpecs_.Clone();
      networkInterfaceSpecs_ = other.networkInterfaceSpecs_.Clone();
      schedulingPolicy_ = other.schedulingPolicy_ != null ? other.schedulingPolicy_.Clone() : null;
      serviceAccountId_ = other.serviceAccountId_;
      networkSettings_ = other.networkSettings_ != null ? other.networkSettings_.Clone() : null;
      name_ = other.name_;
      hostname_ = other.hostname_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstanceTemplate Clone() {
      return new InstanceTemplate(this);
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 1;
    private string description_ = "";
    /// <summary>
    /// Description of the instance template.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 3;
    private string platformId_ = "";
    /// <summary>
    /// ID of the hardware platform configuration for the instance.
    /// Platforms allows you to create various types of instances: with a large amount of memory,
    /// with a large number of cores, with a burstable performance.
    /// For more information, see [Platforms](/docs/compute/concepts/vm-platforms).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources_spec" field.</summary>
    public const int ResourcesSpecFieldNumber = 4;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec resourcesSpec_;
    /// <summary>
    /// Computing resources of the instance such as the amount of memory and number of cores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec ResourcesSpec {
      get { return resourcesSpec_; }
      set {
        resourcesSpec_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
    ///
    /// Metadata values may contain one of the supported placeholders:
    ///   {instance_group.id}
    ///   {instance.short_id}
    ///   {instance.index}
    ///   {instance.index_in_zone}
    ///   {instance.zone_id}
    /// InstanceGroup and Instance labels may be copied to metadata following way:
    ///   {instance_group.labels.some_label_key}
    ///   {instance.labels.another_label_key}
    /// These placeholders will be substituted for each created instance anywhere in the value text.
    /// In the rare case the value requires to contain this placeholder explicitly,
    /// it must be escaped with double brackets, in example {instance.index}.
    ///
    /// For example, you may use the metadata in order to provide your public SSH key to the instance.
    /// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "boot_disk_spec" field.</summary>
    public const int BootDiskSpecFieldNumber = 6;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec bootDiskSpec_;
    /// <summary>
    /// Boot disk specification that will be attached to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec BootDiskSpec {
      get { return bootDiskSpec_; }
      set {
        bootDiskSpec_ = value;
      }
    }

    /// <summary>Field number for the "secondary_disk_specs" field.</summary>
    public const int SecondaryDiskSpecsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec> _repeated_secondaryDiskSpecs_codec
        = pb::FieldCodec.ForMessage(58, global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec> secondaryDiskSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec>();
    /// <summary>
    /// Array of secondary disks that will be attached to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec> SecondaryDiskSpecs {
      get { return secondaryDiskSpecs_; }
    }

    /// <summary>Field number for the "network_interface_specs" field.</summary>
    public const int NetworkInterfaceSpecsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec> _repeated_networkInterfaceSpecs_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec> networkInterfaceSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec>();
    /// <summary>
    /// Array of network interfaces that will be attached to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterfaceSpec> NetworkInterfaceSpecs {
      get { return networkInterfaceSpecs_; }
    }

    /// <summary>Field number for the "scheduling_policy" field.</summary>
    public const int SchedulingPolicyFieldNumber = 9;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy schedulingPolicy_;
    /// <summary>
    /// Scheduling policy for the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy SchedulingPolicy {
      get { return schedulingPolicy_; }
      set {
        schedulingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 10;
    private string serviceAccountId_ = "";
    /// <summary>
    /// Service account ID for the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_settings" field.</summary>
    public const int NetworkSettingsFieldNumber = 11;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings networkSettings_;
    /// <summary>
    /// Network settings for the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings NetworkSettings {
      get { return networkSettings_; }
      set {
        networkSettings_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 12;
    private string name_ = "";
    /// <summary>
    /// Name of the instance.
    /// In order to be unique it must contain at least on of instance unique placeholders:
    ///   {instance.short_id}
    ///   {instance.index}
    ///   combination of {instance.zone_id} and {instance.index_in_zone}
    /// Example: my-instance-{instance.index}
    /// If not set, default is used: {instance_group.id}-{instance.short_id}
    /// It may also contain another placeholders, see metadata doc for full list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 13;
    private string hostname_ = "";
    /// <summary>
    /// Host name for the instance.
    /// This field is used to generate the [yandex.cloud.compute.v1.Instance.fqdn] value.
    /// The host name must be unique within the network and region.
    /// If not specified, the host name will be equal to [yandex.cloud.compute.v1.Instance.id] of the instance
    /// and FQDN will be `&lt;id>.auto.internal`. Otherwise FQDN will be `&lt;hostname>.&lt;region_id>.internal`.
    ///
    /// In order to be unique it must contain at least on of instance unique placeholders:
    ///   {instance.short_id}
    ///   {instance.index}
    ///   combination of {instance.zone_id} and {instance.index_in_zone}
    /// Example: my-instance-{instance.index}
    /// If not set, `name` value will be used
    /// It may also contain another placeholders, see metadata doc for full list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstanceTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstanceTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (PlatformId != other.PlatformId) return false;
      if (!object.Equals(ResourcesSpec, other.ResourcesSpec)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (!object.Equals(BootDiskSpec, other.BootDiskSpec)) return false;
      if(!secondaryDiskSpecs_.Equals(other.secondaryDiskSpecs_)) return false;
      if(!networkInterfaceSpecs_.Equals(other.networkInterfaceSpecs_)) return false;
      if (!object.Equals(SchedulingPolicy, other.SchedulingPolicy)) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      if (!object.Equals(NetworkSettings, other.NetworkSettings)) return false;
      if (Name != other.Name) return false;
      if (Hostname != other.Hostname) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (resourcesSpec_ != null) hash ^= ResourcesSpec.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (bootDiskSpec_ != null) hash ^= BootDiskSpec.GetHashCode();
      hash ^= secondaryDiskSpecs_.GetHashCode();
      hash ^= networkInterfaceSpecs_.GetHashCode();
      if (schedulingPolicy_ != null) hash ^= SchedulingPolicy.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (networkSettings_ != null) hash ^= NetworkSettings.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Description.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (PlatformId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PlatformId);
      }
      if (resourcesSpec_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ResourcesSpec);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (bootDiskSpec_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BootDiskSpec);
      }
      secondaryDiskSpecs_.WriteTo(output, _repeated_secondaryDiskSpecs_codec);
      networkInterfaceSpecs_.WriteTo(output, _repeated_networkInterfaceSpecs_codec);
      if (schedulingPolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SchedulingPolicy);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ServiceAccountId);
      }
      if (networkSettings_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(NetworkSettings);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Name);
      }
      if (Hostname.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Hostname);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (resourcesSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcesSpec);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (bootDiskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootDiskSpec);
      }
      size += secondaryDiskSpecs_.CalculateSize(_repeated_secondaryDiskSpecs_codec);
      size += networkInterfaceSpecs_.CalculateSize(_repeated_networkInterfaceSpecs_codec);
      if (schedulingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchedulingPolicy);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (networkSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkSettings);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstanceTemplate other) {
      if (other == null) {
        return;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.resourcesSpec_ != null) {
        if (resourcesSpec_ == null) {
          ResourcesSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec();
        }
        ResourcesSpec.MergeFrom(other.ResourcesSpec);
      }
      metadata_.Add(other.metadata_);
      if (other.bootDiskSpec_ != null) {
        if (bootDiskSpec_ == null) {
          BootDiskSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec();
        }
        BootDiskSpec.MergeFrom(other.BootDiskSpec);
      }
      secondaryDiskSpecs_.Add(other.secondaryDiskSpecs_);
      networkInterfaceSpecs_.Add(other.networkInterfaceSpecs_);
      if (other.schedulingPolicy_ != null) {
        if (schedulingPolicy_ == null) {
          SchedulingPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy();
        }
        SchedulingPolicy.MergeFrom(other.SchedulingPolicy);
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      if (other.networkSettings_ != null) {
        if (networkSettings_ == null) {
          NetworkSettings = new global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings();
        }
        NetworkSettings.MergeFrom(other.NetworkSettings);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Description = input.ReadString();
            break;
          }
          case 18: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 26: {
            PlatformId = input.ReadString();
            break;
          }
          case 34: {
            if (resourcesSpec_ == null) {
              ResourcesSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.ResourcesSpec();
            }
            input.ReadMessage(ResourcesSpec);
            break;
          }
          case 42: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 50: {
            if (bootDiskSpec_ == null) {
              BootDiskSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec();
            }
            input.ReadMessage(BootDiskSpec);
            break;
          }
          case 58: {
            secondaryDiskSpecs_.AddEntriesFrom(input, _repeated_secondaryDiskSpecs_codec);
            break;
          }
          case 66: {
            networkInterfaceSpecs_.AddEntriesFrom(input, _repeated_networkInterfaceSpecs_codec);
            break;
          }
          case 74: {
            if (schedulingPolicy_ == null) {
              SchedulingPolicy = new global::Yandex.Cloud.Compute.V1.Instancegroup.SchedulingPolicy();
            }
            input.ReadMessage(SchedulingPolicy);
            break;
          }
          case 82: {
            ServiceAccountId = input.ReadString();
            break;
          }
          case 90: {
            if (networkSettings_ == null) {
              NetworkSettings = new global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings();
            }
            input.ReadMessage(NetworkSettings);
            break;
          }
          case 98: {
            Name = input.ReadString();
            break;
          }
          case 106: {
            Hostname = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResourcesSpec : pb::IMessage<ResourcesSpec> {
    private static readonly pb::MessageParser<ResourcesSpec> _parser = new pb::MessageParser<ResourcesSpec>(() => new ResourcesSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourcesSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec(ResourcesSpec other) : this() {
      memory_ = other.memory_;
      cores_ = other.cores_;
      coreFraction_ = other.coreFraction_;
      gpus_ = other.gpus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec Clone() {
      return new ResourcesSpec(this);
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 1;
    private long memory_;
    /// <summary>
    /// The amount of memory available to the instance, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 2;
    private long cores_;
    /// <summary>
    /// The number of cores available to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "core_fraction" field.</summary>
    public const int CoreFractionFieldNumber = 3;
    private long coreFraction_;
    /// <summary>
    /// Baseline level of CPU performance with the ability to burst performance above that baseline level.
    /// This field sets baseline performance for each core.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoreFraction {
      get { return coreFraction_; }
      set {
        coreFraction_ = value;
      }
    }

    /// <summary>Field number for the "gpus" field.</summary>
    public const int GpusFieldNumber = 4;
    private long gpus_;
    /// <summary>
    /// The number of GPUs available to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gpus {
      get { return gpus_; }
      set {
        gpus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourcesSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourcesSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memory != other.Memory) return false;
      if (Cores != other.Cores) return false;
      if (CoreFraction != other.CoreFraction) return false;
      if (Gpus != other.Gpus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memory != 0L) hash ^= Memory.GetHashCode();
      if (Cores != 0L) hash ^= Cores.GetHashCode();
      if (CoreFraction != 0L) hash ^= CoreFraction.GetHashCode();
      if (Gpus != 0L) hash ^= Gpus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memory != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Memory);
      }
      if (Cores != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Cores);
      }
      if (CoreFraction != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoreFraction);
      }
      if (Gpus != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Gpus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Memory);
      }
      if (Cores != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cores);
      }
      if (CoreFraction != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoreFraction);
      }
      if (Gpus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gpus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourcesSpec other) {
      if (other == null) {
        return;
      }
      if (other.Memory != 0L) {
        Memory = other.Memory;
      }
      if (other.Cores != 0L) {
        Cores = other.Cores;
      }
      if (other.CoreFraction != 0L) {
        CoreFraction = other.CoreFraction;
      }
      if (other.Gpus != 0L) {
        Gpus = other.Gpus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Memory = input.ReadInt64();
            break;
          }
          case 16: {
            Cores = input.ReadInt64();
            break;
          }
          case 24: {
            CoreFraction = input.ReadInt64();
            break;
          }
          case 32: {
            Gpus = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AttachedDiskSpec : pb::IMessage<AttachedDiskSpec> {
    private static readonly pb::MessageParser<AttachedDiskSpec> _parser = new pb::MessageParser<AttachedDiskSpec>(() => new AttachedDiskSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachedDiskSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec(AttachedDiskSpec other) : this() {
      mode_ = other.mode_;
      deviceName_ = other.deviceName_;
      diskSpec_ = other.diskSpec_ != null ? other.diskSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec Clone() {
      return new AttachedDiskSpec(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode mode_ = global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode.Unspecified;
    /// <summary>
    /// Access mode to the Disk resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    /// <summary>
    /// Serial number that is reflected in the /dev/disk/by-id/ tree
    /// of a Linux operating system running within the instance.
    ///
    /// This value can be used to reference the device for mounting, resizing, and so on, from within the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_spec" field.</summary>
    public const int DiskSpecFieldNumber = 3;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec diskSpec_;
    /// <summary>
    /// Disk specification that is attached to the instance. For more information, see [Disks](/docs/compute/concepts/disk).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec DiskSpec {
      get { return diskSpec_; }
      set {
        diskSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachedDiskSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachedDiskSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (DeviceName != other.DeviceName) return false;
      if (!object.Equals(DiskSpec, other.DiskSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode.Unspecified) hash ^= Mode.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (diskSpec_ != null) hash ^= DiskSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (diskSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DiskSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (diskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiskSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachedDiskSpec other) {
      if (other == null) {
        return;
      }
      if (other.Mode != global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode.Unspecified) {
        Mode = other.Mode;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.diskSpec_ != null) {
        if (diskSpec_ == null) {
          DiskSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec();
        }
        DiskSpec.MergeFrom(other.DiskSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
          case 26: {
            if (diskSpec_ == null) {
              DiskSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Types.DiskSpec();
            }
            input.ReadMessage(DiskSpec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttachedDiskSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Mode {
        [pbr::OriginalName("MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Read-only access.
        /// </summary>
        [pbr::OriginalName("READ_ONLY")] ReadOnly = 1,
        /// <summary>
        /// Read/Write access.
        /// </summary>
        [pbr::OriginalName("READ_WRITE")] ReadWrite = 2,
      }

      internal sealed partial class DiskSpec : pb::IMessage<DiskSpec> {
        private static readonly pb::MessageParser<DiskSpec> _parser = new pb::MessageParser<DiskSpec>(() => new DiskSpec());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DiskSpec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.AttachedDiskSpec.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec(DiskSpec other) : this() {
          description_ = other.description_;
          typeId_ = other.typeId_;
          size_ = other.size_;
          switch (other.SourceOneofCase) {
            case SourceOneofOneofCase.ImageId:
              ImageId = other.ImageId;
              break;
            case SourceOneofOneofCase.SnapshotId:
              SnapshotId = other.SnapshotId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec Clone() {
          return new DiskSpec(this);
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        /// <summary>
        /// Description of the disk.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type_id" field.</summary>
        public const int TypeIdFieldNumber = 2;
        private string typeId_ = "";
        /// <summary>
        /// ID of the disk type.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TypeId {
          get { return typeId_; }
          set {
            typeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 3;
        private long size_;
        /// <summary>
        /// Size of the disk, specified in bytes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        /// <summary>Field number for the "image_id" field.</summary>
        public const int ImageIdFieldNumber = 4;
        /// <summary>
        /// ID of the image that will be used for disk creation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageId {
          get { return sourceOneofCase_ == SourceOneofOneofCase.ImageId ? (string) sourceOneof_ : ""; }
          set {
            sourceOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            sourceOneofCase_ = SourceOneofOneofCase.ImageId;
          }
        }

        /// <summary>Field number for the "snapshot_id" field.</summary>
        public const int SnapshotIdFieldNumber = 5;
        /// <summary>
        /// ID of the snapshot that will be used for disk creation.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SnapshotId {
          get { return sourceOneofCase_ == SourceOneofOneofCase.SnapshotId ? (string) sourceOneof_ : ""; }
          set {
            sourceOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            sourceOneofCase_ = SourceOneofOneofCase.SnapshotId;
          }
        }

        private object sourceOneof_;
        /// <summary>Enum of possible cases for the "source_oneof" oneof.</summary>
        public enum SourceOneofOneofCase {
          None = 0,
          ImageId = 4,
          SnapshotId = 5,
        }
        private SourceOneofOneofCase sourceOneofCase_ = SourceOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceOneofOneofCase SourceOneofCase {
          get { return sourceOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSourceOneof() {
          sourceOneofCase_ = SourceOneofOneofCase.None;
          sourceOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DiskSpec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DiskSpec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if (TypeId != other.TypeId) return false;
          if (Size != other.Size) return false;
          if (ImageId != other.ImageId) return false;
          if (SnapshotId != other.SnapshotId) return false;
          if (SourceOneofCase != other.SourceOneofCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (TypeId.Length != 0) hash ^= TypeId.GetHashCode();
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (sourceOneofCase_ == SourceOneofOneofCase.ImageId) hash ^= ImageId.GetHashCode();
          if (sourceOneofCase_ == SourceOneofOneofCase.SnapshotId) hash ^= SnapshotId.GetHashCode();
          hash ^= (int) sourceOneofCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          if (TypeId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TypeId);
          }
          if (Size != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Size);
          }
          if (sourceOneofCase_ == SourceOneofOneofCase.ImageId) {
            output.WriteRawTag(34);
            output.WriteString(ImageId);
          }
          if (sourceOneofCase_ == SourceOneofOneofCase.SnapshotId) {
            output.WriteRawTag(42);
            output.WriteString(SnapshotId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (TypeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeId);
          }
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (sourceOneofCase_ == SourceOneofOneofCase.ImageId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
          }
          if (sourceOneofCase_ == SourceOneofOneofCase.SnapshotId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SnapshotId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DiskSpec other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.TypeId.Length != 0) {
            TypeId = other.TypeId;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          switch (other.SourceOneofCase) {
            case SourceOneofOneofCase.ImageId:
              ImageId = other.ImageId;
              break;
            case SourceOneofOneofCase.SnapshotId:
              SnapshotId = other.SnapshotId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 18: {
                TypeId = input.ReadString();
                break;
              }
              case 24: {
                Size = input.ReadInt64();
                break;
              }
              case 34: {
                ImageId = input.ReadString();
                break;
              }
              case 42: {
                SnapshotId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class NetworkInterfaceSpec : pb::IMessage<NetworkInterfaceSpec> {
    private static readonly pb::MessageParser<NetworkInterfaceSpec> _parser = new pb::MessageParser<NetworkInterfaceSpec>(() => new NetworkInterfaceSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInterfaceSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec(NetworkInterfaceSpec other) : this() {
      networkId_ = other.networkId_;
      subnetIds_ = other.subnetIds_.Clone();
      primaryV4AddressSpec_ = other.primaryV4AddressSpec_ != null ? other.primaryV4AddressSpec_.Clone() : null;
      primaryV6AddressSpec_ = other.primaryV6AddressSpec_ != null ? other.primaryV6AddressSpec_.Clone() : null;
      securityGroupIds_ = other.securityGroupIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec Clone() {
      return new NetworkInterfaceSpec(this);
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 1;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_ids" field.</summary>
    public const int SubnetIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_subnetIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> subnetIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// IDs of the subnets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SubnetIds {
      get { return subnetIds_; }
    }

    /// <summary>Field number for the "primary_v4_address_spec" field.</summary>
    public const int PrimaryV4AddressSpecFieldNumber = 3;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec primaryV4AddressSpec_;
    /// <summary>
    /// Primary IPv4 address that is assigned to the instance for this network interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec PrimaryV4AddressSpec {
      get { return primaryV4AddressSpec_; }
      set {
        primaryV4AddressSpec_ = value;
      }
    }

    /// <summary>Field number for the "primary_v6_address_spec" field.</summary>
    public const int PrimaryV6AddressSpecFieldNumber = 4;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec primaryV6AddressSpec_;
    /// <summary>
    /// Primary IPv6 address that is assigned to the instance for this network interface. IPv6 not available yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec PrimaryV6AddressSpec {
      get { return primaryV6AddressSpec_; }
      set {
        primaryV6AddressSpec_ = value;
      }
    }

    /// <summary>Field number for the "security_group_ids" field.</summary>
    public const int SecurityGroupIdsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_securityGroupIds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> securityGroupIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// IDs of security groups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SecurityGroupIds {
      get { return securityGroupIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInterfaceSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInterfaceSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetworkId != other.NetworkId) return false;
      if(!subnetIds_.Equals(other.subnetIds_)) return false;
      if (!object.Equals(PrimaryV4AddressSpec, other.PrimaryV4AddressSpec)) return false;
      if (!object.Equals(PrimaryV6AddressSpec, other.PrimaryV6AddressSpec)) return false;
      if(!securityGroupIds_.Equals(other.securityGroupIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      hash ^= subnetIds_.GetHashCode();
      if (primaryV4AddressSpec_ != null) hash ^= PrimaryV4AddressSpec.GetHashCode();
      if (primaryV6AddressSpec_ != null) hash ^= PrimaryV6AddressSpec.GetHashCode();
      hash ^= securityGroupIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetworkId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NetworkId);
      }
      subnetIds_.WriteTo(output, _repeated_subnetIds_codec);
      if (primaryV4AddressSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrimaryV4AddressSpec);
      }
      if (primaryV6AddressSpec_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PrimaryV6AddressSpec);
      }
      securityGroupIds_.WriteTo(output, _repeated_securityGroupIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      size += subnetIds_.CalculateSize(_repeated_subnetIds_codec);
      if (primaryV4AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV4AddressSpec);
      }
      if (primaryV6AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV6AddressSpec);
      }
      size += securityGroupIds_.CalculateSize(_repeated_securityGroupIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInterfaceSpec other) {
      if (other == null) {
        return;
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      subnetIds_.Add(other.subnetIds_);
      if (other.primaryV4AddressSpec_ != null) {
        if (primaryV4AddressSpec_ == null) {
          PrimaryV4AddressSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec();
        }
        PrimaryV4AddressSpec.MergeFrom(other.PrimaryV4AddressSpec);
      }
      if (other.primaryV6AddressSpec_ != null) {
        if (primaryV6AddressSpec_ == null) {
          PrimaryV6AddressSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec();
        }
        PrimaryV6AddressSpec.MergeFrom(other.PrimaryV6AddressSpec);
      }
      securityGroupIds_.Add(other.securityGroupIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NetworkId = input.ReadString();
            break;
          }
          case 18: {
            subnetIds_.AddEntriesFrom(input, _repeated_subnetIds_codec);
            break;
          }
          case 26: {
            if (primaryV4AddressSpec_ == null) {
              PrimaryV4AddressSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec();
            }
            input.ReadMessage(PrimaryV4AddressSpec);
            break;
          }
          case 34: {
            if (primaryV6AddressSpec_ == null) {
              PrimaryV6AddressSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddressSpec();
            }
            input.ReadMessage(PrimaryV6AddressSpec);
            break;
          }
          case 42: {
            securityGroupIds_.AddEntriesFrom(input, _repeated_securityGroupIds_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PrimaryAddressSpec : pb::IMessage<PrimaryAddressSpec> {
    private static readonly pb::MessageParser<PrimaryAddressSpec> _parser = new pb::MessageParser<PrimaryAddressSpec>(() => new PrimaryAddressSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimaryAddressSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec(PrimaryAddressSpec other) : this() {
      oneToOneNatSpec_ = other.oneToOneNatSpec_ != null ? other.oneToOneNatSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec Clone() {
      return new PrimaryAddressSpec(this);
    }

    /// <summary>Field number for the "one_to_one_nat_spec" field.</summary>
    public const int OneToOneNatSpecFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec oneToOneNatSpec_;
    /// <summary>
    /// An external IP address configuration.
    /// If not specified, then this managed instance will have no external internet access.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec OneToOneNatSpec {
      get { return oneToOneNatSpec_; }
      set {
        oneToOneNatSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimaryAddressSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimaryAddressSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OneToOneNatSpec, other.OneToOneNatSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneToOneNatSpec_ != null) hash ^= OneToOneNatSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneToOneNatSpec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneToOneNatSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimaryAddressSpec other) {
      if (other == null) {
        return;
      }
      if (other.oneToOneNatSpec_ != null) {
        if (oneToOneNatSpec_ == null) {
          OneToOneNatSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec();
        }
        OneToOneNatSpec.MergeFrom(other.OneToOneNatSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oneToOneNatSpec_ == null) {
              OneToOneNatSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNatSpec();
            }
            input.ReadMessage(OneToOneNatSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OneToOneNatSpec : pb::IMessage<OneToOneNatSpec> {
    private static readonly pb::MessageParser<OneToOneNatSpec> _parser = new pb::MessageParser<OneToOneNatSpec>(() => new OneToOneNatSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneNatSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec(OneToOneNatSpec other) : this() {
      ipVersion_ = other.ipVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec Clone() {
      return new OneToOneNatSpec(this);
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion ipVersion_ = global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified;
    /// <summary>
    /// IP version for the public IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneNatSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneNatSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) hash ^= IpVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IpVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneNatSpec other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        IpVersion = other.IpVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IpVersion = (global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SchedulingPolicy : pb::IMessage<SchedulingPolicy> {
    private static readonly pb::MessageParser<SchedulingPolicy> _parser = new pb::MessageParser<SchedulingPolicy>(() => new SchedulingPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchedulingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy(SchedulingPolicy other) : this() {
      preemptible_ = other.preemptible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy Clone() {
      return new SchedulingPolicy(this);
    }

    /// <summary>Field number for the "preemptible" field.</summary>
    public const int PreemptibleFieldNumber = 1;
    private bool preemptible_;
    /// <summary>
    /// Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time
    /// if their resources are needed by Compute.
    /// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Preemptible {
      get { return preemptible_; }
      set {
        preemptible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchedulingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchedulingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Preemptible != other.Preemptible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Preemptible != false) hash ^= Preemptible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Preemptible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Preemptible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Preemptible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchedulingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.Preemptible != false) {
        Preemptible = other.Preemptible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Preemptible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NetworkSettings : pb::IMessage<NetworkSettings> {
    private static readonly pb::MessageParser<NetworkSettings> _parser = new pb::MessageParser<NetworkSettings>(() => new NetworkSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSettings(NetworkSettings other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkSettings Clone() {
      return new NetworkSettings(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type type_ = global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type.Unspecified;
    /// <summary>
    /// Type of instance network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type.Unspecified) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkSettings other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type.Unspecified) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkSettings.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetworkSettings message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("TYPE_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("STANDARD")] Standard = 1,
        [pbr::OriginalName("SOFTWARE_ACCELERATED")] SoftwareAccelerated = 2,
        [pbr::OriginalName("HARDWARE_ACCELERATED")] HardwareAccelerated = 3,
      }

    }
    #endregion

  }

  internal sealed partial class LoadBalancerSpec : pb::IMessage<LoadBalancerSpec> {
    private static readonly pb::MessageParser<LoadBalancerSpec> _parser = new pb::MessageParser<LoadBalancerSpec>(() => new LoadBalancerSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadBalancerSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerSpec(LoadBalancerSpec other) : this() {
      targetGroupSpec_ = other.targetGroupSpec_ != null ? other.targetGroupSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadBalancerSpec Clone() {
      return new LoadBalancerSpec(this);
    }

    /// <summary>Field number for the "target_group_spec" field.</summary>
    public const int TargetGroupSpecFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec targetGroupSpec_;
    /// <summary>
    /// Specification of the target group that the instance group will be added to. For more information, see [Target groups and resources](/docs/load-balancer/target-resources).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec TargetGroupSpec {
      get { return targetGroupSpec_; }
      set {
        targetGroupSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadBalancerSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadBalancerSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetGroupSpec, other.TargetGroupSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetGroupSpec_ != null) hash ^= TargetGroupSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetGroupSpec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetGroupSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetGroupSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetGroupSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadBalancerSpec other) {
      if (other == null) {
        return;
      }
      if (other.targetGroupSpec_ != null) {
        if (targetGroupSpec_ == null) {
          TargetGroupSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec();
        }
        TargetGroupSpec.MergeFrom(other.TargetGroupSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (targetGroupSpec_ == null) {
              TargetGroupSpec = new global::Yandex.Cloud.Compute.V1.Instancegroup.TargetGroupSpec();
            }
            input.ReadMessage(TargetGroupSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class TargetGroupSpec : pb::IMessage<TargetGroupSpec> {
    private static readonly pb::MessageParser<TargetGroupSpec> _parser = new pb::MessageParser<TargetGroupSpec>(() => new TargetGroupSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetGroupSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetGroupSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetGroupSpec(TargetGroupSpec other) : this() {
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetGroupSpec Clone() {
      return new TargetGroupSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name of the target group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Description of the target group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 26);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetGroupSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetGroupSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetGroupSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HealthChecksSpec : pb::IMessage<HealthChecksSpec> {
    private static readonly pb::MessageParser<HealthChecksSpec> _parser = new pb::MessageParser<HealthChecksSpec>(() => new HealthChecksSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthChecksSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthChecksSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthChecksSpec(HealthChecksSpec other) : this() {
      healthCheckSpecs_ = other.healthCheckSpecs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthChecksSpec Clone() {
      return new HealthChecksSpec(this);
    }

    /// <summary>Field number for the "health_check_specs" field.</summary>
    public const int HealthCheckSpecsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec> _repeated_healthCheckSpecs_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec> healthCheckSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec>();
    /// <summary>
    /// Health checking specification. For more information, see [Health check](/docs/load-balancer/concepts/health-check).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec> HealthCheckSpecs {
      get { return healthCheckSpecs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthChecksSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthChecksSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!healthCheckSpecs_.Equals(other.healthCheckSpecs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= healthCheckSpecs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      healthCheckSpecs_.WriteTo(output, _repeated_healthCheckSpecs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += healthCheckSpecs_.CalculateSize(_repeated_healthCheckSpecs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthChecksSpec other) {
      if (other == null) {
        return;
      }
      healthCheckSpecs_.Add(other.healthCheckSpecs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            healthCheckSpecs_.AddEntriesFrom(input, _repeated_healthCheckSpecs_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class HealthCheckSpec : pb::IMessage<HealthCheckSpec> {
    private static readonly pb::MessageParser<HealthCheckSpec> _parser = new pb::MessageParser<HealthCheckSpec>(() => new HealthCheckSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HealthCheckSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheckSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheckSpec(HealthCheckSpec other) : this() {
      interval_ = other.interval_ != null ? other.interval_.Clone() : null;
      timeout_ = other.timeout_ != null ? other.timeout_.Clone() : null;
      unhealthyThreshold_ = other.unhealthyThreshold_;
      healthyThreshold_ = other.healthyThreshold_;
      switch (other.HealthCheckOptionsCase) {
        case HealthCheckOptionsOneofCase.TcpOptions:
          TcpOptions = other.TcpOptions.Clone();
          break;
        case HealthCheckOptionsOneofCase.HttpOptions:
          HttpOptions = other.HttpOptions.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheckSpec Clone() {
      return new HealthCheckSpec(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Duration interval_;
    /// <summary>
    /// The interval between health checks. The default is 2 seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Duration timeout_;
    /// <summary>
    /// Timeout for the managed instance to return a response for the health check. The default is 1 second.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Duration Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    /// <summary>Field number for the "unhealthy_threshold" field.</summary>
    public const int UnhealthyThresholdFieldNumber = 3;
    private long unhealthyThreshold_;
    /// <summary>
    /// The number of failed health checks for the managed instance to be considered unhealthy. The default (0) is 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnhealthyThreshold {
      get { return unhealthyThreshold_; }
      set {
        unhealthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "healthy_threshold" field.</summary>
    public const int HealthyThresholdFieldNumber = 4;
    private long healthyThreshold_;
    /// <summary>
    /// The number of successful health checks required in order for the managed instance to be considered healthy. The default (0) is 2.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HealthyThreshold {
      get { return healthyThreshold_; }
      set {
        healthyThreshold_ = value;
      }
    }

    /// <summary>Field number for the "tcp_options" field.</summary>
    public const int TcpOptionsFieldNumber = 5;
    /// <summary>
    /// Configuration options for a TCP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions TcpOptions {
      get { return healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.TcpOptions ? (global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions) healthCheckOptions_ : null; }
      set {
        healthCheckOptions_ = value;
        healthCheckOptionsCase_ = value == null ? HealthCheckOptionsOneofCase.None : HealthCheckOptionsOneofCase.TcpOptions;
      }
    }

    /// <summary>Field number for the "http_options" field.</summary>
    public const int HttpOptionsFieldNumber = 6;
    /// <summary>
    /// Configuration options for an HTTP health check.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions HttpOptions {
      get { return healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.HttpOptions ? (global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions) healthCheckOptions_ : null; }
      set {
        healthCheckOptions_ = value;
        healthCheckOptionsCase_ = value == null ? HealthCheckOptionsOneofCase.None : HealthCheckOptionsOneofCase.HttpOptions;
      }
    }

    private object healthCheckOptions_;
    /// <summary>Enum of possible cases for the "health_check_options" oneof.</summary>
    public enum HealthCheckOptionsOneofCase {
      None = 0,
      TcpOptions = 5,
      HttpOptions = 6,
    }
    private HealthCheckOptionsOneofCase healthCheckOptionsCase_ = HealthCheckOptionsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HealthCheckOptionsOneofCase HealthCheckOptionsCase {
      get { return healthCheckOptionsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHealthCheckOptions() {
      healthCheckOptionsCase_ = HealthCheckOptionsOneofCase.None;
      healthCheckOptions_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HealthCheckSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HealthCheckSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Interval, other.Interval)) return false;
      if (!object.Equals(Timeout, other.Timeout)) return false;
      if (UnhealthyThreshold != other.UnhealthyThreshold) return false;
      if (HealthyThreshold != other.HealthyThreshold) return false;
      if (!object.Equals(TcpOptions, other.TcpOptions)) return false;
      if (!object.Equals(HttpOptions, other.HttpOptions)) return false;
      if (HealthCheckOptionsCase != other.HealthCheckOptionsCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (interval_ != null) hash ^= Interval.GetHashCode();
      if (timeout_ != null) hash ^= Timeout.GetHashCode();
      if (UnhealthyThreshold != 0L) hash ^= UnhealthyThreshold.GetHashCode();
      if (HealthyThreshold != 0L) hash ^= HealthyThreshold.GetHashCode();
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.TcpOptions) hash ^= TcpOptions.GetHashCode();
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.HttpOptions) hash ^= HttpOptions.GetHashCode();
      hash ^= (int) healthCheckOptionsCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (interval_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Interval);
      }
      if (timeout_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Timeout);
      }
      if (UnhealthyThreshold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UnhealthyThreshold);
      }
      if (HealthyThreshold != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(HealthyThreshold);
      }
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.TcpOptions) {
        output.WriteRawTag(42);
        output.WriteMessage(TcpOptions);
      }
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.HttpOptions) {
        output.WriteRawTag(50);
        output.WriteMessage(HttpOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (interval_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interval);
      }
      if (timeout_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timeout);
      }
      if (UnhealthyThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnhealthyThreshold);
      }
      if (HealthyThreshold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HealthyThreshold);
      }
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.TcpOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TcpOptions);
      }
      if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.HttpOptions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HealthCheckSpec other) {
      if (other == null) {
        return;
      }
      if (other.interval_ != null) {
        if (interval_ == null) {
          Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Interval.MergeFrom(other.Interval);
      }
      if (other.timeout_ != null) {
        if (timeout_ == null) {
          Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
        }
        Timeout.MergeFrom(other.Timeout);
      }
      if (other.UnhealthyThreshold != 0L) {
        UnhealthyThreshold = other.UnhealthyThreshold;
      }
      if (other.HealthyThreshold != 0L) {
        HealthyThreshold = other.HealthyThreshold;
      }
      switch (other.HealthCheckOptionsCase) {
        case HealthCheckOptionsOneofCase.TcpOptions:
          if (TcpOptions == null) {
            TcpOptions = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions();
          }
          TcpOptions.MergeFrom(other.TcpOptions);
          break;
        case HealthCheckOptionsOneofCase.HttpOptions:
          if (HttpOptions == null) {
            HttpOptions = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions();
          }
          HttpOptions.MergeFrom(other.HttpOptions);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (interval_ == null) {
              Interval = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Interval);
            break;
          }
          case 18: {
            if (timeout_ == null) {
              Timeout = new global::Google.Protobuf.WellKnownTypes.Duration();
            }
            input.ReadMessage(Timeout);
            break;
          }
          case 24: {
            UnhealthyThreshold = input.ReadInt64();
            break;
          }
          case 32: {
            HealthyThreshold = input.ReadInt64();
            break;
          }
          case 42: {
            global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions subBuilder = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.TcpOptions();
            if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.TcpOptions) {
              subBuilder.MergeFrom(TcpOptions);
            }
            input.ReadMessage(subBuilder);
            TcpOptions = subBuilder;
            break;
          }
          case 50: {
            global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions subBuilder = new global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Types.HttpOptions();
            if (healthCheckOptionsCase_ == HealthCheckOptionsOneofCase.HttpOptions) {
              subBuilder.MergeFrom(HttpOptions);
            }
            input.ReadMessage(subBuilder);
            HttpOptions = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HealthCheckSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class TcpOptions : pb::IMessage<TcpOptions> {
        private static readonly pb::MessageParser<TcpOptions> _parser = new pb::MessageParser<TcpOptions>(() => new TcpOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TcpOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions(TcpOptions other) : this() {
          port_ = other.port_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TcpOptions Clone() {
          return new TcpOptions(this);
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 1;
        private long port_;
        /// <summary>
        /// Port to use for TCP health checks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TcpOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TcpOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Port != other.Port) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Port != 0L) hash ^= Port.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Port != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Port);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Port != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TcpOptions other) {
          if (other == null) {
            return;
          }
          if (other.Port != 0L) {
            Port = other.Port;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Port = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      internal sealed partial class HttpOptions : pb::IMessage<HttpOptions> {
        private static readonly pb::MessageParser<HttpOptions> _parser = new pb::MessageParser<HttpOptions>(() => new HttpOptions());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HttpOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.Instancegroup.HealthCheckSpec.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions(HttpOptions other) : this() {
          port_ = other.port_;
          path_ = other.path_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpOptions Clone() {
          return new HttpOptions(this);
        }

        /// <summary>Field number for the "port" field.</summary>
        public const int PortFieldNumber = 1;
        private long port_;
        /// <summary>
        /// Port to use for HTTP health checks.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Port {
          get { return port_; }
          set {
            port_ = value;
          }
        }

        /// <summary>Field number for the "path" field.</summary>
        public const int PathFieldNumber = 2;
        private string path_ = "";
        /// <summary>
        /// URL path to set for health checking requests.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Path {
          get { return path_; }
          set {
            path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HttpOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HttpOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Port != other.Port) return false;
          if (Path != other.Path) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Port != 0L) hash ^= Port.GetHashCode();
          if (Path.Length != 0) hash ^= Path.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Port != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Port);
          }
          if (Path.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Path);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Port != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
          }
          if (Path.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HttpOptions other) {
          if (other == null) {
            return;
          }
          if (other.Port != 0L) {
            Port = other.Port;
          }
          if (other.Path.Length != 0) {
            Path = other.Path;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Port = input.ReadInt64();
                break;
              }
              case 18: {
                Path = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// A ManagedInstance resource. For more information, see [Instance Groups Concepts](/docs/compute/concepts/instance-groups/).
  /// </summary>
  internal sealed partial class ManagedInstance : pb::IMessage<ManagedInstance> {
    private static readonly pb::MessageParser<ManagedInstance> _parser = new pb::MessageParser<ManagedInstance>(() => new ManagedInstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManagedInstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstance(ManagedInstance other) : this() {
      id_ = other.id_;
      status_ = other.status_;
      instanceId_ = other.instanceId_;
      fqdn_ = other.fqdn_;
      name_ = other.name_;
      statusMessage_ = other.statusMessage_;
      zoneId_ = other.zoneId_;
      networkInterfaces_ = other.networkInterfaces_.Clone();
      statusChangedAt_ = other.statusChangedAt_ != null ? other.statusChangedAt_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManagedInstance Clone() {
      return new ManagedInstance(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the managed instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status status_ = global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status.Unspecified;
    /// <summary>
    /// Status of the managed instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 3;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fqdn" field.</summary>
    public const int FqdnFieldNumber = 4;
    private string fqdn_ = "";
    /// <summary>
    /// Fully Qualified Domain Name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fqdn {
      get { return fqdn_; }
      set {
        fqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// The name of the managed instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status_message" field.</summary>
    public const int StatusMessageFieldNumber = 6;
    private string statusMessage_ = "";
    /// <summary>
    /// Status message for the managed instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StatusMessage {
      get { return statusMessage_; }
      set {
        statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 7;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the instance resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_interfaces" field.</summary>
    public const int NetworkInterfacesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface> _repeated_networkInterfaces_codec
        = pb::FieldCodec.ForMessage(66, global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface> networkInterfaces_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface>();
    /// <summary>
    /// Array of network interfaces that are attached to the managed instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instancegroup.NetworkInterface> NetworkInterfaces {
      get { return networkInterfaces_; }
    }

    /// <summary>Field number for the "status_changed_at" field.</summary>
    public const int StatusChangedAtFieldNumber = 9;
    private global::Google.Protobuf.WellKnownTypes.Timestamp statusChangedAt_;
    /// <summary>
    /// The timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format when the status of the managed instance was last changed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StatusChangedAt {
      get { return statusChangedAt_; }
      set {
        statusChangedAt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManagedInstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManagedInstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Status != other.Status) return false;
      if (InstanceId != other.InstanceId) return false;
      if (Fqdn != other.Fqdn) return false;
      if (Name != other.Name) return false;
      if (StatusMessage != other.StatusMessage) return false;
      if (ZoneId != other.ZoneId) return false;
      if(!networkInterfaces_.Equals(other.networkInterfaces_)) return false;
      if (!object.Equals(StatusChangedAt, other.StatusChangedAt)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (Fqdn.Length != 0) hash ^= Fqdn.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      hash ^= networkInterfaces_.GetHashCode();
      if (statusChangedAt_ != null) hash ^= StatusChangedAt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstanceId);
      }
      if (Fqdn.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Fqdn);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (StatusMessage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(StatusMessage);
      }
      if (ZoneId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ZoneId);
      }
      networkInterfaces_.WriteTo(output, _repeated_networkInterfaces_codec);
      if (statusChangedAt_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(StatusChangedAt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Status != global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (Fqdn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fqdn);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (StatusMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
      }
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      size += networkInterfaces_.CalculateSize(_repeated_networkInterfaces_codec);
      if (statusChangedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StatusChangedAt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManagedInstance other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Status != global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Fqdn.Length != 0) {
        Fqdn = other.Fqdn;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.StatusMessage.Length != 0) {
        StatusMessage = other.StatusMessage;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      networkInterfaces_.Add(other.networkInterfaces_);
      if (other.statusChangedAt_ != null) {
        if (statusChangedAt_ == null) {
          StatusChangedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StatusChangedAt.MergeFrom(other.StatusChangedAt);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Status = (global::Yandex.Cloud.Compute.V1.Instancegroup.ManagedInstance.Types.Status) input.ReadEnum();
            break;
          }
          case 26: {
            InstanceId = input.ReadString();
            break;
          }
          case 34: {
            Fqdn = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 50: {
            StatusMessage = input.ReadString();
            break;
          }
          case 58: {
            ZoneId = input.ReadString();
            break;
          }
          case 66: {
            networkInterfaces_.AddEntriesFrom(input, _repeated_networkInterfaces_codec);
            break;
          }
          case 74: {
            if (statusChangedAt_ == null) {
              StatusChangedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StatusChangedAt);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ManagedInstance message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Instance is being created.
        /// </summary>
        [pbr::OriginalName("CREATING_INSTANCE")] CreatingInstance = 11,
        /// <summary>
        /// Instance is being updated.
        /// </summary>
        [pbr::OriginalName("UPDATING_INSTANCE")] UpdatingInstance = 12,
        /// <summary>
        /// Instance is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING_INSTANCE")] DeletingInstance = 13,
        /// <summary>
        /// Instance is being started.
        /// </summary>
        [pbr::OriginalName("STARTING_INSTANCE")] StartingInstance = 14,
        /// <summary>
        /// Instance is being stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING_INSTANCE")] StoppingInstance = 15,
        /// <summary>
        /// Instance has been created successfully, but startup duration has not elapsed yet.
        /// </summary>
        [pbr::OriginalName("AWAITING_STARTUP_DURATION")] AwaitingStartupDuration = 16,
        /// <summary>
        /// Instance has been created successfully and startup duration has elapsed, but health checks have not passed yet and the managed instance is not ready to receive traffic.
        /// </summary>
        [pbr::OriginalName("CHECKING_HEALTH")] CheckingHealth = 17,
        /// <summary>
        /// Instance Groups is initiating health checks and routing traffic to the instances.
        /// </summary>
        [pbr::OriginalName("OPENING_TRAFFIC")] OpeningTraffic = 18,
        /// <summary>
        /// Instance is now receiving traffic, but warmup duration has not elapsed yet.
        /// </summary>
        [pbr::OriginalName("AWAITING_WARMUP_DURATION")] AwaitingWarmupDuration = 19,
        /// <summary>
        /// Instance Groups has initiated the process of stopping routing traffic to the instances.
        /// </summary>
        [pbr::OriginalName("CLOSING_TRAFFIC")] ClosingTraffic = 20,
        /// <summary>
        /// Instance is running normally and its attributes match the current InstanceTemplate.
        /// </summary>
        [pbr::OriginalName("RUNNING_ACTUAL")] RunningActual = 21,
        /// <summary>
        /// Instance is running normally, but its attributes do not match the current InstanceTemplate.
        /// It will be updated, recreated or deleted shortly.
        /// </summary>
        [pbr::OriginalName("RUNNING_OUTDATED")] RunningOutdated = 22,
        /// <summary>
        /// Instance was stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 23,
        /// <summary>
        /// Instance was deleted.
        /// </summary>
        [pbr::OriginalName("DELETED")] Deleted = 24,
      }

    }
    #endregion

  }

  internal sealed partial class NetworkInterface : pb::IMessage<NetworkInterface> {
    private static readonly pb::MessageParser<NetworkInterface> _parser = new pb::MessageParser<NetworkInterface>(() => new NetworkInterface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInterface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterface(NetworkInterface other) : this() {
      index_ = other.index_;
      macAddress_ = other.macAddress_;
      subnetId_ = other.subnetId_;
      primaryV4Address_ = other.primaryV4Address_ != null ? other.primaryV4Address_.Clone() : null;
      primaryV6Address_ = other.primaryV6Address_ != null ? other.primaryV6Address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterface Clone() {
      return new NetworkInterface(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private string index_ = "";
    /// <summary>
    /// The index of the network interface, generated by the server, 0,1,2... etc.
    /// Currently only one network interface is supported per instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Index {
      get { return index_; }
      set {
        index_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mac_address" field.</summary>
    public const int MacAddressFieldNumber = 2;
    private string macAddress_ = "";
    /// <summary>
    /// MAC address that is assigned to the network interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 3;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_v4_address" field.</summary>
    public const int PrimaryV4AddressFieldNumber = 4;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress primaryV4Address_;
    /// <summary>
    /// Primary IPv4 address that is assigned to the instance for this network interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress PrimaryV4Address {
      get { return primaryV4Address_; }
      set {
        primaryV4Address_ = value;
      }
    }

    /// <summary>Field number for the "primary_v6_address" field.</summary>
    public const int PrimaryV6AddressFieldNumber = 5;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress primaryV6Address_;
    /// <summary>
    /// Primary IPv6 address that is assigned to the instance for this network interface. IPv6 is not available yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress PrimaryV6Address {
      get { return primaryV6Address_; }
      set {
        primaryV6Address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInterface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInterface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (MacAddress != other.MacAddress) return false;
      if (SubnetId != other.SubnetId) return false;
      if (!object.Equals(PrimaryV4Address, other.PrimaryV4Address)) return false;
      if (!object.Equals(PrimaryV6Address, other.PrimaryV6Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index.Length != 0) hash ^= Index.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (primaryV4Address_ != null) hash ^= PrimaryV4Address.GetHashCode();
      if (primaryV6Address_ != null) hash ^= PrimaryV6Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Index);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MacAddress);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SubnetId);
      }
      if (primaryV4Address_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PrimaryV4Address);
      }
      if (primaryV6Address_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PrimaryV6Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Index);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (primaryV4Address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV4Address);
      }
      if (primaryV6Address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV6Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInterface other) {
      if (other == null) {
        return;
      }
      if (other.Index.Length != 0) {
        Index = other.Index;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.primaryV4Address_ != null) {
        if (primaryV4Address_ == null) {
          PrimaryV4Address = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress();
        }
        PrimaryV4Address.MergeFrom(other.PrimaryV4Address);
      }
      if (other.primaryV6Address_ != null) {
        if (primaryV6Address_ == null) {
          PrimaryV6Address = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress();
        }
        PrimaryV6Address.MergeFrom(other.PrimaryV6Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Index = input.ReadString();
            break;
          }
          case 18: {
            MacAddress = input.ReadString();
            break;
          }
          case 26: {
            SubnetId = input.ReadString();
            break;
          }
          case 34: {
            if (primaryV4Address_ == null) {
              PrimaryV4Address = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress();
            }
            input.ReadMessage(PrimaryV4Address);
            break;
          }
          case 42: {
            if (primaryV6Address_ == null) {
              PrimaryV6Address = new global::Yandex.Cloud.Compute.V1.Instancegroup.PrimaryAddress();
            }
            input.ReadMessage(PrimaryV6Address);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PrimaryAddress : pb::IMessage<PrimaryAddress> {
    private static readonly pb::MessageParser<PrimaryAddress> _parser = new pb::MessageParser<PrimaryAddress>(() => new PrimaryAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimaryAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddress(PrimaryAddress other) : this() {
      address_ = other.address_;
      oneToOneNat_ = other.oneToOneNat_ != null ? other.oneToOneNat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddress Clone() {
      return new PrimaryAddress(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// An IPv4 internal network address that is assigned to the managed instance for this network interface.
    /// If not specified by the user, an unused internal IP is assigned by the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "one_to_one_nat" field.</summary>
    public const int OneToOneNatFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat oneToOneNat_;
    /// <summary>
    /// One-to-one NAT configuration. If missing, NAT has not been set up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat OneToOneNat {
      get { return oneToOneNat_; }
      set {
        oneToOneNat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimaryAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimaryAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (!object.Equals(OneToOneNat, other.OneToOneNat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (oneToOneNat_ != null) hash ^= OneToOneNat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (oneToOneNat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OneToOneNat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (oneToOneNat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOneNat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimaryAddress other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.oneToOneNat_ != null) {
        if (oneToOneNat_ == null) {
          OneToOneNat = new global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat();
        }
        OneToOneNat.MergeFrom(other.OneToOneNat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            if (oneToOneNat_ == null) {
              OneToOneNat = new global::Yandex.Cloud.Compute.V1.Instancegroup.OneToOneNat();
            }
            input.ReadMessage(OneToOneNat);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OneToOneNat : pb::IMessage<OneToOneNat> {
    private static readonly pb::MessageParser<OneToOneNat> _parser = new pb::MessageParser<OneToOneNat>(() => new OneToOneNat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneNat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNat(OneToOneNat other) : this() {
      address_ = other.address_;
      ipVersion_ = other.ipVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNat Clone() {
      return new OneToOneNat(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// An IPv4 external network address that is assigned to the managed instance for this network interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion ipVersion_ = global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified;
    /// <summary>
    /// External IP address version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneNat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneNat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (IpVersion != other.IpVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) hash ^= IpVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) IpVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneNat other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.IpVersion != global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion.Unspecified) {
        IpVersion = other.IpVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            IpVersion = (global::Yandex.Cloud.Compute.V1.Instancegroup.IpVersion) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class LogRecord : pb::IMessage<LogRecord> {
    private static readonly pb::MessageParser<LogRecord> _parser = new pb::MessageParser<LogRecord>(() => new LogRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.Instancegroup.InstanceGroupReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord(LogRecord other) : this() {
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogRecord Clone() {
      return new LogRecord(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    /// Log timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    /// <summary>
    /// The log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogRecord other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
