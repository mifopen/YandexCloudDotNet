// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/k8s/v1/node_group_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.K8S.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/k8s/v1/node_group_service.proto</summary>
  internal static partial class NodeGroupServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/k8s/v1/node_group_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeGroupServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cix5YW5kZXgvY2xvdWQvazhzL3YxL25vZGVfZ3JvdXBfc2VydmljZS5wcm90",
            "bxITeWFuZGV4LmNsb3VkLms4cy52MRocZ29vZ2xlL2FwaS9hbm5vdGF0aW9u",
            "cy5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJvdG8aIHlh",
            "bmRleC9jbG91ZC9hcGkvb3BlcmF0aW9uLnByb3RvGiR5YW5kZXgvY2xvdWQv",
            "azhzL3YxL25vZGVfZ3JvdXAucHJvdG8aHnlhbmRleC9jbG91ZC9rOHMvdjEv",
            "bm9kZS5wcm90bxoheWFuZGV4L2Nsb3VkL2s4cy92MS92ZXJzaW9uLnByb3Rv",
            "GiZ5YW5kZXgvY2xvdWQvb3BlcmF0aW9uL29wZXJhdGlvbi5wcm90bxodeWFu",
            "ZGV4L2Nsb3VkL3ZhbGlkYXRpb24ucHJvdG8iMgoTR2V0Tm9kZUdyb3VwUmVx",
            "dWVzdBIbCg1ub2RlX2dyb3VwX2lkGAEgASgJQgToxzEBIooBChVMaXN0Tm9k",
            "ZUdyb3Vwc1JlcXVlc3QSFwoJZm9sZGVyX2lkGAEgASgJQgToxzEBEh0KCXBh",
            "Z2Vfc2l6ZRgCIAEoA0IK+scxBjAtMTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJ",
            "QgmKyDEFPD0xMDASGgoGZmlsdGVyGAQgASgJQgqKyDEGPD0xMDAwImYKFkxp",
            "c3ROb2RlR3JvdXBzUmVzcG9uc2USMwoLbm9kZV9ncm91cHMYASADKAsyHi55",
            "YW5kZXguY2xvdWQuazhzLnYxLk5vZGVHcm91cBIXCg9uZXh0X3BhZ2VfdG9r",
            "ZW4YAiABKAkidgoZTGlzdE5vZGVHcm91cE5vZGVzUmVxdWVzdBIbCg1ub2Rl",
            "X2dyb3VwX2lkGAEgASgJQgToxzEBEh0KCXBhZ2Vfc2l6ZRgCIAEoA0IK+scx",
            "BjAtMTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDAiXwoaTGlz",
            "dE5vZGVHcm91cE5vZGVzUmVzcG9uc2USKAoFbm9kZXMYASADKAsyGS55YW5k",
            "ZXguY2xvdWQuazhzLnYxLk5vZGUSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJ",
            "IjUKFkRlbGV0ZU5vZGVHcm91cFJlcXVlc3QSGwoNbm9kZV9ncm91cF9pZBgB",
            "IAEoCUIE6McxASIwChdEZWxldGVOb2RlR3JvdXBNZXRhZGF0YRIVCg1ub2Rl",
            "X2dyb3VwX2lkGAEgASgJIpUIChZVcGRhdGVOb2RlR3JvdXBSZXF1ZXN0EhsK",
            "DW5vZGVfZ3JvdXBfaWQYASABKAlCBOjHMQESLwoLdXBkYXRlX21hc2sYAiAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrEi8KBG5hbWUYAyABKAlC",
            "IfLHMR18W2Etel1bLWEtejAtOV17MSw2MX1bYS16MC05XRIeCgtkZXNjcmlw",
            "dGlvbhgEIAEoCUIJisgxBTw9MjU2EogBCgZsYWJlbHMYBSADKAsyNy55YW5k",
            "ZXguY2xvdWQuazhzLnYxLlVwZGF0ZU5vZGVHcm91cFJlcXVlc3QuTGFiZWxz",
            "RW50cnlCP4LIMQQ8PTY0isgxBDw9NjPyxzELWy1fMC05YS16XSqyyDEGGgQx",
            "LTYzssgxEhIQW2Etel1bLV8wLTlhLXpdKhI4Cg1ub2RlX3RlbXBsYXRlGAgg",
            "ASgLMiEueWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlVGVtcGxhdGUSNgoMc2Nh",
            "bGVfcG9saWN5GAYgASgLMiAueWFuZGV4LmNsb3VkLms4cy52MS5TY2FsZVBv",
            "bGljeRJJChFhbGxvY2F0aW9uX3BvbGljeRgJIAEoCzIuLnlhbmRleC5jbG91",
            "ZC5rOHMudjEuTm9kZUdyb3VwQWxsb2NhdGlvblBvbGljeRI4Cg1kZXBsb3lf",
            "cG9saWN5GA8gASgLMiEueWFuZGV4LmNsb3VkLms4cy52MS5EZXBsb3lQb2xp",
            "Y3kSNwoHdmVyc2lvbhgKIAEoCzImLnlhbmRleC5jbG91ZC5rOHMudjEuVXBk",
            "YXRlVmVyc2lvblNwZWMSSwoSbWFpbnRlbmFuY2VfcG9saWN5GAsgASgLMi8u",
            "eWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlR3JvdXBNYWludGVuYW5jZVBvbGlj",
            "eRJvChZhbGxvd2VkX3Vuc2FmZV9zeXNjdGxzGAwgAygJQk+KyDEFPD0yNTPy",
            "xzFCKFthLXowLTldKFstX2EtejAtOV0qW2EtejAtOV0pP1wuKSooW2EtejAt",
            "OV1bLV9hLXowLTldKik/W2EtejAtOSpdEi8KC25vZGVfdGFpbnRzGA0gAygL",
            "MhoueWFuZGV4LmNsb3VkLms4cy52MS5UYWludBJQCgtub2RlX2xhYmVscxgO",
            "IAMoCzI7LnlhbmRleC5jbG91ZC5rOHMudjEuVXBkYXRlTm9kZUdyb3VwUmVx",
            "dWVzdC5Ob2RlTGFiZWxzRW50cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEg",
            "ASgJEg0KBXZhbHVlGAIgASgJOgI4ARoxCg9Ob2RlTGFiZWxzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASI2ChdVcGRhdGVOb2RlR3Jv",
            "dXBNZXRhZGF0YRIbCg1ub2RlX2dyb3VwX2lkGAEgASgJQgToxzEBIsUHChZD",
            "cmVhdGVOb2RlR3JvdXBSZXF1ZXN0EhgKCmNsdXN0ZXJfaWQYASABKAlCBOjH",
            "MQESLwoEbmFtZRgCIAEoCUIh8scxHXxbYS16XVstYS16MC05XXsxLDYxfVth",
            "LXowLTldEh4KC2Rlc2NyaXB0aW9uGAMgASgJQgmKyDEFPD0yNTYSiAEKBmxh",
            "YmVscxgEIAMoCzI3LnlhbmRleC5jbG91ZC5rOHMudjEuQ3JlYXRlTm9kZUdy",
            "b3VwUmVxdWVzdC5MYWJlbHNFbnRyeUI/gsgxBDw9NjSKyDEEPD02M/LHMQtb",
            "LV8wLTlhLXpdKrLIMQYaBDEtNjOyyDESEhBbYS16XVstXzAtOWEtel0qEj4K",
            "DW5vZGVfdGVtcGxhdGUYBSABKAsyIS55YW5kZXguY2xvdWQuazhzLnYxLk5v",
            "ZGVUZW1wbGF0ZUIE6McxARI8CgxzY2FsZV9wb2xpY3kYBiABKAsyIC55YW5k",
            "ZXguY2xvdWQuazhzLnYxLlNjYWxlUG9saWN5QgToxzEBEkkKEWFsbG9jYXRp",
            "b25fcG9saWN5GAcgASgLMi4ueWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlR3Jv",
            "dXBBbGxvY2F0aW9uUG9saWN5EjgKDWRlcGxveV9wb2xpY3kYDSABKAsyIS55",
            "YW5kZXguY2xvdWQuazhzLnYxLkRlcGxveVBvbGljeRIPCgd2ZXJzaW9uGAgg",
            "ASgJEksKEm1haW50ZW5hbmNlX3BvbGljeRgJIAEoCzIvLnlhbmRleC5jbG91",
            "ZC5rOHMudjEuTm9kZUdyb3VwTWFpbnRlbmFuY2VQb2xpY3kSbwoWYWxsb3dl",
            "ZF91bnNhZmVfc3lzY3RscxgKIAMoCUJPisgxBTw9MjUz8scxQihbYS16MC05",
            "XShbLV9hLXowLTldKlthLXowLTldKT9cLikqKFthLXowLTldWy1fYS16MC05",
            "XSopP1thLXowLTkqXRIvCgtub2RlX3RhaW50cxgLIAMoCzIaLnlhbmRleC5j",
            "bG91ZC5rOHMudjEuVGFpbnQSUAoLbm9kZV9sYWJlbHMYDCADKAsyOy55YW5k",
            "ZXguY2xvdWQuazhzLnYxLkNyZWF0ZU5vZGVHcm91cFJlcXVlc3QuTm9kZUxh",
            "YmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoCToCOAEaMQoPTm9kZUxhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEiMAoXQ3JlYXRlTm9kZUdyb3VwTWV0YWRhdGES",
            "FQoNbm9kZV9ncm91cF9pZBgBIAEoCSI1ChxBdXRvVXBncmFkZU5vZGVHcm91",
            "cE1ldGFkYXRhEhUKDW5vZGVfZ3JvdXBfaWQYASABKAkilwEKHkxpc3ROb2Rl",
            "R3JvdXBPcGVyYXRpb25zUmVxdWVzdBIbCg1ub2RlX2dyb3VwX2lkGAEgASgJ",
            "QgToxzEBEh0KCXBhZ2Vfc2l6ZRgCIAEoA0IK+scxBjAtMTAwMBIdCgpwYWdl",
            "X3Rva2VuGAMgASgJQgmKyDEFPD0xMDASGgoGZmlsdGVyGAQgASgJQgqKyDEG",
            "PD0xMDAwInEKH0xpc3ROb2RlR3JvdXBPcGVyYXRpb25zUmVzcG9uc2USNQoK",
            "b3BlcmF0aW9ucxgBIAMoCzIhLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCTLBCQoQTm9kZUdyb3Vw",
            "U2VydmljZRKKAQoDR2V0EigueWFuZGV4LmNsb3VkLms4cy52MS5HZXROb2Rl",
            "R3JvdXBSZXF1ZXN0Gh4ueWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlR3JvdXAi",
            "OYLT5JMCMxIxL21hbmFnZWQta3ViZXJuZXRlcy92MS9ub2RlR3JvdXBzL3tu",
            "b2RlX2dyb3VwX2lkfRKKAQoETGlzdBIqLnlhbmRleC5jbG91ZC5rOHMudjEu",
            "TGlzdE5vZGVHcm91cHNSZXF1ZXN0GisueWFuZGV4LmNsb3VkLms4cy52MS5M",
            "aXN0Tm9kZUdyb3Vwc1Jlc3BvbnNlIimC0+STAiMSIS9tYW5hZ2VkLWt1YmVy",
            "bmV0ZXMvdjEvbm9kZUdyb3VwcxKuAQoGQ3JlYXRlEisueWFuZGV4LmNsb3Vk",
            "Lms4cy52MS5DcmVhdGVOb2RlR3JvdXBSZXF1ZXN0GiEueWFuZGV4LmNsb3Vk",
            "Lm9wZXJhdGlvbi5PcGVyYXRpb24iVILT5JMCJiIhL21hbmFnZWQta3ViZXJu",
            "ZXRlcy92MS9ub2RlR3JvdXBzOgEqstIqJAoXQ3JlYXRlTm9kZUdyb3VwTWV0",
            "YWRhdGESCU5vZGVHcm91cBK+AQoGVXBkYXRlEisueWFuZGV4LmNsb3VkLms4",
            "cy52MS5VcGRhdGVOb2RlR3JvdXBSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9w",
            "ZXJhdGlvbi5PcGVyYXRpb24iZILT5JMCNjIxL21hbmFnZWQta3ViZXJuZXRl",
            "cy92MS9ub2RlR3JvdXBzL3tub2RlX2dyb3VwX2lkfToBKrLSKiQKF1VwZGF0",
            "ZU5vZGVHcm91cE1ldGFkYXRhEglOb2RlR3JvdXASxwEKBkRlbGV0ZRIrLnlh",
            "bmRleC5jbG91ZC5rOHMudjEuRGVsZXRlTm9kZUdyb3VwUmVxdWVzdBohLnlh",
            "bmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIm2C0+STAjMqMS9tYW5h",
            "Z2VkLWt1YmVybmV0ZXMvdjEvbm9kZUdyb3Vwcy97bm9kZV9ncm91cF9pZH2y",
            "0iowChdEZWxldGVOb2RlR3JvdXBNZXRhZGF0YRIVZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5EsEBCg5MaXN0T3BlcmF0aW9ucxIzLnlhbmRleC5jbG91ZC5rOHMu",
            "djEuTGlzdE5vZGVHcm91cE9wZXJhdGlvbnNSZXF1ZXN0GjQueWFuZGV4LmNs",
            "b3VkLms4cy52MS5MaXN0Tm9kZUdyb3VwT3BlcmF0aW9uc1Jlc3BvbnNlIkSC",
            "0+STAj4SPC9tYW5hZ2VkLWt1YmVybmV0ZXMvdjEvbm9kZUdyb3Vwcy97bm9k",
            "ZV9ncm91cF9pZH0vb3BlcmF0aW9ucxKSAQoJTGlzdE5vZGVzEi4ueWFuZGV4",
            "LmNsb3VkLms4cy52MS5MaXN0Tm9kZUdyb3VwTm9kZXNSZXF1ZXN0Gi8ueWFu",
            "ZGV4LmNsb3VkLms4cy52MS5MaXN0Tm9kZUdyb3VwTm9kZXNSZXNwb25zZSIk",
            "gtPkkwIeEhwvbWFuYWdlZC1rdWJlcm5ldGVzL3YxL25vZGVzQlYKF3lhbmRl",
            "eC5jbG91ZC5hcGkuazhzLnYxWjtnaXRodWIuY29tL3lhbmRleC1jbG91ZC9n",
            "by1nZW5wcm90by95YW5kZXgvY2xvdWQvazhzL3YxO2s4c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor, global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor, global::Yandex.Cloud.K8S.V1.VersionReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.GetNodeGroupRequest), global::Yandex.Cloud.K8S.V1.GetNodeGroupRequest.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupsRequest), global::Yandex.Cloud.K8S.V1.ListNodeGroupsRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupsResponse), global::Yandex.Cloud.K8S.V1.ListNodeGroupsResponse.Parser, new[]{ "NodeGroups", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupNodesRequest), global::Yandex.Cloud.K8S.V1.ListNodeGroupNodesRequest.Parser, new[]{ "NodeGroupId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupNodesResponse), global::Yandex.Cloud.K8S.V1.ListNodeGroupNodesResponse.Parser, new[]{ "Nodes", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.DeleteNodeGroupRequest), global::Yandex.Cloud.K8S.V1.DeleteNodeGroupRequest.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.DeleteNodeGroupMetadata), global::Yandex.Cloud.K8S.V1.DeleteNodeGroupMetadata.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.UpdateNodeGroupRequest), global::Yandex.Cloud.K8S.V1.UpdateNodeGroupRequest.Parser, new[]{ "NodeGroupId", "UpdateMask", "Name", "Description", "Labels", "NodeTemplate", "ScalePolicy", "AllocationPolicy", "DeployPolicy", "Version", "MaintenancePolicy", "AllowedUnsafeSysctls", "NodeTaints", "NodeLabels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.UpdateNodeGroupMetadata), global::Yandex.Cloud.K8S.V1.UpdateNodeGroupMetadata.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.CreateNodeGroupRequest), global::Yandex.Cloud.K8S.V1.CreateNodeGroupRequest.Parser, new[]{ "ClusterId", "Name", "Description", "Labels", "NodeTemplate", "ScalePolicy", "AllocationPolicy", "DeployPolicy", "Version", "MaintenancePolicy", "AllowedUnsafeSysctls", "NodeTaints", "NodeLabels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.CreateNodeGroupMetadata), global::Yandex.Cloud.K8S.V1.CreateNodeGroupMetadata.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.AutoUpgradeNodeGroupMetadata), global::Yandex.Cloud.K8S.V1.AutoUpgradeNodeGroupMetadata.Parser, new[]{ "NodeGroupId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupOperationsRequest), global::Yandex.Cloud.K8S.V1.ListNodeGroupOperationsRequest.Parser, new[]{ "NodeGroupId", "PageSize", "PageToken", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ListNodeGroupOperationsResponse), global::Yandex.Cloud.K8S.V1.ListNodeGroupOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class GetNodeGroupRequest : pb::IMessage<GetNodeGroupRequest> {
    private static readonly pb::MessageParser<GetNodeGroupRequest> _parser = new pb::MessageParser<GetNodeGroupRequest>(() => new GetNodeGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNodeGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeGroupRequest(GetNodeGroupRequest other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNodeGroupRequest Clone() {
      return new GetNodeGroupRequest(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group to return.
    /// To get the node group ID use a [NodeGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNodeGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNodeGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNodeGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupsRequest : pb::IMessage<ListNodeGroupsRequest> {
    private static readonly pb::MessageParser<ListNodeGroupsRequest> _parser = new pb::MessageParser<ListNodeGroupsRequest>(() => new ListNodeGroupsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsRequest(ListNodeGroupsRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsRequest Clone() {
      return new ListNodeGroupsRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list node groups in.
    /// To get the folder ID use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListNodeGroupsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set `page_token` to the
    /// [ListNodeGroupsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on [NodeGroup.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Must be 1-61 characters long and match the regular expression `|[a-z][-a-z0-9]{1,61}[a-z0-9]`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupsRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupsResponse : pb::IMessage<ListNodeGroupsResponse> {
    private static readonly pb::MessageParser<ListNodeGroupsResponse> _parser = new pb::MessageParser<ListNodeGroupsResponse>(() => new ListNodeGroupsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsResponse(ListNodeGroupsResponse other) : this() {
      nodeGroups_ = other.nodeGroups_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupsResponse Clone() {
      return new ListNodeGroupsResponse(this);
    }

    /// <summary>Field number for the "node_groups" field.</summary>
    public const int NodeGroupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.NodeGroup> _repeated_nodeGroups_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.K8S.V1.NodeGroup.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroup> nodeGroups_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroup>();
    /// <summary>
    /// List of node groups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroup> NodeGroups {
      get { return nodeGroups_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListNodeGroupsRequest.page_size], use
    /// the `next_page_token` as the value
    /// for the [ListNodeGroupsRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// `next_page_token` to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeGroups_.Equals(other.nodeGroups_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeGroups_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeGroups_.WriteTo(output, _repeated_nodeGroups_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeGroups_.CalculateSize(_repeated_nodeGroups_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupsResponse other) {
      if (other == null) {
        return;
      }
      nodeGroups_.Add(other.nodeGroups_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeGroups_.AddEntriesFrom(input, _repeated_nodeGroups_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupNodesRequest : pb::IMessage<ListNodeGroupNodesRequest> {
    private static readonly pb::MessageParser<ListNodeGroupNodesRequest> _parser = new pb::MessageParser<ListNodeGroupNodesRequest>(() => new ListNodeGroupNodesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupNodesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesRequest(ListNodeGroupNodesRequest other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesRequest Clone() {
      return new ListNodeGroupNodesRequest(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group to list.
    /// To get the node group ID use a [NodeGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListNodeGroupsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set `page_token` to the
    /// [ListNodeGroupNodessResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupNodesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupNodesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupNodesRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupNodesResponse : pb::IMessage<ListNodeGroupNodesResponse> {
    private static readonly pb::MessageParser<ListNodeGroupNodesResponse> _parser = new pb::MessageParser<ListNodeGroupNodesResponse>(() => new ListNodeGroupNodesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupNodesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesResponse(ListNodeGroupNodesResponse other) : this() {
      nodes_ = other.nodes_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupNodesResponse Clone() {
      return new ListNodeGroupNodesResponse(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Node> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.K8S.V1.Node.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Node> nodes_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Node>();
    /// <summary>
    /// List of nodes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Node> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListNodeGroupNodesRequest.page_size], use
    /// the `next_page_token` as the value
    /// for the [ListNodeGroupNodesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// `next_page_token` to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupNodesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupNodesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupNodesResponse other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteNodeGroupRequest : pb::IMessage<DeleteNodeGroupRequest> {
    private static readonly pb::MessageParser<DeleteNodeGroupRequest> _parser = new pb::MessageParser<DeleteNodeGroupRequest>(() => new DeleteNodeGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNodeGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupRequest(DeleteNodeGroupRequest other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupRequest Clone() {
      return new DeleteNodeGroupRequest(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group to delete.
    /// To get node group ID use a [NodeGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNodeGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNodeGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNodeGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteNodeGroupMetadata : pb::IMessage<DeleteNodeGroupMetadata> {
    private static readonly pb::MessageParser<DeleteNodeGroupMetadata> _parser = new pb::MessageParser<DeleteNodeGroupMetadata>(() => new DeleteNodeGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteNodeGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupMetadata(DeleteNodeGroupMetadata other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteNodeGroupMetadata Clone() {
      return new DeleteNodeGroupMetadata(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteNodeGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteNodeGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteNodeGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateNodeGroupRequest : pb::IMessage<UpdateNodeGroupRequest> {
    private static readonly pb::MessageParser<UpdateNodeGroupRequest> _parser = new pb::MessageParser<UpdateNodeGroupRequest>(() => new UpdateNodeGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNodeGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupRequest(UpdateNodeGroupRequest other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      nodeTemplate_ = other.nodeTemplate_ != null ? other.nodeTemplate_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      allocationPolicy_ = other.allocationPolicy_ != null ? other.allocationPolicy_.Clone() : null;
      deployPolicy_ = other.deployPolicy_ != null ? other.deployPolicy_.Clone() : null;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      maintenancePolicy_ = other.maintenancePolicy_ != null ? other.maintenancePolicy_.Clone() : null;
      allowedUnsafeSysctls_ = other.allowedUnsafeSysctls_.Clone();
      nodeTaints_ = other.nodeTaints_.Clone();
      nodeLabels_ = other.nodeLabels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupRequest Clone() {
      return new UpdateNodeGroupRequest(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group to update.
    /// To get the node group ID use a [NodeGroupService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the node group are going to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name of the node group.
    /// The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    ///
    /// Existing set of `labels` is completely replaced by the provided set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "node_template" field.</summary>
    public const int NodeTemplateFieldNumber = 8;
    private global::Yandex.Cloud.K8S.V1.NodeTemplate nodeTemplate_;
    /// <summary>
    /// Node template for the node group.
    /// Change may trigger nodes rolling reboot or recreate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeTemplate NodeTemplate {
      get { return nodeTemplate_; }
      set {
        nodeTemplate_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 6;
    private global::Yandex.Cloud.K8S.V1.ScalePolicy scalePolicy_;
    /// <summary>
    /// Scale policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allocation_policy" field.</summary>
    public const int AllocationPolicyFieldNumber = 9;
    private global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy allocationPolicy_;
    /// <summary>
    /// Allocation policy of the node group by the zones and regions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy AllocationPolicy {
      get { return allocationPolicy_; }
      set {
        allocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "deploy_policy" field.</summary>
    public const int DeployPolicyFieldNumber = 15;
    private global::Yandex.Cloud.K8S.V1.DeployPolicy deployPolicy_;
    /// <summary>
    /// Deploy policy according to which the updates are rolled out. If not specified,
    /// the default is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.DeployPolicy DeployPolicy {
      get { return deployPolicy_; }
      set {
        deployPolicy_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 10;
    private global::Yandex.Cloud.K8S.V1.UpdateVersionSpec version_;
    /// <summary>
    /// Version of Kubernetes components that runs on the nodes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.UpdateVersionSpec Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_policy" field.</summary>
    public const int MaintenancePolicyFieldNumber = 11;
    private global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy maintenancePolicy_;
    /// <summary>
    /// Maintenance policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy MaintenancePolicy {
      get { return maintenancePolicy_; }
      set {
        maintenancePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allowed_unsafe_sysctls" field.</summary>
    public const int AllowedUnsafeSysctlsFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_allowedUnsafeSysctls_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> allowedUnsafeSysctls_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Support for unsafe sysctl parameters. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowedUnsafeSysctls {
      get { return allowedUnsafeSysctls_; }
    }

    /// <summary>Field number for the "node_taints" field.</summary>
    public const int NodeTaintsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Taint> _repeated_nodeTaints_codec
        = pb::FieldCodec.ForMessage(106, global::Yandex.Cloud.K8S.V1.Taint.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> nodeTaints_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint>();
    /// <summary>
    /// Taints that are applied to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> NodeTaints {
      get { return nodeTaints_; }
    }

    /// <summary>Field number for the "node_labels" field.</summary>
    public const int NodeLabelsFieldNumber = 14;
    private static readonly pbc::MapField<string, string>.Codec _map_nodeLabels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 114);
    private readonly pbc::MapField<string, string> nodeLabels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels that are assigned to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> NodeLabels {
      get { return nodeLabels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNodeGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNodeGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(NodeTemplate, other.NodeTemplate)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (!object.Equals(AllocationPolicy, other.AllocationPolicy)) return false;
      if (!object.Equals(DeployPolicy, other.DeployPolicy)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (!object.Equals(MaintenancePolicy, other.MaintenancePolicy)) return false;
      if(!allowedUnsafeSysctls_.Equals(other.allowedUnsafeSysctls_)) return false;
      if(!nodeTaints_.Equals(other.nodeTaints_)) return false;
      if (!NodeLabels.Equals(other.NodeLabels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (nodeTemplate_ != null) hash ^= NodeTemplate.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (allocationPolicy_ != null) hash ^= AllocationPolicy.GetHashCode();
      if (deployPolicy_ != null) hash ^= DeployPolicy.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (maintenancePolicy_ != null) hash ^= MaintenancePolicy.GetHashCode();
      hash ^= allowedUnsafeSysctls_.GetHashCode();
      hash ^= nodeTaints_.GetHashCode();
      hash ^= NodeLabels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (scalePolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScalePolicy);
      }
      if (nodeTemplate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NodeTemplate);
      }
      if (allocationPolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AllocationPolicy);
      }
      if (version_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Version);
      }
      if (maintenancePolicy_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(MaintenancePolicy);
      }
      allowedUnsafeSysctls_.WriteTo(output, _repeated_allowedUnsafeSysctls_codec);
      nodeTaints_.WriteTo(output, _repeated_nodeTaints_codec);
      nodeLabels_.WriteTo(output, _map_nodeLabels_codec);
      if (deployPolicy_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DeployPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (nodeTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPolicy);
      }
      if (deployPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeployPolicy);
      }
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (maintenancePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenancePolicy);
      }
      size += allowedUnsafeSysctls_.CalculateSize(_repeated_allowedUnsafeSysctls_codec);
      size += nodeTaints_.CalculateSize(_repeated_nodeTaints_codec);
      size += nodeLabels_.CalculateSize(_map_nodeLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNodeGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.nodeTemplate_ != null) {
        if (nodeTemplate_ == null) {
          NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
        }
        NodeTemplate.MergeFrom(other.NodeTemplate);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.allocationPolicy_ != null) {
        if (allocationPolicy_ == null) {
          AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
        }
        AllocationPolicy.MergeFrom(other.AllocationPolicy);
      }
      if (other.deployPolicy_ != null) {
        if (deployPolicy_ == null) {
          DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
        }
        DeployPolicy.MergeFrom(other.DeployPolicy);
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::Yandex.Cloud.K8S.V1.UpdateVersionSpec();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.maintenancePolicy_ != null) {
        if (maintenancePolicy_ == null) {
          MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
        }
        MaintenancePolicy.MergeFrom(other.MaintenancePolicy);
      }
      allowedUnsafeSysctls_.Add(other.allowedUnsafeSysctls_);
      nodeTaints_.Add(other.nodeTaints_);
      nodeLabels_.Add(other.nodeLabels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 50: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 66: {
            if (nodeTemplate_ == null) {
              NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
            }
            input.ReadMessage(NodeTemplate);
            break;
          }
          case 74: {
            if (allocationPolicy_ == null) {
              AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
            }
            input.ReadMessage(AllocationPolicy);
            break;
          }
          case 82: {
            if (version_ == null) {
              Version = new global::Yandex.Cloud.K8S.V1.UpdateVersionSpec();
            }
            input.ReadMessage(Version);
            break;
          }
          case 90: {
            if (maintenancePolicy_ == null) {
              MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
            }
            input.ReadMessage(MaintenancePolicy);
            break;
          }
          case 98: {
            allowedUnsafeSysctls_.AddEntriesFrom(input, _repeated_allowedUnsafeSysctls_codec);
            break;
          }
          case 106: {
            nodeTaints_.AddEntriesFrom(input, _repeated_nodeTaints_codec);
            break;
          }
          case 114: {
            nodeLabels_.AddEntriesFrom(input, _map_nodeLabels_codec);
            break;
          }
          case 122: {
            if (deployPolicy_ == null) {
              DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
            }
            input.ReadMessage(DeployPolicy);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateNodeGroupMetadata : pb::IMessage<UpdateNodeGroupMetadata> {
    private static readonly pb::MessageParser<UpdateNodeGroupMetadata> _parser = new pb::MessageParser<UpdateNodeGroupMetadata>(() => new UpdateNodeGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateNodeGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupMetadata(UpdateNodeGroupMetadata other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateNodeGroupMetadata Clone() {
      return new UpdateNodeGroupMetadata(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the Node group that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateNodeGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateNodeGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateNodeGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateNodeGroupRequest : pb::IMessage<CreateNodeGroupRequest> {
    private static readonly pb::MessageParser<CreateNodeGroupRequest> _parser = new pb::MessageParser<CreateNodeGroupRequest>(() => new CreateNodeGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNodeGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupRequest(CreateNodeGroupRequest other) : this() {
      clusterId_ = other.clusterId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      nodeTemplate_ = other.nodeTemplate_ != null ? other.nodeTemplate_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      allocationPolicy_ = other.allocationPolicy_ != null ? other.allocationPolicy_.Clone() : null;
      deployPolicy_ = other.deployPolicy_ != null ? other.deployPolicy_.Clone() : null;
      version_ = other.version_;
      maintenancePolicy_ = other.maintenancePolicy_ != null ? other.maintenancePolicy_.Clone() : null;
      allowedUnsafeSysctls_ = other.allowedUnsafeSysctls_.Clone();
      nodeTaints_ = other.nodeTaints_.Clone();
      nodeLabels_ = other.nodeLabels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupRequest Clone() {
      return new CreateNodeGroupRequest(this);
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 1;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the Kubernetes cluster to create a node group in.
    /// To get the Kubernetes cluster ID, use a [ClusterService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the node group.
    /// The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "node_template" field.</summary>
    public const int NodeTemplateFieldNumber = 5;
    private global::Yandex.Cloud.K8S.V1.NodeTemplate nodeTemplate_;
    /// <summary>
    /// Node template for creating the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeTemplate NodeTemplate {
      get { return nodeTemplate_; }
      set {
        nodeTemplate_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 6;
    private global::Yandex.Cloud.K8S.V1.ScalePolicy scalePolicy_;
    /// <summary>
    /// Scale policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allocation_policy" field.</summary>
    public const int AllocationPolicyFieldNumber = 7;
    private global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy allocationPolicy_;
    /// <summary>
    /// Allocation policy of the node group by the zones and regions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy AllocationPolicy {
      get { return allocationPolicy_; }
      set {
        allocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "deploy_policy" field.</summary>
    public const int DeployPolicyFieldNumber = 13;
    private global::Yandex.Cloud.K8S.V1.DeployPolicy deployPolicy_;
    /// <summary>
    /// Deploy policy according to which the updates are rolled out. If not specified,
    /// the default is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.DeployPolicy DeployPolicy {
      get { return deployPolicy_; }
      set {
        deployPolicy_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 8;
    private string version_ = "";
    /// <summary>
    /// Version of Kubernetes components that runs on the nodes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maintenance_policy" field.</summary>
    public const int MaintenancePolicyFieldNumber = 9;
    private global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy maintenancePolicy_;
    /// <summary>
    /// Maintenance policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy MaintenancePolicy {
      get { return maintenancePolicy_; }
      set {
        maintenancePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allowed_unsafe_sysctls" field.</summary>
    public const int AllowedUnsafeSysctlsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_allowedUnsafeSysctls_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> allowedUnsafeSysctls_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Support for unsafe sysctl parameters. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowedUnsafeSysctls {
      get { return allowedUnsafeSysctls_; }
    }

    /// <summary>Field number for the "node_taints" field.</summary>
    public const int NodeTaintsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Taint> _repeated_nodeTaints_codec
        = pb::FieldCodec.ForMessage(90, global::Yandex.Cloud.K8S.V1.Taint.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> nodeTaints_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint>();
    /// <summary>
    /// Taints that are applied to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> NodeTaints {
      get { return nodeTaints_; }
    }

    /// <summary>Field number for the "node_labels" field.</summary>
    public const int NodeLabelsFieldNumber = 12;
    private static readonly pbc::MapField<string, string>.Codec _map_nodeLabels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 98);
    private readonly pbc::MapField<string, string> nodeLabels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels that are assigned to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> NodeLabels {
      get { return nodeLabels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNodeGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNodeGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterId != other.ClusterId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (!object.Equals(NodeTemplate, other.NodeTemplate)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (!object.Equals(AllocationPolicy, other.AllocationPolicy)) return false;
      if (!object.Equals(DeployPolicy, other.DeployPolicy)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(MaintenancePolicy, other.MaintenancePolicy)) return false;
      if(!allowedUnsafeSysctls_.Equals(other.allowedUnsafeSysctls_)) return false;
      if(!nodeTaints_.Equals(other.nodeTaints_)) return false;
      if (!NodeLabels.Equals(other.NodeLabels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (nodeTemplate_ != null) hash ^= NodeTemplate.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (allocationPolicy_ != null) hash ^= AllocationPolicy.GetHashCode();
      if (deployPolicy_ != null) hash ^= DeployPolicy.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (maintenancePolicy_ != null) hash ^= MaintenancePolicy.GetHashCode();
      hash ^= allowedUnsafeSysctls_.GetHashCode();
      hash ^= nodeTaints_.GetHashCode();
      hash ^= NodeLabels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (nodeTemplate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AllocationPolicy);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Version);
      }
      if (maintenancePolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(MaintenancePolicy);
      }
      allowedUnsafeSysctls_.WriteTo(output, _repeated_allowedUnsafeSysctls_codec);
      nodeTaints_.WriteTo(output, _repeated_nodeTaints_codec);
      nodeLabels_.WriteTo(output, _map_nodeLabels_codec);
      if (deployPolicy_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(DeployPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (nodeTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPolicy);
      }
      if (deployPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeployPolicy);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (maintenancePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenancePolicy);
      }
      size += allowedUnsafeSysctls_.CalculateSize(_repeated_allowedUnsafeSysctls_codec);
      size += nodeTaints_.CalculateSize(_repeated_nodeTaints_codec);
      size += nodeLabels_.CalculateSize(_map_nodeLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNodeGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.nodeTemplate_ != null) {
        if (nodeTemplate_ == null) {
          NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
        }
        NodeTemplate.MergeFrom(other.NodeTemplate);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.allocationPolicy_ != null) {
        if (allocationPolicy_ == null) {
          AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
        }
        AllocationPolicy.MergeFrom(other.AllocationPolicy);
      }
      if (other.deployPolicy_ != null) {
        if (deployPolicy_ == null) {
          DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
        }
        DeployPolicy.MergeFrom(other.DeployPolicy);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.maintenancePolicy_ != null) {
        if (maintenancePolicy_ == null) {
          MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
        }
        MaintenancePolicy.MergeFrom(other.MaintenancePolicy);
      }
      allowedUnsafeSysctls_.Add(other.allowedUnsafeSysctls_);
      nodeTaints_.Add(other.nodeTaints_);
      nodeLabels_.Add(other.nodeLabels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            if (nodeTemplate_ == null) {
              NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
            }
            input.ReadMessage(NodeTemplate);
            break;
          }
          case 50: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 58: {
            if (allocationPolicy_ == null) {
              AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
            }
            input.ReadMessage(AllocationPolicy);
            break;
          }
          case 66: {
            Version = input.ReadString();
            break;
          }
          case 74: {
            if (maintenancePolicy_ == null) {
              MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
            }
            input.ReadMessage(MaintenancePolicy);
            break;
          }
          case 82: {
            allowedUnsafeSysctls_.AddEntriesFrom(input, _repeated_allowedUnsafeSysctls_codec);
            break;
          }
          case 90: {
            nodeTaints_.AddEntriesFrom(input, _repeated_nodeTaints_codec);
            break;
          }
          case 98: {
            nodeLabels_.AddEntriesFrom(input, _map_nodeLabels_codec);
            break;
          }
          case 106: {
            if (deployPolicy_ == null) {
              DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
            }
            input.ReadMessage(DeployPolicy);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateNodeGroupMetadata : pb::IMessage<CreateNodeGroupMetadata> {
    private static readonly pb::MessageParser<CreateNodeGroupMetadata> _parser = new pb::MessageParser<CreateNodeGroupMetadata>(() => new CreateNodeGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNodeGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupMetadata(CreateNodeGroupMetadata other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNodeGroupMetadata Clone() {
      return new CreateNodeGroupMetadata(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNodeGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNodeGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNodeGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AutoUpgradeNodeGroupMetadata : pb::IMessage<AutoUpgradeNodeGroupMetadata> {
    private static readonly pb::MessageParser<AutoUpgradeNodeGroupMetadata> _parser = new pb::MessageParser<AutoUpgradeNodeGroupMetadata>(() => new AutoUpgradeNodeGroupMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AutoUpgradeNodeGroupMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoUpgradeNodeGroupMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoUpgradeNodeGroupMetadata(AutoUpgradeNodeGroupMetadata other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AutoUpgradeNodeGroupMetadata Clone() {
      return new AutoUpgradeNodeGroupMetadata(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group that is being auto upgraded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AutoUpgradeNodeGroupMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AutoUpgradeNodeGroupMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AutoUpgradeNodeGroupMetadata other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupOperationsRequest : pb::IMessage<ListNodeGroupOperationsRequest> {
    private static readonly pb::MessageParser<ListNodeGroupOperationsRequest> _parser = new pb::MessageParser<ListNodeGroupOperationsRequest>(() => new ListNodeGroupOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsRequest(ListNodeGroupOperationsRequest other) : this() {
      nodeGroupId_ = other.nodeGroupId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsRequest Clone() {
      return new ListNodeGroupOperationsRequest(this);
    }

    /// <summary>Field number for the "node_group_id" field.</summary>
    public const int NodeGroupIdFieldNumber = 1;
    private string nodeGroupId_ = "";
    /// <summary>
    /// ID of the node group to list operations for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeGroupId {
      get { return nodeGroupId_; }
      set {
        nodeGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page that should be returned. If the number of available
    /// results is larger than [page_size], the service returns a [ListNodeGroupOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set `page_token` to the
    /// [ListNodeGroupOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// Currently you can use filtering only on [NodeGroup.name] field.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeGroupId != other.NodeGroupId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeGroupId.Length != 0) hash ^= NodeGroupId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeGroupId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeGroupId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeGroupId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodeGroupId.Length != 0) {
        NodeGroupId = other.NodeGroupId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeGroupId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListNodeGroupOperationsResponse : pb::IMessage<ListNodeGroupOperationsResponse> {
    private static readonly pb::MessageParser<ListNodeGroupOperationsResponse> _parser = new pb::MessageParser<ListNodeGroupOperationsResponse>(() => new ListNodeGroupOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListNodeGroupOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsResponse(ListNodeGroupOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListNodeGroupOperationsResponse Clone() {
      return new ListNodeGroupOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of operations for the specified node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListNodeGroupOperationsRequest.page_size], use the `next_page_token` as the value
    /// for the [ListNodeGroupOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own `next_page_token` to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListNodeGroupOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListNodeGroupOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListNodeGroupOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
