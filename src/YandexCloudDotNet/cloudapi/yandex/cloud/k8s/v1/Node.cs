// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/k8s/v1/node.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.K8S.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/k8s/v1/node.proto</summary>
  internal static partial class NodeReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/k8s/v1/node.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch55YW5kZXgvY2xvdWQvazhzL3YxL25vZGUucHJvdG8SE3lhbmRleC5jbG91",
            "ZC5rOHMudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHXlh",
            "bmRleC9jbG91ZC92YWxpZGF0aW9uLnByb3RvIscFCgROb2RlEjAKBnN0YXR1",
            "cxgBIAEoDjIgLnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZS5TdGF0dXMSLAoE",
            "c3BlYxgCIAEoCzIeLnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZS5TcGVjEjsK",
            "DGNsb3VkX3N0YXR1cxgDIAEoCzIlLnlhbmRleC5jbG91ZC5rOHMudjEuTm9k",
            "ZS5DbG91ZFN0YXR1cxJFChFrdWJlcm5ldGVzX3N0YXR1cxgEIAEoCzIqLnlh",
            "bmRleC5jbG91ZC5rOHMudjEuTm9kZS5LdWJlcm5ldGVzU3RhdHVzGr0BChBL",
            "dWJlcm5ldGVzU3RhdHVzEgoKAmlkGAEgASgJEjIKCmNvbmRpdGlvbnMYAiAD",
            "KAsyHi55YW5kZXguY2xvdWQuazhzLnYxLkNvbmRpdGlvbhIqCgZ0YWludHMY",
            "AyADKAsyGi55YW5kZXguY2xvdWQuazhzLnYxLlRhaW50Ej0KEGF0dGFjaGVk",
            "X3ZvbHVtZXMYBCADKAsyIy55YW5kZXguY2xvdWQuazhzLnYxLkF0dGFjaGVk",
            "Vm9sdW1lGkEKC0Nsb3VkU3RhdHVzEgoKAmlkGAEgASgJEg4KBnN0YXR1cxgC",
            "IAEoCRIWCg5zdGF0dXNfbWVzc2FnZRgDIAEoCRpqCgRTcGVjEjUKCXJlc291",
            "cmNlcxgBIAEoCzIiLnlhbmRleC5jbG91ZC5rOHMudjEuUmVzb3VyY2VzU3Bl",
            "YxIrCgRkaXNrGAIgASgLMh0ueWFuZGV4LmNsb3VkLms4cy52MS5EaXNrU3Bl",
            "YyJsCgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASEAoMUFJPVklT",
            "SU9OSU5HEAESEQoNTk9UX0NPTk5FQ1RFRBACEg0KCU5PVF9SRUFEWRADEgkK",
            "BVJFQURZEAQSCwoHTUlTU0lORxAFIq0BCglDb25kaXRpb24SDAoEdHlwZRgB",
            "IAEoCRIOCgZzdGF0dXMYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRI3ChNsYXN0",
            "X2hlYXJ0YmVhdF90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVz",
            "dGFtcBI4ChRsYXN0X3RyYW5zaXRpb25fdGltZRgFIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXAisQEKBVRhaW50EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoCRIxCgZlZmZlY3QYAyABKA4yIS55YW5kZXguY2xvdWQuazhz",
            "LnYxLlRhaW50LkVmZmVjdCJZCgZFZmZlY3QSFgoSRUZGRUNUX1VOU1BFQ0lG",
            "SUVEEAASDwoLTk9fU0NIRURVTEUQARIWChJQUkVGRVJfTk9fU0NIRURVTEUQ",
            "AhIOCgpOT19FWEVDVVRFEAMiPAoOQXR0YWNoZWRWb2x1bWUSEwoLZHJpdmVy",
            "X25hbWUYASABKAkSFQoNdm9sdW1lX2hhbmRsZRgCIAEoCSLBAwoMTm9kZVRl",
            "bXBsYXRlEhMKC3BsYXRmb3JtX2lkGAEgASgJEjoKDnJlc291cmNlc19zcGVj",
            "GAIgASgLMiIueWFuZGV4LmNsb3VkLms4cy52MS5SZXNvdXJjZXNTcGVjEjUK",
            "DmJvb3RfZGlza19zcGVjGAMgASgLMh0ueWFuZGV4LmNsb3VkLms4cy52MS5E",
            "aXNrU3BlYxJ3CghtZXRhZGF0YRgEIAMoCzIvLnlhbmRleC5jbG91ZC5rOHMu",
            "djEuTm9kZVRlbXBsYXRlLk1ldGFkYXRhRW50cnlCNILIMQQ8PTY0isgxCDw9",
            "MTMxMDcyssgxBhoEMS02M7LIMRISEFthLXpdWy1fMC05YS16XSoSPQoPdjRf",
            "YWRkcmVzc19zcGVjGAUgASgLMiQueWFuZGV4LmNsb3VkLms4cy52MS5Ob2Rl",
            "QWRkcmVzc1NwZWMSQAoRc2NoZWR1bGluZ19wb2xpY3kYBiABKAsyJS55YW5k",
            "ZXguY2xvdWQuazhzLnYxLlNjaGVkdWxpbmdQb2xpY3kaLwoNTWV0YWRhdGFF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlQKD05vZGVB",
            "ZGRyZXNzU3BlYxJBChNvbmVfdG9fb25lX25hdF9zcGVjGAEgASgLMiQueWFu",
            "ZGV4LmNsb3VkLms4cy52MS5PbmVUb09uZU5hdFNwZWMiRQoPT25lVG9PbmVO",
            "YXRTcGVjEjIKCmlwX3ZlcnNpb24YASABKA4yHi55YW5kZXguY2xvdWQuazhz",
            "LnYxLklwVmVyc2lvbiK8AQoNUmVzb3VyY2VzU3BlYxIiCgZtZW1vcnkYASAB",
            "KANCEvrHMQ48PTgyNDYzMzcyMDgzMhJdCgVjb3JlcxgCIAEoA0JO+scxSjAs",
            "MSwyLDQsNiw4LDEwLDEyLDE0LDE2LDE4LDIwLDIyLDI0LDI2LDI4LDMwLDMy",
            "LDM0LDM2LDQwLDQ0LDQ4LDUyLDU2LDYwLDY0EigKDWNvcmVfZnJhY3Rpb24Y",
            "AyABKANCEfrHMQ0wLDUsMjAsNTAsMTAwImYKCERpc2tTcGVjEjIKDGRpc2tf",
            "dHlwZV9pZBgBIAEoCUIc8scxGHxuZXR3b3JrLXNzZHxuZXR3b3JrLWhkZBIm",
            "CglkaXNrX3NpemUYAiABKANCE/rHMQ8wLTQzOTgwNDY1MTExMDQiJwoQU2No",
            "ZWR1bGluZ1BvbGljeRITCgtwcmVlbXB0aWJsZRgBIAEoCCo7CglJcFZlcnNp",
            "b24SGgoWSVBfVkVSU0lPTl9VTlNQRUNJRklFRBAAEggKBElQVjQQARIICgRJ",
            "UFY2EAJCVgoXeWFuZGV4LmNsb3VkLmFwaS5rOHMudjFaO2dpdGh1Yi5jb20v",
            "eWFuZGV4LWNsb3VkL2dvLWdlbnByb3RvL3lhbmRleC9jbG91ZC9rOHMvdjE7",
            "azhzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.K8S.V1.IpVersion), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Node), global::Yandex.Cloud.K8S.V1.Node.Parser, new[]{ "Status", "Spec", "CloudStatus", "KubernetesStatus" }, null, new[]{ typeof(global::Yandex.Cloud.K8S.V1.Node.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus), global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus.Parser, new[]{ "Id", "Conditions", "Taints", "AttachedVolumes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus), global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus.Parser, new[]{ "Id", "Status", "StatusMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Node.Types.Spec), global::Yandex.Cloud.K8S.V1.Node.Types.Spec.Parser, new[]{ "Resources", "Disk" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Condition), global::Yandex.Cloud.K8S.V1.Condition.Parser, new[]{ "Type", "Status", "Message", "LastHeartbeatTime", "LastTransitionTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Taint), global::Yandex.Cloud.K8S.V1.Taint.Parser, new[]{ "Key", "Value", "Effect" }, null, new[]{ typeof(global::Yandex.Cloud.K8S.V1.Taint.Types.Effect) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.AttachedVolume), global::Yandex.Cloud.K8S.V1.AttachedVolume.Parser, new[]{ "DriverName", "VolumeHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeTemplate), global::Yandex.Cloud.K8S.V1.NodeTemplate.Parser, new[]{ "PlatformId", "ResourcesSpec", "BootDiskSpec", "Metadata", "V4AddressSpec", "SchedulingPolicy" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeAddressSpec), global::Yandex.Cloud.K8S.V1.NodeAddressSpec.Parser, new[]{ "OneToOneNatSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.OneToOneNatSpec), global::Yandex.Cloud.K8S.V1.OneToOneNatSpec.Parser, new[]{ "IpVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ResourcesSpec), global::Yandex.Cloud.K8S.V1.ResourcesSpec.Parser, new[]{ "Memory", "Cores", "CoreFraction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.DiskSpec), global::Yandex.Cloud.K8S.V1.DiskSpec.Parser, new[]{ "DiskTypeId", "DiskSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.SchedulingPolicy), global::Yandex.Cloud.K8S.V1.SchedulingPolicy.Parser, new[]{ "Preemptible" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum IpVersion {
    [pbr::OriginalName("IP_VERSION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// IPv4 address, for example 192.168.0.0.
    /// </summary>
    [pbr::OriginalName("IPV4")] Ipv4 = 1,
    /// <summary>
    /// IPv6 address, not available yet.
    /// </summary>
    [pbr::OriginalName("IPV6")] Ipv6 = 2,
  }

  #endregion

  #region Messages
  internal sealed partial class Node : pb::IMessage<Node> {
    private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Node> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node(Node other) : this() {
      status_ = other.status_;
      spec_ = other.spec_ != null ? other.spec_.Clone() : null;
      cloudStatus_ = other.cloudStatus_ != null ? other.cloudStatus_.Clone() : null;
      kubernetesStatus_ = other.kubernetesStatus_ != null ? other.kubernetesStatus_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Node Clone() {
      return new Node(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.Node.Types.Status status_ = 0;
    /// <summary>
    /// Computed node status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Node.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "spec" field.</summary>
    public const int SpecFieldNumber = 2;
    private global::Yandex.Cloud.K8S.V1.Node.Types.Spec spec_;
    /// <summary>
    /// Node specificaion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Node.Types.Spec Spec {
      get { return spec_; }
      set {
        spec_ = value;
      }
    }

    /// <summary>Field number for the "cloud_status" field.</summary>
    public const int CloudStatusFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus cloudStatus_;
    /// <summary>
    /// Cloud instance status.
    /// Not available in `MISSING` status.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus CloudStatus {
      get { return cloudStatus_; }
      set {
        cloudStatus_ = value;
      }
    }

    /// <summary>Field number for the "kubernetes_status" field.</summary>
    public const int KubernetesStatusFieldNumber = 4;
    private global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus kubernetesStatus_;
    /// <summary>
    /// Kubernetes node status.
    /// Not available in `PROVISIONING` and `NOT_CONNECTED` states.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus KubernetesStatus {
      get { return kubernetesStatus_; }
      set {
        kubernetesStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Node);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Node other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Spec, other.Spec)) return false;
      if (!object.Equals(CloudStatus, other.CloudStatus)) return false;
      if (!object.Equals(KubernetesStatus, other.KubernetesStatus)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (spec_ != null) hash ^= Spec.GetHashCode();
      if (cloudStatus_ != null) hash ^= CloudStatus.GetHashCode();
      if (kubernetesStatus_ != null) hash ^= KubernetesStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (spec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spec);
      }
      if (cloudStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CloudStatus);
      }
      if (kubernetesStatus_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(KubernetesStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (spec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spec);
      }
      if (cloudStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudStatus);
      }
      if (kubernetesStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KubernetesStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Node other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.spec_ != null) {
        if (spec_ == null) {
          Spec = new global::Yandex.Cloud.K8S.V1.Node.Types.Spec();
        }
        Spec.MergeFrom(other.Spec);
      }
      if (other.cloudStatus_ != null) {
        if (cloudStatus_ == null) {
          CloudStatus = new global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus();
        }
        CloudStatus.MergeFrom(other.CloudStatus);
      }
      if (other.kubernetesStatus_ != null) {
        if (kubernetesStatus_ == null) {
          KubernetesStatus = new global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus();
        }
        KubernetesStatus.MergeFrom(other.KubernetesStatus);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Yandex.Cloud.K8S.V1.Node.Types.Status) input.ReadEnum();
            break;
          }
          case 18: {
            if (spec_ == null) {
              Spec = new global::Yandex.Cloud.K8S.V1.Node.Types.Spec();
            }
            input.ReadMessage(Spec);
            break;
          }
          case 26: {
            if (cloudStatus_ == null) {
              CloudStatus = new global::Yandex.Cloud.K8S.V1.Node.Types.CloudStatus();
            }
            input.ReadMessage(CloudStatus);
            break;
          }
          case 34: {
            if (kubernetesStatus_ == null) {
              KubernetesStatus = new global::Yandex.Cloud.K8S.V1.Node.Types.KubernetesStatus();
            }
            input.ReadMessage(KubernetesStatus);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Node message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Computed node status.
      /// </summary>
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Node instance is not yet created (e.g. in progress).
        /// </summary>
        [pbr::OriginalName("PROVISIONING")] Provisioning = 1,
        /// <summary>
        /// Node instance is created but not registered
        /// (e.g. is still initializing).
        /// </summary>
        [pbr::OriginalName("NOT_CONNECTED")] NotConnected = 2,
        /// <summary>
        /// Node has connected but is not ready for
        /// workload (see conditions for details).
        /// </summary>
        [pbr::OriginalName("NOT_READY")] NotReady = 3,
        /// <summary>
        /// Node has connected and ready for workload.
        /// </summary>
        [pbr::OriginalName("READY")] Ready = 4,
        /// <summary>
        /// Node is still registered but its instance
        /// is deleted (this is our bug).
        /// </summary>
        [pbr::OriginalName("MISSING")] Missing = 5,
      }

      /// <summary>
      /// Kubernetes node info 
      /// </summary>
      internal sealed partial class KubernetesStatus : pb::IMessage<KubernetesStatus> {
        private static readonly pb::MessageParser<KubernetesStatus> _parser = new pb::MessageParser<KubernetesStatus>(() => new KubernetesStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<KubernetesStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.Node.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KubernetesStatus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KubernetesStatus(KubernetesStatus other) : this() {
          id_ = other.id_;
          conditions_ = other.conditions_.Clone();
          taints_ = other.taints_.Clone();
          attachedVolumes_ = other.attachedVolumes_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public KubernetesStatus Clone() {
          return new KubernetesStatus(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// Node id (and instance name)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "conditions" field.</summary>
        public const int ConditionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Condition> _repeated_conditions_codec
            = pb::FieldCodec.ForMessage(18, global::Yandex.Cloud.K8S.V1.Condition.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Condition> conditions_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Condition>();
        /// <summary>
        /// Conditions is an array of current observed node conditions.
        /// More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Condition> Conditions {
          get { return conditions_; }
        }

        /// <summary>Field number for the "taints" field.</summary>
        public const int TaintsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Taint> _repeated_taints_codec
            = pb::FieldCodec.ForMessage(26, global::Yandex.Cloud.K8S.V1.Taint.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> taints_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint>();
        /// <summary>
        /// If specified, the node's taints.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> Taints {
          get { return taints_; }
        }

        /// <summary>Field number for the "attached_volumes" field.</summary>
        public const int AttachedVolumesFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.AttachedVolume> _repeated_attachedVolumes_codec
            = pb::FieldCodec.ForMessage(34, global::Yandex.Cloud.K8S.V1.AttachedVolume.Parser);
        private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.AttachedVolume> attachedVolumes_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.AttachedVolume>();
        /// <summary>
        /// List of volumes that are attached to the node.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.AttachedVolume> AttachedVolumes {
          get { return attachedVolumes_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as KubernetesStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(KubernetesStatus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!conditions_.Equals(other.conditions_)) return false;
          if(!taints_.Equals(other.taints_)) return false;
          if(!attachedVolumes_.Equals(other.attachedVolumes_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= conditions_.GetHashCode();
          hash ^= taints_.GetHashCode();
          hash ^= attachedVolumes_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          conditions_.WriteTo(output, _repeated_conditions_codec);
          taints_.WriteTo(output, _repeated_taints_codec);
          attachedVolumes_.WriteTo(output, _repeated_attachedVolumes_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += conditions_.CalculateSize(_repeated_conditions_codec);
          size += taints_.CalculateSize(_repeated_taints_codec);
          size += attachedVolumes_.CalculateSize(_repeated_attachedVolumes_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(KubernetesStatus other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          conditions_.Add(other.conditions_);
          taints_.Add(other.taints_);
          attachedVolumes_.Add(other.attachedVolumes_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
                break;
              }
              case 26: {
                taints_.AddEntriesFrom(input, _repeated_taints_codec);
                break;
              }
              case 34: {
                attachedVolumes_.AddEntriesFrom(input, _repeated_attachedVolumes_codec);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Cloud instance info
      /// </summary>
      internal sealed partial class CloudStatus : pb::IMessage<CloudStatus> {
        private static readonly pb::MessageParser<CloudStatus> _parser = new pb::MessageParser<CloudStatus>(() => new CloudStatus());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CloudStatus> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.Node.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudStatus() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudStatus(CloudStatus other) : this() {
          id_ = other.id_;
          status_ = other.status_;
          statusMessage_ = other.statusMessage_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CloudStatus Clone() {
          return new CloudStatus(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// Compute instance id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "status" field.</summary>
        public const int StatusFieldNumber = 2;
        private string status_ = "";
        /// <summary>
        /// IG instance status
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Status {
          get { return status_; }
          set {
            status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "status_message" field.</summary>
        public const int StatusMessageFieldNumber = 3;
        private string statusMessage_ = "";
        /// <summary>
        /// IG instance status message
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string StatusMessage {
          get { return statusMessage_; }
          set {
            statusMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CloudStatus);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CloudStatus other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Status != other.Status) return false;
          if (StatusMessage != other.StatusMessage) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          if (Status.Length != 0) hash ^= Status.GetHashCode();
          if (StatusMessage.Length != 0) hash ^= StatusMessage.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          if (Status.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Status);
          }
          if (StatusMessage.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(StatusMessage);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          if (Status.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
          }
          if (StatusMessage.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(StatusMessage);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CloudStatus other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          if (other.Status.Length != 0) {
            Status = other.Status;
          }
          if (other.StatusMessage.Length != 0) {
            StatusMessage = other.StatusMessage;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18: {
                Status = input.ReadString();
                break;
              }
              case 26: {
                StatusMessage = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// Node specification.
      /// </summary>
      internal sealed partial class Spec : pb::IMessage<Spec> {
        private static readonly pb::MessageParser<Spec> _parser = new pb::MessageParser<Spec>(() => new Spec());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Spec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.Node.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spec(Spec other) : this() {
          resources_ = other.resources_ != null ? other.resources_.Clone() : null;
          disk_ = other.disk_ != null ? other.disk_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Spec Clone() {
          return new Spec(this);
        }

        /// <summary>Field number for the "resources" field.</summary>
        public const int ResourcesFieldNumber = 1;
        private global::Yandex.Cloud.K8S.V1.ResourcesSpec resources_;
        /// <summary>
        /// Node group specified resources.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.K8S.V1.ResourcesSpec Resources {
          get { return resources_; }
          set {
            resources_ = value;
          }
        }

        /// <summary>Field number for the "disk" field.</summary>
        public const int DiskFieldNumber = 2;
        private global::Yandex.Cloud.K8S.V1.DiskSpec disk_;
        /// <summary>
        /// Node group specified disk.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Yandex.Cloud.K8S.V1.DiskSpec Disk {
          get { return disk_; }
          set {
            disk_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Spec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Spec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Resources, other.Resources)) return false;
          if (!object.Equals(Disk, other.Disk)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (resources_ != null) hash ^= Resources.GetHashCode();
          if (disk_ != null) hash ^= Disk.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (resources_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Resources);
          }
          if (disk_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Disk);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (resources_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resources);
          }
          if (disk_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Disk);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Spec other) {
          if (other == null) {
            return;
          }
          if (other.resources_ != null) {
            if (resources_ == null) {
              Resources = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
            }
            Resources.MergeFrom(other.Resources);
          }
          if (other.disk_ != null) {
            if (disk_ == null) {
              Disk = new global::Yandex.Cloud.K8S.V1.DiskSpec();
            }
            Disk.MergeFrom(other.Disk);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (resources_ == null) {
                  Resources = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
                }
                input.ReadMessage(Resources);
                break;
              }
              case 18: {
                if (disk_ == null) {
                  Disk = new global::Yandex.Cloud.K8S.V1.DiskSpec();
                }
                input.ReadMessage(Disk);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class Condition : pb::IMessage<Condition> {
    private static readonly pb::MessageParser<Condition> _parser = new pb::MessageParser<Condition>(() => new Condition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Condition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition(Condition other) : this() {
      type_ = other.type_;
      status_ = other.status_;
      message_ = other.message_;
      lastHeartbeatTime_ = other.lastHeartbeatTime_ != null ? other.lastHeartbeatTime_.Clone() : null;
      lastTransitionTime_ = other.lastTransitionTime_ != null ? other.lastTransitionTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Condition Clone() {
      return new Condition(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// Type of node condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private string status_ = "";
    /// <summary>
    /// Status is the status of the condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Status {
      get { return status_; }
      set {
        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    /// <summary>
    /// Human-readable message indicating details about last transition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_heartbeat_time" field.</summary>
    public const int LastHeartbeatTimeFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastHeartbeatTime_;
    /// <summary>
    /// Last time we got an update on a given condition.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastHeartbeatTime {
      get { return lastHeartbeatTime_; }
      set {
        lastHeartbeatTime_ = value;
      }
    }

    /// <summary>Field number for the "last_transition_time" field.</summary>
    public const int LastTransitionTimeFieldNumber = 5;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastTransitionTime_;
    /// <summary>
    /// Last time the condition transit from one status to another.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastTransitionTime {
      get { return lastTransitionTime_; }
      set {
        lastTransitionTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Condition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Condition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (!object.Equals(LastHeartbeatTime, other.LastHeartbeatTime)) return false;
      if (!object.Equals(LastTransitionTime, other.LastTransitionTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Status.Length != 0) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (lastHeartbeatTime_ != null) hash ^= LastHeartbeatTime.GetHashCode();
      if (lastTransitionTime_ != null) hash ^= LastTransitionTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Status.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (lastHeartbeatTime_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastHeartbeatTime);
      }
      if (lastTransitionTime_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LastTransitionTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Status.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (lastHeartbeatTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastHeartbeatTime);
      }
      if (lastTransitionTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastTransitionTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Condition other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Status.Length != 0) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.lastHeartbeatTime_ != null) {
        if (lastHeartbeatTime_ == null) {
          LastHeartbeatTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastHeartbeatTime.MergeFrom(other.LastHeartbeatTime);
      }
      if (other.lastTransitionTime_ != null) {
        if (lastTransitionTime_ == null) {
          LastTransitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastTransitionTime.MergeFrom(other.LastTransitionTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            Status = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            if (lastHeartbeatTime_ == null) {
              LastHeartbeatTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastHeartbeatTime);
            break;
          }
          case 42: {
            if (lastTransitionTime_ == null) {
              LastTransitionTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastTransitionTime);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Taint : pb::IMessage<Taint> {
    private static readonly pb::MessageParser<Taint> _parser = new pb::MessageParser<Taint>(() => new Taint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Taint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taint(Taint other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      effect_ = other.effect_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Taint Clone() {
      return new Taint(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    /// <summary>
    /// The taint key to be applied to a node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    /// <summary>
    /// The taint value corresponding to the taint key.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.Taint.Types.Effect effect_ = 0;
    /// <summary>
    /// The effect of the taint on pods that do not tolerate the taint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Taint.Types.Effect Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Taint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Taint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (Effect != other.Effect) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Effect != 0) hash ^= Effect.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Effect != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Effect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Effect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effect);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Taint other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Effect != 0) {
        Effect = other.Effect;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 24: {
            Effect = (global::Yandex.Cloud.K8S.V1.Taint.Types.Effect) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Taint message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Effect {
        [pbr::OriginalName("EFFECT_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Do not allow new pods to schedule onto the node unless they tolerate the taint,
        /// but allow all pods submitted to Kubelet without going through the scheduler
        /// to start, and allow all already-running pods to continue running.
        /// </summary>
        [pbr::OriginalName("NO_SCHEDULE")] NoSchedule = 1,
        /// <summary>
        /// Like NO_SCHEDULE, but the scheduler tries not to schedule
        /// new pods onto the node, rather than prohibiting new pods from scheduling
        /// onto the node entirely. Enforced by the scheduler.
        /// </summary>
        [pbr::OriginalName("PREFER_NO_SCHEDULE")] PreferNoSchedule = 2,
        /// <summary>
        /// Evict any already-running pods that do not tolerate the taint.
        /// </summary>
        [pbr::OriginalName("NO_EXECUTE")] NoExecute = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// AttachedVolume describes a volume attached to a node
  /// </summary>
  internal sealed partial class AttachedVolume : pb::IMessage<AttachedVolume> {
    private static readonly pb::MessageParser<AttachedVolume> _parser = new pb::MessageParser<AttachedVolume>(() => new AttachedVolume());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachedVolume> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedVolume() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedVolume(AttachedVolume other) : this() {
      driverName_ = other.driverName_;
      volumeHandle_ = other.volumeHandle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedVolume Clone() {
      return new AttachedVolume(this);
    }

    /// <summary>Field number for the "driver_name" field.</summary>
    public const int DriverNameFieldNumber = 1;
    private string driverName_ = "";
    /// <summary>
    /// Name of the driver which has attached the volume
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriverName {
      get { return driverName_; }
      set {
        driverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "volume_handle" field.</summary>
    public const int VolumeHandleFieldNumber = 2;
    private string volumeHandle_ = "";
    /// <summary>
    /// Volume handle (cloud disk id)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VolumeHandle {
      get { return volumeHandle_; }
      set {
        volumeHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachedVolume);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachedVolume other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DriverName != other.DriverName) return false;
      if (VolumeHandle != other.VolumeHandle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DriverName.Length != 0) hash ^= DriverName.GetHashCode();
      if (VolumeHandle.Length != 0) hash ^= VolumeHandle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DriverName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DriverName);
      }
      if (VolumeHandle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VolumeHandle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DriverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverName);
      }
      if (VolumeHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VolumeHandle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachedVolume other) {
      if (other == null) {
        return;
      }
      if (other.DriverName.Length != 0) {
        DriverName = other.DriverName;
      }
      if (other.VolumeHandle.Length != 0) {
        VolumeHandle = other.VolumeHandle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DriverName = input.ReadString();
            break;
          }
          case 18: {
            VolumeHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeTemplate : pb::IMessage<NodeTemplate> {
    private static readonly pb::MessageParser<NodeTemplate> _parser = new pb::MessageParser<NodeTemplate>(() => new NodeTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate(NodeTemplate other) : this() {
      platformId_ = other.platformId_;
      resourcesSpec_ = other.resourcesSpec_ != null ? other.resourcesSpec_.Clone() : null;
      bootDiskSpec_ = other.bootDiskSpec_ != null ? other.bootDiskSpec_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      v4AddressSpec_ = other.v4AddressSpec_ != null ? other.v4AddressSpec_.Clone() : null;
      schedulingPolicy_ = other.schedulingPolicy_ != null ? other.schedulingPolicy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate Clone() {
      return new NodeTemplate(this);
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    /// ID of the hardware platform configuration for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources_spec" field.</summary>
    public const int ResourcesSpecFieldNumber = 2;
    private global::Yandex.Cloud.K8S.V1.ResourcesSpec resourcesSpec_;
    /// <summary>
    /// Computing resources of the node such as the amount of memory and number of cores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ResourcesSpec ResourcesSpec {
      get { return resourcesSpec_; }
      set {
        resourcesSpec_ = value;
      }
    }

    /// <summary>Field number for the "boot_disk_spec" field.</summary>
    public const int BootDiskSpecFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.DiskSpec bootDiskSpec_;
    /// <summary>
    /// Specification for the boot disk that will be attached to the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.DiskSpec BootDiskSpec {
      get { return bootDiskSpec_; }
      set {
        bootDiskSpec_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The metadata as `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
    ///
    /// For example, you may use the metadata in order to provide your public SSH key to the node.
    /// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "v4_address_spec" field.</summary>
    public const int V4AddressSpecFieldNumber = 5;
    private global::Yandex.Cloud.K8S.V1.NodeAddressSpec v4AddressSpec_;
    /// <summary>
    /// Specification for the create network interfaces for the node group compute instances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeAddressSpec V4AddressSpec {
      get { return v4AddressSpec_; }
      set {
        v4AddressSpec_ = value;
      }
    }

    /// <summary>Field number for the "scheduling_policy" field.</summary>
    public const int SchedulingPolicyFieldNumber = 6;
    private global::Yandex.Cloud.K8S.V1.SchedulingPolicy schedulingPolicy_;
    /// <summary>
    /// Scheduling policy configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.SchedulingPolicy SchedulingPolicy {
      get { return schedulingPolicy_; }
      set {
        schedulingPolicy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (!object.Equals(ResourcesSpec, other.ResourcesSpec)) return false;
      if (!object.Equals(BootDiskSpec, other.BootDiskSpec)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (!object.Equals(V4AddressSpec, other.V4AddressSpec)) return false;
      if (!object.Equals(SchedulingPolicy, other.SchedulingPolicy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (resourcesSpec_ != null) hash ^= ResourcesSpec.GetHashCode();
      if (bootDiskSpec_ != null) hash ^= BootDiskSpec.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (v4AddressSpec_ != null) hash ^= V4AddressSpec.GetHashCode();
      if (schedulingPolicy_ != null) hash ^= SchedulingPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (resourcesSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourcesSpec);
      }
      if (bootDiskSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BootDiskSpec);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (v4AddressSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(V4AddressSpec);
      }
      if (schedulingPolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SchedulingPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (resourcesSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcesSpec);
      }
      if (bootDiskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootDiskSpec);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (v4AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(V4AddressSpec);
      }
      if (schedulingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchedulingPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeTemplate other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.resourcesSpec_ != null) {
        if (resourcesSpec_ == null) {
          ResourcesSpec = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
        }
        ResourcesSpec.MergeFrom(other.ResourcesSpec);
      }
      if (other.bootDiskSpec_ != null) {
        if (bootDiskSpec_ == null) {
          BootDiskSpec = new global::Yandex.Cloud.K8S.V1.DiskSpec();
        }
        BootDiskSpec.MergeFrom(other.BootDiskSpec);
      }
      metadata_.Add(other.metadata_);
      if (other.v4AddressSpec_ != null) {
        if (v4AddressSpec_ == null) {
          V4AddressSpec = new global::Yandex.Cloud.K8S.V1.NodeAddressSpec();
        }
        V4AddressSpec.MergeFrom(other.V4AddressSpec);
      }
      if (other.schedulingPolicy_ != null) {
        if (schedulingPolicy_ == null) {
          SchedulingPolicy = new global::Yandex.Cloud.K8S.V1.SchedulingPolicy();
        }
        SchedulingPolicy.MergeFrom(other.SchedulingPolicy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 18: {
            if (resourcesSpec_ == null) {
              ResourcesSpec = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
            }
            input.ReadMessage(ResourcesSpec);
            break;
          }
          case 26: {
            if (bootDiskSpec_ == null) {
              BootDiskSpec = new global::Yandex.Cloud.K8S.V1.DiskSpec();
            }
            input.ReadMessage(BootDiskSpec);
            break;
          }
          case 34: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 42: {
            if (v4AddressSpec_ == null) {
              V4AddressSpec = new global::Yandex.Cloud.K8S.V1.NodeAddressSpec();
            }
            input.ReadMessage(V4AddressSpec);
            break;
          }
          case 50: {
            if (schedulingPolicy_ == null) {
              SchedulingPolicy = new global::Yandex.Cloud.K8S.V1.SchedulingPolicy();
            }
            input.ReadMessage(SchedulingPolicy);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeAddressSpec : pb::IMessage<NodeAddressSpec> {
    private static readonly pb::MessageParser<NodeAddressSpec> _parser = new pb::MessageParser<NodeAddressSpec>(() => new NodeAddressSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAddressSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec(NodeAddressSpec other) : this() {
      oneToOneNatSpec_ = other.oneToOneNatSpec_ != null ? other.oneToOneNatSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec Clone() {
      return new NodeAddressSpec(this);
    }

    /// <summary>Field number for the "one_to_one_nat_spec" field.</summary>
    public const int OneToOneNatSpecFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.OneToOneNatSpec oneToOneNatSpec_;
    /// <summary>
    /// One-to-one NAT configuration. Setting up one-to-one NAT ensures that public IP addresses are assigned to nodes, and therefore internet is accessible for all nodes of the node group. If the field is not set, NAT will not be set up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.OneToOneNatSpec OneToOneNatSpec {
      get { return oneToOneNatSpec_; }
      set {
        oneToOneNatSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAddressSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAddressSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OneToOneNatSpec, other.OneToOneNatSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneToOneNatSpec_ != null) hash ^= OneToOneNatSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneToOneNatSpec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneToOneNatSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAddressSpec other) {
      if (other == null) {
        return;
      }
      if (other.oneToOneNatSpec_ != null) {
        if (oneToOneNatSpec_ == null) {
          OneToOneNatSpec = new global::Yandex.Cloud.K8S.V1.OneToOneNatSpec();
        }
        OneToOneNatSpec.MergeFrom(other.OneToOneNatSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oneToOneNatSpec_ == null) {
              OneToOneNatSpec = new global::Yandex.Cloud.K8S.V1.OneToOneNatSpec();
            }
            input.ReadMessage(OneToOneNatSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OneToOneNatSpec : pb::IMessage<OneToOneNatSpec> {
    private static readonly pb::MessageParser<OneToOneNatSpec> _parser = new pb::MessageParser<OneToOneNatSpec>(() => new OneToOneNatSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneNatSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec(OneToOneNatSpec other) : this() {
      ipVersion_ = other.ipVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec Clone() {
      return new OneToOneNatSpec(this);
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.IpVersion ipVersion_ = 0;
    /// <summary>
    /// IP version for the public IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneNatSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneNatSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != 0) hash ^= IpVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IpVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneNatSpec other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != 0) {
        IpVersion = other.IpVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IpVersion = (global::Yandex.Cloud.K8S.V1.IpVersion) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResourcesSpec : pb::IMessage<ResourcesSpec> {
    private static readonly pb::MessageParser<ResourcesSpec> _parser = new pb::MessageParser<ResourcesSpec>(() => new ResourcesSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourcesSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec(ResourcesSpec other) : this() {
      memory_ = other.memory_;
      cores_ = other.cores_;
      coreFraction_ = other.coreFraction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec Clone() {
      return new ResourcesSpec(this);
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 1;
    private long memory_;
    /// <summary>
    /// Amount of memory available to the node, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 2;
    private long cores_;
    /// <summary>
    /// Number of cores available to the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "core_fraction" field.</summary>
    public const int CoreFractionFieldNumber = 3;
    private long coreFraction_;
    /// <summary>
    /// Baseline level of CPU performance with the possibility to burst performance above that baseline level.
    /// This field sets baseline performance for each core.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoreFraction {
      get { return coreFraction_; }
      set {
        coreFraction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourcesSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourcesSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memory != other.Memory) return false;
      if (Cores != other.Cores) return false;
      if (CoreFraction != other.CoreFraction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memory != 0L) hash ^= Memory.GetHashCode();
      if (Cores != 0L) hash ^= Cores.GetHashCode();
      if (CoreFraction != 0L) hash ^= CoreFraction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memory != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Memory);
      }
      if (Cores != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Cores);
      }
      if (CoreFraction != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoreFraction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Memory);
      }
      if (Cores != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cores);
      }
      if (CoreFraction != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoreFraction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourcesSpec other) {
      if (other == null) {
        return;
      }
      if (other.Memory != 0L) {
        Memory = other.Memory;
      }
      if (other.Cores != 0L) {
        Cores = other.Cores;
      }
      if (other.CoreFraction != 0L) {
        CoreFraction = other.CoreFraction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Memory = input.ReadInt64();
            break;
          }
          case 16: {
            Cores = input.ReadInt64();
            break;
          }
          case 24: {
            CoreFraction = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DiskSpec : pb::IMessage<DiskSpec> {
    private static readonly pb::MessageParser<DiskSpec> _parser = new pb::MessageParser<DiskSpec>(() => new DiskSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiskSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec(DiskSpec other) : this() {
      diskTypeId_ = other.diskTypeId_;
      diskSize_ = other.diskSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec Clone() {
      return new DiskSpec(this);
    }

    /// <summary>Field number for the "disk_type_id" field.</summary>
    public const int DiskTypeIdFieldNumber = 1;
    private string diskTypeId_ = "";
    /// <summary>
    /// ID of the disk type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskTypeId {
      get { return diskTypeId_; }
      set {
        diskTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 2;
    private long diskSize_;
    /// <summary>
    /// Size of the disk, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiskSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiskSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskTypeId != other.DiskTypeId) return false;
      if (DiskSize != other.DiskSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskTypeId.Length != 0) hash ^= DiskTypeId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskTypeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskTypeId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskTypeId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiskSpec other) {
      if (other == null) {
        return;
      }
      if (other.DiskTypeId.Length != 0) {
        DiskTypeId = other.DiskTypeId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskTypeId = input.ReadString();
            break;
          }
          case 16: {
            DiskSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SchedulingPolicy : pb::IMessage<SchedulingPolicy> {
    private static readonly pb::MessageParser<SchedulingPolicy> _parser = new pb::MessageParser<SchedulingPolicy>(() => new SchedulingPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchedulingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy(SchedulingPolicy other) : this() {
      preemptible_ = other.preemptible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy Clone() {
      return new SchedulingPolicy(this);
    }

    /// <summary>Field number for the "preemptible" field.</summary>
    public const int PreemptibleFieldNumber = 1;
    private bool preemptible_;
    /// <summary>
    /// True for preemptible compute instances. Default value is false. Preemptible compute instances are stopped at least once every 24 hours, and can be stopped at any time
    /// if their resources are needed by Compute.
    /// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Preemptible {
      get { return preemptible_; }
      set {
        preemptible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchedulingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchedulingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Preemptible != other.Preemptible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Preemptible != false) hash ^= Preemptible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Preemptible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Preemptible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Preemptible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchedulingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.Preemptible != false) {
        Preemptible = other.Preemptible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Preemptible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
