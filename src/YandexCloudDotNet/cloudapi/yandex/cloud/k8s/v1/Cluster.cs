// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/k8s/v1/cluster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.K8S.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/k8s/v1/cluster.proto</summary>
  internal static partial class ClusterReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/k8s/v1/cluster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ClusterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiF5YW5kZXgvY2xvdWQvazhzL3YxL2NsdXN0ZXIucHJvdG8SE3lhbmRleC5j",
            "bG91ZC5rOHMudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8a",
            "JXlhbmRleC9jbG91ZC9rOHMvdjEvbWFpbnRlbmFuY2UucHJvdG8aIXlhbmRl",
            "eC9jbG91ZC9rOHMvdjEvdmVyc2lvbi5wcm90bxodeWFuZGV4L2Nsb3VkL3Zh",
            "bGlkYXRpb24ucHJvdG8iywcKB0NsdXN0ZXISCgoCaWQYASABKAkSEQoJZm9s",
            "ZGVyX2lkGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEgwKBG5hbWUYBCABKAkSEwoLZGVzY3JpcHRpb24Y",
            "BSABKAkSOAoGbGFiZWxzGAYgAygLMigueWFuZGV4LmNsb3VkLms4cy52MS5D",
            "bHVzdGVyLkxhYmVsc0VudHJ5EjMKBnN0YXR1cxgHIAEoDjIjLnlhbmRleC5j",
            "bG91ZC5rOHMudjEuQ2x1c3Rlci5TdGF0dXMSMwoGaGVhbHRoGAggASgOMiMu",
            "eWFuZGV4LmNsb3VkLms4cy52MS5DbHVzdGVyLkhlYWx0aBISCgpuZXR3b3Jr",
            "X2lkGAkgASgJEisKBm1hc3RlchgKIAEoCzIbLnlhbmRleC5jbG91ZC5rOHMu",
            "djEuTWFzdGVyEkUKFGlwX2FsbG9jYXRpb25fcG9saWN5GAsgASgLMicueWFu",
            "ZGV4LmNsb3VkLms4cy52MS5JUEFsbG9jYXRpb25Qb2xpY3kSKAoUZ2F0ZXdh",
            "eV9pcHY0X2FkZHJlc3MYDCABKAlCCIrIMQQ8PTE1SAASGgoSc2VydmljZV9h",
            "Y2NvdW50X2lkGA0gASgJEh8KF25vZGVfc2VydmljZV9hY2NvdW50X2lkGA4g",
            "ASgJEjwKD3JlbGVhc2VfY2hhbm5lbBgPIAEoDjIjLnlhbmRleC5jbG91ZC5r",
            "OHMudjEuUmVsZWFzZUNoYW5uZWwSOgoObmV0d29ya19wb2xpY3kYECABKAsy",
            "Ii55YW5kZXguY2xvdWQuazhzLnYxLk5ldHdvcmtQb2xpY3kSNgoMa21zX3By",
            "b3ZpZGVyGBEgASgLMiAueWFuZGV4LmNsb3VkLms4cy52MS5LTVNQcm92aWRl",
            "chotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6",
            "AjgBIocBCgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASEAoMUFJP",
            "VklTSU9OSU5HEAESCwoHUlVOTklORxACEg8KC1JFQ09OQ0lMSU5HEAMSDAoI",
            "U1RPUFBJTkcQBBILCgdTVE9QUEVEEAUSDAoIREVMRVRJTkcQBhIMCghTVEFS",
            "VElORxAHIjwKBkhlYWx0aBIWChJIRUFMVEhfVU5TUEVDSUZJRUQQABILCgdI",
            "RUFMVEhZEAESDQoJVU5IRUFMVEhZEAJCEgoQaW50ZXJuZXRfZ2F0ZXdheSKT",
            "AwoGTWFzdGVyEjgKDHpvbmFsX21hc3RlchgBIAEoCzIgLnlhbmRleC5jbG91",
            "ZC5rOHMudjEuWm9uYWxNYXN0ZXJIABI+Cg9yZWdpb25hbF9tYXN0ZXIYByAB",
            "KAsyIy55YW5kZXguY2xvdWQuazhzLnYxLlJlZ2lvbmFsTWFzdGVySAASDwoH",
            "dmVyc2lvbhgCIAEoCRI3CgllbmRwb2ludHMYAyABKAsyJC55YW5kZXguY2xv",
            "dWQuazhzLnYxLk1hc3RlckVuZHBvaW50cxI0CgttYXN0ZXJfYXV0aBgEIAEo",
            "CzIfLnlhbmRleC5jbG91ZC5rOHMudjEuTWFzdGVyQXV0aBI2Cgx2ZXJzaW9u",
            "X2luZm8YBSABKAsyIC55YW5kZXguY2xvdWQuazhzLnYxLlZlcnNpb25JbmZv",
            "EkgKEm1haW50ZW5hbmNlX3BvbGljeRgGIAEoCzIsLnlhbmRleC5jbG91ZC5r",
            "OHMudjEuTWFzdGVyTWFpbnRlbmFuY2VQb2xpY3lCDQoLbWFzdGVyX3R5cGUi",
            "LAoKTWFzdGVyQXV0aBIeChZjbHVzdGVyX2NhX2NlcnRpZmljYXRlGAEgASgJ",
            "IlgKC1pvbmFsTWFzdGVyEg8KB3pvbmVfaWQYASABKAkSGwoTaW50ZXJuYWxf",
            "djRfYWRkcmVzcxgCIAEoCRIbChNleHRlcm5hbF92NF9hZGRyZXNzGAMgASgJ",
            "Il0KDlJlZ2lvbmFsTWFzdGVyEhEKCXJlZ2lvbl9pZBgBIAEoCRIbChNpbnRl",
            "cm5hbF92NF9hZGRyZXNzGAIgASgJEhsKE2V4dGVybmFsX3Y0X2FkZHJlc3MY",
            "AyABKAkiTQoPTWFzdGVyRW5kcG9pbnRzEhwKFGludGVybmFsX3Y0X2VuZHBv",
            "aW50GAEgASgJEhwKFGV4dGVybmFsX3Y0X2VuZHBvaW50GAIgASgJIo4BChJJ",
            "UEFsbG9jYXRpb25Qb2xpY3kSHwoXY2x1c3Rlcl9pcHY0X2NpZHJfYmxvY2sY",
            "ASABKAkSNgoYbm9kZV9pcHY0X2NpZHJfbWFza19zaXplGAUgASgDQhT6xzEQ",
            "MCwyNCwyNSwyNiwyNywyOBIfChdzZXJ2aWNlX2lwdjRfY2lkcl9ibG9jaxgC",
            "IAEoCSJzChdNYXN0ZXJNYWludGVuYW5jZVBvbGljeRIUCgxhdXRvX3VwZ3Jh",
            "ZGUYASABKAgSQgoSbWFpbnRlbmFuY2Vfd2luZG93GAIgASgLMiYueWFuZGV4",
            "LmNsb3VkLms4cy52MS5NYWludGVuYW5jZVdpbmRvdyKAAQoNTmV0d29ya1Bv",
            "bGljeRI9Cghwcm92aWRlchgBIAEoDjIrLnlhbmRleC5jbG91ZC5rOHMudjEu",
            "TmV0d29ya1BvbGljeS5Qcm92aWRlciIwCghQcm92aWRlchIYChRQUk9WSURF",
            "Ul9VTlNQRUNJRklFRBAAEgoKBkNBTElDTxABIh0KC0tNU1Byb3ZpZGVyEg4K",
            "BmtleV9pZBgBIAEoCSpVCg5SZWxlYXNlQ2hhbm5lbBIfChtSRUxFQVNFX0NI",
            "QU5ORUxfVU5TUEVDSUZJRUQQABIJCgVSQVBJRBABEgsKB1JFR1VMQVIQAhIK",
            "CgZTVEFCTEUQA0JWChd5YW5kZXguY2xvdWQuYXBpLms4cy52MVo7Z2l0aHVi",
            "LmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8veWFuZGV4L2Nsb3VkL2s4",
            "cy92MTtrOHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Yandex.Cloud.K8S.V1.MaintenanceReflection.Descriptor, global::Yandex.Cloud.K8S.V1.VersionReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.K8S.V1.ReleaseChannel), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Cluster), global::Yandex.Cloud.K8S.V1.Cluster.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "Status", "Health", "NetworkId", "Master", "IpAllocationPolicy", "GatewayIpv4Address", "ServiceAccountId", "NodeServiceAccountId", "ReleaseChannel", "NetworkPolicy", "KmsProvider" }, new[]{ "InternetGateway" }, new[]{ typeof(global::Yandex.Cloud.K8S.V1.Cluster.Types.Status), typeof(global::Yandex.Cloud.K8S.V1.Cluster.Types.Health) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.Master), global::Yandex.Cloud.K8S.V1.Master.Parser, new[]{ "ZonalMaster", "RegionalMaster", "Version", "Endpoints", "MasterAuth", "VersionInfo", "MaintenancePolicy" }, new[]{ "MasterType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.MasterAuth), global::Yandex.Cloud.K8S.V1.MasterAuth.Parser, new[]{ "ClusterCaCertificate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ZonalMaster), global::Yandex.Cloud.K8S.V1.ZonalMaster.Parser, new[]{ "ZoneId", "InternalV4Address", "ExternalV4Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.RegionalMaster), global::Yandex.Cloud.K8S.V1.RegionalMaster.Parser, new[]{ "RegionId", "InternalV4Address", "ExternalV4Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.MasterEndpoints), global::Yandex.Cloud.K8S.V1.MasterEndpoints.Parser, new[]{ "InternalV4Endpoint", "ExternalV4Endpoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.IPAllocationPolicy), global::Yandex.Cloud.K8S.V1.IPAllocationPolicy.Parser, new[]{ "ClusterIpv4CidrBlock", "NodeIpv4CidrMaskSize", "ServiceIpv4CidrBlock" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy), global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy.Parser, new[]{ "AutoUpgrade", "MaintenanceWindow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NetworkPolicy), global::Yandex.Cloud.K8S.V1.NetworkPolicy.Parser, new[]{ "Provider" }, null, new[]{ typeof(global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.KMSProvider), global::Yandex.Cloud.K8S.V1.KMSProvider.Parser, new[]{ "KeyId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum ReleaseChannel {
    [pbr::OriginalName("RELEASE_CHANNEL_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Minor updates with new functions and improvements are often added.
    /// You can't disable automatic updates in this channel, but you can specify a time period for automatic updates.
    /// </summary>
    [pbr::OriginalName("RAPID")] Rapid = 1,
    /// <summary>
    /// New functions and improvements are added in chunks shortly after they appear on `RAPID`.
    /// </summary>
    [pbr::OriginalName("REGULAR")] Regular = 2,
    /// <summary>
    /// Only updates related to bug fixes or security improvements are added.
    /// </summary>
    [pbr::OriginalName("STABLE")] Stable = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A Kubernetes cluster.
  /// </summary>
  internal sealed partial class Cluster : pb::IMessage<Cluster> {
    private static readonly pb::MessageParser<Cluster> _parser = new pb::MessageParser<Cluster>(() => new Cluster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cluster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster(Cluster other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      status_ = other.status_;
      health_ = other.health_;
      networkId_ = other.networkId_;
      master_ = other.master_ != null ? other.master_.Clone() : null;
      ipAllocationPolicy_ = other.ipAllocationPolicy_ != null ? other.ipAllocationPolicy_.Clone() : null;
      serviceAccountId_ = other.serviceAccountId_;
      nodeServiceAccountId_ = other.nodeServiceAccountId_;
      releaseChannel_ = other.releaseChannel_;
      networkPolicy_ = other.networkPolicy_ != null ? other.networkPolicy_.Clone() : null;
      kmsProvider_ = other.kmsProvider_ != null ? other.kmsProvider_.Clone() : null;
      switch (other.InternetGatewayCase) {
        case InternetGatewayOneofCase.GatewayIpv4Address:
          GatewayIpv4Address = other.GatewayIpv4Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cluster Clone() {
      return new Cluster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the Kubernetes cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the Kubernetes cluster. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs. Мaximum of 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Yandex.Cloud.K8S.V1.Cluster.Types.Status status_ = global::Yandex.Cloud.K8S.V1.Cluster.Types.Status.Unspecified;
    /// <summary>
    /// Status of the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Cluster.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 8;
    private global::Yandex.Cloud.K8S.V1.Cluster.Types.Health health_ = global::Yandex.Cloud.K8S.V1.Cluster.Types.Health.Unspecified;
    /// <summary>
    /// Health of the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Cluster.Types.Health Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "network_id" field.</summary>
    public const int NetworkIdFieldNumber = 9;
    private string networkId_ = "";
    /// <summary>
    /// ID of the network the Kubernetes cluster belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkId {
      get { return networkId_; }
      set {
        networkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "master" field.</summary>
    public const int MasterFieldNumber = 10;
    private global::Yandex.Cloud.K8S.V1.Master master_;
    /// <summary>
    /// Properties of the master for the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.Master Master {
      get { return master_; }
      set {
        master_ = value;
      }
    }

    /// <summary>Field number for the "ip_allocation_policy" field.</summary>
    public const int IpAllocationPolicyFieldNumber = 11;
    private global::Yandex.Cloud.K8S.V1.IPAllocationPolicy ipAllocationPolicy_;
    /// <summary>
    /// Allocation policy for IP addresses of services and pods inside the Kubernetes cluster in different availability zones.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.IPAllocationPolicy IpAllocationPolicy {
      get { return ipAllocationPolicy_; }
      set {
        ipAllocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "gateway_ipv4_address" field.</summary>
    public const int GatewayIpv4AddressFieldNumber = 12;
    /// <summary>
    /// Gateway IPv4 address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GatewayIpv4Address {
      get { return internetGatewayCase_ == InternetGatewayOneofCase.GatewayIpv4Address ? (string) internetGateway_ : ""; }
      set {
        internetGateway_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        internetGatewayCase_ = InternetGatewayOneofCase.GatewayIpv4Address;
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 13;
    private string serviceAccountId_ = "";
    /// <summary>
    /// Service account to be used for provisioning Compute Cloud and VPC resources for Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_service_account_id" field.</summary>
    public const int NodeServiceAccountIdFieldNumber = 14;
    private string nodeServiceAccountId_ = "";
    /// <summary>
    /// Service account to be used by the worker nodes of the Kubernetes cluster to access Container Registry or to push node logs and metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeServiceAccountId {
      get { return nodeServiceAccountId_; }
      set {
        nodeServiceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "release_channel" field.</summary>
    public const int ReleaseChannelFieldNumber = 15;
    private global::Yandex.Cloud.K8S.V1.ReleaseChannel releaseChannel_ = global::Yandex.Cloud.K8S.V1.ReleaseChannel.Unspecified;
    /// <summary>
    /// When creating a Kubernetes cluster, you should specify one of three release channels. The release channel contains several Kubernetes versions.
    /// Channels differ in the set of available versions, the management of auto-updates, and the updates received.
    /// You can't change the channel once the Kubernetes cluster is created, you can only recreate the Kubernetes cluster and specify a new release channel.
    /// For more details see [documentation](https://cloud.yandex.com/docs/managed-kubernetes/concepts/release-channels-and-updates).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ReleaseChannel ReleaseChannel {
      get { return releaseChannel_; }
      set {
        releaseChannel_ = value;
      }
    }

    /// <summary>Field number for the "network_policy" field.</summary>
    public const int NetworkPolicyFieldNumber = 16;
    private global::Yandex.Cloud.K8S.V1.NetworkPolicy networkPolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NetworkPolicy NetworkPolicy {
      get { return networkPolicy_; }
      set {
        networkPolicy_ = value;
      }
    }

    /// <summary>Field number for the "kms_provider" field.</summary>
    public const int KmsProviderFieldNumber = 17;
    private global::Yandex.Cloud.K8S.V1.KMSProvider kmsProvider_;
    /// <summary>
    /// KMS provider configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.KMSProvider KmsProvider {
      get { return kmsProvider_; }
      set {
        kmsProvider_ = value;
      }
    }

    private object internetGateway_;
    /// <summary>Enum of possible cases for the "internet_gateway" oneof.</summary>
    public enum InternetGatewayOneofCase {
      None = 0,
      GatewayIpv4Address = 12,
    }
    private InternetGatewayOneofCase internetGatewayCase_ = InternetGatewayOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InternetGatewayOneofCase InternetGatewayCase {
      get { return internetGatewayCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInternetGateway() {
      internetGatewayCase_ = InternetGatewayOneofCase.None;
      internetGateway_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cluster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cluster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Status != other.Status) return false;
      if (Health != other.Health) return false;
      if (NetworkId != other.NetworkId) return false;
      if (!object.Equals(Master, other.Master)) return false;
      if (!object.Equals(IpAllocationPolicy, other.IpAllocationPolicy)) return false;
      if (GatewayIpv4Address != other.GatewayIpv4Address) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      if (NodeServiceAccountId != other.NodeServiceAccountId) return false;
      if (ReleaseChannel != other.ReleaseChannel) return false;
      if (!object.Equals(NetworkPolicy, other.NetworkPolicy)) return false;
      if (!object.Equals(KmsProvider, other.KmsProvider)) return false;
      if (InternetGatewayCase != other.InternetGatewayCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Status != global::Yandex.Cloud.K8S.V1.Cluster.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (Health != global::Yandex.Cloud.K8S.V1.Cluster.Types.Health.Unspecified) hash ^= Health.GetHashCode();
      if (NetworkId.Length != 0) hash ^= NetworkId.GetHashCode();
      if (master_ != null) hash ^= Master.GetHashCode();
      if (ipAllocationPolicy_ != null) hash ^= IpAllocationPolicy.GetHashCode();
      if (internetGatewayCase_ == InternetGatewayOneofCase.GatewayIpv4Address) hash ^= GatewayIpv4Address.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (NodeServiceAccountId.Length != 0) hash ^= NodeServiceAccountId.GetHashCode();
      if (ReleaseChannel != global::Yandex.Cloud.K8S.V1.ReleaseChannel.Unspecified) hash ^= ReleaseChannel.GetHashCode();
      if (networkPolicy_ != null) hash ^= NetworkPolicy.GetHashCode();
      if (kmsProvider_ != null) hash ^= KmsProvider.GetHashCode();
      hash ^= (int) internetGatewayCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Status != global::Yandex.Cloud.K8S.V1.Cluster.Types.Status.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (Health != global::Yandex.Cloud.K8S.V1.Cluster.Types.Health.Unspecified) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Health);
      }
      if (NetworkId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(NetworkId);
      }
      if (master_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Master);
      }
      if (ipAllocationPolicy_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(IpAllocationPolicy);
      }
      if (internetGatewayCase_ == InternetGatewayOneofCase.GatewayIpv4Address) {
        output.WriteRawTag(98);
        output.WriteString(GatewayIpv4Address);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ServiceAccountId);
      }
      if (NodeServiceAccountId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(NodeServiceAccountId);
      }
      if (ReleaseChannel != global::Yandex.Cloud.K8S.V1.ReleaseChannel.Unspecified) {
        output.WriteRawTag(120);
        output.WriteEnum((int) ReleaseChannel);
      }
      if (networkPolicy_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NetworkPolicy);
      }
      if (kmsProvider_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(KmsProvider);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Status != global::Yandex.Cloud.K8S.V1.Cluster.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Health != global::Yandex.Cloud.K8S.V1.Cluster.Types.Health.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Health);
      }
      if (NetworkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkId);
      }
      if (master_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Master);
      }
      if (ipAllocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IpAllocationPolicy);
      }
      if (internetGatewayCase_ == InternetGatewayOneofCase.GatewayIpv4Address) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GatewayIpv4Address);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (NodeServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeServiceAccountId);
      }
      if (ReleaseChannel != global::Yandex.Cloud.K8S.V1.ReleaseChannel.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReleaseChannel);
      }
      if (networkPolicy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NetworkPolicy);
      }
      if (kmsProvider_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(KmsProvider);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cluster other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Status != global::Yandex.Cloud.K8S.V1.Cluster.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.Health != global::Yandex.Cloud.K8S.V1.Cluster.Types.Health.Unspecified) {
        Health = other.Health;
      }
      if (other.NetworkId.Length != 0) {
        NetworkId = other.NetworkId;
      }
      if (other.master_ != null) {
        if (master_ == null) {
          Master = new global::Yandex.Cloud.K8S.V1.Master();
        }
        Master.MergeFrom(other.Master);
      }
      if (other.ipAllocationPolicy_ != null) {
        if (ipAllocationPolicy_ == null) {
          IpAllocationPolicy = new global::Yandex.Cloud.K8S.V1.IPAllocationPolicy();
        }
        IpAllocationPolicy.MergeFrom(other.IpAllocationPolicy);
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      if (other.NodeServiceAccountId.Length != 0) {
        NodeServiceAccountId = other.NodeServiceAccountId;
      }
      if (other.ReleaseChannel != global::Yandex.Cloud.K8S.V1.ReleaseChannel.Unspecified) {
        ReleaseChannel = other.ReleaseChannel;
      }
      if (other.networkPolicy_ != null) {
        if (networkPolicy_ == null) {
          NetworkPolicy = new global::Yandex.Cloud.K8S.V1.NetworkPolicy();
        }
        NetworkPolicy.MergeFrom(other.NetworkPolicy);
      }
      if (other.kmsProvider_ != null) {
        if (kmsProvider_ == null) {
          KmsProvider = new global::Yandex.Cloud.K8S.V1.KMSProvider();
        }
        KmsProvider.MergeFrom(other.KmsProvider);
      }
      switch (other.InternetGatewayCase) {
        case InternetGatewayOneofCase.GatewayIpv4Address:
          GatewayIpv4Address = other.GatewayIpv4Address;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Status = (global::Yandex.Cloud.K8S.V1.Cluster.Types.Status) input.ReadEnum();
            break;
          }
          case 64: {
            Health = (global::Yandex.Cloud.K8S.V1.Cluster.Types.Health) input.ReadEnum();
            break;
          }
          case 74: {
            NetworkId = input.ReadString();
            break;
          }
          case 82: {
            if (master_ == null) {
              Master = new global::Yandex.Cloud.K8S.V1.Master();
            }
            input.ReadMessage(Master);
            break;
          }
          case 90: {
            if (ipAllocationPolicy_ == null) {
              IpAllocationPolicy = new global::Yandex.Cloud.K8S.V1.IPAllocationPolicy();
            }
            input.ReadMessage(IpAllocationPolicy);
            break;
          }
          case 98: {
            GatewayIpv4Address = input.ReadString();
            break;
          }
          case 106: {
            ServiceAccountId = input.ReadString();
            break;
          }
          case 114: {
            NodeServiceAccountId = input.ReadString();
            break;
          }
          case 120: {
            ReleaseChannel = (global::Yandex.Cloud.K8S.V1.ReleaseChannel) input.ReadEnum();
            break;
          }
          case 130: {
            if (networkPolicy_ == null) {
              NetworkPolicy = new global::Yandex.Cloud.K8S.V1.NetworkPolicy();
            }
            input.ReadMessage(NetworkPolicy);
            break;
          }
          case 138: {
            if (kmsProvider_ == null) {
              KmsProvider = new global::Yandex.Cloud.K8S.V1.KMSProvider();
            }
            input.ReadMessage(KmsProvider);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Cluster message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Kubernetes cluster is waiting for resources to be allocated.
        /// </summary>
        [pbr::OriginalName("PROVISIONING")] Provisioning = 1,
        /// <summary>
        /// Kubernetes cluster is running.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Kubernetes cluster is being reconciled.
        /// </summary>
        [pbr::OriginalName("RECONCILING")] Reconciling = 3,
        /// <summary>
        /// Kubernetes cluster is being stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 4,
        /// <summary>
        /// Kubernetes cluster stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 5,
        /// <summary>
        /// Kubernetes cluster is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 6,
        /// <summary>
        /// Kubernetes cluster is being started.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

      internal enum Health {
        [pbr::OriginalName("HEALTH_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Kubernetes cluster is alive and well.
        /// </summary>
        [pbr::OriginalName("HEALTHY")] Y = 1,
        /// <summary>
        /// Kubernetes cluster is inoperable.
        /// </summary>
        [pbr::OriginalName("UNHEALTHY")] Unhealthy = 2,
      }

    }
    #endregion

  }

  internal sealed partial class Master : pb::IMessage<Master> {
    private static readonly pb::MessageParser<Master> _parser = new pb::MessageParser<Master>(() => new Master());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Master> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Master() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Master(Master other) : this() {
      version_ = other.version_;
      endpoints_ = other.endpoints_ != null ? other.endpoints_.Clone() : null;
      masterAuth_ = other.masterAuth_ != null ? other.masterAuth_.Clone() : null;
      versionInfo_ = other.versionInfo_ != null ? other.versionInfo_.Clone() : null;
      maintenancePolicy_ = other.maintenancePolicy_ != null ? other.maintenancePolicy_.Clone() : null;
      switch (other.MasterTypeCase) {
        case MasterTypeOneofCase.ZonalMaster:
          ZonalMaster = other.ZonalMaster.Clone();
          break;
        case MasterTypeOneofCase.RegionalMaster:
          RegionalMaster = other.RegionalMaster.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Master Clone() {
      return new Master(this);
    }

    /// <summary>Field number for the "zonal_master" field.</summary>
    public const int ZonalMasterFieldNumber = 1;
    /// <summary>
    /// Parameters of the availability zone for the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ZonalMaster ZonalMaster {
      get { return masterTypeCase_ == MasterTypeOneofCase.ZonalMaster ? (global::Yandex.Cloud.K8S.V1.ZonalMaster) masterType_ : null; }
      set {
        masterType_ = value;
        masterTypeCase_ = value == null ? MasterTypeOneofCase.None : MasterTypeOneofCase.ZonalMaster;
      }
    }

    /// <summary>Field number for the "regional_master" field.</summary>
    public const int RegionalMasterFieldNumber = 7;
    /// <summary>
    /// Parameters of the region for the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.RegionalMaster RegionalMaster {
      get { return masterTypeCase_ == MasterTypeOneofCase.RegionalMaster ? (global::Yandex.Cloud.K8S.V1.RegionalMaster) masterType_ : null; }
      set {
        masterType_ = value;
        masterTypeCase_ = value == null ? MasterTypeOneofCase.None : MasterTypeOneofCase.RegionalMaster;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    /// <summary>
    /// Version of Kubernetes components that runs on the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.MasterEndpoints endpoints_;
    /// <summary>
    /// Endpoints of the master. Endpoints constitute of scheme and port (i.e. `https://ip-address:port`)
    ///and can be used by the clients to communicate with the Kubernetes API of the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MasterEndpoints Endpoints {
      get { return endpoints_; }
      set {
        endpoints_ = value;
      }
    }

    /// <summary>Field number for the "master_auth" field.</summary>
    public const int MasterAuthFieldNumber = 4;
    private global::Yandex.Cloud.K8S.V1.MasterAuth masterAuth_;
    /// <summary>
    /// Master authentication parameters are used to establish trust between the master and a client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MasterAuth MasterAuth {
      get { return masterAuth_; }
      set {
        masterAuth_ = value;
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 5;
    private global::Yandex.Cloud.K8S.V1.VersionInfo versionInfo_;
    /// <summary>
    /// Detailed information about the Kubernetes version that is running on the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.VersionInfo VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_policy" field.</summary>
    public const int MaintenancePolicyFieldNumber = 6;
    private global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy maintenancePolicy_;
    /// <summary>
    /// Maintenance policy of the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy MaintenancePolicy {
      get { return maintenancePolicy_; }
      set {
        maintenancePolicy_ = value;
      }
    }

    private object masterType_;
    /// <summary>Enum of possible cases for the "master_type" oneof.</summary>
    public enum MasterTypeOneofCase {
      None = 0,
      ZonalMaster = 1,
      RegionalMaster = 7,
    }
    private MasterTypeOneofCase masterTypeCase_ = MasterTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterTypeOneofCase MasterTypeCase {
      get { return masterTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMasterType() {
      masterTypeCase_ = MasterTypeOneofCase.None;
      masterType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Master);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Master other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ZonalMaster, other.ZonalMaster)) return false;
      if (!object.Equals(RegionalMaster, other.RegionalMaster)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Endpoints, other.Endpoints)) return false;
      if (!object.Equals(MasterAuth, other.MasterAuth)) return false;
      if (!object.Equals(VersionInfo, other.VersionInfo)) return false;
      if (!object.Equals(MaintenancePolicy, other.MaintenancePolicy)) return false;
      if (MasterTypeCase != other.MasterTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (masterTypeCase_ == MasterTypeOneofCase.ZonalMaster) hash ^= ZonalMaster.GetHashCode();
      if (masterTypeCase_ == MasterTypeOneofCase.RegionalMaster) hash ^= RegionalMaster.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (endpoints_ != null) hash ^= Endpoints.GetHashCode();
      if (masterAuth_ != null) hash ^= MasterAuth.GetHashCode();
      if (versionInfo_ != null) hash ^= VersionInfo.GetHashCode();
      if (maintenancePolicy_ != null) hash ^= MaintenancePolicy.GetHashCode();
      hash ^= (int) masterTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (masterTypeCase_ == MasterTypeOneofCase.ZonalMaster) {
        output.WriteRawTag(10);
        output.WriteMessage(ZonalMaster);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      if (endpoints_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Endpoints);
      }
      if (masterAuth_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MasterAuth);
      }
      if (versionInfo_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MaintenancePolicy);
      }
      if (masterTypeCase_ == MasterTypeOneofCase.RegionalMaster) {
        output.WriteRawTag(58);
        output.WriteMessage(RegionalMaster);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (masterTypeCase_ == MasterTypeOneofCase.ZonalMaster) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ZonalMaster);
      }
      if (masterTypeCase_ == MasterTypeOneofCase.RegionalMaster) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RegionalMaster);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (endpoints_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Endpoints);
      }
      if (masterAuth_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MasterAuth);
      }
      if (versionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenancePolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Master other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.endpoints_ != null) {
        if (endpoints_ == null) {
          Endpoints = new global::Yandex.Cloud.K8S.V1.MasterEndpoints();
        }
        Endpoints.MergeFrom(other.Endpoints);
      }
      if (other.masterAuth_ != null) {
        if (masterAuth_ == null) {
          MasterAuth = new global::Yandex.Cloud.K8S.V1.MasterAuth();
        }
        MasterAuth.MergeFrom(other.MasterAuth);
      }
      if (other.versionInfo_ != null) {
        if (versionInfo_ == null) {
          VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
        }
        VersionInfo.MergeFrom(other.VersionInfo);
      }
      if (other.maintenancePolicy_ != null) {
        if (maintenancePolicy_ == null) {
          MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy();
        }
        MaintenancePolicy.MergeFrom(other.MaintenancePolicy);
      }
      switch (other.MasterTypeCase) {
        case MasterTypeOneofCase.ZonalMaster:
          if (ZonalMaster == null) {
            ZonalMaster = new global::Yandex.Cloud.K8S.V1.ZonalMaster();
          }
          ZonalMaster.MergeFrom(other.ZonalMaster);
          break;
        case MasterTypeOneofCase.RegionalMaster:
          if (RegionalMaster == null) {
            RegionalMaster = new global::Yandex.Cloud.K8S.V1.RegionalMaster();
          }
          RegionalMaster.MergeFrom(other.RegionalMaster);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Yandex.Cloud.K8S.V1.ZonalMaster subBuilder = new global::Yandex.Cloud.K8S.V1.ZonalMaster();
            if (masterTypeCase_ == MasterTypeOneofCase.ZonalMaster) {
              subBuilder.MergeFrom(ZonalMaster);
            }
            input.ReadMessage(subBuilder);
            ZonalMaster = subBuilder;
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            if (endpoints_ == null) {
              Endpoints = new global::Yandex.Cloud.K8S.V1.MasterEndpoints();
            }
            input.ReadMessage(Endpoints);
            break;
          }
          case 34: {
            if (masterAuth_ == null) {
              MasterAuth = new global::Yandex.Cloud.K8S.V1.MasterAuth();
            }
            input.ReadMessage(MasterAuth);
            break;
          }
          case 42: {
            if (versionInfo_ == null) {
              VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
            }
            input.ReadMessage(VersionInfo);
            break;
          }
          case 50: {
            if (maintenancePolicy_ == null) {
              MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.MasterMaintenancePolicy();
            }
            input.ReadMessage(MaintenancePolicy);
            break;
          }
          case 58: {
            global::Yandex.Cloud.K8S.V1.RegionalMaster subBuilder = new global::Yandex.Cloud.K8S.V1.RegionalMaster();
            if (masterTypeCase_ == MasterTypeOneofCase.RegionalMaster) {
              subBuilder.MergeFrom(RegionalMaster);
            }
            input.ReadMessage(subBuilder);
            RegionalMaster = subBuilder;
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MasterAuth : pb::IMessage<MasterAuth> {
    private static readonly pb::MessageParser<MasterAuth> _parser = new pb::MessageParser<MasterAuth>(() => new MasterAuth());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterAuth> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterAuth() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterAuth(MasterAuth other) : this() {
      clusterCaCertificate_ = other.clusterCaCertificate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterAuth Clone() {
      return new MasterAuth(this);
    }

    /// <summary>Field number for the "cluster_ca_certificate" field.</summary>
    public const int ClusterCaCertificateFieldNumber = 1;
    private string clusterCaCertificate_ = "";
    /// <summary>
    /// PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterCaCertificate {
      get { return clusterCaCertificate_; }
      set {
        clusterCaCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterAuth);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterAuth other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterCaCertificate != other.ClusterCaCertificate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterCaCertificate.Length != 0) hash ^= ClusterCaCertificate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterCaCertificate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterCaCertificate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterCaCertificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterCaCertificate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterAuth other) {
      if (other == null) {
        return;
      }
      if (other.ClusterCaCertificate.Length != 0) {
        ClusterCaCertificate = other.ClusterCaCertificate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterCaCertificate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ZonalMaster : pb::IMessage<ZonalMaster> {
    private static readonly pb::MessageParser<ZonalMaster> _parser = new pb::MessageParser<ZonalMaster>(() => new ZonalMaster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ZonalMaster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZonalMaster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZonalMaster(ZonalMaster other) : this() {
      zoneId_ = other.zoneId_;
      internalV4Address_ = other.internalV4Address_;
      externalV4Address_ = other.externalV4Address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ZonalMaster Clone() {
      return new ZonalMaster(this);
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the master resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "internal_v4_address" field.</summary>
    public const int InternalV4AddressFieldNumber = 2;
    private string internalV4Address_ = "";
    /// <summary>
    /// IPv4 internal network address that is assigned to the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalV4Address {
      get { return internalV4Address_; }
      set {
        internalV4Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_v4_address" field.</summary>
    public const int ExternalV4AddressFieldNumber = 3;
    private string externalV4Address_ = "";
    /// <summary>
    /// IPv4 external network address that is assigned to the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalV4Address {
      get { return externalV4Address_; }
      set {
        externalV4Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ZonalMaster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ZonalMaster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      if (InternalV4Address != other.InternalV4Address) return false;
      if (ExternalV4Address != other.ExternalV4Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (InternalV4Address.Length != 0) hash ^= InternalV4Address.GetHashCode();
      if (ExternalV4Address.Length != 0) hash ^= ExternalV4Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneId);
      }
      if (InternalV4Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InternalV4Address);
      }
      if (ExternalV4Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExternalV4Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (InternalV4Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalV4Address);
      }
      if (ExternalV4Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalV4Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ZonalMaster other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.InternalV4Address.Length != 0) {
        InternalV4Address = other.InternalV4Address;
      }
      if (other.ExternalV4Address.Length != 0) {
        ExternalV4Address = other.ExternalV4Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZoneId = input.ReadString();
            break;
          }
          case 18: {
            InternalV4Address = input.ReadString();
            break;
          }
          case 26: {
            ExternalV4Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RegionalMaster : pb::IMessage<RegionalMaster> {
    private static readonly pb::MessageParser<RegionalMaster> _parser = new pb::MessageParser<RegionalMaster>(() => new RegionalMaster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegionalMaster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionalMaster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionalMaster(RegionalMaster other) : this() {
      regionId_ = other.regionId_;
      internalV4Address_ = other.internalV4Address_;
      externalV4Address_ = other.externalV4Address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegionalMaster Clone() {
      return new RegionalMaster(this);
    }

    /// <summary>Field number for the "region_id" field.</summary>
    public const int RegionIdFieldNumber = 1;
    private string regionId_ = "";
    /// <summary>
    /// ID of the region where the master resides.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegionId {
      get { return regionId_; }
      set {
        regionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "internal_v4_address" field.</summary>
    public const int InternalV4AddressFieldNumber = 2;
    private string internalV4Address_ = "";
    /// <summary>
    /// IPv4 internal network address that is assigned to the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalV4Address {
      get { return internalV4Address_; }
      set {
        internalV4Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_v4_address" field.</summary>
    public const int ExternalV4AddressFieldNumber = 3;
    private string externalV4Address_ = "";
    /// <summary>
    /// IPv4 external network address that is assigned to the master.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalV4Address {
      get { return externalV4Address_; }
      set {
        externalV4Address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegionalMaster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegionalMaster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RegionId != other.RegionId) return false;
      if (InternalV4Address != other.InternalV4Address) return false;
      if (ExternalV4Address != other.ExternalV4Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RegionId.Length != 0) hash ^= RegionId.GetHashCode();
      if (InternalV4Address.Length != 0) hash ^= InternalV4Address.GetHashCode();
      if (ExternalV4Address.Length != 0) hash ^= ExternalV4Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RegionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RegionId);
      }
      if (InternalV4Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InternalV4Address);
      }
      if (ExternalV4Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ExternalV4Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RegionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionId);
      }
      if (InternalV4Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalV4Address);
      }
      if (ExternalV4Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalV4Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegionalMaster other) {
      if (other == null) {
        return;
      }
      if (other.RegionId.Length != 0) {
        RegionId = other.RegionId;
      }
      if (other.InternalV4Address.Length != 0) {
        InternalV4Address = other.InternalV4Address;
      }
      if (other.ExternalV4Address.Length != 0) {
        ExternalV4Address = other.ExternalV4Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RegionId = input.ReadString();
            break;
          }
          case 18: {
            InternalV4Address = input.ReadString();
            break;
          }
          case 26: {
            ExternalV4Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MasterEndpoints : pb::IMessage<MasterEndpoints> {
    private static readonly pb::MessageParser<MasterEndpoints> _parser = new pb::MessageParser<MasterEndpoints>(() => new MasterEndpoints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterEndpoints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterEndpoints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterEndpoints(MasterEndpoints other) : this() {
      internalV4Endpoint_ = other.internalV4Endpoint_;
      externalV4Endpoint_ = other.externalV4Endpoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterEndpoints Clone() {
      return new MasterEndpoints(this);
    }

    /// <summary>Field number for the "internal_v4_endpoint" field.</summary>
    public const int InternalV4EndpointFieldNumber = 1;
    private string internalV4Endpoint_ = "";
    /// <summary>
    /// Internal endpoint that can be used to connect to the master from cloud networks.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InternalV4Endpoint {
      get { return internalV4Endpoint_; }
      set {
        internalV4Endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "external_v4_endpoint" field.</summary>
    public const int ExternalV4EndpointFieldNumber = 2;
    private string externalV4Endpoint_ = "";
    /// <summary>
    /// External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExternalV4Endpoint {
      get { return externalV4Endpoint_; }
      set {
        externalV4Endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterEndpoints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterEndpoints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InternalV4Endpoint != other.InternalV4Endpoint) return false;
      if (ExternalV4Endpoint != other.ExternalV4Endpoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InternalV4Endpoint.Length != 0) hash ^= InternalV4Endpoint.GetHashCode();
      if (ExternalV4Endpoint.Length != 0) hash ^= ExternalV4Endpoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InternalV4Endpoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InternalV4Endpoint);
      }
      if (ExternalV4Endpoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ExternalV4Endpoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InternalV4Endpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InternalV4Endpoint);
      }
      if (ExternalV4Endpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalV4Endpoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterEndpoints other) {
      if (other == null) {
        return;
      }
      if (other.InternalV4Endpoint.Length != 0) {
        InternalV4Endpoint = other.InternalV4Endpoint;
      }
      if (other.ExternalV4Endpoint.Length != 0) {
        ExternalV4Endpoint = other.ExternalV4Endpoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InternalV4Endpoint = input.ReadString();
            break;
          }
          case 18: {
            ExternalV4Endpoint = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class IPAllocationPolicy : pb::IMessage<IPAllocationPolicy> {
    private static readonly pb::MessageParser<IPAllocationPolicy> _parser = new pb::MessageParser<IPAllocationPolicy>(() => new IPAllocationPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IPAllocationPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAllocationPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAllocationPolicy(IPAllocationPolicy other) : this() {
      clusterIpv4CidrBlock_ = other.clusterIpv4CidrBlock_;
      nodeIpv4CidrMaskSize_ = other.nodeIpv4CidrMaskSize_;
      serviceIpv4CidrBlock_ = other.serviceIpv4CidrBlock_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAllocationPolicy Clone() {
      return new IPAllocationPolicy(this);
    }

    /// <summary>Field number for the "cluster_ipv4_cidr_block" field.</summary>
    public const int ClusterIpv4CidrBlockFieldNumber = 1;
    private string clusterIpv4CidrBlock_ = "";
    /// <summary>
    /// CIDR block. IP range for allocating pod addresses.
    ///
    /// It should not overlap with any subnet in the network the Kubernetes cluster located in. Static routes will be
    /// set up for this CIDR blocks in node subnets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterIpv4CidrBlock {
      get { return clusterIpv4CidrBlock_; }
      set {
        clusterIpv4CidrBlock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_ipv4_cidr_mask_size" field.</summary>
    public const int NodeIpv4CidrMaskSizeFieldNumber = 5;
    private long nodeIpv4CidrMaskSize_;
    /// <summary>
    /// Size of the masks that are assigned for each node in the cluster.
    ///
    /// If not specified, 24 is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeIpv4CidrMaskSize {
      get { return nodeIpv4CidrMaskSize_; }
      set {
        nodeIpv4CidrMaskSize_ = value;
      }
    }

    /// <summary>Field number for the "service_ipv4_cidr_block" field.</summary>
    public const int ServiceIpv4CidrBlockFieldNumber = 2;
    private string serviceIpv4CidrBlock_ = "";
    /// <summary>
    /// CIDR block. IP range Kubernetes service Kubernetes cluster IP addresses will be allocated from.
    ///
    /// It should not overlap with any subnet in the network the Kubernetes cluster located in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceIpv4CidrBlock {
      get { return serviceIpv4CidrBlock_; }
      set {
        serviceIpv4CidrBlock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IPAllocationPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IPAllocationPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClusterIpv4CidrBlock != other.ClusterIpv4CidrBlock) return false;
      if (NodeIpv4CidrMaskSize != other.NodeIpv4CidrMaskSize) return false;
      if (ServiceIpv4CidrBlock != other.ServiceIpv4CidrBlock) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClusterIpv4CidrBlock.Length != 0) hash ^= ClusterIpv4CidrBlock.GetHashCode();
      if (NodeIpv4CidrMaskSize != 0L) hash ^= NodeIpv4CidrMaskSize.GetHashCode();
      if (ServiceIpv4CidrBlock.Length != 0) hash ^= ServiceIpv4CidrBlock.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClusterIpv4CidrBlock.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClusterIpv4CidrBlock);
      }
      if (ServiceIpv4CidrBlock.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceIpv4CidrBlock);
      }
      if (NodeIpv4CidrMaskSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NodeIpv4CidrMaskSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClusterIpv4CidrBlock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterIpv4CidrBlock);
      }
      if (NodeIpv4CidrMaskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeIpv4CidrMaskSize);
      }
      if (ServiceIpv4CidrBlock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceIpv4CidrBlock);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IPAllocationPolicy other) {
      if (other == null) {
        return;
      }
      if (other.ClusterIpv4CidrBlock.Length != 0) {
        ClusterIpv4CidrBlock = other.ClusterIpv4CidrBlock;
      }
      if (other.NodeIpv4CidrMaskSize != 0L) {
        NodeIpv4CidrMaskSize = other.NodeIpv4CidrMaskSize;
      }
      if (other.ServiceIpv4CidrBlock.Length != 0) {
        ServiceIpv4CidrBlock = other.ServiceIpv4CidrBlock;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClusterIpv4CidrBlock = input.ReadString();
            break;
          }
          case 18: {
            ServiceIpv4CidrBlock = input.ReadString();
            break;
          }
          case 40: {
            NodeIpv4CidrMaskSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class MasterMaintenancePolicy : pb::IMessage<MasterMaintenancePolicy> {
    private static readonly pb::MessageParser<MasterMaintenancePolicy> _parser = new pb::MessageParser<MasterMaintenancePolicy>(() => new MasterMaintenancePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterMaintenancePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterMaintenancePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterMaintenancePolicy(MasterMaintenancePolicy other) : this() {
      autoUpgrade_ = other.autoUpgrade_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterMaintenancePolicy Clone() {
      return new MasterMaintenancePolicy(this);
    }

    /// <summary>Field number for the "auto_upgrade" field.</summary>
    public const int AutoUpgradeFieldNumber = 1;
    private bool autoUpgrade_;
    /// <summary>
    /// If set to true, automatic updates are installed in the specified period of time with no interaction from the user.
    /// If set to false, automatic upgrades are disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoUpgrade {
      get { return autoUpgrade_; }
      set {
        autoUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 2;
    private global::Yandex.Cloud.K8S.V1.MaintenanceWindow maintenanceWindow_;
    /// <summary>
    /// Maintenance window settings. Update will start at the specified time and last no more than the specified duration.
    /// The time is set in UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterMaintenancePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterMaintenancePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoUpgrade != other.AutoUpgrade) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoUpgrade != false) hash ^= AutoUpgrade.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoUpgrade);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoUpgrade != false) {
        size += 1 + 1;
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterMaintenancePolicy other) {
      if (other == null) {
        return;
      }
      if (other.AutoUpgrade != false) {
        AutoUpgrade = other.AutoUpgrade;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoUpgrade = input.ReadBool();
            break;
          }
          case 18: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NetworkPolicy : pb::IMessage<NetworkPolicy> {
    private static readonly pb::MessageParser<NetworkPolicy> _parser = new pb::MessageParser<NetworkPolicy>(() => new NetworkPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPolicy(NetworkPolicy other) : this() {
      provider_ = other.provider_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkPolicy Clone() {
      return new NetworkPolicy(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider provider_ = global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider.Unspecified) hash ^= Provider.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Provider != global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider.Unspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkPolicy other) {
      if (other == null) {
        return;
      }
      if (other.Provider != global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider.Unspecified) {
        Provider = other.Provider;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Provider = (global::Yandex.Cloud.K8S.V1.NetworkPolicy.Types.Provider) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetworkPolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Provider {
        [pbr::OriginalName("PROVIDER_UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("CALICO")] Calico = 1,
      }

    }
    #endregion

  }

  internal sealed partial class KMSProvider : pb::IMessage<KMSProvider> {
    private static readonly pb::MessageParser<KMSProvider> _parser = new pb::MessageParser<KMSProvider>(() => new KMSProvider());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KMSProvider> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.ClusterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMSProvider() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMSProvider(KMSProvider other) : this() {
      keyId_ = other.keyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KMSProvider Clone() {
      return new KMSProvider(this);
    }

    /// <summary>Field number for the "key_id" field.</summary>
    public const int KeyIdFieldNumber = 1;
    private string keyId_ = "";
    /// <summary>
    /// KMS key ID for secrets encryption.
    /// To obtain a KMS key ID use a [yandex.cloud.kms.v1.SymmetricKeyService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KeyId {
      get { return keyId_; }
      set {
        keyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KMSProvider);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KMSProvider other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyId != other.KeyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyId.Length != 0) hash ^= KeyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(KeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KMSProvider other) {
      if (other == null) {
        return;
      }
      if (other.KeyId.Length != 0) {
        KeyId = other.KeyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            KeyId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
