// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/k8s/v1/node_group.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.K8S.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/k8s/v1/node_group.proto</summary>
  internal static partial class NodeGroupReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/k8s/v1/node_group.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeGroupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR5YW5kZXgvY2xvdWQvazhzL3YxL25vZGVfZ3JvdXAucHJvdG8SE3lhbmRl",
            "eC5jbG91ZC5rOHMudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJv",
            "dG8aJXlhbmRleC9jbG91ZC9rOHMvdjEvbWFpbnRlbmFuY2UucHJvdG8aHnlh",
            "bmRleC9jbG91ZC9rOHMvdjEvbm9kZS5wcm90bxoheWFuZGV4L2Nsb3VkL2s4",
            "cy92MS92ZXJzaW9uLnByb3RvGh15YW5kZXgvY2xvdWQvdmFsaWRhdGlvbi5w",
            "cm90byKgCAoJTm9kZUdyb3VwEgoKAmlkGAEgASgJEhIKCmNsdXN0ZXJfaWQY",
            "AiABKAkSLgoKY3JlYXRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
            "aW1lc3RhbXASDAoEbmFtZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRI6",
            "CgZsYWJlbHMYBiADKAsyKi55YW5kZXguY2xvdWQuazhzLnYxLk5vZGVHcm91",
            "cC5MYWJlbHNFbnRyeRI1CgZzdGF0dXMYByABKA4yJS55YW5kZXguY2xvdWQu",
            "azhzLnYxLk5vZGVHcm91cC5TdGF0dXMSOAoNbm9kZV90ZW1wbGF0ZRgIIAEo",
            "CzIhLnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZVRlbXBsYXRlEjYKDHNjYWxl",
            "X3BvbGljeRgJIAEoCzIgLnlhbmRleC5jbG91ZC5rOHMudjEuU2NhbGVQb2xp",
            "Y3kSSQoRYWxsb2NhdGlvbl9wb2xpY3kYCiABKAsyLi55YW5kZXguY2xvdWQu",
            "azhzLnYxLk5vZGVHcm91cEFsbG9jYXRpb25Qb2xpY3kSOAoNZGVwbG95X3Bv",
            "bGljeRgSIAEoCzIhLnlhbmRleC5jbG91ZC5rOHMudjEuRGVwbG95UG9saWN5",
            "EhkKEWluc3RhbmNlX2dyb3VwX2lkGAsgASgJEhQKDG5vZGVfdmVyc2lvbhgM",
            "IAEoCRI2Cgx2ZXJzaW9uX2luZm8YDSABKAsyIC55YW5kZXguY2xvdWQuazhz",
            "LnYxLlZlcnNpb25JbmZvEksKEm1haW50ZW5hbmNlX3BvbGljeRgOIAEoCzIv",
            "LnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZUdyb3VwTWFpbnRlbmFuY2VQb2xp",
            "Y3kSHgoWYWxsb3dlZF91bnNhZmVfc3lzY3RscxgPIAMoCRIvCgtub2RlX3Rh",
            "aW50cxgQIAMoCzIaLnlhbmRleC5jbG91ZC5rOHMudjEuVGFpbnQSQwoLbm9k",
            "ZV9sYWJlbHMYESADKAsyLi55YW5kZXguY2xvdWQuazhzLnYxLk5vZGVHcm91",
            "cC5Ob2RlTGFiZWxzRW50cnkaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJ",
            "Eg0KBXZhbHVlGAIgASgJOgI4ARoxCg9Ob2RlTGFiZWxzRW50cnkSCwoDa2V5",
            "GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASKHAQoGU3RhdHVzEhYKElNUQVRV",
            "U19VTlNQRUNJRklFRBAAEhAKDFBST1ZJU0lPTklORxABEgsKB1JVTk5JTkcQ",
            "AhIPCgtSRUNPTkNJTElORxADEgwKCFNUT1BQSU5HEAQSCwoHU1RPUFBFRBAF",
            "EgwKCERFTEVUSU5HEAYSDAoIU1RBUlRJTkcQByK2AgoLU2NhbGVQb2xpY3kS",
            "QgoLZml4ZWRfc2NhbGUYASABKAsyKy55YW5kZXguY2xvdWQuazhzLnYxLlNj",
            "YWxlUG9saWN5LkZpeGVkU2NhbGVIABJACgphdXRvX3NjYWxlGAIgASgLMiou",
            "eWFuZGV4LmNsb3VkLms4cy52MS5TY2FsZVBvbGljeS5BdXRvU2NhbGVIABol",
            "CgpGaXhlZFNjYWxlEhcKBHNpemUYASABKANCCfrHMQUwLTEwMBpmCglBdXRv",
            "U2NhbGUSGwoIbWluX3NpemUYASABKANCCfrHMQUwLTEwMBIbCghtYXhfc2l6",
            "ZRgCIAEoA0IJ+scxBTAtMTAwEh8KDGluaXRpYWxfc2l6ZRgDIAEoA0IJ+scx",
            "BTAtMTAwQhIKCnNjYWxlX3R5cGUSBMDBMQEiVgoZTm9kZUdyb3VwQWxsb2Nh",
            "dGlvblBvbGljeRI5Cglsb2NhdGlvbnMYASADKAsyJi55YW5kZXguY2xvdWQu",
            "azhzLnYxLk5vZGVHcm91cExvY2F0aW9uIj0KEU5vZGVHcm91cExvY2F0aW9u",
            "EhUKB3pvbmVfaWQYASABKAlCBOjHMQESEQoJc3VibmV0X2lkGAIgASgJIosB",
            "ChpOb2RlR3JvdXBNYWludGVuYW5jZVBvbGljeRIUCgxhdXRvX3VwZ3JhZGUY",
            "ASABKAgSEwoLYXV0b19yZXBhaXIYAiABKAgSQgoSbWFpbnRlbmFuY2Vfd2lu",
            "ZG93GAMgASgLMiYueWFuZGV4LmNsb3VkLms4cy52MS5NYWludGVuYW5jZVdp",
            "bmRvdyJUCgxEZXBsb3lQb2xpY3kSIgoPbWF4X3VuYXZhaWxhYmxlGAEgASgD",
            "Qgn6xzEFMC0xMDASIAoNbWF4X2V4cGFuc2lvbhgCIAEoA0IJ+scxBTAtMTAw",
            "QlYKF3lhbmRleC5jbG91ZC5hcGkuazhzLnYxWjtnaXRodWIuY29tL3lhbmRl",
            "eC1jbG91ZC9nby1nZW5wcm90by95YW5kZXgvY2xvdWQvazhzL3YxO2s4c2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Yandex.Cloud.K8S.V1.MaintenanceReflection.Descriptor, global::Yandex.Cloud.K8S.V1.NodeReflection.Descriptor, global::Yandex.Cloud.K8S.V1.VersionReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroup), global::Yandex.Cloud.K8S.V1.NodeGroup.Parser, new[]{ "Id", "ClusterId", "CreatedAt", "Name", "Description", "Labels", "Status", "NodeTemplate", "ScalePolicy", "AllocationPolicy", "DeployPolicy", "InstanceGroupId", "NodeVersion", "VersionInfo", "MaintenancePolicy", "AllowedUnsafeSysctls", "NodeTaints", "NodeLabels" }, null, new[]{ typeof(global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ScalePolicy), global::Yandex.Cloud.K8S.V1.ScalePolicy.Parser, new[]{ "FixedScale", "AutoScale" }, new[]{ "ScaleType" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale), global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale.Parser, new[]{ "Size" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale), global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale.Parser, new[]{ "MinSize", "MaxSize", "InitialSize" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy), global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy.Parser, new[]{ "Locations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupLocation), global::Yandex.Cloud.K8S.V1.NodeGroupLocation.Parser, new[]{ "ZoneId", "SubnetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy), global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy.Parser, new[]{ "AutoUpgrade", "AutoRepair", "MaintenanceWindow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.DeployPolicy), global::Yandex.Cloud.K8S.V1.DeployPolicy.Parser, new[]{ "MaxUnavailable", "MaxExpansion" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class NodeGroup : pb::IMessage<NodeGroup> {
    private static readonly pb::MessageParser<NodeGroup> _parser = new pb::MessageParser<NodeGroup>(() => new NodeGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup(NodeGroup other) : this() {
      id_ = other.id_;
      clusterId_ = other.clusterId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      status_ = other.status_;
      nodeTemplate_ = other.nodeTemplate_ != null ? other.nodeTemplate_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      allocationPolicy_ = other.allocationPolicy_ != null ? other.allocationPolicy_.Clone() : null;
      deployPolicy_ = other.deployPolicy_ != null ? other.deployPolicy_.Clone() : null;
      instanceGroupId_ = other.instanceGroupId_;
      nodeVersion_ = other.nodeVersion_;
      versionInfo_ = other.versionInfo_ != null ? other.versionInfo_.Clone() : null;
      maintenancePolicy_ = other.maintenancePolicy_ != null ? other.maintenancePolicy_.Clone() : null;
      allowedUnsafeSysctls_ = other.allowedUnsafeSysctls_.Clone();
      nodeTaints_ = other.nodeTaints_.Clone();
      nodeLabels_ = other.nodeLabels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup Clone() {
      return new NodeGroup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the node group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the node group.
    /// The name is unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the node group. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs. Мaximum of 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status status_ = global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status.Unspecified;
    /// <summary>
    /// Status of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "node_template" field.</summary>
    public const int NodeTemplateFieldNumber = 8;
    private global::Yandex.Cloud.K8S.V1.NodeTemplate nodeTemplate_;
    /// <summary>
    /// Node template that specifies parameters of the compute instances for the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeTemplate NodeTemplate {
      get { return nodeTemplate_; }
      set {
        nodeTemplate_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 9;
    private global::Yandex.Cloud.K8S.V1.ScalePolicy scalePolicy_;
    /// <summary>
    /// Scale policy of the node group.  For more information, see [Scaling policy](/docs/compute/concepts/instance-groups/policies#scale-policy).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allocation_policy" field.</summary>
    public const int AllocationPolicyFieldNumber = 10;
    private global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy allocationPolicy_;
    /// <summary>
    /// Allocation policy by which resources for node group are allocated to zones and regions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy AllocationPolicy {
      get { return allocationPolicy_; }
      set {
        allocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "deploy_policy" field.</summary>
    public const int DeployPolicyFieldNumber = 18;
    private global::Yandex.Cloud.K8S.V1.DeployPolicy deployPolicy_;
    /// <summary>
    /// Deploy policy according to which the updates are rolled out.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.DeployPolicy DeployPolicy {
      get { return deployPolicy_; }
      set {
        deployPolicy_ = value;
      }
    }

    /// <summary>Field number for the "instance_group_id" field.</summary>
    public const int InstanceGroupIdFieldNumber = 11;
    private string instanceGroupId_ = "";
    /// <summary>
    /// ID of the managed instance group associated with this node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceGroupId {
      get { return instanceGroupId_; }
      set {
        instanceGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_version" field.</summary>
    public const int NodeVersionFieldNumber = 12;
    private string nodeVersion_ = "";
    /// <summary>
    /// Version of Kubernetes components that runs on the nodes.
    /// Deprecated. Use version_info.current_version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeVersion {
      get { return nodeVersion_; }
      set {
        nodeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 13;
    private global::Yandex.Cloud.K8S.V1.VersionInfo versionInfo_;
    /// <summary>
    /// Detailed information about the Kubernetes version that is running on the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.VersionInfo VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_policy" field.</summary>
    public const int MaintenancePolicyFieldNumber = 14;
    private global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy maintenancePolicy_;
    /// <summary>
    /// Maintenance policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy MaintenancePolicy {
      get { return maintenancePolicy_; }
      set {
        maintenancePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allowed_unsafe_sysctls" field.</summary>
    public const int AllowedUnsafeSysctlsFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_allowedUnsafeSysctls_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> allowedUnsafeSysctls_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Support for unsafe sysctl parameters. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AllowedUnsafeSysctls {
      get { return allowedUnsafeSysctls_; }
    }

    /// <summary>Field number for the "node_taints" field.</summary>
    public const int NodeTaintsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.Taint> _repeated_nodeTaints_codec
        = pb::FieldCodec.ForMessage(130, global::Yandex.Cloud.K8S.V1.Taint.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> nodeTaints_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint>();
    /// <summary>
    /// Taints that are applied to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.Taint> NodeTaints {
      get { return nodeTaints_; }
    }

    /// <summary>Field number for the "node_labels" field.</summary>
    public const int NodeLabelsFieldNumber = 17;
    private static readonly pbc::MapField<string, string>.Codec _map_nodeLabels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 138);
    private readonly pbc::MapField<string, string> nodeLabels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels that are assigned to the nodes of the node group at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> NodeLabels {
      get { return nodeLabels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(NodeTemplate, other.NodeTemplate)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (!object.Equals(AllocationPolicy, other.AllocationPolicy)) return false;
      if (!object.Equals(DeployPolicy, other.DeployPolicy)) return false;
      if (InstanceGroupId != other.InstanceGroupId) return false;
      if (NodeVersion != other.NodeVersion) return false;
      if (!object.Equals(VersionInfo, other.VersionInfo)) return false;
      if (!object.Equals(MaintenancePolicy, other.MaintenancePolicy)) return false;
      if(!allowedUnsafeSysctls_.Equals(other.allowedUnsafeSysctls_)) return false;
      if(!nodeTaints_.Equals(other.nodeTaints_)) return false;
      if (!NodeLabels.Equals(other.NodeLabels)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Status != global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (nodeTemplate_ != null) hash ^= NodeTemplate.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (allocationPolicy_ != null) hash ^= AllocationPolicy.GetHashCode();
      if (deployPolicy_ != null) hash ^= DeployPolicy.GetHashCode();
      if (InstanceGroupId.Length != 0) hash ^= InstanceGroupId.GetHashCode();
      if (NodeVersion.Length != 0) hash ^= NodeVersion.GetHashCode();
      if (versionInfo_ != null) hash ^= VersionInfo.GetHashCode();
      if (maintenancePolicy_ != null) hash ^= MaintenancePolicy.GetHashCode();
      hash ^= allowedUnsafeSysctls_.GetHashCode();
      hash ^= nodeTaints_.GetHashCode();
      hash ^= NodeLabels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Status != global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (nodeTemplate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AllocationPolicy);
      }
      if (InstanceGroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstanceGroupId);
      }
      if (NodeVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NodeVersion);
      }
      if (versionInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MaintenancePolicy);
      }
      allowedUnsafeSysctls_.WriteTo(output, _repeated_allowedUnsafeSysctls_codec);
      nodeTaints_.WriteTo(output, _repeated_nodeTaints_codec);
      nodeLabels_.WriteTo(output, _map_nodeLabels_codec);
      if (deployPolicy_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(DeployPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Status != global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (nodeTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPolicy);
      }
      if (deployPolicy_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DeployPolicy);
      }
      if (InstanceGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceGroupId);
      }
      if (NodeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeVersion);
      }
      if (versionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenancePolicy);
      }
      size += allowedUnsafeSysctls_.CalculateSize(_repeated_allowedUnsafeSysctls_codec);
      size += nodeTaints_.CalculateSize(_repeated_nodeTaints_codec);
      size += nodeLabels_.CalculateSize(_map_nodeLabels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroup other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Status != global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.nodeTemplate_ != null) {
        if (nodeTemplate_ == null) {
          NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
        }
        NodeTemplate.MergeFrom(other.NodeTemplate);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.allocationPolicy_ != null) {
        if (allocationPolicy_ == null) {
          AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
        }
        AllocationPolicy.MergeFrom(other.AllocationPolicy);
      }
      if (other.deployPolicy_ != null) {
        if (deployPolicy_ == null) {
          DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
        }
        DeployPolicy.MergeFrom(other.DeployPolicy);
      }
      if (other.InstanceGroupId.Length != 0) {
        InstanceGroupId = other.InstanceGroupId;
      }
      if (other.NodeVersion.Length != 0) {
        NodeVersion = other.NodeVersion;
      }
      if (other.versionInfo_ != null) {
        if (versionInfo_ == null) {
          VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
        }
        VersionInfo.MergeFrom(other.VersionInfo);
      }
      if (other.maintenancePolicy_ != null) {
        if (maintenancePolicy_ == null) {
          MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
        }
        MaintenancePolicy.MergeFrom(other.MaintenancePolicy);
      }
      allowedUnsafeSysctls_.Add(other.allowedUnsafeSysctls_);
      nodeTaints_.Add(other.nodeTaints_);
      nodeLabels_.Add(other.nodeLabels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Status = (global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status) input.ReadEnum();
            break;
          }
          case 66: {
            if (nodeTemplate_ == null) {
              NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
            }
            input.ReadMessage(NodeTemplate);
            break;
          }
          case 74: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 82: {
            if (allocationPolicy_ == null) {
              AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
            }
            input.ReadMessage(AllocationPolicy);
            break;
          }
          case 90: {
            InstanceGroupId = input.ReadString();
            break;
          }
          case 98: {
            NodeVersion = input.ReadString();
            break;
          }
          case 106: {
            if (versionInfo_ == null) {
              VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
            }
            input.ReadMessage(VersionInfo);
            break;
          }
          case 114: {
            if (maintenancePolicy_ == null) {
              MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
            }
            input.ReadMessage(MaintenancePolicy);
            break;
          }
          case 122: {
            allowedUnsafeSysctls_.AddEntriesFrom(input, _repeated_allowedUnsafeSysctls_codec);
            break;
          }
          case 130: {
            nodeTaints_.AddEntriesFrom(input, _repeated_nodeTaints_codec);
            break;
          }
          case 138: {
            nodeLabels_.AddEntriesFrom(input, _map_nodeLabels_codec);
            break;
          }
          case 146: {
            if (deployPolicy_ == null) {
              DeployPolicy = new global::Yandex.Cloud.K8S.V1.DeployPolicy();
            }
            input.ReadMessage(DeployPolicy);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NodeGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Node group is waiting for resources to be allocated.
        /// </summary>
        [pbr::OriginalName("PROVISIONING")] Provisioning = 1,
        /// <summary>
        /// Node group is running.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Node group is waiting for some work to be done, such as upgrading node software.
        /// </summary>
        [pbr::OriginalName("RECONCILING")] Reconciling = 3,
        /// <summary>
        /// Node group is being stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 4,
        /// <summary>
        /// Node group stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 5,
        /// <summary>
        /// Node group is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 6,
        /// <summary>
        /// Node group is being started.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

    }
    #endregion

  }

  internal sealed partial class ScalePolicy : pb::IMessage<ScalePolicy> {
    private static readonly pb::MessageParser<ScalePolicy> _parser = new pb::MessageParser<ScalePolicy>(() => new ScalePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScalePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy(ScalePolicy other) : this() {
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          FixedScale = other.FixedScale.Clone();
          break;
        case ScaleTypeOneofCase.AutoScale:
          AutoScale = other.AutoScale.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy Clone() {
      return new ScalePolicy(this);
    }

    /// <summary>Field number for the "fixed_scale" field.</summary>
    public const int FixedScaleFieldNumber = 1;
    /// <summary>
    /// Fixed scale policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale FixedScale {
      get { return scaleTypeCase_ == ScaleTypeOneofCase.FixedScale ? (global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale) scaleType_ : null; }
      set {
        scaleType_ = value;
        scaleTypeCase_ = value == null ? ScaleTypeOneofCase.None : ScaleTypeOneofCase.FixedScale;
      }
    }

    /// <summary>Field number for the "auto_scale" field.</summary>
    public const int AutoScaleFieldNumber = 2;
    /// <summary>
    /// Auto scale policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale AutoScale {
      get { return scaleTypeCase_ == ScaleTypeOneofCase.AutoScale ? (global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale) scaleType_ : null; }
      set {
        scaleType_ = value;
        scaleTypeCase_ = value == null ? ScaleTypeOneofCase.None : ScaleTypeOneofCase.AutoScale;
      }
    }

    private object scaleType_;
    /// <summary>Enum of possible cases for the "scale_type" oneof.</summary>
    public enum ScaleTypeOneofCase {
      None = 0,
      FixedScale = 1,
      AutoScale = 2,
    }
    private ScaleTypeOneofCase scaleTypeCase_ = ScaleTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleTypeOneofCase ScaleTypeCase {
      get { return scaleTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaleType() {
      scaleTypeCase_ = ScaleTypeOneofCase.None;
      scaleType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScalePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScalePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FixedScale, other.FixedScale)) return false;
      if (!object.Equals(AutoScale, other.AutoScale)) return false;
      if (ScaleTypeCase != other.ScaleTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) hash ^= FixedScale.GetHashCode();
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) hash ^= AutoScale.GetHashCode();
      hash ^= (int) scaleTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        output.WriteRawTag(10);
        output.WriteMessage(FixedScale);
      }
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
        output.WriteRawTag(18);
        output.WriteMessage(AutoScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedScale);
      }
      if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AutoScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScalePolicy other) {
      if (other == null) {
        return;
      }
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          if (FixedScale == null) {
            FixedScale = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale();
          }
          FixedScale.MergeFrom(other.FixedScale);
          break;
        case ScaleTypeOneofCase.AutoScale:
          if (AutoScale == null) {
            AutoScale = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale();
          }
          AutoScale.MergeFrom(other.AutoScale);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale subBuilder = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale();
            if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
              subBuilder.MergeFrom(FixedScale);
            }
            input.ReadMessage(subBuilder);
            FixedScale = subBuilder;
            break;
          }
          case 18: {
            global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale subBuilder = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.AutoScale();
            if (scaleTypeCase_ == ScaleTypeOneofCase.AutoScale) {
              subBuilder.MergeFrom(AutoScale);
            }
            input.ReadMessage(subBuilder);
            AutoScale = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScalePolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class FixedScale : pb::IMessage<FixedScale> {
        private static readonly pb::MessageParser<FixedScale> _parser = new pb::MessageParser<FixedScale>(() => new FixedScale());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FixedScale> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.ScalePolicy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale(FixedScale other) : this() {
          size_ = other.size_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale Clone() {
          return new FixedScale(this);
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 1;
        private long size_;
        /// <summary>
        /// Number of nodes in the node group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FixedScale);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FixedScale other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Size != other.Size) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Size != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Size);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FixedScale other) {
          if (other == null) {
            return;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Size = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      internal sealed partial class AutoScale : pb::IMessage<AutoScale> {
        private static readonly pb::MessageParser<AutoScale> _parser = new pb::MessageParser<AutoScale>(() => new AutoScale());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AutoScale> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.ScalePolicy.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale(AutoScale other) : this() {
          minSize_ = other.minSize_;
          maxSize_ = other.maxSize_;
          initialSize_ = other.initialSize_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AutoScale Clone() {
          return new AutoScale(this);
        }

        /// <summary>Field number for the "min_size" field.</summary>
        public const int MinSizeFieldNumber = 1;
        private long minSize_;
        /// <summary>
        /// Minimum number of nodes in the node group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MinSize {
          get { return minSize_; }
          set {
            minSize_ = value;
          }
        }

        /// <summary>Field number for the "max_size" field.</summary>
        public const int MaxSizeFieldNumber = 2;
        private long maxSize_;
        /// <summary>
        /// Maximum number of nodes in the node group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long MaxSize {
          get { return maxSize_; }
          set {
            maxSize_ = value;
          }
        }

        /// <summary>Field number for the "initial_size" field.</summary>
        public const int InitialSizeFieldNumber = 3;
        private long initialSize_;
        /// <summary>
        /// Initial number of nodes in the node group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InitialSize {
          get { return initialSize_; }
          set {
            initialSize_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AutoScale);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AutoScale other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (MinSize != other.MinSize) return false;
          if (MaxSize != other.MaxSize) return false;
          if (InitialSize != other.InitialSize) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (MinSize != 0L) hash ^= MinSize.GetHashCode();
          if (MaxSize != 0L) hash ^= MaxSize.GetHashCode();
          if (InitialSize != 0L) hash ^= InitialSize.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (MinSize != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(MinSize);
          }
          if (MaxSize != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(MaxSize);
          }
          if (InitialSize != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(InitialSize);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (MinSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinSize);
          }
          if (MaxSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSize);
          }
          if (InitialSize != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitialSize);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AutoScale other) {
          if (other == null) {
            return;
          }
          if (other.MinSize != 0L) {
            MinSize = other.MinSize;
          }
          if (other.MaxSize != 0L) {
            MaxSize = other.MaxSize;
          }
          if (other.InitialSize != 0L) {
            InitialSize = other.InitialSize;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                MinSize = input.ReadInt64();
                break;
              }
              case 16: {
                MaxSize = input.ReadInt64();
                break;
              }
              case 24: {
                InitialSize = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class NodeGroupAllocationPolicy : pb::IMessage<NodeGroupAllocationPolicy> {
    private static readonly pb::MessageParser<NodeGroupAllocationPolicy> _parser = new pb::MessageParser<NodeGroupAllocationPolicy>(() => new NodeGroupAllocationPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupAllocationPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy(NodeGroupAllocationPolicy other) : this() {
      locations_ = other.locations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy Clone() {
      return new NodeGroupAllocationPolicy(this);
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.K8S.V1.NodeGroupLocation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> locations_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation>();
    /// <summary>
    /// List of locations where resources for the node group will be allocated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> Locations {
      get { return locations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupAllocationPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupAllocationPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupAllocationPolicy other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeGroupLocation : pb::IMessage<NodeGroupLocation> {
    private static readonly pb::MessageParser<NodeGroupLocation> _parser = new pb::MessageParser<NodeGroupLocation>(() => new NodeGroupLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation(NodeGroupLocation other) : this() {
      zoneId_ = other.zoneId_;
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation Clone() {
      return new NodeGroupLocation(this);
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the nodes may reside.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 2;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet. If a network chosen for the Kubernetes cluster has only one subnet in the specified zone, subnet ID may be omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneId);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupLocation other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZoneId = input.ReadString();
            break;
          }
          case 18: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeGroupMaintenancePolicy : pb::IMessage<NodeGroupMaintenancePolicy> {
    private static readonly pb::MessageParser<NodeGroupMaintenancePolicy> _parser = new pb::MessageParser<NodeGroupMaintenancePolicy>(() => new NodeGroupMaintenancePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupMaintenancePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy(NodeGroupMaintenancePolicy other) : this() {
      autoUpgrade_ = other.autoUpgrade_;
      autoRepair_ = other.autoRepair_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy Clone() {
      return new NodeGroupMaintenancePolicy(this);
    }

    /// <summary>Field number for the "auto_upgrade" field.</summary>
    public const int AutoUpgradeFieldNumber = 1;
    private bool autoUpgrade_;
    /// <summary>
    /// If set to true, automatic updates are installed in the specified period of time with no interaction from the user.
    /// If set to false, automatic upgrades are disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoUpgrade {
      get { return autoUpgrade_; }
      set {
        autoUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "auto_repair" field.</summary>
    public const int AutoRepairFieldNumber = 2;
    private bool autoRepair_;
    /// <summary>
    /// If set to true, automatic repairs are enabled. Default value is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoRepair {
      get { return autoRepair_; }
      set {
        autoRepair_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.MaintenanceWindow maintenanceWindow_;
    /// <summary>
    /// Maintenance window settings. Update will start at the specified time and last no more than the specified duration.
    /// The time is set in UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupMaintenancePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupMaintenancePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoUpgrade != other.AutoUpgrade) return false;
      if (AutoRepair != other.AutoRepair) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoUpgrade != false) hash ^= AutoUpgrade.GetHashCode();
      if (AutoRepair != false) hash ^= AutoRepair.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoUpgrade);
      }
      if (AutoRepair != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoRepair);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoUpgrade != false) {
        size += 1 + 1;
      }
      if (AutoRepair != false) {
        size += 1 + 1;
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupMaintenancePolicy other) {
      if (other == null) {
        return;
      }
      if (other.AutoUpgrade != false) {
        AutoUpgrade = other.AutoUpgrade;
      }
      if (other.AutoRepair != false) {
        AutoRepair = other.AutoRepair;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoUpgrade = input.ReadBool();
            break;
          }
          case 16: {
            AutoRepair = input.ReadBool();
            break;
          }
          case 26: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeployPolicy : pb::IMessage<DeployPolicy> {
    private static readonly pb::MessageParser<DeployPolicy> _parser = new pb::MessageParser<DeployPolicy>(() => new DeployPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeployPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy(DeployPolicy other) : this() {
      maxUnavailable_ = other.maxUnavailable_;
      maxExpansion_ = other.maxExpansion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeployPolicy Clone() {
      return new DeployPolicy(this);
    }

    /// <summary>Field number for the "max_unavailable" field.</summary>
    public const int MaxUnavailableFieldNumber = 1;
    private long maxUnavailable_;
    /// <summary>
    /// The maximum number of running instances that can be taken offline (i.e.,
    /// stopped or deleted) at the same time during the update process.
    /// If [max_expansion] is not specified or set to zero, [max_unavailable] must
    /// be set to a non-zero value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxUnavailable {
      get { return maxUnavailable_; }
      set {
        maxUnavailable_ = value;
      }
    }

    /// <summary>Field number for the "max_expansion" field.</summary>
    public const int MaxExpansionFieldNumber = 2;
    private long maxExpansion_;
    /// <summary>
    /// The maximum number of instances that can be temporarily allocated above
    /// the group's target size during the update process.
    /// If [max_unavailable] is not specified or set to zero, [max_expansion] must
    /// be set to a non-zero value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxExpansion {
      get { return maxExpansion_; }
      set {
        maxExpansion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeployPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeployPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxUnavailable != other.MaxUnavailable) return false;
      if (MaxExpansion != other.MaxExpansion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxUnavailable != 0L) hash ^= MaxUnavailable.GetHashCode();
      if (MaxExpansion != 0L) hash ^= MaxExpansion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxUnavailable != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MaxUnavailable);
      }
      if (MaxExpansion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxExpansion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxUnavailable != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxUnavailable);
      }
      if (MaxExpansion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxExpansion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeployPolicy other) {
      if (other == null) {
        return;
      }
      if (other.MaxUnavailable != 0L) {
        MaxUnavailable = other.MaxUnavailable;
      }
      if (other.MaxExpansion != 0L) {
        MaxExpansion = other.MaxExpansion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaxUnavailable = input.ReadInt64();
            break;
          }
          case 16: {
            MaxExpansion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
