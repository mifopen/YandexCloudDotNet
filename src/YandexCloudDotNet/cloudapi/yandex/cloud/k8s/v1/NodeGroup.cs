// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/k8s/v1/node_group.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.K8S.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/k8s/v1/node_group.proto</summary>
  internal static partial class NodeGroupReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/k8s/v1/node_group.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NodeGroupReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiR5YW5kZXgvY2xvdWQvazhzL3YxL25vZGVfZ3JvdXAucHJvdG8SE3lhbmRl",
            "eC5jbG91ZC5rOHMudjEaH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJv",
            "dG8aJXlhbmRleC9jbG91ZC9rOHMvdjEvbWFpbnRlbmFuY2UucHJvdG8aIXlh",
            "bmRleC9jbG91ZC9rOHMvdjEvdmVyc2lvbi5wcm90bxodeWFuZGV4L2Nsb3Vk",
            "L3ZhbGlkYXRpb24ucHJvdG8inQYKCU5vZGVHcm91cBIKCgJpZBgBIAEoCRIS",
            "CgpjbHVzdGVyX2lkGAIgASgJEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEgwKBG5hbWUYBCABKAkSEwoLZGVzY3Jp",
            "cHRpb24YBSABKAkSOgoGbGFiZWxzGAYgAygLMioueWFuZGV4LmNsb3VkLms4",
            "cy52MS5Ob2RlR3JvdXAuTGFiZWxzRW50cnkSNQoGc3RhdHVzGAcgASgOMiUu",
            "eWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlR3JvdXAuU3RhdHVzEjgKDW5vZGVf",
            "dGVtcGxhdGUYCCABKAsyIS55YW5kZXguY2xvdWQuazhzLnYxLk5vZGVUZW1w",
            "bGF0ZRI2CgxzY2FsZV9wb2xpY3kYCSABKAsyIC55YW5kZXguY2xvdWQuazhz",
            "LnYxLlNjYWxlUG9saWN5EkkKEWFsbG9jYXRpb25fcG9saWN5GAogASgLMi4u",
            "eWFuZGV4LmNsb3VkLms4cy52MS5Ob2RlR3JvdXBBbGxvY2F0aW9uUG9saWN5",
            "EhkKEWluc3RhbmNlX2dyb3VwX2lkGAsgASgJEhQKDG5vZGVfdmVyc2lvbhgM",
            "IAEoCRI2Cgx2ZXJzaW9uX2luZm8YDSABKAsyIC55YW5kZXguY2xvdWQuazhz",
            "LnYxLlZlcnNpb25JbmZvEksKEm1haW50ZW5hbmNlX3BvbGljeRgOIAEoCzIv",
            "LnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZUdyb3VwTWFpbnRlbmFuY2VQb2xp",
            "Y3kaLQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJ",
            "OgI4ASKHAQoGU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAAEhAKDFBS",
            "T1ZJU0lPTklORxABEgsKB1JVTk5JTkcQAhIPCgtSRUNPTkNJTElORxADEgwK",
            "CFNUT1BQSU5HEAQSCwoHU1RPUFBFRBAFEgwKCERFTEVUSU5HEAYSDAoIU1RB",
            "UlRJTkcQByLBAwoMTm9kZVRlbXBsYXRlEhMKC3BsYXRmb3JtX2lkGAEgASgJ",
            "EjoKDnJlc291cmNlc19zcGVjGAIgASgLMiIueWFuZGV4LmNsb3VkLms4cy52",
            "MS5SZXNvdXJjZXNTcGVjEjUKDmJvb3RfZGlza19zcGVjGAMgASgLMh0ueWFu",
            "ZGV4LmNsb3VkLms4cy52MS5EaXNrU3BlYxJ3CghtZXRhZGF0YRgEIAMoCzIv",
            "LnlhbmRleC5jbG91ZC5rOHMudjEuTm9kZVRlbXBsYXRlLk1ldGFkYXRhRW50",
            "cnlCNILIMQQ8PTY0isgxCDw9MTMxMDcyssgxBhoEMS02M7LIMRISEFthLXpd",
            "Wy1fMC05YS16XSoSPQoPdjRfYWRkcmVzc19zcGVjGAUgASgLMiQueWFuZGV4",
            "LmNsb3VkLms4cy52MS5Ob2RlQWRkcmVzc1NwZWMSQAoRc2NoZWR1bGluZ19w",
            "b2xpY3kYBiABKAsyJS55YW5kZXguY2xvdWQuazhzLnYxLlNjaGVkdWxpbmdQ",
            "b2xpY3kaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIlQKD05vZGVBZGRyZXNzU3BlYxJBChNvbmVfdG9fb25lX25h",
            "dF9zcGVjGAEgASgLMiQueWFuZGV4LmNsb3VkLms4cy52MS5PbmVUb09uZU5h",
            "dFNwZWMiRQoPT25lVG9PbmVOYXRTcGVjEjIKCmlwX3ZlcnNpb24YASABKA4y",
            "Hi55YW5kZXguY2xvdWQuazhzLnYxLklwVmVyc2lvbiKhAQoNUmVzb3VyY2Vz",
            "U3BlYxIiCgZtZW1vcnkYASABKANCEvrHMQ4wLTI3NDg3NzkwNjk0NBJCCgVj",
            "b3JlcxgCIAEoA0Iz+scxLzAsMSwyLDQsNiw4LDEwLDEyLDE0LDE2LDE4LDIw",
            "LDIyLDI0LDI2LDI4LDMwLDMyEigKDWNvcmVfZnJhY3Rpb24YAyABKANCEfrH",
            "MQ0wLDUsMjAsNTAsMTAwImYKCERpc2tTcGVjEjIKDGRpc2tfdHlwZV9pZBgB",
            "IAEoCUIc8scxGHxuZXR3b3JrLXNzZHxuZXR3b3JrLWhkZBImCglkaXNrX3Np",
            "emUYAiABKANCE/rHMQ8wLTQzOTgwNDY1MTExMDQijAEKC1NjYWxlUG9saWN5",
            "EkIKC2ZpeGVkX3NjYWxlGAEgASgLMisueWFuZGV4LmNsb3VkLms4cy52MS5T",
            "Y2FsZVBvbGljeS5GaXhlZFNjYWxlSAAaJQoKRml4ZWRTY2FsZRIXCgRzaXpl",
            "GAEgASgDQgn6xzEFMC0xMDBCEgoKc2NhbGVfdHlwZRIEwMExASJWChlOb2Rl",
            "R3JvdXBBbGxvY2F0aW9uUG9saWN5EjkKCWxvY2F0aW9ucxgBIAMoCzImLnlh",
            "bmRleC5jbG91ZC5rOHMudjEuTm9kZUdyb3VwTG9jYXRpb24iPQoRTm9kZUdy",
            "b3VwTG9jYXRpb24SFQoHem9uZV9pZBgBIAEoCUIE6McxARIRCglzdWJuZXRf",
            "aWQYAiABKAkiJwoQU2NoZWR1bGluZ1BvbGljeRITCgtwcmVlbXB0aWJsZRgB",
            "IAEoCCKLAQoaTm9kZUdyb3VwTWFpbnRlbmFuY2VQb2xpY3kSFAoMYXV0b191",
            "cGdyYWRlGAEgASgIEhMKC2F1dG9fcmVwYWlyGAIgASgIEkIKEm1haW50ZW5h",
            "bmNlX3dpbmRvdxgDIAEoCzImLnlhbmRleC5jbG91ZC5rOHMudjEuTWFpbnRl",
            "bmFuY2VXaW5kb3cqOwoJSXBWZXJzaW9uEhoKFklQX1ZFUlNJT05fVU5TUEVD",
            "SUZJRUQQABIICgRJUFY0EAESCAoESVBWNhACQlYKF3lhbmRleC5jbG91ZC5h",
            "cGkuazhzLnYxWjtnaXRodWIuY29tL3lhbmRleC1jbG91ZC9nby1nZW5wcm90",
            "by95YW5kZXgvY2xvdWQvazhzL3YxO2s4c2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Yandex.Cloud.K8S.V1.MaintenanceReflection.Descriptor, global::Yandex.Cloud.K8S.V1.VersionReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.K8S.V1.IpVersion), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroup), global::Yandex.Cloud.K8S.V1.NodeGroup.Parser, new[]{ "Id", "ClusterId", "CreatedAt", "Name", "Description", "Labels", "Status", "NodeTemplate", "ScalePolicy", "AllocationPolicy", "InstanceGroupId", "NodeVersion", "VersionInfo", "MaintenancePolicy" }, null, new[]{ typeof(global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeTemplate), global::Yandex.Cloud.K8S.V1.NodeTemplate.Parser, new[]{ "PlatformId", "ResourcesSpec", "BootDiskSpec", "Metadata", "V4AddressSpec", "SchedulingPolicy" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeAddressSpec), global::Yandex.Cloud.K8S.V1.NodeAddressSpec.Parser, new[]{ "OneToOneNatSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.OneToOneNatSpec), global::Yandex.Cloud.K8S.V1.OneToOneNatSpec.Parser, new[]{ "IpVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ResourcesSpec), global::Yandex.Cloud.K8S.V1.ResourcesSpec.Parser, new[]{ "Memory", "Cores", "CoreFraction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.DiskSpec), global::Yandex.Cloud.K8S.V1.DiskSpec.Parser, new[]{ "DiskTypeId", "DiskSize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ScalePolicy), global::Yandex.Cloud.K8S.V1.ScalePolicy.Parser, new[]{ "FixedScale" }, new[]{ "ScaleType" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale), global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale.Parser, new[]{ "Size" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy), global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy.Parser, new[]{ "Locations" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupLocation), global::Yandex.Cloud.K8S.V1.NodeGroupLocation.Parser, new[]{ "ZoneId", "SubnetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.SchedulingPolicy), global::Yandex.Cloud.K8S.V1.SchedulingPolicy.Parser, new[]{ "Preemptible" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy), global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy.Parser, new[]{ "AutoUpgrade", "AutoRepair", "MaintenanceWindow" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum IpVersion {
    [pbr::OriginalName("IP_VERSION_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// IPv4 address, for example 192.168.0.0.
    /// </summary>
    [pbr::OriginalName("IPV4")] Ipv4 = 1,
    /// <summary>
    /// IPv6 address, not available yet.
    /// </summary>
    [pbr::OriginalName("IPV6")] Ipv6 = 2,
  }

  #endregion

  #region Messages
  internal sealed partial class NodeGroup : pb::IMessage<NodeGroup> {
    private static readonly pb::MessageParser<NodeGroup> _parser = new pb::MessageParser<NodeGroup>(() => new NodeGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup(NodeGroup other) : this() {
      id_ = other.id_;
      clusterId_ = other.clusterId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      status_ = other.status_;
      nodeTemplate_ = other.nodeTemplate_ != null ? other.nodeTemplate_.Clone() : null;
      scalePolicy_ = other.scalePolicy_ != null ? other.scalePolicy_.Clone() : null;
      allocationPolicy_ = other.allocationPolicy_ != null ? other.allocationPolicy_.Clone() : null;
      instanceGroupId_ = other.instanceGroupId_;
      nodeVersion_ = other.nodeVersion_;
      versionInfo_ = other.versionInfo_ != null ? other.versionInfo_.Clone() : null;
      maintenancePolicy_ = other.maintenancePolicy_ != null ? other.maintenancePolicy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroup Clone() {
      return new NodeGroup(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cluster_id" field.</summary>
    public const int ClusterIdFieldNumber = 2;
    private string clusterId_ = "";
    /// <summary>
    /// ID of the cluster that the node group belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterId {
      get { return clusterId_; }
      set {
        clusterId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the node group.
    /// The name is unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the node group. 0-256 characters long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs. Мaximum of 64 per resource.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status status_ = 0;
    /// <summary>
    /// Status of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "node_template" field.</summary>
    public const int NodeTemplateFieldNumber = 8;
    private global::Yandex.Cloud.K8S.V1.NodeTemplate nodeTemplate_;
    /// <summary>
    /// Node template that specifies parameters of the compute instances for the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeTemplate NodeTemplate {
      get { return nodeTemplate_; }
      set {
        nodeTemplate_ = value;
      }
    }

    /// <summary>Field number for the "scale_policy" field.</summary>
    public const int ScalePolicyFieldNumber = 9;
    private global::Yandex.Cloud.K8S.V1.ScalePolicy scalePolicy_;
    /// <summary>
    /// Scale policy of the node group.  For more information, see [Scaling policy](/docs/compute/concepts/instance-groups/policies#scale-policy).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy ScalePolicy {
      get { return scalePolicy_; }
      set {
        scalePolicy_ = value;
      }
    }

    /// <summary>Field number for the "allocation_policy" field.</summary>
    public const int AllocationPolicyFieldNumber = 10;
    private global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy allocationPolicy_;
    /// <summary>
    /// Allocation policy by which resources for node group are allocated to zones and regions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy AllocationPolicy {
      get { return allocationPolicy_; }
      set {
        allocationPolicy_ = value;
      }
    }

    /// <summary>Field number for the "instance_group_id" field.</summary>
    public const int InstanceGroupIdFieldNumber = 11;
    private string instanceGroupId_ = "";
    /// <summary>
    /// ID of the managed instance group associated with this node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceGroupId {
      get { return instanceGroupId_; }
      set {
        instanceGroupId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_version" field.</summary>
    public const int NodeVersionFieldNumber = 12;
    private string nodeVersion_ = "";
    /// <summary>
    /// Version of Kubernetes components that runs on the nodes.
    /// Deprecated. Use version_info.current_version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeVersion {
      get { return nodeVersion_; }
      set {
        nodeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_info" field.</summary>
    public const int VersionInfoFieldNumber = 13;
    private global::Yandex.Cloud.K8S.V1.VersionInfo versionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.VersionInfo VersionInfo {
      get { return versionInfo_; }
      set {
        versionInfo_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_policy" field.</summary>
    public const int MaintenancePolicyFieldNumber = 14;
    private global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy maintenancePolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy MaintenancePolicy {
      get { return maintenancePolicy_; }
      set {
        maintenancePolicy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ClusterId != other.ClusterId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(NodeTemplate, other.NodeTemplate)) return false;
      if (!object.Equals(ScalePolicy, other.ScalePolicy)) return false;
      if (!object.Equals(AllocationPolicy, other.AllocationPolicy)) return false;
      if (InstanceGroupId != other.InstanceGroupId) return false;
      if (NodeVersion != other.NodeVersion) return false;
      if (!object.Equals(VersionInfo, other.VersionInfo)) return false;
      if (!object.Equals(MaintenancePolicy, other.MaintenancePolicy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (ClusterId.Length != 0) hash ^= ClusterId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (nodeTemplate_ != null) hash ^= NodeTemplate.GetHashCode();
      if (scalePolicy_ != null) hash ^= ScalePolicy.GetHashCode();
      if (allocationPolicy_ != null) hash ^= AllocationPolicy.GetHashCode();
      if (InstanceGroupId.Length != 0) hash ^= InstanceGroupId.GetHashCode();
      if (NodeVersion.Length != 0) hash ^= NodeVersion.GetHashCode();
      if (versionInfo_ != null) hash ^= VersionInfo.GetHashCode();
      if (maintenancePolicy_ != null) hash ^= MaintenancePolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (ClusterId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClusterId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (nodeTemplate_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AllocationPolicy);
      }
      if (InstanceGroupId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(InstanceGroupId);
      }
      if (NodeVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NodeVersion);
      }
      if (versionInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MaintenancePolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (ClusterId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (nodeTemplate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeTemplate);
      }
      if (scalePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScalePolicy);
      }
      if (allocationPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AllocationPolicy);
      }
      if (InstanceGroupId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceGroupId);
      }
      if (NodeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeVersion);
      }
      if (versionInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VersionInfo);
      }
      if (maintenancePolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenancePolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroup other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.ClusterId.Length != 0) {
        ClusterId = other.ClusterId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.nodeTemplate_ != null) {
        if (nodeTemplate_ == null) {
          NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
        }
        NodeTemplate.MergeFrom(other.NodeTemplate);
      }
      if (other.scalePolicy_ != null) {
        if (scalePolicy_ == null) {
          ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
        }
        ScalePolicy.MergeFrom(other.ScalePolicy);
      }
      if (other.allocationPolicy_ != null) {
        if (allocationPolicy_ == null) {
          AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
        }
        AllocationPolicy.MergeFrom(other.AllocationPolicy);
      }
      if (other.InstanceGroupId.Length != 0) {
        InstanceGroupId = other.InstanceGroupId;
      }
      if (other.NodeVersion.Length != 0) {
        NodeVersion = other.NodeVersion;
      }
      if (other.versionInfo_ != null) {
        if (versionInfo_ == null) {
          VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
        }
        VersionInfo.MergeFrom(other.VersionInfo);
      }
      if (other.maintenancePolicy_ != null) {
        if (maintenancePolicy_ == null) {
          MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
        }
        MaintenancePolicy.MergeFrom(other.MaintenancePolicy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            ClusterId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Status = (global::Yandex.Cloud.K8S.V1.NodeGroup.Types.Status) input.ReadEnum();
            break;
          }
          case 66: {
            if (nodeTemplate_ == null) {
              NodeTemplate = new global::Yandex.Cloud.K8S.V1.NodeTemplate();
            }
            input.ReadMessage(NodeTemplate);
            break;
          }
          case 74: {
            if (scalePolicy_ == null) {
              ScalePolicy = new global::Yandex.Cloud.K8S.V1.ScalePolicy();
            }
            input.ReadMessage(ScalePolicy);
            break;
          }
          case 82: {
            if (allocationPolicy_ == null) {
              AllocationPolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupAllocationPolicy();
            }
            input.ReadMessage(AllocationPolicy);
            break;
          }
          case 90: {
            InstanceGroupId = input.ReadString();
            break;
          }
          case 98: {
            NodeVersion = input.ReadString();
            break;
          }
          case 106: {
            if (versionInfo_ == null) {
              VersionInfo = new global::Yandex.Cloud.K8S.V1.VersionInfo();
            }
            input.ReadMessage(VersionInfo);
            break;
          }
          case 114: {
            if (maintenancePolicy_ == null) {
              MaintenancePolicy = new global::Yandex.Cloud.K8S.V1.NodeGroupMaintenancePolicy();
            }
            input.ReadMessage(MaintenancePolicy);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NodeGroup message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Node group is waiting for resources to be allocated.
        /// </summary>
        [pbr::OriginalName("PROVISIONING")] Provisioning = 1,
        /// <summary>
        /// Node group is running.
        /// </summary>
        [pbr::OriginalName("RUNNING")] Running = 2,
        /// <summary>
        /// Node group is waiting for some work to be done, such as upgrading node software.
        /// </summary>
        [pbr::OriginalName("RECONCILING")] Reconciling = 3,
        /// <summary>
        /// Node group is being stopped.
        /// </summary>
        [pbr::OriginalName("STOPPING")] Stopping = 4,
        /// <summary>
        /// Node group stopped.
        /// </summary>
        [pbr::OriginalName("STOPPED")] Stopped = 5,
        /// <summary>
        /// Node group is being deleted.
        /// </summary>
        [pbr::OriginalName("DELETING")] Deleting = 6,
        /// <summary>
        /// Node group is being started.
        /// </summary>
        [pbr::OriginalName("STARTING")] Starting = 7,
      }

    }
    #endregion

  }

  internal sealed partial class NodeTemplate : pb::IMessage<NodeTemplate> {
    private static readonly pb::MessageParser<NodeTemplate> _parser = new pb::MessageParser<NodeTemplate>(() => new NodeTemplate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeTemplate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate(NodeTemplate other) : this() {
      platformId_ = other.platformId_;
      resourcesSpec_ = other.resourcesSpec_ != null ? other.resourcesSpec_.Clone() : null;
      bootDiskSpec_ = other.bootDiskSpec_ != null ? other.bootDiskSpec_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      v4AddressSpec_ = other.v4AddressSpec_ != null ? other.v4AddressSpec_.Clone() : null;
      schedulingPolicy_ = other.schedulingPolicy_ != null ? other.schedulingPolicy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeTemplate Clone() {
      return new NodeTemplate(this);
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 1;
    private string platformId_ = "";
    /// <summary>
    /// ID of the hardware platform configuration for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources_spec" field.</summary>
    public const int ResourcesSpecFieldNumber = 2;
    private global::Yandex.Cloud.K8S.V1.ResourcesSpec resourcesSpec_;
    /// <summary>
    /// Computing resources of the node such as the amount of memory and number of cores.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ResourcesSpec ResourcesSpec {
      get { return resourcesSpec_; }
      set {
        resourcesSpec_ = value;
      }
    }

    /// <summary>Field number for the "boot_disk_spec" field.</summary>
    public const int BootDiskSpecFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.DiskSpec bootDiskSpec_;
    /// <summary>
    /// The metadata as `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys.
    ///
    /// For example, you may use the metadata in order to provide your public SSH key to the node.
    /// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.DiskSpec BootDiskSpec {
      get { return bootDiskSpec_; }
      set {
        bootDiskSpec_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "v4_address_spec" field.</summary>
    public const int V4AddressSpecFieldNumber = 5;
    private global::Yandex.Cloud.K8S.V1.NodeAddressSpec v4AddressSpec_;
    /// <summary>
    /// Specification for the create network interfaces for the node group compute instances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.NodeAddressSpec V4AddressSpec {
      get { return v4AddressSpec_; }
      set {
        v4AddressSpec_ = value;
      }
    }

    /// <summary>Field number for the "scheduling_policy" field.</summary>
    public const int SchedulingPolicyFieldNumber = 6;
    private global::Yandex.Cloud.K8S.V1.SchedulingPolicy schedulingPolicy_;
    /// <summary>
    /// Scheduling policy configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.SchedulingPolicy SchedulingPolicy {
      get { return schedulingPolicy_; }
      set {
        schedulingPolicy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeTemplate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeTemplate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlatformId != other.PlatformId) return false;
      if (!object.Equals(ResourcesSpec, other.ResourcesSpec)) return false;
      if (!object.Equals(BootDiskSpec, other.BootDiskSpec)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (!object.Equals(V4AddressSpec, other.V4AddressSpec)) return false;
      if (!object.Equals(SchedulingPolicy, other.SchedulingPolicy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (resourcesSpec_ != null) hash ^= ResourcesSpec.GetHashCode();
      if (bootDiskSpec_ != null) hash ^= BootDiskSpec.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (v4AddressSpec_ != null) hash ^= V4AddressSpec.GetHashCode();
      if (schedulingPolicy_ != null) hash ^= SchedulingPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlatformId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlatformId);
      }
      if (resourcesSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResourcesSpec);
      }
      if (bootDiskSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BootDiskSpec);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (v4AddressSpec_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(V4AddressSpec);
      }
      if (schedulingPolicy_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(SchedulingPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (resourcesSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcesSpec);
      }
      if (bootDiskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootDiskSpec);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (v4AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(V4AddressSpec);
      }
      if (schedulingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchedulingPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeTemplate other) {
      if (other == null) {
        return;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.resourcesSpec_ != null) {
        if (resourcesSpec_ == null) {
          ResourcesSpec = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
        }
        ResourcesSpec.MergeFrom(other.ResourcesSpec);
      }
      if (other.bootDiskSpec_ != null) {
        if (bootDiskSpec_ == null) {
          BootDiskSpec = new global::Yandex.Cloud.K8S.V1.DiskSpec();
        }
        BootDiskSpec.MergeFrom(other.BootDiskSpec);
      }
      metadata_.Add(other.metadata_);
      if (other.v4AddressSpec_ != null) {
        if (v4AddressSpec_ == null) {
          V4AddressSpec = new global::Yandex.Cloud.K8S.V1.NodeAddressSpec();
        }
        V4AddressSpec.MergeFrom(other.V4AddressSpec);
      }
      if (other.schedulingPolicy_ != null) {
        if (schedulingPolicy_ == null) {
          SchedulingPolicy = new global::Yandex.Cloud.K8S.V1.SchedulingPolicy();
        }
        SchedulingPolicy.MergeFrom(other.SchedulingPolicy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlatformId = input.ReadString();
            break;
          }
          case 18: {
            if (resourcesSpec_ == null) {
              ResourcesSpec = new global::Yandex.Cloud.K8S.V1.ResourcesSpec();
            }
            input.ReadMessage(ResourcesSpec);
            break;
          }
          case 26: {
            if (bootDiskSpec_ == null) {
              BootDiskSpec = new global::Yandex.Cloud.K8S.V1.DiskSpec();
            }
            input.ReadMessage(BootDiskSpec);
            break;
          }
          case 34: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 42: {
            if (v4AddressSpec_ == null) {
              V4AddressSpec = new global::Yandex.Cloud.K8S.V1.NodeAddressSpec();
            }
            input.ReadMessage(V4AddressSpec);
            break;
          }
          case 50: {
            if (schedulingPolicy_ == null) {
              SchedulingPolicy = new global::Yandex.Cloud.K8S.V1.SchedulingPolicy();
            }
            input.ReadMessage(SchedulingPolicy);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeAddressSpec : pb::IMessage<NodeAddressSpec> {
    private static readonly pb::MessageParser<NodeAddressSpec> _parser = new pb::MessageParser<NodeAddressSpec>(() => new NodeAddressSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAddressSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec(NodeAddressSpec other) : this() {
      oneToOneNatSpec_ = other.oneToOneNatSpec_ != null ? other.oneToOneNatSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddressSpec Clone() {
      return new NodeAddressSpec(this);
    }

    /// <summary>Field number for the "one_to_one_nat_spec" field.</summary>
    public const int OneToOneNatSpecFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.OneToOneNatSpec oneToOneNatSpec_;
    /// <summary>
    /// One-to-one NAT configuration. Setting up one-to-one NAT ensures that public IP addresses are assigned to nodes, and therefore internet is accessible for all nodes of the node group. If the field is not set, NAT will not be set up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.OneToOneNatSpec OneToOneNatSpec {
      get { return oneToOneNatSpec_; }
      set {
        oneToOneNatSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAddressSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAddressSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OneToOneNatSpec, other.OneToOneNatSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (oneToOneNatSpec_ != null) hash ^= OneToOneNatSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (oneToOneNatSpec_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (oneToOneNatSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAddressSpec other) {
      if (other == null) {
        return;
      }
      if (other.oneToOneNatSpec_ != null) {
        if (oneToOneNatSpec_ == null) {
          OneToOneNatSpec = new global::Yandex.Cloud.K8S.V1.OneToOneNatSpec();
        }
        OneToOneNatSpec.MergeFrom(other.OneToOneNatSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (oneToOneNatSpec_ == null) {
              OneToOneNatSpec = new global::Yandex.Cloud.K8S.V1.OneToOneNatSpec();
            }
            input.ReadMessage(OneToOneNatSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OneToOneNatSpec : pb::IMessage<OneToOneNatSpec> {
    private static readonly pb::MessageParser<OneToOneNatSpec> _parser = new pb::MessageParser<OneToOneNatSpec>(() => new OneToOneNatSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneNatSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec(OneToOneNatSpec other) : this() {
      ipVersion_ = other.ipVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec Clone() {
      return new OneToOneNatSpec(this);
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private global::Yandex.Cloud.K8S.V1.IpVersion ipVersion_ = 0;
    /// <summary>
    /// IP version for the public IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneNatSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneNatSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != 0) hash ^= IpVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IpVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneNatSpec other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != 0) {
        IpVersion = other.IpVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IpVersion = (global::Yandex.Cloud.K8S.V1.IpVersion) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResourcesSpec : pb::IMessage<ResourcesSpec> {
    private static readonly pb::MessageParser<ResourcesSpec> _parser = new pb::MessageParser<ResourcesSpec>(() => new ResourcesSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourcesSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec(ResourcesSpec other) : this() {
      memory_ = other.memory_;
      cores_ = other.cores_;
      coreFraction_ = other.coreFraction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec Clone() {
      return new ResourcesSpec(this);
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 1;
    private long memory_;
    /// <summary>
    /// Amount of memory available to the node, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 2;
    private long cores_;
    /// <summary>
    /// Number of cores available to the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "core_fraction" field.</summary>
    public const int CoreFractionFieldNumber = 3;
    private long coreFraction_;
    /// <summary>
    /// Baseline level of CPU performance with the possibility to burst performance above that baseline level.
    /// This field sets baseline performance for each core.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoreFraction {
      get { return coreFraction_; }
      set {
        coreFraction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourcesSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourcesSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memory != other.Memory) return false;
      if (Cores != other.Cores) return false;
      if (CoreFraction != other.CoreFraction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memory != 0L) hash ^= Memory.GetHashCode();
      if (Cores != 0L) hash ^= Cores.GetHashCode();
      if (CoreFraction != 0L) hash ^= CoreFraction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memory != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Memory);
      }
      if (Cores != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Cores);
      }
      if (CoreFraction != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoreFraction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Memory);
      }
      if (Cores != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cores);
      }
      if (CoreFraction != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoreFraction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourcesSpec other) {
      if (other == null) {
        return;
      }
      if (other.Memory != 0L) {
        Memory = other.Memory;
      }
      if (other.Cores != 0L) {
        Cores = other.Cores;
      }
      if (other.CoreFraction != 0L) {
        CoreFraction = other.CoreFraction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Memory = input.ReadInt64();
            break;
          }
          case 16: {
            Cores = input.ReadInt64();
            break;
          }
          case 24: {
            CoreFraction = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DiskSpec : pb::IMessage<DiskSpec> {
    private static readonly pb::MessageParser<DiskSpec> _parser = new pb::MessageParser<DiskSpec>(() => new DiskSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiskSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec(DiskSpec other) : this() {
      diskTypeId_ = other.diskTypeId_;
      diskSize_ = other.diskSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskSpec Clone() {
      return new DiskSpec(this);
    }

    /// <summary>Field number for the "disk_type_id" field.</summary>
    public const int DiskTypeIdFieldNumber = 1;
    private string diskTypeId_ = "";
    /// <summary>
    /// ID of the disk type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskTypeId {
      get { return diskTypeId_; }
      set {
        diskTypeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_size" field.</summary>
    public const int DiskSizeFieldNumber = 2;
    private long diskSize_;
    /// <summary>
    /// Size of the disk, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DiskSize {
      get { return diskSize_; }
      set {
        diskSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiskSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiskSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskTypeId != other.DiskTypeId) return false;
      if (DiskSize != other.DiskSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskTypeId.Length != 0) hash ^= DiskTypeId.GetHashCode();
      if (DiskSize != 0L) hash ^= DiskSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskTypeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DiskTypeId);
      }
      if (DiskSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DiskSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskTypeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskTypeId);
      }
      if (DiskSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiskSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiskSpec other) {
      if (other == null) {
        return;
      }
      if (other.DiskTypeId.Length != 0) {
        DiskTypeId = other.DiskTypeId;
      }
      if (other.DiskSize != 0L) {
        DiskSize = other.DiskSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DiskTypeId = input.ReadString();
            break;
          }
          case 16: {
            DiskSize = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ScalePolicy : pb::IMessage<ScalePolicy> {
    private static readonly pb::MessageParser<ScalePolicy> _parser = new pb::MessageParser<ScalePolicy>(() => new ScalePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScalePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy(ScalePolicy other) : this() {
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          FixedScale = other.FixedScale.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScalePolicy Clone() {
      return new ScalePolicy(this);
    }

    /// <summary>Field number for the "fixed_scale" field.</summary>
    public const int FixedScaleFieldNumber = 1;
    /// <summary>
    /// Fixed scale policy of the node group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale FixedScale {
      get { return scaleTypeCase_ == ScaleTypeOneofCase.FixedScale ? (global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale) scaleType_ : null; }
      set {
        scaleType_ = value;
        scaleTypeCase_ = value == null ? ScaleTypeOneofCase.None : ScaleTypeOneofCase.FixedScale;
      }
    }

    private object scaleType_;
    /// <summary>Enum of possible cases for the "scale_type" oneof.</summary>
    public enum ScaleTypeOneofCase {
      None = 0,
      FixedScale = 1,
    }
    private ScaleTypeOneofCase scaleTypeCase_ = ScaleTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleTypeOneofCase ScaleTypeCase {
      get { return scaleTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScaleType() {
      scaleTypeCase_ = ScaleTypeOneofCase.None;
      scaleType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScalePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScalePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FixedScale, other.FixedScale)) return false;
      if (ScaleTypeCase != other.ScaleTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) hash ^= FixedScale.GetHashCode();
      hash ^= (int) scaleTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        output.WriteRawTag(10);
        output.WriteMessage(FixedScale);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FixedScale);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScalePolicy other) {
      if (other == null) {
        return;
      }
      switch (other.ScaleTypeCase) {
        case ScaleTypeOneofCase.FixedScale:
          if (FixedScale == null) {
            FixedScale = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale();
          }
          FixedScale.MergeFrom(other.FixedScale);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale subBuilder = new global::Yandex.Cloud.K8S.V1.ScalePolicy.Types.FixedScale();
            if (scaleTypeCase_ == ScaleTypeOneofCase.FixedScale) {
              subBuilder.MergeFrom(FixedScale);
            }
            input.ReadMessage(subBuilder);
            FixedScale = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScalePolicy message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class FixedScale : pb::IMessage<FixedScale> {
        private static readonly pb::MessageParser<FixedScale> _parser = new pb::MessageParser<FixedScale>(() => new FixedScale());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<FixedScale> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.K8S.V1.ScalePolicy.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale(FixedScale other) : this() {
          size_ = other.size_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public FixedScale Clone() {
          return new FixedScale(this);
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 1;
        private long size_;
        /// <summary>
        /// Number of nodes in the node group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as FixedScale);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(FixedScale other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Size != other.Size) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Size != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Size);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(FixedScale other) {
          if (other == null) {
            return;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Size = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class NodeGroupAllocationPolicy : pb::IMessage<NodeGroupAllocationPolicy> {
    private static readonly pb::MessageParser<NodeGroupAllocationPolicy> _parser = new pb::MessageParser<NodeGroupAllocationPolicy>(() => new NodeGroupAllocationPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupAllocationPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy(NodeGroupAllocationPolicy other) : this() {
      locations_ = other.locations_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupAllocationPolicy Clone() {
      return new NodeGroupAllocationPolicy(this);
    }

    /// <summary>Field number for the "locations" field.</summary>
    public const int LocationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> _repeated_locations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.K8S.V1.NodeGroupLocation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> locations_ = new pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation>();
    /// <summary>
    /// List of locations where resources for the node group will be allocated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.K8S.V1.NodeGroupLocation> Locations {
      get { return locations_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupAllocationPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupAllocationPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locations_.Equals(other.locations_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= locations_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      locations_.WriteTo(output, _repeated_locations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += locations_.CalculateSize(_repeated_locations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupAllocationPolicy other) {
      if (other == null) {
        return;
      }
      locations_.Add(other.locations_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            locations_.AddEntriesFrom(input, _repeated_locations_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeGroupLocation : pb::IMessage<NodeGroupLocation> {
    private static readonly pb::MessageParser<NodeGroupLocation> _parser = new pb::MessageParser<NodeGroupLocation>(() => new NodeGroupLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation(NodeGroupLocation other) : this() {
      zoneId_ = other.zoneId_;
      subnetId_ = other.subnetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupLocation Clone() {
      return new NodeGroupLocation(this);
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 1;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the nodes may reside.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 2;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet. If a network chosen for the Kubernetes cluster has only one subnet in the specified zone, subnet ID may be omitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ZoneId != other.ZoneId) return false;
      if (SubnetId != other.SubnetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ZoneId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ZoneId);
      }
      if (SubnetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubnetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupLocation other) {
      if (other == null) {
        return;
      }
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ZoneId = input.ReadString();
            break;
          }
          case 18: {
            SubnetId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SchedulingPolicy : pb::IMessage<SchedulingPolicy> {
    private static readonly pb::MessageParser<SchedulingPolicy> _parser = new pb::MessageParser<SchedulingPolicy>(() => new SchedulingPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchedulingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy(SchedulingPolicy other) : this() {
      preemptible_ = other.preemptible_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchedulingPolicy Clone() {
      return new SchedulingPolicy(this);
    }

    /// <summary>Field number for the "preemptible" field.</summary>
    public const int PreemptibleFieldNumber = 1;
    private bool preemptible_;
    /// <summary>
    /// True for preemptible compute instances. Default value is false. Preemptible compute instances are stopped at least once every 24 hours, and can be stopped at any time
    /// if their resources are needed by Compute.
    /// For more information, see [Preemptible Virtual Machines](/docs/compute/concepts/preemptible-vm).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Preemptible {
      get { return preemptible_; }
      set {
        preemptible_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchedulingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchedulingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Preemptible != other.Preemptible) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Preemptible != false) hash ^= Preemptible.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Preemptible != false) {
        output.WriteRawTag(8);
        output.WriteBool(Preemptible);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Preemptible != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchedulingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.Preemptible != false) {
        Preemptible = other.Preemptible;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Preemptible = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class NodeGroupMaintenancePolicy : pb::IMessage<NodeGroupMaintenancePolicy> {
    private static readonly pb::MessageParser<NodeGroupMaintenancePolicy> _parser = new pb::MessageParser<NodeGroupMaintenancePolicy>(() => new NodeGroupMaintenancePolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeGroupMaintenancePolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.K8S.V1.NodeGroupReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy(NodeGroupMaintenancePolicy other) : this() {
      autoUpgrade_ = other.autoUpgrade_;
      autoRepair_ = other.autoRepair_;
      maintenanceWindow_ = other.maintenanceWindow_ != null ? other.maintenanceWindow_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeGroupMaintenancePolicy Clone() {
      return new NodeGroupMaintenancePolicy(this);
    }

    /// <summary>Field number for the "auto_upgrade" field.</summary>
    public const int AutoUpgradeFieldNumber = 1;
    private bool autoUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoUpgrade {
      get { return autoUpgrade_; }
      set {
        autoUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "auto_repair" field.</summary>
    public const int AutoRepairFieldNumber = 2;
    private bool autoRepair_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoRepair {
      get { return autoRepair_; }
      set {
        autoRepair_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_window" field.</summary>
    public const int MaintenanceWindowFieldNumber = 3;
    private global::Yandex.Cloud.K8S.V1.MaintenanceWindow maintenanceWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.K8S.V1.MaintenanceWindow MaintenanceWindow {
      get { return maintenanceWindow_; }
      set {
        maintenanceWindow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeGroupMaintenancePolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeGroupMaintenancePolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoUpgrade != other.AutoUpgrade) return false;
      if (AutoRepair != other.AutoRepair) return false;
      if (!object.Equals(MaintenanceWindow, other.MaintenanceWindow)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoUpgrade != false) hash ^= AutoUpgrade.GetHashCode();
      if (AutoRepair != false) hash ^= AutoRepair.GetHashCode();
      if (maintenanceWindow_ != null) hash ^= MaintenanceWindow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoUpgrade != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoUpgrade);
      }
      if (AutoRepair != false) {
        output.WriteRawTag(16);
        output.WriteBool(AutoRepair);
      }
      if (maintenanceWindow_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoUpgrade != false) {
        size += 1 + 1;
      }
      if (AutoRepair != false) {
        size += 1 + 1;
      }
      if (maintenanceWindow_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MaintenanceWindow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeGroupMaintenancePolicy other) {
      if (other == null) {
        return;
      }
      if (other.AutoUpgrade != false) {
        AutoUpgrade = other.AutoUpgrade;
      }
      if (other.AutoRepair != false) {
        AutoRepair = other.AutoRepair;
      }
      if (other.maintenanceWindow_ != null) {
        if (maintenanceWindow_ == null) {
          MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
        }
        MaintenanceWindow.MergeFrom(other.MaintenanceWindow);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AutoUpgrade = input.ReadBool();
            break;
          }
          case 16: {
            AutoRepair = input.ReadBool();
            break;
          }
          case 26: {
            if (maintenanceWindow_ == null) {
              MaintenanceWindow = new global::Yandex.Cloud.K8S.V1.MaintenanceWindow();
            }
            input.ReadMessage(MaintenanceWindow);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
