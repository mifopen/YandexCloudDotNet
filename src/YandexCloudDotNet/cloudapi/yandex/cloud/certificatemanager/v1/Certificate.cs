// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/certificatemanager/v1/certificate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Certificatemanager.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/certificatemanager/v1/certificate.proto</summary>
  internal static partial class CertificateReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/certificatemanager/v1/certificate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CertificateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjR5YW5kZXgvY2xvdWQvY2VydGlmaWNhdGVtYW5hZ2VyL3YxL2NlcnRpZmlj",
            "YXRlLnByb3RvEiJ5YW5kZXguY2xvdWQuY2VydGlmaWNhdGVtYW5hZ2VyLnYx",
            "Gh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvIsMGCgtDZXJ0aWZp",
            "Y2F0ZRIKCgJpZBgBIAEoCRIRCglmb2xkZXJfaWQYAiABKAkSLgoKY3JlYXRl",
            "ZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDAoEbmFt",
            "ZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRJLCgZsYWJlbHMYBiADKAsy",
            "Oy55YW5kZXguY2xvdWQuY2VydGlmaWNhdGVtYW5hZ2VyLnYxLkNlcnRpZmlj",
            "YXRlLkxhYmVsc0VudHJ5EkEKBHR5cGUYByABKA4yMy55YW5kZXguY2xvdWQu",
            "Y2VydGlmaWNhdGVtYW5hZ2VyLnYxLkNlcnRpZmljYXRlVHlwZRIPCgdkb21h",
            "aW5zGAggAygJEkYKBnN0YXR1cxgJIAEoDjI2LnlhbmRleC5jbG91ZC5jZXJ0",
            "aWZpY2F0ZW1hbmFnZXIudjEuQ2VydGlmaWNhdGUuU3RhdHVzEg4KBmlzc3Vl",
            "chgKIAEoCRIPCgdzdWJqZWN0GAsgASgJEg4KBnNlcmlhbBgMIAEoCRIuCgp1",
            "cGRhdGVkX2F0GA0gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIt",
            "Cglpc3N1ZWRfYXQYDiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "Ei0KCW5vdF9hZnRlchgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASLgoKbm90X2JlZm9yZRgQIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASQQoKY2hhbGxlbmdlcxgRIAMoCzItLnlhbmRleC5jbG91ZC5jZXJ0",
            "aWZpY2F0ZW1hbmFnZXIudjEuQ2hhbGxlbmdlGi0KC0xhYmVsc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEieAoGU3RhdHVzEhYKElNU",
            "QVRVU19VTlNQRUNJRklFRBAAEg4KClZBTElEQVRJTkcQARILCgdJTlZBTElE",
            "EAISCgoGSVNTVUVEEAMSCwoHUkVWT0tFRBAEEgwKCFJFTkVXSU5HEAUSEgoO",
            "UkVORVdBTF9GQUlMRUQQBiKMBQoJQ2hhbGxlbmdlEg4KBmRvbWFpbhgBIAEo",
            "CRI/CgR0eXBlGAIgASgOMjEueWFuZGV4LmNsb3VkLmNlcnRpZmljYXRlbWFu",
            "YWdlci52MS5DaGFsbGVuZ2VUeXBlEi4KCmNyZWF0ZWRfYXQYAyABKAsyGi5n",
            "b29nbGUucHJvdG9idWYuVGltZXN0YW1wEi4KCnVwZGF0ZWRfYXQYBCABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkQKBnN0YXR1cxgFIAEoDjI0",
            "LnlhbmRleC5jbG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuQ2hhbGxlbmdl",
            "LlN0YXR1cxIPCgdtZXNzYWdlGAYgASgJEg0KBWVycm9yGAcgASgJElAKDWRu",
            "c19jaGFsbGVuZ2UYCCABKAsyNy55YW5kZXguY2xvdWQuY2VydGlmaWNhdGVt",
            "YW5hZ2VyLnYxLkNoYWxsZW5nZS5EbnNSZWNvcmRIABJQCg5odHRwX2NoYWxs",
            "ZW5nZRgJIAEoCzI2LnlhbmRleC5jbG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIu",
            "djEuQ2hhbGxlbmdlLkh0dHBGaWxlSAAaNgoJRG5zUmVjb3JkEgwKBG5hbWUY",
            "ASABKAkSDAoEdHlwZRgCIAEoCRINCgV2YWx1ZRgDIAEoCRooCghIdHRwRmls",
            "ZRILCgN1cmwYASABKAkSDwoHY29udGVudBgCIAEoCSJVCgZTdGF0dXMSFgoS",
            "U1RBVFVTX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxABEg4KClBST0NFU1NJ",
            "TkcQAhIJCgVWQUxJRBADEgsKB0lOVkFMSUQQBEILCgljaGFsbGVuZ2UqTgoP",
            "Q2VydGlmaWNhdGVUeXBlEiAKHENFUlRJRklDQVRFX1RZUEVfVU5TUEVDSUZJ",
            "RUQQABIMCghJTVBPUlRFRBABEgsKB01BTkFHRUQQAipCCg1DaGFsbGVuZ2VU",
            "eXBlEh4KGkNIQUxMRU5HRV9UWVBFX1VOU1BFQ0lGSUVEEAASBwoDRE5TEAES",
            "CAoESFRUUBACQoMBCiZ5YW5kZXguY2xvdWQuYXBpLmNlcnRpZmljYXRlbWFu",
            "YWdlci52MVpZZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2NlcnRpZmljYXRlbWFuYWdlci92MTtjZXJ0aWZpY2F0",
            "ZW1hbmFnZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Certificatemanager.V1.CertificateType), typeof(global::Yandex.Cloud.Certificatemanager.V1.ChallengeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.Certificate), global::Yandex.Cloud.Certificatemanager.V1.Certificate.Parser, new[]{ "Id", "FolderId", "CreatedAt", "Name", "Description", "Labels", "Type", "Domains", "Status", "Issuer", "Subject", "Serial", "UpdatedAt", "IssuedAt", "NotAfter", "NotBefore", "Challenges" }, null, new[]{ typeof(global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.Challenge), global::Yandex.Cloud.Certificatemanager.V1.Challenge.Parser, new[]{ "Domain", "Type", "CreatedAt", "UpdatedAt", "Status", "Message", "Error", "DnsChallenge", "HttpChallenge" }, new[]{ "Challenge" }, new[]{ typeof(global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord), global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord.Parser, new[]{ "Name", "Type", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile), global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile.Parser, new[]{ "Url", "Content" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Supported certificate types.
  /// </summary>
  internal enum CertificateType {
    [pbr::OriginalName("CERTIFICATE_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// The certificate is imported by user.
    /// </summary>
    [pbr::OriginalName("IMPORTED")] Imported = 1,
    /// <summary>
    /// The certificate is created by service.
    /// </summary>
    [pbr::OriginalName("MANAGED")] Managed = 2,
  }

  /// <summary>
  /// Supported domain validation types.
  /// </summary>
  internal enum ChallengeType {
    [pbr::OriginalName("CHALLENGE_TYPE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// Domain validation type that using DNS-records.
    /// </summary>
    [pbr::OriginalName("DNS")] Dns = 1,
    /// <summary>
    /// Domain validation type that using HTTP-files.
    /// </summary>
    [pbr::OriginalName("HTTP")] Http = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A certificate. For details about the concept, see [documentation](docs/certificate-manager/concepts/).
  /// </summary>
  internal sealed partial class Certificate : pb::IMessage<Certificate> {
    private static readonly pb::MessageParser<Certificate> _parser = new pb::MessageParser<Certificate>(() => new Certificate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Certificate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate(Certificate other) : this() {
      id_ = other.id_;
      folderId_ = other.folderId_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      type_ = other.type_;
      domains_ = other.domains_.Clone();
      status_ = other.status_;
      issuer_ = other.issuer_;
      subject_ = other.subject_;
      serial_ = other.serial_;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      issuedAt_ = other.issuedAt_ != null ? other.issuedAt_.Clone() : null;
      notAfter_ = other.notAfter_ != null ? other.notAfter_.Clone() : null;
      notBefore_ = other.notBefore_ != null ? other.notBefore_.Clone() : null;
      challenges_ = other.challenges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Certificate Clone() {
      return new Certificate(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// ID of the certificate. Generated at creation time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 2;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder that the certificate belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Creation timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    /// <summary>
    /// Name of the certificate.
    /// The name is unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// Description of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 6;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 50);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Certificate labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 7;
    private global::Yandex.Cloud.Certificatemanager.V1.CertificateType type_ = global::Yandex.Cloud.Certificatemanager.V1.CertificateType.Unspecified;
    /// <summary>
    /// Type of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.CertificateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "domains" field.</summary>
    public const int DomainsFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_domains_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> domains_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fully qualified domain names of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Domains {
      get { return domains_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status status_ = global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status.Unspecified;
    /// <summary>
    /// Status of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 10;
    private string issuer_ = "";
    /// <summary>
    /// [Distinguished Name](https://tools.ietf.org/html/rfc1779) of the certificate authority that issued the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Issuer {
      get { return issuer_; }
      set {
        issuer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 11;
    private string subject_ = "";
    /// <summary>
    /// [Distinguished Name](https://tools.ietf.org/html/rfc1779) of the entity that is associated with the public key contained in the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serial" field.</summary>
    public const int SerialFieldNumber = 12;
    private string serial_ = "";
    /// <summary>
    /// Serial number of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Serial {
      get { return serial_; }
      set {
        serial_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    /// Time when the certificate is updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "issued_at" field.</summary>
    public const int IssuedAtFieldNumber = 14;
    private global::Google.Protobuf.WellKnownTypes.Timestamp issuedAt_;
    /// <summary>
    /// Time when the certificate is issued.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp IssuedAt {
      get { return issuedAt_; }
      set {
        issuedAt_ = value;
      }
    }

    /// <summary>Field number for the "not_after" field.</summary>
    public const int NotAfterFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp notAfter_;
    /// <summary>
    /// Time after which the certificate is not valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NotAfter {
      get { return notAfter_; }
      set {
        notAfter_ = value;
      }
    }

    /// <summary>Field number for the "not_before" field.</summary>
    public const int NotBeforeFieldNumber = 16;
    private global::Google.Protobuf.WellKnownTypes.Timestamp notBefore_;
    /// <summary>
    /// Time before which the certificate is not valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp NotBefore {
      get { return notBefore_; }
      set {
        notBefore_ = value;
      }
    }

    /// <summary>Field number for the "challenges" field.</summary>
    public const int ChallengesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Certificatemanager.V1.Challenge> _repeated_challenges_codec
        = pb::FieldCodec.ForMessage(138, global::Yandex.Cloud.Certificatemanager.V1.Challenge.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Challenge> challenges_ = new pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Challenge>();
    /// <summary>
    /// Domains validation challenges of the certificate. Used only for managed certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Challenge> Challenges {
      get { return challenges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Certificate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Certificate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FolderId != other.FolderId) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Type != other.Type) return false;
      if(!domains_.Equals(other.domains_)) return false;
      if (Status != other.Status) return false;
      if (Issuer != other.Issuer) return false;
      if (Subject != other.Subject) return false;
      if (Serial != other.Serial) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (!object.Equals(IssuedAt, other.IssuedAt)) return false;
      if (!object.Equals(NotAfter, other.NotAfter)) return false;
      if (!object.Equals(NotBefore, other.NotBefore)) return false;
      if(!challenges_.Equals(other.challenges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.CertificateType.Unspecified) hash ^= Type.GetHashCode();
      hash ^= domains_.GetHashCode();
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (Issuer.Length != 0) hash ^= Issuer.GetHashCode();
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Serial.Length != 0) hash ^= Serial.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (issuedAt_ != null) hash ^= IssuedAt.GetHashCode();
      if (notAfter_ != null) hash ^= NotAfter.GetHashCode();
      if (notBefore_ != null) hash ^= NotBefore.GetHashCode();
      hash ^= challenges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (FolderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FolderId);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.CertificateType.Unspecified) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Type);
      }
      domains_.WriteTo(output, _repeated_domains_codec);
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status.Unspecified) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (Issuer.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Issuer);
      }
      if (Subject.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Subject);
      }
      if (Serial.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Serial);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(UpdatedAt);
      }
      if (issuedAt_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(IssuedAt);
      }
      if (notAfter_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(NotAfter);
      }
      if (notBefore_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(NotBefore);
      }
      challenges_.WriteTo(output, _repeated_challenges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.CertificateType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += domains_.CalculateSize(_repeated_domains_codec);
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Issuer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Issuer);
      }
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Serial.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Serial);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (issuedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IssuedAt);
      }
      if (notAfter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotAfter);
      }
      if (notBefore_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotBefore);
      }
      size += challenges_.CalculateSize(_repeated_challenges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Certificate other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Type != global::Yandex.Cloud.Certificatemanager.V1.CertificateType.Unspecified) {
        Type = other.Type;
      }
      domains_.Add(other.domains_);
      if (other.Status != global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.Issuer.Length != 0) {
        Issuer = other.Issuer;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Serial.Length != 0) {
        Serial = other.Serial;
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      if (other.issuedAt_ != null) {
        if (issuedAt_ == null) {
          IssuedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        IssuedAt.MergeFrom(other.IssuedAt);
      }
      if (other.notAfter_ != null) {
        if (notAfter_ == null) {
          NotAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NotAfter.MergeFrom(other.NotAfter);
      }
      if (other.notBefore_ != null) {
        if (notBefore_ == null) {
          NotBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        NotBefore.MergeFrom(other.NotBefore);
      }
      challenges_.Add(other.challenges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            FolderId = input.ReadString();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 56: {
            Type = (global::Yandex.Cloud.Certificatemanager.V1.CertificateType) input.ReadEnum();
            break;
          }
          case 66: {
            domains_.AddEntriesFrom(input, _repeated_domains_codec);
            break;
          }
          case 72: {
            Status = (global::Yandex.Cloud.Certificatemanager.V1.Certificate.Types.Status) input.ReadEnum();
            break;
          }
          case 82: {
            Issuer = input.ReadString();
            break;
          }
          case 90: {
            Subject = input.ReadString();
            break;
          }
          case 98: {
            Serial = input.ReadString();
            break;
          }
          case 106: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 114: {
            if (issuedAt_ == null) {
              IssuedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(IssuedAt);
            break;
          }
          case 122: {
            if (notAfter_ == null) {
              NotAfter = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NotAfter);
            break;
          }
          case 130: {
            if (notBefore_ == null) {
              NotBefore = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(NotBefore);
            break;
          }
          case 138: {
            challenges_.AddEntriesFrom(input, _repeated_challenges_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Certificate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The certificate domains validation are required. Used only for managed certificates.
        /// </summary>
        [pbr::OriginalName("VALIDATING")] Validating = 1,
        /// <summary>
        /// The certificate issuance is failed. Used only for managed certificates.
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 2,
        /// <summary>
        /// The certificate is issued.
        /// </summary>
        [pbr::OriginalName("ISSUED")] Issued = 3,
        /// <summary>
        /// The certificate is revoked.
        /// </summary>
        [pbr::OriginalName("REVOKED")] Revoked = 4,
        /// <summary>
        /// The certificate renewal is started. Used only for managed certificates.
        /// </summary>
        [pbr::OriginalName("RENEWING")] Renewing = 5,
        /// <summary>
        /// The certificate renewal is failed. Used only for managed certificates.
        /// </summary>
        [pbr::OriginalName("RENEWAL_FAILED")] RenewalFailed = 6,
      }

    }
    #endregion

  }

  /// <summary>
  /// Domain validation challenge.
  /// </summary>
  internal sealed partial class Challenge : pb::IMessage<Challenge> {
    private static readonly pb::MessageParser<Challenge> _parser = new pb::MessageParser<Challenge>(() => new Challenge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Challenge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge(Challenge other) : this() {
      domain_ = other.domain_;
      type_ = other.type_;
      createdAt_ = other.createdAt_ != null ? other.createdAt_.Clone() : null;
      updatedAt_ = other.updatedAt_ != null ? other.updatedAt_.Clone() : null;
      status_ = other.status_;
      message_ = other.message_;
      error_ = other.error_;
      switch (other.ChallengeCase) {
        case ChallengeOneofCase.DnsChallenge:
          DnsChallenge = other.DnsChallenge.Clone();
          break;
        case ChallengeOneofCase.HttpChallenge:
          HttpChallenge = other.HttpChallenge.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Challenge Clone() {
      return new Challenge(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// Domain of the challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Yandex.Cloud.Certificatemanager.V1.ChallengeType type_ = global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified;
    /// <summary>
    /// Type of the challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.ChallengeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "created_at" field.</summary>
    public const int CreatedAtFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    /// <summary>
    /// Time when the challenge is created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreatedAt {
      get { return createdAt_; }
      set {
        createdAt_ = value;
      }
    }

    /// <summary>Field number for the "updated_at" field.</summary>
    public const int UpdatedAtFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Timestamp updatedAt_;
    /// <summary>
    /// Time when the challenge is updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UpdatedAt {
      get { return updatedAt_; }
      set {
        updatedAt_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status status_ = global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status.Unspecified;
    /// <summary>
    /// Status of the challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 6;
    private string message_ = "";
    /// <summary>
    /// Description of the challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    private string error_ = "";
    /// <summary>
    /// Error of the challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dns_challenge" field.</summary>
    public const int DnsChallengeFieldNumber = 8;
    /// <summary>
    /// DNS-record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord DnsChallenge {
      get { return challengeCase_ == ChallengeOneofCase.DnsChallenge ? (global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord) challenge_ : null; }
      set {
        challenge_ = value;
        challengeCase_ = value == null ? ChallengeOneofCase.None : ChallengeOneofCase.DnsChallenge;
      }
    }

    /// <summary>Field number for the "http_challenge" field.</summary>
    public const int HttpChallengeFieldNumber = 9;
    /// <summary>
    /// HTTP-file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile HttpChallenge {
      get { return challengeCase_ == ChallengeOneofCase.HttpChallenge ? (global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile) challenge_ : null; }
      set {
        challenge_ = value;
        challengeCase_ = value == null ? ChallengeOneofCase.None : ChallengeOneofCase.HttpChallenge;
      }
    }

    private object challenge_;
    /// <summary>Enum of possible cases for the "challenge" oneof.</summary>
    public enum ChallengeOneofCase {
      None = 0,
      DnsChallenge = 8,
      HttpChallenge = 9,
    }
    private ChallengeOneofCase challengeCase_ = ChallengeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChallengeOneofCase ChallengeCase {
      get { return challengeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChallenge() {
      challengeCase_ = ChallengeOneofCase.None;
      challenge_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Challenge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Challenge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(CreatedAt, other.CreatedAt)) return false;
      if (!object.Equals(UpdatedAt, other.UpdatedAt)) return false;
      if (Status != other.Status) return false;
      if (Message != other.Message) return false;
      if (Error != other.Error) return false;
      if (!object.Equals(DnsChallenge, other.DnsChallenge)) return false;
      if (!object.Equals(HttpChallenge, other.HttpChallenge)) return false;
      if (ChallengeCase != other.ChallengeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) hash ^= Type.GetHashCode();
      if (createdAt_ != null) hash ^= CreatedAt.GetHashCode();
      if (updatedAt_ != null) hash ^= UpdatedAt.GetHashCode();
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status.Unspecified) hash ^= Status.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (challengeCase_ == ChallengeOneofCase.DnsChallenge) hash ^= DnsChallenge.GetHashCode();
      if (challengeCase_ == ChallengeOneofCase.HttpChallenge) hash ^= HttpChallenge.GetHashCode();
      hash ^= (int) challengeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (createdAt_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CreatedAt);
      }
      if (updatedAt_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(UpdatedAt);
      }
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status.Unspecified) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Message);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Error);
      }
      if (challengeCase_ == ChallengeOneofCase.DnsChallenge) {
        output.WriteRawTag(66);
        output.WriteMessage(DnsChallenge);
      }
      if (challengeCase_ == ChallengeOneofCase.HttpChallenge) {
        output.WriteRawTag(74);
        output.WriteMessage(HttpChallenge);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Type != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (createdAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedAt);
      }
      if (updatedAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdatedAt);
      }
      if (Status != global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (challengeCase_ == ChallengeOneofCase.DnsChallenge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DnsChallenge);
      }
      if (challengeCase_ == ChallengeOneofCase.HttpChallenge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HttpChallenge);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Challenge other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Type != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        Type = other.Type;
      }
      if (other.createdAt_ != null) {
        if (createdAt_ == null) {
          CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreatedAt.MergeFrom(other.CreatedAt);
      }
      if (other.updatedAt_ != null) {
        if (updatedAt_ == null) {
          UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UpdatedAt.MergeFrom(other.UpdatedAt);
      }
      if (other.Status != global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status.Unspecified) {
        Status = other.Status;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      switch (other.ChallengeCase) {
        case ChallengeOneofCase.DnsChallenge:
          if (DnsChallenge == null) {
            DnsChallenge = new global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord();
          }
          DnsChallenge.MergeFrom(other.DnsChallenge);
          break;
        case ChallengeOneofCase.HttpChallenge:
          if (HttpChallenge == null) {
            HttpChallenge = new global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile();
          }
          HttpChallenge.MergeFrom(other.HttpChallenge);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Yandex.Cloud.Certificatemanager.V1.ChallengeType) input.ReadEnum();
            break;
          }
          case 26: {
            if (createdAt_ == null) {
              CreatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreatedAt);
            break;
          }
          case 34: {
            if (updatedAt_ == null) {
              UpdatedAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UpdatedAt);
            break;
          }
          case 40: {
            Status = (global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.Status) input.ReadEnum();
            break;
          }
          case 50: {
            Message = input.ReadString();
            break;
          }
          case 58: {
            Error = input.ReadString();
            break;
          }
          case 66: {
            global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord subBuilder = new global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.DnsRecord();
            if (challengeCase_ == ChallengeOneofCase.DnsChallenge) {
              subBuilder.MergeFrom(DnsChallenge);
            }
            input.ReadMessage(subBuilder);
            DnsChallenge = subBuilder;
            break;
          }
          case 74: {
            global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile subBuilder = new global::Yandex.Cloud.Certificatemanager.V1.Challenge.Types.HttpFile();
            if (challengeCase_ == ChallengeOneofCase.HttpChallenge) {
              subBuilder.MergeFrom(HttpChallenge);
            }
            input.ReadMessage(subBuilder);
            HttpChallenge = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Challenge message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Status {
        [pbr::OriginalName("STATUS_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// The challenge is waiting to be completed.
        /// </summary>
        [pbr::OriginalName("PENDING")] Pending = 1,
        /// <summary>
        /// The challenge is awaiting approval from Let's Encrypt.
        /// </summary>
        [pbr::OriginalName("PROCESSING")] Processing = 2,
        /// <summary>
        /// The challenge is complete.
        /// </summary>
        [pbr::OriginalName("VALID")] Valid = 3,
        /// <summary>
        /// The rights check for a specific domain failed or the one-week period allocated for the check expired.
        /// </summary>
        [pbr::OriginalName("INVALID")] Invalid = 4,
      }

      internal sealed partial class DnsRecord : pb::IMessage<DnsRecord> {
        private static readonly pb::MessageParser<DnsRecord> _parser = new pb::MessageParser<DnsRecord>(() => new DnsRecord());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DnsRecord> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Certificatemanager.V1.Challenge.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DnsRecord() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DnsRecord(DnsRecord other) : this() {
          name_ = other.name_;
          type_ = other.type_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DnsRecord Clone() {
          return new DnsRecord(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name of the DNS record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private string type_ = "";
        /// <summary>
        /// Type of the DNS-record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Type {
          get { return type_; }
          set {
            type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private string value_ = "";
        /// <summary>
        /// Value of the DNS-record.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DnsRecord);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DnsRecord other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type.Length != 0) hash ^= Type.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Type.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Type);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DnsRecord other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type.Length != 0) {
            Type = other.Type;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Type = input.ReadString();
                break;
              }
              case 26: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

      internal sealed partial class HttpFile : pb::IMessage<HttpFile> {
        private static readonly pb::MessageParser<HttpFile> _parser = new pb::MessageParser<HttpFile>(() => new HttpFile());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<HttpFile> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Certificatemanager.V1.Challenge.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpFile() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpFile(HttpFile other) : this() {
          url_ = other.url_;
          content_ = other.content_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public HttpFile Clone() {
          return new HttpFile(this);
        }

        /// <summary>Field number for the "url" field.</summary>
        public const int UrlFieldNumber = 1;
        private string url_ = "";
        /// <summary>
        /// Location of the HTTP file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Url {
          get { return url_; }
          set {
            url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "content" field.</summary>
        public const int ContentFieldNumber = 2;
        private string content_ = "";
        /// <summary>
        /// Content of the HTTP file.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Content {
          get { return content_; }
          set {
            content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as HttpFile);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(HttpFile other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Url != other.Url) return false;
          if (Content != other.Content) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          if (Content.Length != 0) hash ^= Content.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Url.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Url);
          }
          if (Content.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Content);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          if (Content.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(HttpFile other) {
          if (other == null) {
            return;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
          if (other.Content.Length != 0) {
            Content = other.Content;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Url = input.ReadString();
                break;
              }
              case 18: {
                Content = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
