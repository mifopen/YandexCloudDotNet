// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/certificatemanager/v1/certificate_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Certificatemanager.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/certificatemanager/v1/certificate_service.proto</summary>
  internal static partial class CertificateServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/certificatemanager/v1/certificate_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CertificateServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cjx5YW5kZXgvY2xvdWQvY2VydGlmaWNhdGVtYW5hZ2VyL3YxL2NlcnRpZmlj",
            "YXRlX3NlcnZpY2UucHJvdG8SInlhbmRleC5jbG91ZC5jZXJ0aWZpY2F0ZW1h",
            "bmFnZXIudjEaHGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aIGdvb2ds",
            "ZS9wcm90b2J1Zi9maWVsZF9tYXNrLnByb3RvGiB5YW5kZXgvY2xvdWQvYXBp",
            "L29wZXJhdGlvbi5wcm90bxomeWFuZGV4L2Nsb3VkL29wZXJhdGlvbi9vcGVy",
            "YXRpb24ucHJvdG8aHXlhbmRleC9jbG91ZC92YWxpZGF0aW9uLnByb3RvGjR5",
            "YW5kZXgvY2xvdWQvY2VydGlmaWNhdGVtYW5hZ2VyL3YxL2NlcnRpZmljYXRl",
            "LnByb3RvGiB5YW5kZXgvY2xvdWQvYWNjZXNzL2FjY2Vzcy5wcm90byKAAQoV",
            "R2V0Q2VydGlmaWNhdGVSZXF1ZXN0EiQKDmNlcnRpZmljYXRlX2lkGAEgASgJ",
            "QgzoxzEBisgxBDw9NTASQQoEdmlldxgCIAEoDjIzLnlhbmRleC5jbG91ZC5j",
            "ZXJ0aWZpY2F0ZW1hbmFnZXIudjEuQ2VydGlmaWNhdGVWaWV3IrsBChdMaXN0",
            "Q2VydGlmaWNhdGVzUmVxdWVzdBIfCglmb2xkZXJfaWQYASABKAlCDOjHMQGK",
            "yDEEPD01MBIdCglwYWdlX3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFn",
            "ZV90b2tlbhgDIAEoCUIJisgxBTw9MTAwEkEKBHZpZXcYBiABKA4yMy55YW5k",
            "ZXguY2xvdWQuY2VydGlmaWNhdGVtYW5hZ2VyLnYxLkNlcnRpZmljYXRlVmll",
            "dyJ6ChhMaXN0Q2VydGlmaWNhdGVzUmVzcG9uc2USRQoMY2VydGlmaWNhdGVz",
            "GAEgAygLMi8ueWFuZGV4LmNsb3VkLmNlcnRpZmljYXRlbWFuYWdlci52MS5D",
            "ZXJ0aWZpY2F0ZRIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiwgMKGENyZWF0",
            "ZUNlcnRpZmljYXRlUmVxdWVzdBIfCglmb2xkZXJfaWQYASABKAlCDOjHMQGK",
            "yDEEPD01MBIyCgRuYW1lGAIgASgJQiTyxzEgfFthLXpdKFstYS16MC05XXsw",
            "LDYxfVthLXowLTldKT8SHwoLZGVzY3JpcHRpb24YAyABKAlCCorIMQY8PTEw",
            "MjQSmQEKBmxhYmVscxgEIAMoCzJILnlhbmRleC5jbG91ZC5jZXJ0aWZpY2F0",
            "ZW1hbmFnZXIudjEuQ3JlYXRlQ2VydGlmaWNhdGVSZXF1ZXN0LkxhYmVsc0Vu",
            "dHJ5Qj+CyDEEPD02NIrIMQQ8PTYz8scxC1stXzAtOWEtel0qssgxBhoEPD02",
            "M7LIMRISEFthLXpdWy1fMC05YS16XSoSIAoLY2VydGlmaWNhdGUYBSABKAlC",
            "C4rIMQc8PTMyNzY4EhwKBWNoYWluGAYgASgJQg2KyDEJPD0yMDk3MTUyEiUK",
            "C3ByaXZhdGVfa2V5GAcgASgJQhDoxzEBisgxCDEtNTI0Mjg4Gi0KC0xhYmVs",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiMwoZQ3Jl",
            "YXRlQ2VydGlmaWNhdGVNZXRhZGF0YRIWCg5jZXJ0aWZpY2F0ZV9pZBgBIAEo",
            "CSL0AwoYVXBkYXRlQ2VydGlmaWNhdGVSZXF1ZXN0EiQKDmNlcnRpZmljYXRl",
            "X2lkGAEgASgJQgzoxzEBisgxBDw9NTASLwoLdXBkYXRlX21hc2sYAiABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrEjIKBG5hbWUYAyABKAlCJPLH",
            "MSB8W2Etel0oWy1hLXowLTldezAsNjF9W2EtejAtOV0pPxIfCgtkZXNjcmlw",
            "dGlvbhgEIAEoCUIKisgxBjw9MTAyNBKZAQoGbGFiZWxzGAUgAygLMkgueWFu",
            "ZGV4LmNsb3VkLmNlcnRpZmljYXRlbWFuYWdlci52MS5VcGRhdGVDZXJ0aWZp",
            "Y2F0ZVJlcXVlc3QuTGFiZWxzRW50cnlCP4LIMQQ8PTY0isgxBDw9NjPyxzEL",
            "Wy1fMC05YS16XSqyyDEGGgQ8PTYzssgxEhIQW2Etel1bLV8wLTlhLXpdKhIg",
            "CgtjZXJ0aWZpY2F0ZRgGIAEoCUILisgxBzw9MzI3NjgSHAoFY2hhaW4YByAB",
            "KAlCDYrIMQk8PTIwOTcxNTISIQoLcHJpdmF0ZV9rZXkYCCABKAlCDIrIMQg8",
            "PTUyNDI4OBotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIjMKGVVwZGF0ZUNlcnRpZmljYXRlTWV0YWRhdGESFgoOY2Vy",
            "dGlmaWNhdGVfaWQYASABKAkiQAoYRGVsZXRlQ2VydGlmaWNhdGVSZXF1ZXN0",
            "EiQKDmNlcnRpZmljYXRlX2lkGAEgASgJQgzoxzEBisgxBDw9NTAiMwoZRGVs",
            "ZXRlQ2VydGlmaWNhdGVNZXRhZGF0YRIWCg5jZXJ0aWZpY2F0ZV9pZBgBIAEo",
            "CSK/AwocUmVxdWVzdE5ld0NlcnRpZmljYXRlUmVxdWVzdBIfCglmb2xkZXJf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MBIyCgRuYW1lGAIgASgJQiTyxzEgfFth",
            "LXpdKFstYS16MC05XXswLDYxfVthLXowLTldKT8SHwoLZGVzY3JpcHRpb24Y",
            "AyABKAlCCorIMQY8PTEwMjQSnQEKBmxhYmVscxgEIAMoCzJMLnlhbmRleC5j",
            "bG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuUmVxdWVzdE5ld0NlcnRpZmlj",
            "YXRlUmVxdWVzdC5MYWJlbHNFbnRyeUI/gsgxBDw9NjSKyDEEPD02M/LHMQtb",
            "LV8wLTlhLXpdKrLIMQYaBDw9NjOyyDESEhBbYS16XVstXzAtOWEtel0qEg8K",
            "B2RvbWFpbnMYBSADKAkSSQoOY2hhbGxlbmdlX3R5cGUYBiABKA4yMS55YW5k",
            "ZXguY2xvdWQuY2VydGlmaWNhdGVtYW5hZ2VyLnYxLkNoYWxsZW5nZVR5cGUa",
            "LQoLTGFiZWxzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ASI3Ch1SZXF1ZXN0TmV3Q2VydGlmaWNhdGVNZXRhZGF0YRIWCg5jZXJ0aWZp",
            "Y2F0ZV9pZBgBIAEoCSKGAQogTGlzdENlcnRpZmljYXRlT3BlcmF0aW9uc1Jl",
            "cXVlc3QSJAoOY2VydGlmaWNhdGVfaWQYASABKAlCDOjHMQGKyDEEPD01MBId",
            "CglwYWdlX3NpemUYAiABKANCCvrHMQY8PTEwMDASHQoKcGFnZV90b2tlbhgD",
            "IAEoCUIJisgxBTw9MTAwInMKIUxpc3RDZXJ0aWZpY2F0ZU9wZXJhdGlvbnNS",
            "ZXNwb25zZRI1CgpvcGVyYXRpb25zGAEgAygLMiEueWFuZGV4LmNsb3VkLm9w",
            "ZXJhdGlvbi5PcGVyYXRpb24SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJKiYK",
            "D0NlcnRpZmljYXRlVmlldxIJCgVCQVNJQxAAEggKBEZVTEwQATL+EAoSQ2Vy",
            "dGlmaWNhdGVTZXJ2aWNlErABCgNHZXQSOS55YW5kZXguY2xvdWQuY2VydGlm",
            "aWNhdGVtYW5hZ2VyLnYxLkdldENlcnRpZmljYXRlUmVxdWVzdBovLnlhbmRl",
            "eC5jbG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuQ2VydGlmaWNhdGUiPYLT",
            "5JMCNxI1L2NlcnRpZmljYXRlLW1hbmFnZXIvdjEvY2VydGlmaWNhdGVzL3tj",
            "ZXJ0aWZpY2F0ZV9pZH0SrwEKBExpc3QSOy55YW5kZXguY2xvdWQuY2VydGlm",
            "aWNhdGVtYW5hZ2VyLnYxLkxpc3RDZXJ0aWZpY2F0ZXNSZXF1ZXN0GjwueWFu",
            "ZGV4LmNsb3VkLmNlcnRpZmljYXRlbWFuYWdlci52MS5MaXN0Q2VydGlmaWNh",
            "dGVzUmVzcG9uc2UiLILT5JMCJhIkL2NlcnRpZmljYXRlLW1hbmFnZXIvdjEv",
            "Y2VydGlmaWNhdGVzEsYBCgZDcmVhdGUSPC55YW5kZXguY2xvdWQuY2VydGlm",
            "aWNhdGVtYW5hZ2VyLnYxLkNyZWF0ZUNlcnRpZmljYXRlUmVxdWVzdBohLnlh",
            "bmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uIluC0+STAikiJC9jZXJ0",
            "aWZpY2F0ZS1tYW5hZ2VyL3YxL2NlcnRpZmljYXRlczoBKrLSKigKGUNyZWF0",
            "ZUNlcnRpZmljYXRlTWV0YWRhdGESC0NlcnRpZmljYXRlEtcBCgZVcGRhdGUS",
            "PC55YW5kZXguY2xvdWQuY2VydGlmaWNhdGVtYW5hZ2VyLnYxLlVwZGF0ZUNl",
            "cnRpZmljYXRlUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3Bl",
            "cmF0aW9uImyC0+STAjoyNS9jZXJ0aWZpY2F0ZS1tYW5hZ2VyL3YxL2NlcnRp",
            "ZmljYXRlcy97Y2VydGlmaWNhdGVfaWR9OgEqstIqKAoZVXBkYXRlQ2VydGlm",
            "aWNhdGVNZXRhZGF0YRILQ2VydGlmaWNhdGUS1AEKBkRlbGV0ZRI8LnlhbmRl",
            "eC5jbG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuRGVsZXRlQ2VydGlmaWNh",
            "dGVSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24i",
            "aYLT5JMCNyo1L2NlcnRpZmljYXRlLW1hbmFnZXIvdjEvY2VydGlmaWNhdGVz",
            "L3tjZXJ0aWZpY2F0ZV9pZH2y0iooChlEZWxldGVDZXJ0aWZpY2F0ZU1ldGFk",
            "YXRhEgtDZXJ0aWZpY2F0ZRLdAQoKUmVxdWVzdE5ldxJALnlhbmRleC5jbG91",
            "ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuUmVxdWVzdE5ld0NlcnRpZmljYXRl",
            "UmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24uT3BlcmF0aW9uImqC",
            "0+STAjQiLy9jZXJ0aWZpY2F0ZS1tYW5hZ2VyL3YxL2NlcnRpZmljYXRlcy9y",
            "ZXF1ZXN0TmV3OgEqstIqLAodUmVxdWVzdE5ld0NlcnRpZmljYXRlTWV0YWRh",
            "dGESC0NlcnRpZmljYXRlEucBCg5MaXN0T3BlcmF0aW9ucxJELnlhbmRleC5j",
            "bG91ZC5jZXJ0aWZpY2F0ZW1hbmFnZXIudjEuTGlzdENlcnRpZmljYXRlT3Bl",
            "cmF0aW9uc1JlcXVlc3QaRS55YW5kZXguY2xvdWQuY2VydGlmaWNhdGVtYW5h",
            "Z2VyLnYxLkxpc3RDZXJ0aWZpY2F0ZU9wZXJhdGlvbnNSZXNwb25zZSJIgtPk",
            "kwJCEkAvY2VydGlmaWNhdGUtbWFuYWdlci92MS9jZXJ0aWZpY2F0ZXMve2Nl",
            "cnRpZmljYXRlX2lkfS9vcGVyYXRpb25zEsQBChJMaXN0QWNjZXNzQmluZGlu",
            "Z3MSLi55YW5kZXguY2xvdWQuYWNjZXNzLkxpc3RBY2Nlc3NCaW5kaW5nc1Jl",
            "cXVlc3QaLy55YW5kZXguY2xvdWQuYWNjZXNzLkxpc3RBY2Nlc3NCaW5kaW5n",
            "c1Jlc3BvbnNlIk2C0+STAkcSRS9jZXJ0aWZpY2F0ZS1tYW5hZ2VyL3YxL2Nl",
            "cnRpZmljYXRlcy97cmVzb3VyY2VfaWR9Omxpc3RBY2Nlc3NCaW5kaW5ncxL0",
            "AQoRU2V0QWNjZXNzQmluZGluZ3MSLS55YW5kZXguY2xvdWQuYWNjZXNzLlNl",
            "dEFjY2Vzc0JpbmRpbmdzUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRp",
            "b24uT3BlcmF0aW9uIowBgtPkkwJJIkQvY2VydGlmaWNhdGUtbWFuYWdlci92",
            "MS9jZXJ0aWZpY2F0ZXMve3Jlc291cmNlX2lkfTpzZXRBY2Nlc3NCaW5kaW5n",
            "czoBKrLSKjkKIGFjY2Vzcy5TZXRBY2Nlc3NCaW5kaW5nc01ldGFkYXRhEhVn",
            "b29nbGUucHJvdG9idWYuRW1wdHkSgAIKFFVwZGF0ZUFjY2Vzc0JpbmRpbmdz",
            "EjAueWFuZGV4LmNsb3VkLmFjY2Vzcy5VcGRhdGVBY2Nlc3NCaW5kaW5nc1Jl",
            "cXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiKSAYLT",
            "5JMCTCJHL2NlcnRpZmljYXRlLW1hbmFnZXIvdjEvY2VydGlmaWNhdGVzL3ty",
            "ZXNvdXJjZV9pZH06dXBkYXRlQWNjZXNzQmluZGluZ3M6ASqy0io8CiNhY2Nl",
            "c3MuVXBkYXRlQWNjZXNzQmluZGluZ3NNZXRhZGF0YRIVZ29vZ2xlLnByb3Rv",
            "YnVmLkVtcHR5QoMBCiZ5YW5kZXguY2xvdWQuYXBpLmNlcnRpZmljYXRlbWFu",
            "YWdlci52MVpZZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2NlcnRpZmljYXRlbWFuYWdlci92MTtjZXJ0aWZpY2F0",
            "ZW1hbmFnZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Cloud.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, global::Yandex.Cloud.Certificatemanager.V1.CertificateReflection.Descriptor, global::Yandex.Cloud.Access.AccessReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Certificatemanager.V1.CertificateView), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.GetCertificateRequest), global::Yandex.Cloud.Certificatemanager.V1.GetCertificateRequest.Parser, new[]{ "CertificateId", "View" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.ListCertificatesRequest), global::Yandex.Cloud.Certificatemanager.V1.ListCertificatesRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "View" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.ListCertificatesResponse), global::Yandex.Cloud.Certificatemanager.V1.ListCertificatesResponse.Parser, new[]{ "Certificates", "NextPageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.CreateCertificateRequest), global::Yandex.Cloud.Certificatemanager.V1.CreateCertificateRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "Certificate", "Chain", "PrivateKey" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.CreateCertificateMetadata), global::Yandex.Cloud.Certificatemanager.V1.CreateCertificateMetadata.Parser, new[]{ "CertificateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.UpdateCertificateRequest), global::Yandex.Cloud.Certificatemanager.V1.UpdateCertificateRequest.Parser, new[]{ "CertificateId", "UpdateMask", "Name", "Description", "Labels", "Certificate", "Chain", "PrivateKey" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.UpdateCertificateMetadata), global::Yandex.Cloud.Certificatemanager.V1.UpdateCertificateMetadata.Parser, new[]{ "CertificateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.DeleteCertificateRequest), global::Yandex.Cloud.Certificatemanager.V1.DeleteCertificateRequest.Parser, new[]{ "CertificateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.DeleteCertificateMetadata), global::Yandex.Cloud.Certificatemanager.V1.DeleteCertificateMetadata.Parser, new[]{ "CertificateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.RequestNewCertificateRequest), global::Yandex.Cloud.Certificatemanager.V1.RequestNewCertificateRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "Domains", "ChallengeType" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.RequestNewCertificateMetadata), global::Yandex.Cloud.Certificatemanager.V1.RequestNewCertificateMetadata.Parser, new[]{ "CertificateId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.ListCertificateOperationsRequest), global::Yandex.Cloud.Certificatemanager.V1.ListCertificateOperationsRequest.Parser, new[]{ "CertificateId", "PageSize", "PageToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Certificatemanager.V1.ListCertificateOperationsResponse), global::Yandex.Cloud.Certificatemanager.V1.ListCertificateOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum CertificateView {
    /// <summary>
    /// Output basic information about the certificate.
    /// </summary>
    [pbr::OriginalName("BASIC")] Basic = 0,
    /// <summary>
    /// Output full information about the certificate including domain challenges.
    /// </summary>
    [pbr::OriginalName("FULL")] Full = 1,
  }

  #endregion

  #region Messages
  internal sealed partial class GetCertificateRequest : pb::IMessage<GetCertificateRequest> {
    private static readonly pb::MessageParser<GetCertificateRequest> _parser = new pb::MessageParser<GetCertificateRequest>(() => new GetCertificateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCertificateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCertificateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCertificateRequest(GetCertificateRequest other) : this() {
      certificateId_ = other.certificateId_;
      view_ = other.view_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCertificateRequest Clone() {
      return new GetCertificateRequest(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate to return.
    ///
    /// To get the ID of a certificate use a [CertificateService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 2;
    private global::Yandex.Cloud.Certificatemanager.V1.CertificateView view_ = global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic;
    /// <summary>
    /// The output type of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.CertificateView View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCertificateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCertificateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      if (View != other.View) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) hash ^= View.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        output.WriteRawTag(16);
        output.WriteEnum((int) View);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCertificateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      if (other.View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        View = other.View;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
          case 16: {
            View = (global::Yandex.Cloud.Certificatemanager.V1.CertificateView) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListCertificatesRequest : pb::IMessage<ListCertificatesRequest> {
    private static readonly pb::MessageParser<ListCertificatesRequest> _parser = new pb::MessageParser<ListCertificatesRequest>(() => new ListCertificatesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCertificatesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesRequest(ListCertificatesRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      view_ = other.view_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesRequest Clone() {
      return new ListCertificatesRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to list certificate in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than `page_size`, the service returns a [ListCertificatesResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set `page_token` to the
    /// [ListCertificatesResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 6;
    private global::Yandex.Cloud.Certificatemanager.V1.CertificateView view_ = global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic;
    /// <summary>
    /// The output type of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.CertificateView View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCertificatesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCertificatesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (View != other.View) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) hash ^= View.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        output.WriteRawTag(48);
        output.WriteEnum((int) View);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCertificatesRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.View != global::Yandex.Cloud.Certificatemanager.V1.CertificateView.Basic) {
        View = other.View;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 48: {
            View = (global::Yandex.Cloud.Certificatemanager.V1.CertificateView) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListCertificatesResponse : pb::IMessage<ListCertificatesResponse> {
    private static readonly pb::MessageParser<ListCertificatesResponse> _parser = new pb::MessageParser<ListCertificatesResponse>(() => new ListCertificatesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCertificatesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesResponse(ListCertificatesResponse other) : this() {
      certificates_ = other.certificates_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificatesResponse Clone() {
      return new ListCertificatesResponse(this);
    }

    /// <summary>Field number for the "certificates" field.</summary>
    public const int CertificatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Certificatemanager.V1.Certificate> _repeated_certificates_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Certificatemanager.V1.Certificate.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Certificate> certificates_ = new pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Certificate>();
    /// <summary>
    /// List of certificates in the specified folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Certificatemanager.V1.Certificate> Certificates {
      get { return certificates_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number
    /// of results is greater than the specified [ListCertificatesRequest.page_size], use
    /// the `next_page_token` as the value for the [ListCertificatesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCertificatesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCertificatesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!certificates_.Equals(other.certificates_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= certificates_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      certificates_.WriteTo(output, _repeated_certificates_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += certificates_.CalculateSize(_repeated_certificates_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCertificatesResponse other) {
      if (other == null) {
        return;
      }
      certificates_.Add(other.certificates_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            certificates_.AddEntriesFrom(input, _repeated_certificates_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateCertificateRequest : pb::IMessage<CreateCertificateRequest> {
    private static readonly pb::MessageParser<CreateCertificateRequest> _parser = new pb::MessageParser<CreateCertificateRequest>(() => new CreateCertificateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCertificateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateRequest(CreateCertificateRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      certificate_ = other.certificate_;
      chain_ = other.chain_;
      privateKey_ = other.privateKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateRequest Clone() {
      return new CreateCertificateRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create a certificate in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the certificate.
    /// The name must be unique within the folder.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels for the certificate as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 5;
    private string certificate_ = "";
    /// <summary>
    /// PEM-encoded certificate content of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain" field.</summary>
    public const int ChainFieldNumber = 6;
    private string chain_ = "";
    /// <summary>
    /// PEM-encoded certificate chain content of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chain {
      get { return chain_; }
      set {
        chain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 7;
    private string privateKey_ = "";
    /// <summary>
    /// PEM-encoded private key content of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCertificateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCertificateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Certificate != other.Certificate) return false;
      if (Chain != other.Chain) return false;
      if (PrivateKey != other.PrivateKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      if (Chain.Length != 0) hash ^= Chain.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Certificate.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Certificate);
      }
      if (Chain.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Chain);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PrivateKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Certificate);
      }
      if (Chain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chain);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCertificateRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
      if (other.Chain.Length != 0) {
        Chain = other.Chain;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            Certificate = input.ReadString();
            break;
          }
          case 50: {
            Chain = input.ReadString();
            break;
          }
          case 58: {
            PrivateKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateCertificateMetadata : pb::IMessage<CreateCertificateMetadata> {
    private static readonly pb::MessageParser<CreateCertificateMetadata> _parser = new pb::MessageParser<CreateCertificateMetadata>(() => new CreateCertificateMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCertificateMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateMetadata(CreateCertificateMetadata other) : this() {
      certificateId_ = other.certificateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCertificateMetadata Clone() {
      return new CreateCertificateMetadata(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCertificateMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCertificateMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCertificateMetadata other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateCertificateRequest : pb::IMessage<UpdateCertificateRequest> {
    private static readonly pb::MessageParser<UpdateCertificateRequest> _parser = new pb::MessageParser<UpdateCertificateRequest>(() => new UpdateCertificateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCertificateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateRequest(UpdateCertificateRequest other) : this() {
      certificateId_ = other.certificateId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      certificate_ = other.certificate_;
      chain_ = other.chain_;
      privateKey_ = other.privateKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateRequest Clone() {
      return new UpdateCertificateRequest(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate to update.
    /// To get the ID of a certificate use a [CertificateService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which attributes of the certificate are going to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// New name for the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// New description for the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// New labels for the certificate as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "certificate" field.</summary>
    public const int CertificateFieldNumber = 6;
    private string certificate_ = "";
    /// <summary>
    /// New PEM-encoded certificate content for the certificate. Used only for imported certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Certificate {
      get { return certificate_; }
      set {
        certificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain" field.</summary>
    public const int ChainFieldNumber = 7;
    private string chain_ = "";
    /// <summary>
    /// New PEM-encoded certificate chain content for the certificate. Used only for imported certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chain {
      get { return chain_; }
      set {
        chain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 8;
    private string privateKey_ = "";
    /// <summary>
    /// New PEM-encoded private key content for the certificate. Used only for imported certificates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCertificateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCertificateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (Certificate != other.Certificate) return false;
      if (Chain != other.Chain) return false;
      if (PrivateKey != other.PrivateKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (Certificate.Length != 0) hash ^= Certificate.GetHashCode();
      if (Chain.Length != 0) hash ^= Chain.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (Certificate.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Certificate);
      }
      if (Chain.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Chain);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PrivateKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (Certificate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Certificate);
      }
      if (Chain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chain);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PrivateKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCertificateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.Certificate.Length != 0) {
        Certificate = other.Certificate;
      }
      if (other.Chain.Length != 0) {
        Chain = other.Chain;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 50: {
            Certificate = input.ReadString();
            break;
          }
          case 58: {
            Chain = input.ReadString();
            break;
          }
          case 66: {
            PrivateKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateCertificateMetadata : pb::IMessage<UpdateCertificateMetadata> {
    private static readonly pb::MessageParser<UpdateCertificateMetadata> _parser = new pb::MessageParser<UpdateCertificateMetadata>(() => new UpdateCertificateMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCertificateMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateMetadata(UpdateCertificateMetadata other) : this() {
      certificateId_ = other.certificateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCertificateMetadata Clone() {
      return new UpdateCertificateMetadata(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCertificateMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCertificateMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCertificateMetadata other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteCertificateRequest : pb::IMessage<DeleteCertificateRequest> {
    private static readonly pb::MessageParser<DeleteCertificateRequest> _parser = new pb::MessageParser<DeleteCertificateRequest>(() => new DeleteCertificateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCertificateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateRequest(DeleteCertificateRequest other) : this() {
      certificateId_ = other.certificateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateRequest Clone() {
      return new DeleteCertificateRequest(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCertificateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCertificateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCertificateRequest other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteCertificateMetadata : pb::IMessage<DeleteCertificateMetadata> {
    private static readonly pb::MessageParser<DeleteCertificateMetadata> _parser = new pb::MessageParser<DeleteCertificateMetadata>(() => new DeleteCertificateMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteCertificateMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateMetadata(DeleteCertificateMetadata other) : this() {
      certificateId_ = other.certificateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteCertificateMetadata Clone() {
      return new DeleteCertificateMetadata(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteCertificateMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteCertificateMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteCertificateMetadata other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RequestNewCertificateRequest : pb::IMessage<RequestNewCertificateRequest> {
    private static readonly pb::MessageParser<RequestNewCertificateRequest> _parser = new pb::MessageParser<RequestNewCertificateRequest>(() => new RequestNewCertificateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestNewCertificateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateRequest(RequestNewCertificateRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      domains_ = other.domains_.Clone();
      challengeType_ = other.challengeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateRequest Clone() {
      return new RequestNewCertificateRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create a certificate in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Labels for the certificate as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "domains" field.</summary>
    public const int DomainsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_domains_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> domains_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Fully qualified domain names of the certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Domains {
      get { return domains_; }
    }

    /// <summary>Field number for the "challenge_type" field.</summary>
    public const int ChallengeTypeFieldNumber = 6;
    private global::Yandex.Cloud.Certificatemanager.V1.ChallengeType challengeType_ = global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified;
    /// <summary>
    /// Type of the domain validation challenge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Certificatemanager.V1.ChallengeType ChallengeType {
      get { return challengeType_; }
      set {
        challengeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestNewCertificateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestNewCertificateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if(!domains_.Equals(other.domains_)) return false;
      if (ChallengeType != other.ChallengeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      hash ^= domains_.GetHashCode();
      if (ChallengeType != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) hash ^= ChallengeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      domains_.WriteTo(output, _repeated_domains_codec);
      if (ChallengeType != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ChallengeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      size += domains_.CalculateSize(_repeated_domains_codec);
      if (ChallengeType != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ChallengeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestNewCertificateRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      domains_.Add(other.domains_);
      if (other.ChallengeType != global::Yandex.Cloud.Certificatemanager.V1.ChallengeType.Unspecified) {
        ChallengeType = other.ChallengeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            domains_.AddEntriesFrom(input, _repeated_domains_codec);
            break;
          }
          case 48: {
            ChallengeType = (global::Yandex.Cloud.Certificatemanager.V1.ChallengeType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RequestNewCertificateMetadata : pb::IMessage<RequestNewCertificateMetadata> {
    private static readonly pb::MessageParser<RequestNewCertificateMetadata> _parser = new pb::MessageParser<RequestNewCertificateMetadata>(() => new RequestNewCertificateMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestNewCertificateMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateMetadata(RequestNewCertificateMetadata other) : this() {
      certificateId_ = other.certificateId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestNewCertificateMetadata Clone() {
      return new RequestNewCertificateMetadata(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate that is being requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestNewCertificateMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestNewCertificateMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestNewCertificateMetadata other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListCertificateOperationsRequest : pb::IMessage<ListCertificateOperationsRequest> {
    private static readonly pb::MessageParser<ListCertificateOperationsRequest> _parser = new pb::MessageParser<ListCertificateOperationsRequest>(() => new ListCertificateOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCertificateOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsRequest(ListCertificateOperationsRequest other) : this() {
      certificateId_ = other.certificateId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsRequest Clone() {
      return new ListCertificateOperationsRequest(this);
    }

    /// <summary>Field number for the "certificate_id" field.</summary>
    public const int CertificateIdFieldNumber = 1;
    private string certificateId_ = "";
    /// <summary>
    /// ID of the certificate to list operations for.
    ///
    /// To get the certificate ID, use a [CertificateService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateId {
      get { return certificateId_; }
      set {
        certificateId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page that should be returned. If the number of available
    /// results is larger than `page_size`, the service returns a [ListCertificateOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// Default value: 100.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set `page_token` to the
    /// [ListCertificateOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCertificateOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCertificateOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateId != other.CertificateId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateId.Length != 0) hash ^= CertificateId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCertificateOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.CertificateId.Length != 0) {
        CertificateId = other.CertificateId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListCertificateOperationsResponse : pb::IMessage<ListCertificateOperationsResponse> {
    private static readonly pb::MessageParser<ListCertificateOperationsResponse> _parser = new pb::MessageParser<ListCertificateOperationsResponse>(() => new ListCertificateOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCertificateOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Certificatemanager.V1.CertificateServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsResponse(ListCertificateOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCertificateOperationsResponse Clone() {
      return new ListCertificateOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of operations for the specified certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListCertificateOperationsRequest.page_size], use the `next_page_token` as the value
    /// for the [ListCertificateOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCertificateOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCertificateOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCertificateOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
