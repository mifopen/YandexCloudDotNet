// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/loadbalancer/v1/network_load_balancer_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Yandex.Cloud.Loadbalancer.V1 {
  /// <summary>
  /// A set of methods for managing NetworkLoadBalancer resources.
  /// </summary>
  internal static partial class NetworkLoadBalancerService
  {
    static readonly string __ServiceName = "yandex.cloud.loadbalancer.v1.NetworkLoadBalancerService";

    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_GetNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer> __Marshaller_yandex_cloud_loadbalancer_v1_NetworkLoadBalancer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest> __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse> __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_CreateNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Operation.Operation> __Marshaller_yandex_cloud_operation_Operation = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Operation.Operation.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_UpdateNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_DeleteNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_StartNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_StopNetworkLoadBalancerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest> __Marshaller_yandex_cloud_loadbalancer_v1_AttachNetworkLoadBalancerTargetGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest> __Marshaller_yandex_cloud_loadbalancer_v1_DetachNetworkLoadBalancerTargetGroupRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest> __Marshaller_yandex_cloud_loadbalancer_v1_GetTargetStatesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse> __Marshaller_yandex_cloud_loadbalancer_v1_GetTargetStatesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_AddNetworkLoadBalancerListenerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest> __Marshaller_yandex_cloud_loadbalancer_v1_RemoveNetworkLoadBalancerListenerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest> __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancerOperationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse> __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancerOperationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest, global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer> __Method_Get = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest, global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_yandex_cloud_loadbalancer_v1_GetNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_loadbalancer_v1_NetworkLoadBalancer);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest, global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse> __Method_List = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest, global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancersRequest,
        __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancersResponse);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation> __Method_Create = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_yandex_cloud_loadbalancer_v1_CreateNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation> __Method_Update = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_yandex_cloud_loadbalancer_v1_UpdateNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation> __Method_Delete = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_yandex_cloud_loadbalancer_v1_DeleteNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation> __Method_Start = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_yandex_cloud_loadbalancer_v1_StartNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation> __Method_Stop = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Stop",
        __Marshaller_yandex_cloud_loadbalancer_v1_StopNetworkLoadBalancerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest, global::Yandex.Cloud.Operation.Operation> __Method_AttachTargetGroup = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AttachTargetGroup",
        __Marshaller_yandex_cloud_loadbalancer_v1_AttachNetworkLoadBalancerTargetGroupRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest, global::Yandex.Cloud.Operation.Operation> __Method_DetachTargetGroup = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DetachTargetGroup",
        __Marshaller_yandex_cloud_loadbalancer_v1_DetachNetworkLoadBalancerTargetGroupRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest, global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse> __Method_GetTargetStates = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest, global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTargetStates",
        __Marshaller_yandex_cloud_loadbalancer_v1_GetTargetStatesRequest,
        __Marshaller_yandex_cloud_loadbalancer_v1_GetTargetStatesResponse);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest, global::Yandex.Cloud.Operation.Operation> __Method_AddListener = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddListener",
        __Marshaller_yandex_cloud_loadbalancer_v1_AddNetworkLoadBalancerListenerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest, global::Yandex.Cloud.Operation.Operation> __Method_RemoveListener = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest, global::Yandex.Cloud.Operation.Operation>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveListener",
        __Marshaller_yandex_cloud_loadbalancer_v1_RemoveNetworkLoadBalancerListenerRequest,
        __Marshaller_yandex_cloud_operation_Operation);

    static readonly grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest, global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse> __Method_ListOperations = new grpc::Method<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest, global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOperations",
        __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancerOperationsRequest,
        __Marshaller_yandex_cloud_loadbalancer_v1_ListNetworkLoadBalancerOperationsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancerServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for NetworkLoadBalancerService</summary>
    public partial class NetworkLoadBalancerServiceClient : grpc::ClientBase<NetworkLoadBalancerServiceClient>
    {
      /// <summary>Creates a new client for NetworkLoadBalancerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public NetworkLoadBalancerServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for NetworkLoadBalancerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public NetworkLoadBalancerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected NetworkLoadBalancerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected NetworkLoadBalancerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Returns the specified NetworkLoadBalancer resource.
      ///
      /// Get the list of available NetworkLoadBalancer resources by making a [List] request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer Get(global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NetworkLoadBalancer resource.
      ///
      /// Get the list of available NetworkLoadBalancer resources by making a [List] request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer Get(global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Returns the specified NetworkLoadBalancer resource.
      ///
      /// Get the list of available NetworkLoadBalancer resources by making a [List] request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer> GetAsync(global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the specified NetworkLoadBalancer resource.
      ///
      /// Get the list of available NetworkLoadBalancer resources by making a [List] request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.NetworkLoadBalancer> GetAsync(global::Yandex.Cloud.Loadbalancer.V1.GetNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse List(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse List(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse> ListAsync(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the list of NetworkLoadBalancer resources in the specified folder.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersResponse> ListAsync(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Creates a network load balancer in the specified folder using the data specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Create(global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network load balancer in the specified folder using the data specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Create(global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Creates a network load balancer in the specified folder using the data specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> CreateAsync(global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a network load balancer in the specified folder using the data specified in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> CreateAsync(global::Yandex.Cloud.Loadbalancer.V1.CreateNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Updates the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Update(global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Update(global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Updates the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> UpdateAsync(global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> UpdateAsync(global::Yandex.Cloud.Loadbalancer.V1.UpdateNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Delete(global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Delete(global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Deletes the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> DeleteAsync(global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> DeleteAsync(global::Yandex.Cloud.Loadbalancer.V1.DeleteNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Starts load balancing and health checking with the specified network load balancer with specified settings.
      /// Changes network load balancer status to `` ACTIVE ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Start(global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts load balancing and health checking with the specified network load balancer with specified settings.
      /// Changes network load balancer status to `` ACTIVE ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Start(global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Starts load balancing and health checking with the specified network load balancer with specified settings.
      /// Changes network load balancer status to `` ACTIVE ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> StartAsync(global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Starts load balancing and health checking with the specified network load balancer with specified settings.
      /// Changes network load balancer status to `` ACTIVE ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> StartAsync(global::Yandex.Cloud.Loadbalancer.V1.StartNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Stops load balancing and health checking with the specified network load balancer.
      /// Changes load balancer status to `` STOPPED ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Stop(global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Stop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops load balancing and health checking with the specified network load balancer.
      /// Changes load balancer status to `` STOPPED ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation Stop(global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Stops load balancing and health checking with the specified network load balancer.
      /// Changes load balancer status to `` STOPPED ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> StopAsync(global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stops load balancing and health checking with the specified network load balancer.
      /// Changes load balancer status to `` STOPPED ``.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> StopAsync(global::Yandex.Cloud.Loadbalancer.V1.StopNetworkLoadBalancerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Stop, null, options, request);
      }
      /// <summary>
      /// Attaches a target group to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation AttachTargetGroup(global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachTargetGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attaches a target group to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation AttachTargetGroup(global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AttachTargetGroup, null, options, request);
      }
      /// <summary>
      /// Attaches a target group to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> AttachTargetGroupAsync(global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AttachTargetGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Attaches a target group to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> AttachTargetGroupAsync(global::Yandex.Cloud.Loadbalancer.V1.AttachNetworkLoadBalancerTargetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AttachTargetGroup, null, options, request);
      }
      /// <summary>
      /// Detaches the target group from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation DetachTargetGroup(global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachTargetGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detaches the target group from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation DetachTargetGroup(global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DetachTargetGroup, null, options, request);
      }
      /// <summary>
      /// Detaches the target group from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> DetachTargetGroupAsync(global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DetachTargetGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Detaches the target group from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> DetachTargetGroupAsync(global::Yandex.Cloud.Loadbalancer.V1.DetachNetworkLoadBalancerTargetGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DetachTargetGroup, null, options, request);
      }
      /// <summary>
      /// Gets states of target resources in the attached target group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse GetTargetStates(global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTargetStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets states of target resources in the attached target group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse GetTargetStates(global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTargetStates, null, options, request);
      }
      /// <summary>
      /// Gets states of target resources in the attached target group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse> GetTargetStatesAsync(global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTargetStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets states of target resources in the attached target group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesResponse> GetTargetStatesAsync(global::Yandex.Cloud.Loadbalancer.V1.GetTargetStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTargetStates, null, options, request);
      }
      /// <summary>
      /// Adds a listener to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation AddListener(global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddListener(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a listener to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation AddListener(global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddListener, null, options, request);
      }
      /// <summary>
      /// Adds a listener to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> AddListenerAsync(global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddListenerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a listener to the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> AddListenerAsync(global::Yandex.Cloud.Loadbalancer.V1.AddNetworkLoadBalancerListenerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddListener, null, options, request);
      }
      /// <summary>
      /// Removes the listener from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation RemoveListener(global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveListener(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the listener from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Operation.Operation RemoveListener(global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveListener, null, options, request);
      }
      /// <summary>
      /// Removes the listener from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> RemoveListenerAsync(global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveListenerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the listener from the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Operation.Operation> RemoveListenerAsync(global::Yandex.Cloud.Loadbalancer.V1.RemoveNetworkLoadBalancerListenerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveListener, null, options, request);
      }
      /// <summary>
      /// Lists operations for the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse ListOperations(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOperations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists operations for the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse ListOperations(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>
      /// Lists operations for the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse> ListOperationsAsync(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOperationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists operations for the specified network load balancer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsResponse> ListOperationsAsync(global::Yandex.Cloud.Loadbalancer.V1.ListNetworkLoadBalancerOperationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOperations, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override NetworkLoadBalancerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new NetworkLoadBalancerServiceClient(configuration);
      }
    }

  }
}
#endregion
