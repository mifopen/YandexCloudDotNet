// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: yandex/cloud/compute/v1/instance_service.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Yandex.Cloud.Compute.V1 {

  /// <summary>Holder for reflection information generated from yandex/cloud/compute/v1/instance_service.proto</summary>
  internal static partial class InstanceServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for yandex/cloud/compute/v1/instance_service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstanceServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci55YW5kZXgvY2xvdWQvY29tcHV0ZS92MS9pbnN0YW5jZV9zZXJ2aWNlLnBy",
            "b3RvEhd5YW5kZXguY2xvdWQuY29tcHV0ZS52MRocZ29vZ2xlL2FwaS9hbm5v",
            "dGF0aW9ucy5wcm90bxogZ29vZ2xlL3Byb3RvYnVmL2ZpZWxkX21hc2sucHJv",
            "dG8aGnlhbmRleC9hcGkvb3BlcmF0aW9uLnByb3RvGiZ5YW5kZXgvY2xvdWQv",
            "Y29tcHV0ZS92MS9pbnN0YW5jZS5wcm90bxomeWFuZGV4L2Nsb3VkL29wZXJh",
            "dGlvbi9vcGVyYXRpb24ucHJvdG8aHXlhbmRleC9jbG91ZC92YWxpZGF0aW9u",
            "LnByb3RvImwKEkdldEluc3RhbmNlUmVxdWVzdBIhCgtpbnN0YW5jZV9pZBgB",
            "IAEoCUIM6McxAYrIMQQ8PTUwEjMKBHZpZXcYAiABKA4yJS55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5JbnN0YW5jZVZpZXcikQEKFExpc3RJbnN0YW5jZXNS",
            "ZXF1ZXN0Eh8KCWZvbGRlcl9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBh",
            "Z2Vfc2l6ZRgCIAEoA0IK+scxBjw9MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJ",
            "QgmKyDEFPD0xMDASGgoGZmlsdGVyGAQgASgJQgqKyDEGPD0xMDAwImYKFUxp",
            "c3RJbnN0YW5jZXNSZXNwb25zZRI0CglpbnN0YW5jZXMYASADKAsyIS55YW5k",
            "ZXguY2xvdWQuY29tcHV0ZS52MS5JbnN0YW5jZRIXCg9uZXh0X3BhZ2VfdG9r",
            "ZW4YAiABKAki3wcKFUNyZWF0ZUluc3RhbmNlUmVxdWVzdBIfCglmb2xkZXJf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MBIvCgRuYW1lGAIgASgJQiHyxzEdfFth",
            "LXpdWy1hLXowLTldezEsNjF9W2EtejAtOV0SHgoLZGVzY3JpcHRpb24YAyAB",
            "KAlCCYrIMQU8PTI1NhKLAQoGbGFiZWxzGAQgAygLMjoueWFuZGV4LmNsb3Vk",
            "LmNvbXB1dGUudjEuQ3JlYXRlSW5zdGFuY2VSZXF1ZXN0LkxhYmVsc0VudHJ5",
            "Qj+CyDEEPD02NIrIMQQ8PTYz8scxC1stXzAtOWEtel0qssgxBhoEMS02M7LI",
            "MRISEFthLXpdWy1fMC05YS16XSoSHQoHem9uZV9pZBgFIAEoCUIM6McxAYrI",
            "MQQ8PTUwEigKC3BsYXRmb3JtX2lkGAYgASgJQhPoxzEB8scxC3N0YW5kYXJk",
            "LXYxEkQKDnJlc291cmNlc19zcGVjGAcgASgLMiYueWFuZGV4LmNsb3VkLmNv",
            "bXB1dGUudjEuUmVzb3VyY2VzU3BlY0IE6McxARJOCghtZXRhZGF0YRgIIAMo",
            "CzI8LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkNyZWF0ZUluc3RhbmNlUmVx",
            "dWVzdC5NZXRhZGF0YUVudHJ5EkcKDmJvb3RfZGlza19zcGVjGAkgASgLMiku",
            "eWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuQXR0YWNoZWREaXNrU3BlY0IE6Mcx",
            "ARJQChRzZWNvbmRhcnlfZGlza19zcGVjcxgKIAMoCzIpLnlhbmRleC5jbG91",
            "ZC5jb21wdXRlLnYxLkF0dGFjaGVkRGlza1NwZWNCB4LIMQM8PTMSVQoXbmV0",
            "d29ya19pbnRlcmZhY2Vfc3BlY3MYCyADKAsyLS55YW5kZXguY2xvdWQuY29t",
            "cHV0ZS52MS5OZXR3b3JrSW50ZXJmYWNlU3BlY0IFgsgxATESMwoIaG9zdG5h",
            "bWUYDCABKAlCIfLHMR18W2Etel1bLWEtejAtOV17MSw2MX1bYS16MC05XRJE",
            "ChFzY2hlZHVsaW5nX3BvbGljeRgNIAEoCzIpLnlhbmRleC5jbG91ZC5jb21w",
            "dXRlLnYxLlNjaGVkdWxpbmdQb2xpY3kSGgoSc2VydmljZV9hY2NvdW50X2lk",
            "GA4gASgJGi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCToCOAEaLwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAk6AjgBIjcKFkNyZWF0ZUluc3RhbmNlTWV0YWRhdGESHQoLaW5z",
            "dGFuY2VfaWQYASABKAlCCIrIMQQ8PTUwIvwEChVVcGRhdGVJbnN0YW5jZVJl",
            "cXVlc3QSIQoLaW5zdGFuY2VfaWQYASABKAlCDOjHMQGKyDEEPD01MBIvCgt1",
            "cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2sS",
            "LwoEbmFtZRgDIAEoCUIh8scxHXxbYS16XVstYS16MC05XXsxLDYxfVthLXow",
            "LTldEh4KC2Rlc2NyaXB0aW9uGAQgASgJQgmKyDEFPD0yNTYSiwEKBmxhYmVs",
            "cxgFIAMoCzI6LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLlVwZGF0ZUluc3Rh",
            "bmNlUmVxdWVzdC5MYWJlbHNFbnRyeUI/gsgxBDw9NjSKyDEEPD02M/LHMQtb",
            "LV8wLTlhLXpdKrLIMQYaBDEtNjOyyDESEhBbYS16XVstXzAtOWEtel0qEiQK",
            "C3BsYXRmb3JtX2lkGAYgASgJQg/yxzELc3RhbmRhcmQtdjESPgoOcmVzb3Vy",
            "Y2VzX3NwZWMYByABKAsyJi55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5SZXNv",
            "dXJjZXNTcGVjEk4KCG1ldGFkYXRhGAggAygLMjwueWFuZGV4LmNsb3VkLmNv",
            "bXB1dGUudjEuVXBkYXRlSW5zdGFuY2VSZXF1ZXN0Lk1ldGFkYXRhRW50cnkS",
            "GgoSc2VydmljZV9hY2NvdW50X2lkGAkgASgJGi0KC0xhYmVsc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaLwoNTWV0YWRhdGFFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIi0KFlVwZGF0ZUlu",
            "c3RhbmNlTWV0YWRhdGESEwoLaW5zdGFuY2VfaWQYASABKAkiOgoVRGVsZXRl",
            "SW5zdGFuY2VSZXF1ZXN0EiEKC2luc3RhbmNlX2lkGAEgASgJQgzoxzEBisgx",
            "BDw9NTAiLQoWRGVsZXRlSW5zdGFuY2VNZXRhZGF0YRITCgtpbnN0YW5jZV9p",
            "ZBgBIAEoCSLHAQodVXBkYXRlSW5zdGFuY2VNZXRhZGF0YVJlcXVlc3QSEwoL",
            "aW5zdGFuY2VfaWQYASABKAkSDgoGZGVsZXRlGAIgAygJElIKBnVwc2VydBgD",
            "IAMoCzJCLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLlVwZGF0ZUluc3RhbmNl",
            "TWV0YWRhdGFSZXF1ZXN0LlVwc2VydEVudHJ5Gi0KC1Vwc2VydEVudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiNQoeVXBkYXRlSW5zdGFu",
            "Y2VNZXRhZGF0YU1ldGFkYXRhEhMKC2luc3RhbmNlX2lkGAEgASgJImIKIkdl",
            "dEluc3RhbmNlU2VyaWFsUG9ydE91dHB1dFJlcXVlc3QSIQoLaW5zdGFuY2Vf",
            "aWQYASABKAlCDOjHMQGKyDEEPD01MBIZCgRwb3J0GAIgASgDQgv6xzEHMSwy",
            "LDMsNCI3CiNHZXRJbnN0YW5jZVNlcmlhbFBvcnRPdXRwdXRSZXNwb25zZRIQ",
            "Cghjb250ZW50cxgBIAEoCSI4ChNTdG9wSW5zdGFuY2VSZXF1ZXN0EiEKC2lu",
            "c3RhbmNlX2lkGAEgASgJQgzoxzEBisgxBDw9NTAiKwoUU3RvcEluc3RhbmNl",
            "TWV0YWRhdGESEwoLaW5zdGFuY2VfaWQYASABKAkiOQoUU3RhcnRJbnN0YW5j",
            "ZVJlcXVlc3QSIQoLaW5zdGFuY2VfaWQYASABKAlCDOjHMQGKyDEEPD01MCIs",
            "ChVTdGFydEluc3RhbmNlTWV0YWRhdGESEwoLaW5zdGFuY2VfaWQYASABKAki",
            "OwoWUmVzdGFydEluc3RhbmNlUmVxdWVzdBIhCgtpbnN0YW5jZV9pZBgBIAEo",
            "CUIM6McxAYrIMQQ8PTUwIi4KF1Jlc3RhcnRJbnN0YW5jZU1ldGFkYXRhEhMK",
            "C2luc3RhbmNlX2lkGAEgASgJIosBChlBdHRhY2hJbnN0YW5jZURpc2tSZXF1",
            "ZXN0EiEKC2luc3RhbmNlX2lkGAEgASgJQgzoxzEBisgxBDw9NTASSwoSYXR0",
            "YWNoZWRfZGlza19zcGVjGAIgASgLMikueWFuZGV4LmNsb3VkLmNvbXB1dGUu",
            "djEuQXR0YWNoZWREaXNrU3BlY0IE6McxASJCChpBdHRhY2hJbnN0YW5jZURp",
            "c2tNZXRhZGF0YRITCgtpbnN0YW5jZV9pZBgBIAEoCRIPCgdkaXNrX2lkGAIg",
            "ASgJIpoBChlEZXRhY2hJbnN0YW5jZURpc2tSZXF1ZXN0EiEKC2luc3RhbmNl",
            "X2lkGAEgASgJQgzoxzEBisgxBDw9NTASGwoHZGlza19pZBgCIAEoCUIIisgx",
            "BDw9NTBIABIvCgtkZXZpY2VfbmFtZRgDIAEoCUIY8scxFFthLXpdW2EtejAt",
            "OS1fXXssMTl9SABCDAoEZGlzaxIEwMExASJCChpEZXRhY2hJbnN0YW5jZURp",
            "c2tNZXRhZGF0YRITCgtpbnN0YW5jZV9pZBgBIAEoCRIPCgdkaXNrX2lkGAIg",
            "ASgJIoABCh1MaXN0SW5zdGFuY2VPcGVyYXRpb25zUmVxdWVzdBIhCgtpbnN0",
            "YW5jZV9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEh0KCXBhZ2Vfc2l6ZRgCIAEo",
            "A0IK+scxBjw9MTAwMBIdCgpwYWdlX3Rva2VuGAMgASgJQgmKyDEFPD0xMDAi",
            "cAoeTGlzdEluc3RhbmNlT3BlcmF0aW9uc1Jlc3BvbnNlEjUKCm9wZXJhdGlv",
            "bnMYASADKAsyIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbhIX",
            "Cg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiugEKDVJlc291cmNlc1NwZWMSJgoG",
            "bWVtb3J5GAEgASgDQhboxzEB+scxDjw9Mjc0ODc3OTA2OTQ0EkQKBWNvcmVz",
            "GAIgASgDQjXoxzEB+scxLTEsMiw0LDYsOCwxMCwxMiwxNCwxNiwxOCwyMCwy",
            "MiwyNCwyNiwyOCwzMCwzMhIiCg1jb3JlX2ZyYWN0aW9uGAMgASgDQgv6xzEH",
            "MCw1LDEwMBIXCgRncHVzGAQgASgDQgn6xzEFMSwyLDQitAQKEEF0dGFjaGVk",
            "RGlza1NwZWMSPAoEbW9kZRgBIAEoDjIuLnlhbmRleC5jbG91ZC5jb21wdXRl",
            "LnYxLkF0dGFjaGVkRGlza1NwZWMuTW9kZRItCgtkZXZpY2VfbmFtZRgCIAEo",
            "CUIY8scxFFthLXpdW2EtejAtOS1fXXssMTl9EhMKC2F1dG9fZGVsZXRlGAMg",
            "ASgIEkcKCWRpc2tfc3BlYxgEIAEoCzIyLnlhbmRleC5jbG91ZC5jb21wdXRl",
            "LnYxLkF0dGFjaGVkRGlza1NwZWMuRGlza1NwZWNIABIbCgdkaXNrX2lkGAUg",
            "ASgJQgiKyDEEPD01MEgAGuwBCghEaXNrU3BlYxIvCgRuYW1lGAEgASgJQiHy",
            "xzEdfFthLXpdWy1hLXowLTldezEsNjF9W2EtejAtOV0SHgoLZGVzY3JpcHRp",
            "b24YAiABKAlCCYrIMQU8PTI1NhIZCgd0eXBlX2lkGAMgASgJQgiKyDEEPD01",
            "MBIrCgRzaXplGAQgASgDQh3oxzEB+scxFTQxOTQzMDQtNDM5ODA0NjUxMTEw",
            "NBIcCghpbWFnZV9pZBgFIAEoCUIIisgxBDw9NTBIABIfCgtzbmFwc2hvdF9p",
            "ZBgGIAEoCUIIisgxBDw9NTBIAEIICgZzb3VyY2UiOwoETW9kZRIUChBNT0RF",
            "X1VOU1BFQ0lGSUVEEAASDQoJUkVBRF9PTkxZEAESDgoKUkVBRF9XUklURRAC",
            "QgwKBGRpc2sSBMDBMQEi0wEKFE5ldHdvcmtJbnRlcmZhY2VTcGVjEh8KCXN1",
            "Ym5ldF9pZBgBIAEoCUIM6McxAYrIMQQ8PTUwEkwKF3ByaW1hcnlfdjRfYWRk",
            "cmVzc19zcGVjGAIgASgLMisueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuUHJp",
            "bWFyeUFkZHJlc3NTcGVjEkwKF3ByaW1hcnlfdjZfYWRkcmVzc19zcGVjGAMg",
            "ASgLMisueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuUHJpbWFyeUFkZHJlc3NT",
            "cGVjImwKElByaW1hcnlBZGRyZXNzU3BlYxIPCgdhZGRyZXNzGAEgASgJEkUK",
            "E29uZV90b19vbmVfbmF0X3NwZWMYAiABKAsyKC55YW5kZXguY2xvdWQuY29t",
            "cHV0ZS52MS5PbmVUb09uZU5hdFNwZWMiTwoPT25lVG9PbmVOYXRTcGVjEjwK",
            "CmlwX3ZlcnNpb24YASABKA4yIi55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5J",
            "cFZlcnNpb25CBOjHMQEqIwoMSW5zdGFuY2VWaWV3EgkKBUJBU0lDEAASCAoE",
            "RlVMTBABMvoSCg9JbnN0YW5jZVNlcnZpY2USggEKA0dldBIrLnlhbmRleC5j",
            "bG91ZC5jb21wdXRlLnYxLkdldEluc3RhbmNlUmVxdWVzdBohLnlhbmRleC5j",
            "bG91ZC5jb21wdXRlLnYxLkluc3RhbmNlIiuC0+STAiUSIy9jb21wdXRlL3Yx",
            "L2luc3RhbmNlcy97aW5zdGFuY2VfaWR9EoQBCgRMaXN0Ei0ueWFuZGV4LmNs",
            "b3VkLmNvbXB1dGUudjEuTGlzdEluc3RhbmNlc1JlcXVlc3QaLi55YW5kZXgu",
            "Y2xvdWQuY29tcHV0ZS52MS5MaXN0SW5zdGFuY2VzUmVzcG9uc2UiHYLT5JMC",
            "FxIVL2NvbXB1dGUvdjEvaW5zdGFuY2VzEqMBCgZDcmVhdGUSLi55YW5kZXgu",
            "Y2xvdWQuY29tcHV0ZS52MS5DcmVhdGVJbnN0YW5jZVJlcXVlc3QaIS55YW5k",
            "ZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJGgtPkkwIaIhUvY29tcHV0",
            "ZS92MS9pbnN0YW5jZXM6ASqy0ioiChZDcmVhdGVJbnN0YW5jZU1ldGFkYXRh",
            "EghJbnN0YW5jZRKxAQoGVXBkYXRlEi4ueWFuZGV4LmNsb3VkLmNvbXB1dGUu",
            "djEuVXBkYXRlSW5zdGFuY2VSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJh",
            "dGlvbi5PcGVyYXRpb24iVILT5JMCKDIjL2NvbXB1dGUvdjEvaW5zdGFuY2Vz",
            "L3tpbnN0YW5jZV9pZH06ASqy0ioiChZVcGRhdGVJbnN0YW5jZU1ldGFkYXRh",
            "EghJbnN0YW5jZRK7AQoGRGVsZXRlEi4ueWFuZGV4LmNsb3VkLmNvbXB1dGUu",
            "djEuRGVsZXRlSW5zdGFuY2VSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJh",
            "dGlvbi5PcGVyYXRpb24iXoLT5JMCJSojL2NvbXB1dGUvdjEvaW5zdGFuY2Vz",
            "L3tpbnN0YW5jZV9pZH2y0iovChZEZWxldGVJbnN0YW5jZU1ldGFkYXRhEhVn",
            "b29nbGUucHJvdG9idWYuRW1wdHkS2AEKDlVwZGF0ZU1ldGFkYXRhEjYueWFu",
            "ZGV4LmNsb3VkLmNvbXB1dGUudjEuVXBkYXRlSW5zdGFuY2VNZXRhZGF0YVJl",
            "cXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJrgtPk",
            "kwI3IjIvY29tcHV0ZS92MS9pbnN0YW5jZXMve2luc3RhbmNlX2lkfS91cGRh",
            "dGVNZXRhZGF0YToBKrLSKioKHlVwZGF0ZUluc3RhbmNlTWV0YWRhdGFNZXRh",
            "ZGF0YRIISW5zdGFuY2USzgEKE0dldFNlcmlhbFBvcnRPdXRwdXQSOy55YW5k",
            "ZXguY2xvdWQuY29tcHV0ZS52MS5HZXRJbnN0YW5jZVNlcmlhbFBvcnRPdXRw",
            "dXRSZXF1ZXN0GjwueWFuZGV4LmNsb3VkLmNvbXB1dGUudjEuR2V0SW5zdGFu",
            "Y2VTZXJpYWxQb3J0T3V0cHV0UmVzcG9uc2UiPILT5JMCNhI0L2NvbXB1dGUv",
            "djEvaW5zdGFuY2VzL3tpbnN0YW5jZV9pZH06c2VyaWFsUG9ydE91dHB1dBK6",
            "AQoEU3RvcBIsLnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLlN0b3BJbnN0YW5j",
            "ZVJlcXVlc3QaIS55YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJh",
            "gtPkkwIqIigvY29tcHV0ZS92MS9pbnN0YW5jZXMve2luc3RhbmNlX2lkfTpz",
            "dG9wstIqLQoUU3RvcEluc3RhbmNlTWV0YWRhdGESFWdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eRK+AQoFU3RhcnQSLS55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5T",
            "dGFydEluc3RhbmNlUmVxdWVzdBohLnlhbmRleC5jbG91ZC5vcGVyYXRpb24u",
            "T3BlcmF0aW9uImOC0+STAisiKS9jb21wdXRlL3YxL2luc3RhbmNlcy97aW5z",
            "dGFuY2VfaWR9OnN0YXJ0stIqLgoVU3RhcnRJbnN0YW5jZU1ldGFkYXRhEhVn",
            "b29nbGUucHJvdG9idWYuRW1wdHkSxgEKB1Jlc3RhcnQSLy55YW5kZXguY2xv",
            "dWQuY29tcHV0ZS52MS5SZXN0YXJ0SW5zdGFuY2VSZXF1ZXN0GiEueWFuZGV4",
            "LmNsb3VkLm9wZXJhdGlvbi5PcGVyYXRpb24iZ4LT5JMCLSIrL2NvbXB1dGUv",
            "djEvaW5zdGFuY2VzL3tpbnN0YW5jZV9pZH06cmVzdGFydLLSKjAKF1Jlc3Rh",
            "cnRJbnN0YW5jZU1ldGFkYXRhEhVnb29nbGUucHJvdG9idWYuRW1wdHkSyAEK",
            "CkF0dGFjaERpc2sSMi55YW5kZXguY2xvdWQuY29tcHV0ZS52MS5BdHRhY2hJ",
            "bnN0YW5jZURpc2tSZXF1ZXN0GiEueWFuZGV4LmNsb3VkLm9wZXJhdGlvbi5P",
            "cGVyYXRpb24iY4LT5JMCMyIuL2NvbXB1dGUvdjEvaW5zdGFuY2VzL3tpbnN0",
            "YW5jZV9pZH06YXR0YWNoRGlzazoBKrLSKiYKGkF0dGFjaEluc3RhbmNlRGlz",
            "a01ldGFkYXRhEghJbnN0YW5jZRLIAQoKRGV0YWNoRGlzaxIyLnlhbmRleC5j",
            "bG91ZC5jb21wdXRlLnYxLkRldGFjaEluc3RhbmNlRGlza1JlcXVlc3QaIS55",
            "YW5kZXguY2xvdWQub3BlcmF0aW9uLk9wZXJhdGlvbiJjgtPkkwIzIi4vY29t",
            "cHV0ZS92MS9pbnN0YW5jZXMve2luc3RhbmNlX2lkfTpkZXRhY2hEaXNrOgEq",
            "stIqJgoaRGV0YWNoSW5zdGFuY2VEaXNrTWV0YWRhdGESCEluc3RhbmNlErkB",
            "Cg5MaXN0T3BlcmF0aW9ucxI2LnlhbmRleC5jbG91ZC5jb21wdXRlLnYxLkxp",
            "c3RJbnN0YW5jZU9wZXJhdGlvbnNSZXF1ZXN0GjcueWFuZGV4LmNsb3VkLmNv",
            "bXB1dGUudjEuTGlzdEluc3RhbmNlT3BlcmF0aW9uc1Jlc3BvbnNlIjaC0+ST",
            "AjASLi9jb21wdXRlL3YxL2luc3RhbmNlcy97aW5zdGFuY2VfaWR9L29wZXJh",
            "dGlvbnNCRVpDZ2l0aHViLmNvbS95YW5kZXgtY2xvdWQvZ28tZ2VucHJvdG8v",
            "eWFuZGV4L2Nsb3VkL2NvbXB1dGUvdjE7Y29tcHV0ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.FieldMaskReflection.Descriptor, global::Yandex.Api.OperationReflection.Descriptor, global::Yandex.Cloud.Compute.V1.InstanceReflection.Descriptor, global::Yandex.Cloud.Operation.OperationReflection.Descriptor, global::Yandex.Cloud.ValidationReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Yandex.Cloud.Compute.V1.InstanceView), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.GetInstanceRequest), global::Yandex.Cloud.Compute.V1.GetInstanceRequest.Parser, new[]{ "InstanceId", "View" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListInstancesRequest), global::Yandex.Cloud.Compute.V1.ListInstancesRequest.Parser, new[]{ "FolderId", "PageSize", "PageToken", "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListInstancesResponse), global::Yandex.Cloud.Compute.V1.ListInstancesResponse.Parser, new[]{ "Instances", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.CreateInstanceRequest), global::Yandex.Cloud.Compute.V1.CreateInstanceRequest.Parser, new[]{ "FolderId", "Name", "Description", "Labels", "ZoneId", "PlatformId", "ResourcesSpec", "Metadata", "BootDiskSpec", "SecondaryDiskSpecs", "NetworkInterfaceSpecs", "Hostname", "SchedulingPolicy", "ServiceAccountId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.CreateInstanceMetadata), global::Yandex.Cloud.Compute.V1.CreateInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateInstanceRequest), global::Yandex.Cloud.Compute.V1.UpdateInstanceRequest.Parser, new[]{ "InstanceId", "UpdateMask", "Name", "Description", "Labels", "PlatformId", "ResourcesSpec", "Metadata", "ServiceAccountId" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadata), global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DeleteInstanceRequest), global::Yandex.Cloud.Compute.V1.DeleteInstanceRequest.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DeleteInstanceMetadata), global::Yandex.Cloud.Compute.V1.DeleteInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadataRequest), global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadataRequest.Parser, new[]{ "InstanceId", "Delete", "Upsert" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadataMetadata), global::Yandex.Cloud.Compute.V1.UpdateInstanceMetadataMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.GetInstanceSerialPortOutputRequest), global::Yandex.Cloud.Compute.V1.GetInstanceSerialPortOutputRequest.Parser, new[]{ "InstanceId", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.GetInstanceSerialPortOutputResponse), global::Yandex.Cloud.Compute.V1.GetInstanceSerialPortOutputResponse.Parser, new[]{ "Contents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.StopInstanceRequest), global::Yandex.Cloud.Compute.V1.StopInstanceRequest.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.StopInstanceMetadata), global::Yandex.Cloud.Compute.V1.StopInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.StartInstanceRequest), global::Yandex.Cloud.Compute.V1.StartInstanceRequest.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.StartInstanceMetadata), global::Yandex.Cloud.Compute.V1.StartInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.RestartInstanceRequest), global::Yandex.Cloud.Compute.V1.RestartInstanceRequest.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.RestartInstanceMetadata), global::Yandex.Cloud.Compute.V1.RestartInstanceMetadata.Parser, new[]{ "InstanceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.AttachInstanceDiskRequest), global::Yandex.Cloud.Compute.V1.AttachInstanceDiskRequest.Parser, new[]{ "InstanceId", "AttachedDiskSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.AttachInstanceDiskMetadata), global::Yandex.Cloud.Compute.V1.AttachInstanceDiskMetadata.Parser, new[]{ "InstanceId", "DiskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DetachInstanceDiskRequest), global::Yandex.Cloud.Compute.V1.DetachInstanceDiskRequest.Parser, new[]{ "InstanceId", "DiskId", "DeviceName" }, new[]{ "Disk" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.DetachInstanceDiskMetadata), global::Yandex.Cloud.Compute.V1.DetachInstanceDiskMetadata.Parser, new[]{ "InstanceId", "DiskId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListInstanceOperationsRequest), global::Yandex.Cloud.Compute.V1.ListInstanceOperationsRequest.Parser, new[]{ "InstanceId", "PageSize", "PageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ListInstanceOperationsResponse), global::Yandex.Cloud.Compute.V1.ListInstanceOperationsResponse.Parser, new[]{ "Operations", "NextPageToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.ResourcesSpec), global::Yandex.Cloud.Compute.V1.ResourcesSpec.Parser, new[]{ "Memory", "Cores", "CoreFraction", "Gpus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.AttachedDiskSpec), global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Parser, new[]{ "Mode", "DeviceName", "AutoDelete", "DiskSpec", "DiskId" }, new[]{ "Disk" }, new[]{ typeof(global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.Mode) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec), global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec.Parser, new[]{ "Name", "Description", "TypeId", "Size", "ImageId", "SnapshotId" }, new[]{ "Source" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec), global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec.Parser, new[]{ "SubnetId", "PrimaryV4AddressSpec", "PrimaryV6AddressSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec), global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec.Parser, new[]{ "Address", "OneToOneNatSpec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Yandex.Cloud.Compute.V1.OneToOneNatSpec), global::Yandex.Cloud.Compute.V1.OneToOneNatSpec.Parser, new[]{ "IpVersion" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum InstanceView {
    /// <summary>
    /// Doesn't include the metadata of the instance in the server response.
    /// </summary>
    [pbr::OriginalName("BASIC")] Basic = 0,
    /// <summary>
    /// Returns the metadata of the instance in the server response.
    /// </summary>
    [pbr::OriginalName("FULL")] Full = 1,
  }

  #endregion

  #region Messages
  internal sealed partial class GetInstanceRequest : pb::IMessage<GetInstanceRequest> {
    private static readonly pb::MessageParser<GetInstanceRequest> _parser = new pb::MessageParser<GetInstanceRequest>(() => new GetInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest(GetInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      view_ = other.view_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceRequest Clone() {
      return new GetInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the Instance resource to return.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view" field.</summary>
    public const int ViewFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.InstanceView view_ = 0;
    /// <summary>
    /// Defines which information about the Instance resource should be returned in the server response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.InstanceView View {
      get { return view_; }
      set {
        view_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (View != other.View) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (View != 0) hash ^= View.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (View != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) View);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (View != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) View);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.View != 0) {
        View = other.View;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 16: {
            View = (global::Yandex.Cloud.Compute.V1.InstanceView) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListInstancesRequest : pb::IMessage<ListInstancesRequest> {
    private static readonly pb::MessageParser<ListInstancesRequest> _parser = new pb::MessageParser<ListInstancesRequest>(() => new ListInstancesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstancesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest(ListInstancesRequest other) : this() {
      folderId_ = other.folderId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      filter_ = other.filter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesRequest Clone() {
      return new ListInstancesRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the Folder to list instances in.
    /// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size],
    /// the service returns a [ListInstancesResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results,
    /// set [page_token] to the [ListInstancesResponse.next_page_token]
    /// returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 4;
    private string filter_ = "";
    /// <summary>
    /// A filter expression that filters resources listed in the response.
    /// The expression must specify:
    /// 1. The field name. Currently you can use filtering only on the [Instance.name] field.
    /// 2. An operator. Can be either `=` or `!=` for single values, `IN` or `NOT IN` for lists of values.
    /// 3. The value. Must be 3-63 characters long and match the regular expression `^[a-z]([-a-z0-9]{,61}[a-z0-9])?$`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstancesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstancesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      if (Filter != other.Filter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (Filter.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Filter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstancesRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
          case 34: {
            Filter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListInstancesResponse : pb::IMessage<ListInstancesResponse> {
    private static readonly pb::MessageParser<ListInstancesResponse> _parser = new pb::MessageParser<ListInstancesResponse>(() => new ListInstancesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstancesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse(ListInstancesResponse other) : this() {
      instances_ = other.instances_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstancesResponse Clone() {
      return new ListInstancesResponse(this);
    }

    /// <summary>Field number for the "instances" field.</summary>
    public const int InstancesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.Instance> _repeated_instances_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Compute.V1.Instance.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instance> instances_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instance>();
    /// <summary>
    /// List of Instance resources.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.Instance> Instances {
      get { return instances_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListInstancesRequest.page_size], use
    /// the [next_page_token] as the value
    /// for the [ListInstancesRequest.page_token] query parameter
    /// in the next list request. Each subsequent list request will have its own
    /// [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstancesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstancesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instances_.Equals(other.instances_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instances_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instances_.WriteTo(output, _repeated_instances_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instances_.CalculateSize(_repeated_instances_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstancesResponse other) {
      if (other == null) {
        return;
      }
      instances_.Add(other.instances_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instances_.AddEntriesFrom(input, _repeated_instances_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateInstanceRequest : pb::IMessage<CreateInstanceRequest> {
    private static readonly pb::MessageParser<CreateInstanceRequest> _parser = new pb::MessageParser<CreateInstanceRequest>(() => new CreateInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest(CreateInstanceRequest other) : this() {
      folderId_ = other.folderId_;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      zoneId_ = other.zoneId_;
      platformId_ = other.platformId_;
      resourcesSpec_ = other.resourcesSpec_ != null ? other.resourcesSpec_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      bootDiskSpec_ = other.bootDiskSpec_ != null ? other.bootDiskSpec_.Clone() : null;
      secondaryDiskSpecs_ = other.secondaryDiskSpecs_.Clone();
      networkInterfaceSpecs_ = other.networkInterfaceSpecs_.Clone();
      hostname_ = other.hostname_;
      schedulingPolicy_ = other.schedulingPolicy_ != null ? other.schedulingPolicy_.Clone() : null;
      serviceAccountId_ = other.serviceAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceRequest Clone() {
      return new CreateInstanceRequest(this);
    }

    /// <summary>Field number for the "folder_id" field.</summary>
    public const int FolderIdFieldNumber = 1;
    private string folderId_ = "";
    /// <summary>
    /// ID of the folder to create an instance in.
    /// To get the folder ID, use a [yandex.cloud.resourcemanager.v1.FolderService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FolderId {
      get { return folderId_; }
      set {
        folderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    /// Name of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    /// Description of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 34);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "zone_id" field.</summary>
    public const int ZoneIdFieldNumber = 5;
    private string zoneId_ = "";
    /// <summary>
    /// ID of the availability zone where the instance resides.
    /// To get a list of available zones, use the [yandex.cloud.compute.v1.ZoneService.List] request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ZoneId {
      get { return zoneId_; }
      set {
        zoneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 6;
    private string platformId_ = "";
    /// <summary>
    /// ID of the hardware platform configuration for the instance.
    /// This field affects the available values in [resources_spec] field.
    ///
    /// Currently only several platforms is available - `standard-v1`, `standard-v2`. These platforms are suitable for most tasks.
    /// These platforms allows you to create various types of instances: with a large amount of memory,
    /// with a large number of cores, with a burstable performance.
    /// For more information, see [Platforms](/docs/compute/concepts/vm-platforms).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources_spec" field.</summary>
    public const int ResourcesSpecFieldNumber = 7;
    private global::Yandex.Cloud.Compute.V1.ResourcesSpec resourcesSpec_;
    /// <summary>
    /// Computing resources of the instance, such as the amount of memory and number of cores.
    /// To get a list of available values, see [Levels of core performance](/docs/compute/concepts/performance-levels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.ResourcesSpec ResourcesSpec {
      get { return resourcesSpec_; }
      set {
        resourcesSpec_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The metadata `key:value` pairs that will be assigned to this instance. This includes custom metadata and predefined keys.
    /// The total size of all keys and values must be less than 512 KB.
    ///
    /// Values are free-form strings, and only have meaning as interpreted by the programs which configure the instance.
    /// The only restriction placed on values is that their size must be 256 KB or less.
    ///
    /// For example, you may use the metadata in order to provide your public SSH key to the instance.
    /// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "boot_disk_spec" field.</summary>
    public const int BootDiskSpecFieldNumber = 9;
    private global::Yandex.Cloud.Compute.V1.AttachedDiskSpec bootDiskSpec_;
    /// <summary>
    /// Boot disk to attach to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.AttachedDiskSpec BootDiskSpec {
      get { return bootDiskSpec_; }
      set {
        bootDiskSpec_ = value;
      }
    }

    /// <summary>Field number for the "secondary_disk_specs" field.</summary>
    public const int SecondaryDiskSpecsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.AttachedDiskSpec> _repeated_secondaryDiskSpecs_codec
        = pb::FieldCodec.ForMessage(82, global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.AttachedDiskSpec> secondaryDiskSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.AttachedDiskSpec>();
    /// <summary>
    /// Array of secondary disks to attach to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.AttachedDiskSpec> SecondaryDiskSpecs {
      get { return secondaryDiskSpecs_; }
    }

    /// <summary>Field number for the "network_interface_specs" field.</summary>
    public const int NetworkInterfaceSpecsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec> _repeated_networkInterfaceSpecs_codec
        = pb::FieldCodec.ForMessage(90, global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec> networkInterfaceSpecs_ = new pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec>();
    /// <summary>
    /// Network configuration for the instance. Specifies how the network interface is configured
    /// to interact with other services on the internal network and on the internet.
    /// Currently only one network interface is supported per instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Compute.V1.NetworkInterfaceSpec> NetworkInterfaceSpecs {
      get { return networkInterfaceSpecs_; }
    }

    /// <summary>Field number for the "hostname" field.</summary>
    public const int HostnameFieldNumber = 12;
    private string hostname_ = "";
    /// <summary>
    /// Host name for the instance.
    /// This field is used to generate the [yandex.cloud.compute.v1.Instance.fqdn] value.
    /// The host name must be unique within the network and region.
    /// If not specified, the host name will be equal to [yandex.cloud.compute.v1.Instance.id] of the instance
    /// and FQDN will be `&lt;id>.auto.internal`. Otherwise FQDN will be `&lt;hostname>.&lt;region_id>.internal`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hostname {
      get { return hostname_; }
      set {
        hostname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scheduling_policy" field.</summary>
    public const int SchedulingPolicyFieldNumber = 13;
    private global::Yandex.Cloud.Compute.V1.SchedulingPolicy schedulingPolicy_;
    /// <summary>
    /// Scheduling policy configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.SchedulingPolicy SchedulingPolicy {
      get { return schedulingPolicy_; }
      set {
        schedulingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 14;
    private string serviceAccountId_ = "";
    /// <summary>
    /// ID of the service account. For more information, see [Service accounts](/docs/iam/concepts/users/service-accounts).
    /// To get the service account ID, use a [yandex.cloud.iam.v1.ServiceAccountService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FolderId != other.FolderId) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (ZoneId != other.ZoneId) return false;
      if (PlatformId != other.PlatformId) return false;
      if (!object.Equals(ResourcesSpec, other.ResourcesSpec)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (!object.Equals(BootDiskSpec, other.BootDiskSpec)) return false;
      if(!secondaryDiskSpecs_.Equals(other.secondaryDiskSpecs_)) return false;
      if(!networkInterfaceSpecs_.Equals(other.networkInterfaceSpecs_)) return false;
      if (Hostname != other.Hostname) return false;
      if (!object.Equals(SchedulingPolicy, other.SchedulingPolicy)) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FolderId.Length != 0) hash ^= FolderId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (ZoneId.Length != 0) hash ^= ZoneId.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (resourcesSpec_ != null) hash ^= ResourcesSpec.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (bootDiskSpec_ != null) hash ^= BootDiskSpec.GetHashCode();
      hash ^= secondaryDiskSpecs_.GetHashCode();
      hash ^= networkInterfaceSpecs_.GetHashCode();
      if (Hostname.Length != 0) hash ^= Hostname.GetHashCode();
      if (schedulingPolicy_ != null) hash ^= SchedulingPolicy.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FolderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FolderId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (ZoneId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ZoneId);
      }
      if (PlatformId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PlatformId);
      }
      if (resourcesSpec_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ResourcesSpec);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (bootDiskSpec_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(BootDiskSpec);
      }
      secondaryDiskSpecs_.WriteTo(output, _repeated_secondaryDiskSpecs_codec);
      networkInterfaceSpecs_.WriteTo(output, _repeated_networkInterfaceSpecs_codec);
      if (Hostname.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Hostname);
      }
      if (schedulingPolicy_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(SchedulingPolicy);
      }
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ServiceAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FolderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FolderId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (ZoneId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ZoneId);
      }
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (resourcesSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcesSpec);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (bootDiskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootDiskSpec);
      }
      size += secondaryDiskSpecs_.CalculateSize(_repeated_secondaryDiskSpecs_codec);
      size += networkInterfaceSpecs_.CalculateSize(_repeated_networkInterfaceSpecs_codec);
      if (Hostname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hostname);
      }
      if (schedulingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchedulingPolicy);
      }
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.FolderId.Length != 0) {
        FolderId = other.FolderId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.ZoneId.Length != 0) {
        ZoneId = other.ZoneId;
      }
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.resourcesSpec_ != null) {
        if (resourcesSpec_ == null) {
          ResourcesSpec = new global::Yandex.Cloud.Compute.V1.ResourcesSpec();
        }
        ResourcesSpec.MergeFrom(other.ResourcesSpec);
      }
      metadata_.Add(other.metadata_);
      if (other.bootDiskSpec_ != null) {
        if (bootDiskSpec_ == null) {
          BootDiskSpec = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec();
        }
        BootDiskSpec.MergeFrom(other.BootDiskSpec);
      }
      secondaryDiskSpecs_.Add(other.secondaryDiskSpecs_);
      networkInterfaceSpecs_.Add(other.networkInterfaceSpecs_);
      if (other.Hostname.Length != 0) {
        Hostname = other.Hostname;
      }
      if (other.schedulingPolicy_ != null) {
        if (schedulingPolicy_ == null) {
          SchedulingPolicy = new global::Yandex.Cloud.Compute.V1.SchedulingPolicy();
        }
        SchedulingPolicy.MergeFrom(other.SchedulingPolicy);
      }
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FolderId = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 42: {
            ZoneId = input.ReadString();
            break;
          }
          case 50: {
            PlatformId = input.ReadString();
            break;
          }
          case 58: {
            if (resourcesSpec_ == null) {
              ResourcesSpec = new global::Yandex.Cloud.Compute.V1.ResourcesSpec();
            }
            input.ReadMessage(ResourcesSpec);
            break;
          }
          case 66: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 74: {
            if (bootDiskSpec_ == null) {
              BootDiskSpec = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec();
            }
            input.ReadMessage(BootDiskSpec);
            break;
          }
          case 82: {
            secondaryDiskSpecs_.AddEntriesFrom(input, _repeated_secondaryDiskSpecs_codec);
            break;
          }
          case 90: {
            networkInterfaceSpecs_.AddEntriesFrom(input, _repeated_networkInterfaceSpecs_codec);
            break;
          }
          case 98: {
            Hostname = input.ReadString();
            break;
          }
          case 106: {
            if (schedulingPolicy_ == null) {
              SchedulingPolicy = new global::Yandex.Cloud.Compute.V1.SchedulingPolicy();
            }
            input.ReadMessage(SchedulingPolicy);
            break;
          }
          case 114: {
            ServiceAccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CreateInstanceMetadata : pb::IMessage<CreateInstanceMetadata> {
    private static readonly pb::MessageParser<CreateInstanceMetadata> _parser = new pb::MessageParser<CreateInstanceMetadata>(() => new CreateInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceMetadata(CreateInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInstanceMetadata Clone() {
      return new CreateInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance that is being created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateInstanceRequest : pb::IMessage<UpdateInstanceRequest> {
    private static readonly pb::MessageParser<UpdateInstanceRequest> _parser = new pb::MessageParser<UpdateInstanceRequest>(() => new UpdateInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest(UpdateInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      updateMask_ = other.updateMask_ != null ? other.updateMask_.Clone() : null;
      name_ = other.name_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
      platformId_ = other.platformId_;
      resourcesSpec_ = other.resourcesSpec_ != null ? other.resourcesSpec_.Clone() : null;
      metadata_ = other.metadata_.Clone();
      serviceAccountId_ = other.serviceAccountId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceRequest Clone() {
      return new UpdateInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the Instance resource to update.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "update_mask" field.</summary>
    public const int UpdateMaskFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.FieldMask updateMask_;
    /// <summary>
    /// Field mask that specifies which fields of the Instance resource are going to be updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.FieldMask UpdateMask {
      get { return updateMask_; }
      set {
        updateMask_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// Name of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    /// <summary>
    /// Description of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 42);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Resource labels as `key:value` pairs.
    ///
    /// Existing set of `labels` is completely replaced by the provided set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    /// <summary>Field number for the "platform_id" field.</summary>
    public const int PlatformIdFieldNumber = 6;
    private string platformId_ = "";
    /// <summary>
    /// ID of the hardware platform configuration for the instance.
    /// This field affects the available values in [resources_spec] field.
    ///
    /// Currently only several platforms is available - `standard-v1`, `standard-v2`. These platforms are suitable for most tasks.
    /// These platforms allows you to create various types of instances: with a large amount of memory,
    /// with a large number of cores, with a burstable performance.
    /// For more information, see [Platforms](/docs/compute/concepts/vm-platforms).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformId {
      get { return platformId_; }
      set {
        platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resources_spec" field.</summary>
    public const int ResourcesSpecFieldNumber = 7;
    private global::Yandex.Cloud.Compute.V1.ResourcesSpec resourcesSpec_;
    /// <summary>
    /// Computing resources of the instance, such as the amount of memory and number of cores.
    /// To get a list of available values, see [Levels of core performance](/docs/compute/concepts/performance-levels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.ResourcesSpec ResourcesSpec {
      get { return resourcesSpec_; }
      set {
        resourcesSpec_ = value;
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_metadata_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 66);
    private readonly pbc::MapField<string, string> metadata_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The metadata `key:value` pairs that will be assigned to this instance. This includes custom metadata and predefined keys.
    /// The total size of all keys and values must be less than 512 KB.
    ///
    /// Existing set of `metadata` is completely replaced by the provided set.
    ///
    /// Values are free-form strings, and only have meaning as interpreted by the programs which configure the instance.
    /// The only restriction placed on values is that their size must be 256 KB or less.
    ///
    /// For example, you may use the metadata in order to provide your public SSH key to the instance.
    /// For more information, see [Metadata](/docs/compute/concepts/vm-metadata).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Metadata {
      get { return metadata_; }
    }

    /// <summary>Field number for the "service_account_id" field.</summary>
    public const int ServiceAccountIdFieldNumber = 9;
    private string serviceAccountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAccountId {
      get { return serviceAccountId_; }
      set {
        serviceAccountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(UpdateMask, other.UpdateMask)) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (!Labels.Equals(other.Labels)) return false;
      if (PlatformId != other.PlatformId) return false;
      if (!object.Equals(ResourcesSpec, other.ResourcesSpec)) return false;
      if (!Metadata.Equals(other.Metadata)) return false;
      if (ServiceAccountId != other.ServiceAccountId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (updateMask_ != null) hash ^= UpdateMask.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= Labels.GetHashCode();
      if (PlatformId.Length != 0) hash ^= PlatformId.GetHashCode();
      if (resourcesSpec_ != null) hash ^= ResourcesSpec.GetHashCode();
      hash ^= Metadata.GetHashCode();
      if (ServiceAccountId.Length != 0) hash ^= ServiceAccountId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (updateMask_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateMask);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _map_labels_codec);
      if (PlatformId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PlatformId);
      }
      if (resourcesSpec_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ResourcesSpec);
      }
      metadata_.WriteTo(output, _map_metadata_codec);
      if (ServiceAccountId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ServiceAccountId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (updateMask_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateMask);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      if (PlatformId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
      }
      if (resourcesSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResourcesSpec);
      }
      size += metadata_.CalculateSize(_map_metadata_codec);
      if (ServiceAccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAccountId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.updateMask_ != null) {
        if (updateMask_ == null) {
          UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
        }
        UpdateMask.MergeFrom(other.UpdateMask);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
      if (other.PlatformId.Length != 0) {
        PlatformId = other.PlatformId;
      }
      if (other.resourcesSpec_ != null) {
        if (resourcesSpec_ == null) {
          ResourcesSpec = new global::Yandex.Cloud.Compute.V1.ResourcesSpec();
        }
        ResourcesSpec.MergeFrom(other.ResourcesSpec);
      }
      metadata_.Add(other.metadata_);
      if (other.ServiceAccountId.Length != 0) {
        ServiceAccountId = other.ServiceAccountId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            if (updateMask_ == null) {
              UpdateMask = new global::Google.Protobuf.WellKnownTypes.FieldMask();
            }
            input.ReadMessage(UpdateMask);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
          case 50: {
            PlatformId = input.ReadString();
            break;
          }
          case 58: {
            if (resourcesSpec_ == null) {
              ResourcesSpec = new global::Yandex.Cloud.Compute.V1.ResourcesSpec();
            }
            input.ReadMessage(ResourcesSpec);
            break;
          }
          case 66: {
            metadata_.AddEntriesFrom(input, _map_metadata_codec);
            break;
          }
          case 74: {
            ServiceAccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateInstanceMetadata : pb::IMessage<UpdateInstanceMetadata> {
    private static readonly pb::MessageParser<UpdateInstanceMetadata> _parser = new pb::MessageParser<UpdateInstanceMetadata>(() => new UpdateInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadata(UpdateInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadata Clone() {
      return new UpdateInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the Instance resource that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteInstanceRequest : pb::IMessage<DeleteInstanceRequest> {
    private static readonly pb::MessageParser<DeleteInstanceRequest> _parser = new pb::MessageParser<DeleteInstanceRequest>(() => new DeleteInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest(DeleteInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceRequest Clone() {
      return new DeleteInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to delete.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DeleteInstanceMetadata : pb::IMessage<DeleteInstanceMetadata> {
    private static readonly pb::MessageParser<DeleteInstanceMetadata> _parser = new pb::MessageParser<DeleteInstanceMetadata>(() => new DeleteInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceMetadata(DeleteInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteInstanceMetadata Clone() {
      return new DeleteInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateInstanceMetadataRequest : pb::IMessage<UpdateInstanceMetadataRequest> {
    private static readonly pb::MessageParser<UpdateInstanceMetadataRequest> _parser = new pb::MessageParser<UpdateInstanceMetadataRequest>(() => new UpdateInstanceMetadataRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInstanceMetadataRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataRequest(UpdateInstanceMetadataRequest other) : this() {
      instanceId_ = other.instanceId_;
      delete_ = other.delete_.Clone();
      upsert_ = other.upsert_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataRequest Clone() {
      return new UpdateInstanceMetadataRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delete" field.</summary>
    public const int DeleteFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_delete_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> delete_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of keys to be deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Delete {
      get { return delete_; }
    }

    /// <summary>Field number for the "upsert" field.</summary>
    public const int UpsertFieldNumber = 3;
    private static readonly pbc::MapField<string, string>.Codec _map_upsert_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 26);
    private readonly pbc::MapField<string, string> upsert_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The metadata `key:value` pairs that will be added or updated to this instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Upsert {
      get { return upsert_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInstanceMetadataRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInstanceMetadataRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if(!delete_.Equals(other.delete_)) return false;
      if (!Upsert.Equals(other.Upsert)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      hash ^= delete_.GetHashCode();
      hash ^= Upsert.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      delete_.WriteTo(output, _repeated_delete_codec);
      upsert_.WriteTo(output, _map_upsert_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      size += delete_.CalculateSize(_repeated_delete_codec);
      size += upsert_.CalculateSize(_map_upsert_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInstanceMetadataRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      delete_.Add(other.delete_);
      upsert_.Add(other.upsert_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            delete_.AddEntriesFrom(input, _repeated_delete_codec);
            break;
          }
          case 26: {
            upsert_.AddEntriesFrom(input, _map_upsert_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class UpdateInstanceMetadataMetadata : pb::IMessage<UpdateInstanceMetadataMetadata> {
    private static readonly pb::MessageParser<UpdateInstanceMetadataMetadata> _parser = new pb::MessageParser<UpdateInstanceMetadataMetadata>(() => new UpdateInstanceMetadataMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateInstanceMetadataMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataMetadata(UpdateInstanceMetadataMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateInstanceMetadataMetadata Clone() {
      return new UpdateInstanceMetadataMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance that is being updated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateInstanceMetadataMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateInstanceMetadataMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateInstanceMetadataMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetInstanceSerialPortOutputRequest : pb::IMessage<GetInstanceSerialPortOutputRequest> {
    private static readonly pb::MessageParser<GetInstanceSerialPortOutputRequest> _parser = new pb::MessageParser<GetInstanceSerialPortOutputRequest>(() => new GetInstanceSerialPortOutputRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInstanceSerialPortOutputRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputRequest(GetInstanceSerialPortOutputRequest other) : this() {
      instanceId_ = other.instanceId_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputRequest Clone() {
      return new GetInstanceSerialPortOutputRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to return the serial port output for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private long port_;
    /// <summary>
    /// Specifies which serial port to retrieve data from. The default is 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInstanceSerialPortOutputRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInstanceSerialPortOutputRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (Port != 0L) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (Port != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (Port != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInstanceSerialPortOutputRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.Port != 0L) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class GetInstanceSerialPortOutputResponse : pb::IMessage<GetInstanceSerialPortOutputResponse> {
    private static readonly pb::MessageParser<GetInstanceSerialPortOutputResponse> _parser = new pb::MessageParser<GetInstanceSerialPortOutputResponse>(() => new GetInstanceSerialPortOutputResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInstanceSerialPortOutputResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputResponse(GetInstanceSerialPortOutputResponse other) : this() {
      contents_ = other.contents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInstanceSerialPortOutputResponse Clone() {
      return new GetInstanceSerialPortOutputResponse(this);
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 1;
    private string contents_ = "";
    /// <summary>
    /// The contents of the serial port output, starting from the time when the instance
    /// started to boot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contents {
      get { return contents_; }
      set {
        contents_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInstanceSerialPortOutputResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInstanceSerialPortOutputResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Contents != other.Contents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Contents.Length != 0) hash ^= Contents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Contents.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Contents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Contents.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInstanceSerialPortOutputResponse other) {
      if (other == null) {
        return;
      }
      if (other.Contents.Length != 0) {
        Contents = other.Contents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Contents = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopInstanceRequest : pb::IMessage<StopInstanceRequest> {
    private static readonly pb::MessageParser<StopInstanceRequest> _parser = new pb::MessageParser<StopInstanceRequest>(() => new StopInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceRequest(StopInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceRequest Clone() {
      return new StopInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to stop.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StopInstanceMetadata : pb::IMessage<StopInstanceMetadata> {
    private static readonly pb::MessageParser<StopInstanceMetadata> _parser = new pb::MessageParser<StopInstanceMetadata>(() => new StopInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceMetadata(StopInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopInstanceMetadata Clone() {
      return new StopInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance that is being deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartInstanceRequest : pb::IMessage<StartInstanceRequest> {
    private static readonly pb::MessageParser<StartInstanceRequest> _parser = new pb::MessageParser<StartInstanceRequest>(() => new StartInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceRequest(StartInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceRequest Clone() {
      return new StartInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to start.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class StartInstanceMetadata : pb::IMessage<StartInstanceMetadata> {
    private static readonly pb::MessageParser<StartInstanceMetadata> _parser = new pb::MessageParser<StartInstanceMetadata>(() => new StartInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceMetadata(StartInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartInstanceMetadata Clone() {
      return new StartInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestartInstanceRequest : pb::IMessage<RestartInstanceRequest> {
    private static readonly pb::MessageParser<RestartInstanceRequest> _parser = new pb::MessageParser<RestartInstanceRequest>(() => new RestartInstanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceRequest(RestartInstanceRequest other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceRequest Clone() {
      return new RestartInstanceRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to restart.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RestartInstanceMetadata : pb::IMessage<RestartInstanceMetadata> {
    private static readonly pb::MessageParser<RestartInstanceMetadata> _parser = new pb::MessageParser<RestartInstanceMetadata>(() => new RestartInstanceMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartInstanceMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceMetadata(RestartInstanceMetadata other) : this() {
      instanceId_ = other.instanceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartInstanceMetadata Clone() {
      return new RestartInstanceMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartInstanceMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartInstanceMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartInstanceMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AttachInstanceDiskRequest : pb::IMessage<AttachInstanceDiskRequest> {
    private static readonly pb::MessageParser<AttachInstanceDiskRequest> _parser = new pb::MessageParser<AttachInstanceDiskRequest>(() => new AttachInstanceDiskRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachInstanceDiskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskRequest(AttachInstanceDiskRequest other) : this() {
      instanceId_ = other.instanceId_;
      attachedDiskSpec_ = other.attachedDiskSpec_ != null ? other.attachedDiskSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskRequest Clone() {
      return new AttachInstanceDiskRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to attach the disk to.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attached_disk_spec" field.</summary>
    public const int AttachedDiskSpecFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.AttachedDiskSpec attachedDiskSpec_;
    /// <summary>
    /// Disk that should be attached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.AttachedDiskSpec AttachedDiskSpec {
      get { return attachedDiskSpec_; }
      set {
        attachedDiskSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachInstanceDiskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachInstanceDiskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (!object.Equals(AttachedDiskSpec, other.AttachedDiskSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (attachedDiskSpec_ != null) hash ^= AttachedDiskSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (attachedDiskSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AttachedDiskSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (attachedDiskSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttachedDiskSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachInstanceDiskRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.attachedDiskSpec_ != null) {
        if (attachedDiskSpec_ == null) {
          AttachedDiskSpec = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec();
        }
        AttachedDiskSpec.MergeFrom(other.AttachedDiskSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            if (attachedDiskSpec_ == null) {
              AttachedDiskSpec = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec();
            }
            input.ReadMessage(AttachedDiskSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AttachInstanceDiskMetadata : pb::IMessage<AttachInstanceDiskMetadata> {
    private static readonly pb::MessageParser<AttachInstanceDiskMetadata> _parser = new pb::MessageParser<AttachInstanceDiskMetadata>(() => new AttachInstanceDiskMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachInstanceDiskMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskMetadata(AttachInstanceDiskMetadata other) : this() {
      instanceId_ = other.instanceId_;
      diskId_ = other.diskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachInstanceDiskMetadata Clone() {
      return new AttachInstanceDiskMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_id" field.</summary>
    public const int DiskIdFieldNumber = 2;
    private string diskId_ = "";
    /// <summary>
    /// ID of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskId {
      get { return diskId_; }
      set {
        diskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachInstanceDiskMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachInstanceDiskMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (DiskId != other.DiskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (DiskId.Length != 0) hash ^= DiskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (DiskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (DiskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachInstanceDiskMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.DiskId.Length != 0) {
        DiskId = other.DiskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            DiskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DetachInstanceDiskRequest : pb::IMessage<DetachInstanceDiskRequest> {
    private static readonly pb::MessageParser<DetachInstanceDiskRequest> _parser = new pb::MessageParser<DetachInstanceDiskRequest>(() => new DetachInstanceDiskRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetachInstanceDiskRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskRequest(DetachInstanceDiskRequest other) : this() {
      instanceId_ = other.instanceId_;
      switch (other.DiskCase) {
        case DiskOneofCase.DiskId:
          DiskId = other.DiskId;
          break;
        case DiskOneofCase.DeviceName:
          DeviceName = other.DeviceName;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskRequest Clone() {
      return new DetachInstanceDiskRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance to detach the disk from.
    /// To get the instance ID, use a [InstanceService.List] request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_id" field.</summary>
    public const int DiskIdFieldNumber = 2;
    /// <summary>
    /// ID of the disk that should be detached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskId {
      get { return diskCase_ == DiskOneofCase.DiskId ? (string) disk_ : ""; }
      set {
        disk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        diskCase_ = DiskOneofCase.DiskId;
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 3;
    /// <summary>
    /// Serial number of the disk that should be detached. This value is reflected into the /dev/disk/by-id/ tree
    /// of a Linux operating system running within the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return diskCase_ == DiskOneofCase.DeviceName ? (string) disk_ : ""; }
      set {
        disk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        diskCase_ = DiskOneofCase.DeviceName;
      }
    }

    private object disk_;
    /// <summary>Enum of possible cases for the "disk" oneof.</summary>
    public enum DiskOneofCase {
      None = 0,
      DiskId = 2,
      DeviceName = 3,
    }
    private DiskOneofCase diskCase_ = DiskOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskOneofCase DiskCase {
      get { return diskCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisk() {
      diskCase_ = DiskOneofCase.None;
      disk_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetachInstanceDiskRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetachInstanceDiskRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (DiskId != other.DiskId) return false;
      if (DeviceName != other.DeviceName) return false;
      if (DiskCase != other.DiskCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (diskCase_ == DiskOneofCase.DiskId) hash ^= DiskId.GetHashCode();
      if (diskCase_ == DiskOneofCase.DeviceName) hash ^= DeviceName.GetHashCode();
      hash ^= (int) diskCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (diskCase_ == DiskOneofCase.DiskId) {
        output.WriteRawTag(18);
        output.WriteString(DiskId);
      }
      if (diskCase_ == DiskOneofCase.DeviceName) {
        output.WriteRawTag(26);
        output.WriteString(DeviceName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (diskCase_ == DiskOneofCase.DiskId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskId);
      }
      if (diskCase_ == DiskOneofCase.DeviceName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetachInstanceDiskRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      switch (other.DiskCase) {
        case DiskOneofCase.DiskId:
          DiskId = other.DiskId;
          break;
        case DiskOneofCase.DeviceName:
          DeviceName = other.DeviceName;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            DiskId = input.ReadString();
            break;
          }
          case 26: {
            DeviceName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class DetachInstanceDiskMetadata : pb::IMessage<DetachInstanceDiskMetadata> {
    private static readonly pb::MessageParser<DetachInstanceDiskMetadata> _parser = new pb::MessageParser<DetachInstanceDiskMetadata>(() => new DetachInstanceDiskMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DetachInstanceDiskMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskMetadata(DetachInstanceDiskMetadata other) : this() {
      instanceId_ = other.instanceId_;
      diskId_ = other.diskId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DetachInstanceDiskMetadata Clone() {
      return new DetachInstanceDiskMetadata(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disk_id" field.</summary>
    public const int DiskIdFieldNumber = 2;
    private string diskId_ = "";
    /// <summary>
    /// ID of the disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskId {
      get { return diskId_; }
      set {
        diskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DetachInstanceDiskMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DetachInstanceDiskMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (DiskId != other.DiskId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (DiskId.Length != 0) hash ^= DiskId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (DiskId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DiskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (DiskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DetachInstanceDiskMetadata other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.DiskId.Length != 0) {
        DiskId = other.DiskId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 18: {
            DiskId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListInstanceOperationsRequest : pb::IMessage<ListInstanceOperationsRequest> {
    private static readonly pb::MessageParser<ListInstanceOperationsRequest> _parser = new pb::MessageParser<ListInstanceOperationsRequest>(() => new ListInstanceOperationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstanceOperationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsRequest(ListInstanceOperationsRequest other) : this() {
      instanceId_ = other.instanceId_;
      pageSize_ = other.pageSize_;
      pageToken_ = other.pageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsRequest Clone() {
      return new ListInstanceOperationsRequest(this);
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 1;
    private string instanceId_ = "";
    /// <summary>
    /// ID of the Instance resource to list operations for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "page_size" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private long pageSize_;
    /// <summary>
    /// The maximum number of results per page to return. If the number of available
    /// results is larger than [page_size], the service returns a [ListInstanceOperationsResponse.next_page_token]
    /// that can be used to get the next page of results in subsequent list requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    /// <summary>Field number for the "page_token" field.</summary>
    public const int PageTokenFieldNumber = 3;
    private string pageToken_ = "";
    /// <summary>
    /// Page token. To get the next page of results, set [page_token] to the
    /// [ListInstanceOperationsResponse.next_page_token] returned by a previous list request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PageToken {
      get { return pageToken_; }
      set {
        pageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstanceOperationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstanceOperationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (InstanceId != other.InstanceId) return false;
      if (PageSize != other.PageSize) return false;
      if (PageToken != other.PageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (PageSize != 0L) hash ^= PageSize.GetHashCode();
      if (PageToken.Length != 0) hash ^= PageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (InstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(InstanceId);
      }
      if (PageSize != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PageSize);
      }
      if (PageToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (PageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PageSize);
      }
      if (PageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstanceOperationsRequest other) {
      if (other == null) {
        return;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.PageSize != 0L) {
        PageSize = other.PageSize;
      }
      if (other.PageToken.Length != 0) {
        PageToken = other.PageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            InstanceId = input.ReadString();
            break;
          }
          case 16: {
            PageSize = input.ReadInt64();
            break;
          }
          case 26: {
            PageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ListInstanceOperationsResponse : pb::IMessage<ListInstanceOperationsResponse> {
    private static readonly pb::MessageParser<ListInstanceOperationsResponse> _parser = new pb::MessageParser<ListInstanceOperationsResponse>(() => new ListInstanceOperationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInstanceOperationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsResponse(ListInstanceOperationsResponse other) : this() {
      operations_ = other.operations_.Clone();
      nextPageToken_ = other.nextPageToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInstanceOperationsResponse Clone() {
      return new ListInstanceOperationsResponse(this);
    }

    /// <summary>Field number for the "operations" field.</summary>
    public const int OperationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Yandex.Cloud.Operation.Operation> _repeated_operations_codec
        = pb::FieldCodec.ForMessage(10, global::Yandex.Cloud.Operation.Operation.Parser);
    private readonly pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> operations_ = new pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation>();
    /// <summary>
    /// List of operations for the specified instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Yandex.Cloud.Operation.Operation> Operations {
      get { return operations_; }
    }

    /// <summary>Field number for the "next_page_token" field.</summary>
    public const int NextPageTokenFieldNumber = 2;
    private string nextPageToken_ = "";
    /// <summary>
    /// This token allows you to get the next page of results for list requests. If the number of results
    /// is larger than [ListInstanceOperationsRequest.page_size], use the [next_page_token] as the value
    /// for the [ListInstanceOperationsRequest.page_token] query parameter in the next list request.
    /// Each subsequent list request will have its own [next_page_token] to continue paging through the results.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextPageToken {
      get { return nextPageToken_; }
      set {
        nextPageToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInstanceOperationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInstanceOperationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!operations_.Equals(other.operations_)) return false;
      if (NextPageToken != other.NextPageToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= operations_.GetHashCode();
      if (NextPageToken.Length != 0) hash ^= NextPageToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      operations_.WriteTo(output, _repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NextPageToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += operations_.CalculateSize(_repeated_operations_codec);
      if (NextPageToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextPageToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInstanceOperationsResponse other) {
      if (other == null) {
        return;
      }
      operations_.Add(other.operations_);
      if (other.NextPageToken.Length != 0) {
        NextPageToken = other.NextPageToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            operations_.AddEntriesFrom(input, _repeated_operations_codec);
            break;
          }
          case 18: {
            NextPageToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ResourcesSpec : pb::IMessage<ResourcesSpec> {
    private static readonly pb::MessageParser<ResourcesSpec> _parser = new pb::MessageParser<ResourcesSpec>(() => new ResourcesSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourcesSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec(ResourcesSpec other) : this() {
      memory_ = other.memory_;
      cores_ = other.cores_;
      coreFraction_ = other.coreFraction_;
      gpus_ = other.gpus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourcesSpec Clone() {
      return new ResourcesSpec(this);
    }

    /// <summary>Field number for the "memory" field.</summary>
    public const int MemoryFieldNumber = 1;
    private long memory_;
    /// <summary>
    /// The amount of memory available to the instance, specified in bytes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Memory {
      get { return memory_; }
      set {
        memory_ = value;
      }
    }

    /// <summary>Field number for the "cores" field.</summary>
    public const int CoresFieldNumber = 2;
    private long cores_;
    /// <summary>
    /// The number of cores available to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cores {
      get { return cores_; }
      set {
        cores_ = value;
      }
    }

    /// <summary>Field number for the "core_fraction" field.</summary>
    public const int CoreFractionFieldNumber = 3;
    private long coreFraction_;
    /// <summary>
    /// Baseline level of CPU performance with the ability to burst performance above that baseline level.
    /// This field sets baseline performance for each core.
    ///
    /// For example, if you need only 5% of the CPU performance, you can set core_fraction=5.
    /// For more information, see [Levels of core performance](/docs/compute/concepts/performance-levels).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoreFraction {
      get { return coreFraction_; }
      set {
        coreFraction_ = value;
      }
    }

    /// <summary>Field number for the "gpus" field.</summary>
    public const int GpusFieldNumber = 4;
    private long gpus_;
    /// <summary>
    /// The number of GPUs available to the instance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gpus {
      get { return gpus_; }
      set {
        gpus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourcesSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourcesSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memory != other.Memory) return false;
      if (Cores != other.Cores) return false;
      if (CoreFraction != other.CoreFraction) return false;
      if (Gpus != other.Gpus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memory != 0L) hash ^= Memory.GetHashCode();
      if (Cores != 0L) hash ^= Cores.GetHashCode();
      if (CoreFraction != 0L) hash ^= CoreFraction.GetHashCode();
      if (Gpus != 0L) hash ^= Gpus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memory != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Memory);
      }
      if (Cores != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Cores);
      }
      if (CoreFraction != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CoreFraction);
      }
      if (Gpus != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Gpus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memory != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Memory);
      }
      if (Cores != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cores);
      }
      if (CoreFraction != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoreFraction);
      }
      if (Gpus != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gpus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourcesSpec other) {
      if (other == null) {
        return;
      }
      if (other.Memory != 0L) {
        Memory = other.Memory;
      }
      if (other.Cores != 0L) {
        Cores = other.Cores;
      }
      if (other.CoreFraction != 0L) {
        CoreFraction = other.CoreFraction;
      }
      if (other.Gpus != 0L) {
        Gpus = other.Gpus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Memory = input.ReadInt64();
            break;
          }
          case 16: {
            Cores = input.ReadInt64();
            break;
          }
          case 24: {
            CoreFraction = input.ReadInt64();
            break;
          }
          case 32: {
            Gpus = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class AttachedDiskSpec : pb::IMessage<AttachedDiskSpec> {
    private static readonly pb::MessageParser<AttachedDiskSpec> _parser = new pb::MessageParser<AttachedDiskSpec>(() => new AttachedDiskSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttachedDiskSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec(AttachedDiskSpec other) : this() {
      mode_ = other.mode_;
      deviceName_ = other.deviceName_;
      autoDelete_ = other.autoDelete_;
      switch (other.DiskCase) {
        case DiskOneofCase.DiskSpec:
          DiskSpec = other.DiskSpec.Clone();
          break;
        case DiskOneofCase.DiskId:
          DiskId = other.DiskId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttachedDiskSpec Clone() {
      return new AttachedDiskSpec(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.Mode mode_ = 0;
    /// <summary>
    /// The mode in which to attach this disk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.Mode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "device_name" field.</summary>
    public const int DeviceNameFieldNumber = 2;
    private string deviceName_ = "";
    /// <summary>
    /// Specifies a unique serial number of your choice that is reflected into the /dev/disk/by-id/ tree
    /// of a Linux operating system running within the instance.
    ///
    /// This value can be used to reference the device for mounting, resizing, and so on, from within the instance.
    /// If not specified, a random value will be generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceName {
      get { return deviceName_; }
      set {
        deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auto_delete" field.</summary>
    public const int AutoDeleteFieldNumber = 3;
    private bool autoDelete_;
    /// <summary>
    /// Specifies whether the disk will be auto-deleted when the instance is deleted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoDelete {
      get { return autoDelete_; }
      set {
        autoDelete_ = value;
      }
    }

    /// <summary>Field number for the "disk_spec" field.</summary>
    public const int DiskSpecFieldNumber = 4;
    /// <summary>
    /// Disk specification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec DiskSpec {
      get { return diskCase_ == DiskOneofCase.DiskSpec ? (global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec) disk_ : null; }
      set {
        disk_ = value;
        diskCase_ = value == null ? DiskOneofCase.None : DiskOneofCase.DiskSpec;
      }
    }

    /// <summary>Field number for the "disk_id" field.</summary>
    public const int DiskIdFieldNumber = 5;
    /// <summary>
    /// ID of the disk that should be attached.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiskId {
      get { return diskCase_ == DiskOneofCase.DiskId ? (string) disk_ : ""; }
      set {
        disk_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        diskCase_ = DiskOneofCase.DiskId;
      }
    }

    private object disk_;
    /// <summary>Enum of possible cases for the "disk" oneof.</summary>
    public enum DiskOneofCase {
      None = 0,
      DiskSpec = 4,
      DiskId = 5,
    }
    private DiskOneofCase diskCase_ = DiskOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiskOneofCase DiskCase {
      get { return diskCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDisk() {
      diskCase_ = DiskOneofCase.None;
      disk_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttachedDiskSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttachedDiskSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if (DeviceName != other.DeviceName) return false;
      if (AutoDelete != other.AutoDelete) return false;
      if (!object.Equals(DiskSpec, other.DiskSpec)) return false;
      if (DiskId != other.DiskId) return false;
      if (DiskCase != other.DiskCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
      if (AutoDelete != false) hash ^= AutoDelete.GetHashCode();
      if (diskCase_ == DiskOneofCase.DiskSpec) hash ^= DiskSpec.GetHashCode();
      if (diskCase_ == DiskOneofCase.DiskId) hash ^= DiskId.GetHashCode();
      hash ^= (int) diskCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (DeviceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DeviceName);
      }
      if (AutoDelete != false) {
        output.WriteRawTag(24);
        output.WriteBool(AutoDelete);
      }
      if (diskCase_ == DiskOneofCase.DiskSpec) {
        output.WriteRawTag(34);
        output.WriteMessage(DiskSpec);
      }
      if (diskCase_ == DiskOneofCase.DiskId) {
        output.WriteRawTag(42);
        output.WriteString(DiskId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (DeviceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
      }
      if (AutoDelete != false) {
        size += 1 + 1;
      }
      if (diskCase_ == DiskOneofCase.DiskSpec) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiskSpec);
      }
      if (diskCase_ == DiskOneofCase.DiskId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiskId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttachedDiskSpec other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.DeviceName.Length != 0) {
        DeviceName = other.DeviceName;
      }
      if (other.AutoDelete != false) {
        AutoDelete = other.AutoDelete;
      }
      switch (other.DiskCase) {
        case DiskOneofCase.DiskSpec:
          if (DiskSpec == null) {
            DiskSpec = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec();
          }
          DiskSpec.MergeFrom(other.DiskSpec);
          break;
        case DiskOneofCase.DiskId:
          DiskId = other.DiskId;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.Mode) input.ReadEnum();
            break;
          }
          case 18: {
            DeviceName = input.ReadString();
            break;
          }
          case 24: {
            AutoDelete = input.ReadBool();
            break;
          }
          case 34: {
            global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec subBuilder = new global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Types.DiskSpec();
            if (diskCase_ == DiskOneofCase.DiskSpec) {
              subBuilder.MergeFrom(DiskSpec);
            }
            input.ReadMessage(subBuilder);
            DiskSpec = subBuilder;
            break;
          }
          case 42: {
            DiskId = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AttachedDiskSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Mode {
        [pbr::OriginalName("MODE_UNSPECIFIED")] Unspecified = 0,
        /// <summary>
        /// Read-only access.
        /// </summary>
        [pbr::OriginalName("READ_ONLY")] ReadOnly = 1,
        /// <summary>
        /// Read/Write access. Default value.
        /// </summary>
        [pbr::OriginalName("READ_WRITE")] ReadWrite = 2,
      }

      internal sealed partial class DiskSpec : pb::IMessage<DiskSpec> {
        private static readonly pb::MessageParser<DiskSpec> _parser = new pb::MessageParser<DiskSpec>(() => new DiskSpec());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DiskSpec> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Yandex.Cloud.Compute.V1.AttachedDiskSpec.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec(DiskSpec other) : this() {
          name_ = other.name_;
          description_ = other.description_;
          typeId_ = other.typeId_;
          size_ = other.size_;
          switch (other.SourceCase) {
            case SourceOneofCase.ImageId:
              ImageId = other.ImageId;
              break;
            case SourceOneofCase.SnapshotId:
              SnapshotId = other.SnapshotId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DiskSpec Clone() {
          return new DiskSpec(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        /// <summary>
        /// Name of the disk.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "description" field.</summary>
        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        /// <summary>
        /// Description of the disk.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Description {
          get { return description_; }
          set {
            description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type_id" field.</summary>
        public const int TypeIdFieldNumber = 3;
        private string typeId_ = "";
        /// <summary>
        /// ID of the disk type.
        /// To get a list of available disk types, use the [yandex.cloud.compute.v1.DiskTypeService.List] request.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TypeId {
          get { return typeId_; }
          set {
            typeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 4;
        private long size_;
        /// <summary>
        /// Size of the disk, specified in bytes.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        /// <summary>Field number for the "image_id" field.</summary>
        public const int ImageIdFieldNumber = 5;
        /// <summary>
        /// ID of the image to create the disk from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ImageId {
          get { return sourceCase_ == SourceOneofCase.ImageId ? (string) source_ : ""; }
          set {
            source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            sourceCase_ = SourceOneofCase.ImageId;
          }
        }

        /// <summary>Field number for the "snapshot_id" field.</summary>
        public const int SnapshotIdFieldNumber = 6;
        /// <summary>
        /// ID of the snapshot to restore the disk from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SnapshotId {
          get { return sourceCase_ == SourceOneofCase.SnapshotId ? (string) source_ : ""; }
          set {
            source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            sourceCase_ = SourceOneofCase.SnapshotId;
          }
        }

        private object source_;
        /// <summary>Enum of possible cases for the "source" oneof.</summary>
        public enum SourceOneofCase {
          None = 0,
          ImageId = 5,
          SnapshotId = 6,
        }
        private SourceOneofCase sourceCase_ = SourceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SourceOneofCase SourceCase {
          get { return sourceCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSource() {
          sourceCase_ = SourceOneofCase.None;
          source_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DiskSpec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DiskSpec other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Description != other.Description) return false;
          if (TypeId != other.TypeId) return false;
          if (Size != other.Size) return false;
          if (ImageId != other.ImageId) return false;
          if (SnapshotId != other.SnapshotId) return false;
          if (SourceCase != other.SourceCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (TypeId.Length != 0) hash ^= TypeId.GetHashCode();
          if (Size != 0L) hash ^= Size.GetHashCode();
          if (sourceCase_ == SourceOneofCase.ImageId) hash ^= ImageId.GetHashCode();
          if (sourceCase_ == SourceOneofCase.SnapshotId) hash ^= SnapshotId.GetHashCode();
          hash ^= (int) sourceCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
          if (TypeId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TypeId);
          }
          if (Size != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(Size);
          }
          if (sourceCase_ == SourceOneofCase.ImageId) {
            output.WriteRawTag(42);
            output.WriteString(ImageId);
          }
          if (sourceCase_ == SourceOneofCase.SnapshotId) {
            output.WriteRawTag(50);
            output.WriteString(SnapshotId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (TypeId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeId);
          }
          if (Size != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
          }
          if (sourceCase_ == SourceOneofCase.ImageId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageId);
          }
          if (sourceCase_ == SourceOneofCase.SnapshotId) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SnapshotId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DiskSpec other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.TypeId.Length != 0) {
            TypeId = other.TypeId;
          }
          if (other.Size != 0L) {
            Size = other.Size;
          }
          switch (other.SourceCase) {
            case SourceOneofCase.ImageId:
              ImageId = other.ImageId;
              break;
            case SourceOneofCase.SnapshotId:
              SnapshotId = other.SnapshotId;
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
              case 26: {
                TypeId = input.ReadString();
                break;
              }
              case 32: {
                Size = input.ReadInt64();
                break;
              }
              case 42: {
                ImageId = input.ReadString();
                break;
              }
              case 50: {
                SnapshotId = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  internal sealed partial class NetworkInterfaceSpec : pb::IMessage<NetworkInterfaceSpec> {
    private static readonly pb::MessageParser<NetworkInterfaceSpec> _parser = new pb::MessageParser<NetworkInterfaceSpec>(() => new NetworkInterfaceSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInterfaceSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec(NetworkInterfaceSpec other) : this() {
      subnetId_ = other.subnetId_;
      primaryV4AddressSpec_ = other.primaryV4AddressSpec_ != null ? other.primaryV4AddressSpec_.Clone() : null;
      primaryV6AddressSpec_ = other.primaryV6AddressSpec_ != null ? other.primaryV6AddressSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInterfaceSpec Clone() {
      return new NetworkInterfaceSpec(this);
    }

    /// <summary>Field number for the "subnet_id" field.</summary>
    public const int SubnetIdFieldNumber = 1;
    private string subnetId_ = "";
    /// <summary>
    /// ID of the subnet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubnetId {
      get { return subnetId_; }
      set {
        subnetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "primary_v4_address_spec" field.</summary>
    public const int PrimaryV4AddressSpecFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec primaryV4AddressSpec_;
    /// <summary>
    /// Primary IPv4 address that will be assigned to the instance for this network interface.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec PrimaryV4AddressSpec {
      get { return primaryV4AddressSpec_; }
      set {
        primaryV4AddressSpec_ = value;
      }
    }

    /// <summary>Field number for the "primary_v6_address_spec" field.</summary>
    public const int PrimaryV6AddressSpecFieldNumber = 3;
    private global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec primaryV6AddressSpec_;
    /// <summary>
    /// Primary IPv6 address that will be assigned to the instance for this network interface. IPv6 not available yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec PrimaryV6AddressSpec {
      get { return primaryV6AddressSpec_; }
      set {
        primaryV6AddressSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInterfaceSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInterfaceSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubnetId != other.SubnetId) return false;
      if (!object.Equals(PrimaryV4AddressSpec, other.PrimaryV4AddressSpec)) return false;
      if (!object.Equals(PrimaryV6AddressSpec, other.PrimaryV6AddressSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubnetId.Length != 0) hash ^= SubnetId.GetHashCode();
      if (primaryV4AddressSpec_ != null) hash ^= PrimaryV4AddressSpec.GetHashCode();
      if (primaryV6AddressSpec_ != null) hash ^= PrimaryV6AddressSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubnetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubnetId);
      }
      if (primaryV4AddressSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PrimaryV4AddressSpec);
      }
      if (primaryV6AddressSpec_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PrimaryV6AddressSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubnetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubnetId);
      }
      if (primaryV4AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV4AddressSpec);
      }
      if (primaryV6AddressSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryV6AddressSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInterfaceSpec other) {
      if (other == null) {
        return;
      }
      if (other.SubnetId.Length != 0) {
        SubnetId = other.SubnetId;
      }
      if (other.primaryV4AddressSpec_ != null) {
        if (primaryV4AddressSpec_ == null) {
          PrimaryV4AddressSpec = new global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec();
        }
        PrimaryV4AddressSpec.MergeFrom(other.PrimaryV4AddressSpec);
      }
      if (other.primaryV6AddressSpec_ != null) {
        if (primaryV6AddressSpec_ == null) {
          PrimaryV6AddressSpec = new global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec();
        }
        PrimaryV6AddressSpec.MergeFrom(other.PrimaryV6AddressSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubnetId = input.ReadString();
            break;
          }
          case 18: {
            if (primaryV4AddressSpec_ == null) {
              PrimaryV4AddressSpec = new global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec();
            }
            input.ReadMessage(PrimaryV4AddressSpec);
            break;
          }
          case 26: {
            if (primaryV6AddressSpec_ == null) {
              PrimaryV6AddressSpec = new global::Yandex.Cloud.Compute.V1.PrimaryAddressSpec();
            }
            input.ReadMessage(PrimaryV6AddressSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PrimaryAddressSpec : pb::IMessage<PrimaryAddressSpec> {
    private static readonly pb::MessageParser<PrimaryAddressSpec> _parser = new pb::MessageParser<PrimaryAddressSpec>(() => new PrimaryAddressSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimaryAddressSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec(PrimaryAddressSpec other) : this() {
      address_ = other.address_;
      oneToOneNatSpec_ = other.oneToOneNatSpec_ != null ? other.oneToOneNatSpec_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimaryAddressSpec Clone() {
      return new PrimaryAddressSpec(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// An IPv4 internal network address that is assigned to the instance for this network interface.
    /// If not specified by the user, an unused internal IP is assigned by the system.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "one_to_one_nat_spec" field.</summary>
    public const int OneToOneNatSpecFieldNumber = 2;
    private global::Yandex.Cloud.Compute.V1.OneToOneNatSpec oneToOneNatSpec_;
    /// <summary>
    /// An external IP address configuration.
    /// If not specified, then this instance will have no external internet access.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.OneToOneNatSpec OneToOneNatSpec {
      get { return oneToOneNatSpec_; }
      set {
        oneToOneNatSpec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimaryAddressSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimaryAddressSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (!object.Equals(OneToOneNatSpec, other.OneToOneNatSpec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (oneToOneNatSpec_ != null) hash ^= OneToOneNatSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (oneToOneNatSpec_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (oneToOneNatSpec_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OneToOneNatSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimaryAddressSpec other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.oneToOneNatSpec_ != null) {
        if (oneToOneNatSpec_ == null) {
          OneToOneNatSpec = new global::Yandex.Cloud.Compute.V1.OneToOneNatSpec();
        }
        OneToOneNatSpec.MergeFrom(other.OneToOneNatSpec);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 18: {
            if (oneToOneNatSpec_ == null) {
              OneToOneNatSpec = new global::Yandex.Cloud.Compute.V1.OneToOneNatSpec();
            }
            input.ReadMessage(OneToOneNatSpec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OneToOneNatSpec : pb::IMessage<OneToOneNatSpec> {
    private static readonly pb::MessageParser<OneToOneNatSpec> _parser = new pb::MessageParser<OneToOneNatSpec>(() => new OneToOneNatSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OneToOneNatSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Yandex.Cloud.Compute.V1.InstanceServiceReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec(OneToOneNatSpec other) : this() {
      ipVersion_ = other.ipVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OneToOneNatSpec Clone() {
      return new OneToOneNatSpec(this);
    }

    /// <summary>Field number for the "ip_version" field.</summary>
    public const int IpVersionFieldNumber = 1;
    private global::Yandex.Cloud.Compute.V1.IpVersion ipVersion_ = 0;
    /// <summary>
    /// External IP address version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Yandex.Cloud.Compute.V1.IpVersion IpVersion {
      get { return ipVersion_; }
      set {
        ipVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OneToOneNatSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OneToOneNatSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IpVersion != other.IpVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IpVersion != 0) hash ^= IpVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IpVersion != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IpVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IpVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IpVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OneToOneNatSpec other) {
      if (other == null) {
        return;
      }
      if (other.IpVersion != 0) {
        IpVersion = other.IpVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IpVersion = (global::Yandex.Cloud.Compute.V1.IpVersion) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
